/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	module.exports = __webpack_require__(4);


/***/ },
/* 1 */
/***/ function(module, exports) {

	/*!
	  * https://github.com/paulmillr/es6-shim
	  * @license es6-shim Copyright 2013-2015 by Paul Miller (http://paulmillr.com)
	  *   and contributors,  MIT License
	  * es6-shim: v0.33.13
	  * see https://github.com/paulmillr/es6-shim/blob/0.33.13/LICENSE
	  * Details and documentation:
	  * https://github.com/paulmillr/es6-shim/
	  */
	(function(e,t){if(typeof define==="function"&&define.amd){define(t)}else if(typeof exports==="object"){module.exports=t()}else{e.returnExports=t()}})(this,function(){"use strict";var e=Function.call.bind(Function.apply);var t=Function.call.bind(Function.call);var r=Array.isArray;var n=function notThunker(t){return function notThunk(){return!e(t,this,arguments)}};var o=function(e){try{e();return false}catch(t){return true}};var i=function valueOrFalseIfThrows(e){try{return e()}catch(t){return false}};var a=n(o);var u=function(){return!o(function(){Object.defineProperty({},"x",{get:function(){}})})};var s=!!Object.defineProperty&&u();var f=function foo(){}.name==="foo";var c=Function.call.bind(Array.prototype.forEach);var l=Function.call.bind(Array.prototype.reduce);var p=Function.call.bind(Array.prototype.filter);var v=Function.call.bind(Array.prototype.some);var y=function(e,t,r,n){if(!n&&t in e){return}if(s){Object.defineProperty(e,t,{configurable:true,enumerable:false,writable:true,value:r})}else{e[t]=r}};var h=function(e,t){c(Object.keys(t),function(r){var n=t[r];y(e,r,n,false)})};var g=Object.create||function(e,t){var r=function Prototype(){};r.prototype=e;var n=new r;if(typeof t!=="undefined"){Object.keys(t).forEach(function(e){U.defineByDescriptor(n,e,t[e])})}return n};var b=function(e,t){if(!Object.setPrototypeOf){return false}return i(function(){var r=function Subclass(t){var r=new e(t);Object.setPrototypeOf(r,Subclass.prototype);return r};Object.setPrototypeOf(r,e);r.prototype=g(e.prototype,{constructor:{value:r}});return t(r)})};var d=function(){if(typeof self!=="undefined"){return self}if(typeof window!=="undefined"){return window}if(typeof global!=="undefined"){return global}throw new Error("unable to locate global object")};var m=d();var O=m.isFinite;var w=Function.call.bind(String.prototype.indexOf);var j=Function.call.bind(Object.prototype.toString);var S=Function.call.bind(Array.prototype.concat);var T=Function.call.bind(String.prototype.slice);var I=Function.call.bind(Array.prototype.push);var E=Function.apply.bind(Array.prototype.push);var M=Function.call.bind(Array.prototype.shift);var P=Math.max;var x=Math.min;var N=Math.floor;var C=Math.abs;var A=Math.log;var k=Math.sqrt;var _=Function.call.bind(Object.prototype.hasOwnProperty);var R;var F=function(){};var D=m.Symbol||{};var z=D.species||"@@species";var L=Number.isNaN||function isNaN(e){return e!==e};var q=Number.isFinite||function isFinite(e){return typeof e==="number"&&O(e)};var G=function isArguments(e){return j(e)==="[object Arguments]"};var W=function isArguments(e){return e!==null&&typeof e==="object"&&typeof e.length==="number"&&e.length>=0&&j(e)!=="[object Array]"&&j(e.callee)==="[object Function]"};var H=G(arguments)?G:W;var B={primitive:function(e){return e===null||typeof e!=="function"&&typeof e!=="object"},object:function(e){return e!==null&&typeof e==="object"},string:function(e){return j(e)==="[object String]"},regex:function(e){return j(e)==="[object RegExp]"},symbol:function(e){return typeof m.Symbol==="function"&&typeof e==="symbol"}};var $=B.symbol(D.iterator)?D.iterator:"_es6-shim iterator_";if(m.Set&&typeof(new m.Set)["@@iterator"]==="function"){$="@@iterator"}if(!m.Reflect){y(m,"Reflect",{})}var V=m.Reflect;var J={Call:function Call(t,r){var n=arguments.length>2?arguments[2]:[];if(!J.IsCallable(t)){throw new TypeError(t+" is not a function")}return e(t,r,n)},RequireObjectCoercible:function(e,t){if(e==null){throw new TypeError(t||"Cannot call method on "+e)}},TypeIsObject:function(e){return e!=null&&Object(e)===e},ToObject:function(e,t){J.RequireObjectCoercible(e,t);return Object(e)},IsCallable:function(e){return typeof e==="function"&&j(e)==="[object Function]"},IsConstructor:function(e){return J.IsCallable(e)},ToInt32:function(e){return J.ToNumber(e)>>0},ToUint32:function(e){return J.ToNumber(e)>>>0},ToNumber:function(e){if(j(e)==="[object Symbol]"){throw new TypeError("Cannot convert a Symbol value to a number")}return+e},ToInteger:function(e){var t=J.ToNumber(e);if(L(t)){return 0}if(t===0||!q(t)){return t}return(t>0?1:-1)*N(C(t))},ToLength:function(e){var t=J.ToInteger(e);if(t<=0){return 0}if(t>Number.MAX_SAFE_INTEGER){return Number.MAX_SAFE_INTEGER}return t},SameValue:function(e,t){if(e===t){if(e===0){return 1/e===1/t}return true}return L(e)&&L(t)},SameValueZero:function(e,t){return e===t||L(e)&&L(t)},IsIterable:function(e){return J.TypeIsObject(e)&&(typeof e[$]!=="undefined"||H(e))},GetIterator:function(e){if(H(e)){return new R(e,"value")}var r=J.GetMethod(e,$);if(!J.IsCallable(r)){throw new TypeError("value is not an iterable")}var n=t(r,e);if(!J.TypeIsObject(n)){throw new TypeError("bad iterator")}return n},GetMethod:function(e,t){var r=J.ToObject(e)[t];if(r===void 0||r===null){return void 0}if(!J.IsCallable(r)){throw new TypeError("Method not callable: "+t)}return r},IteratorComplete:function(e){return!!e.done},IteratorClose:function(e,r){var n=J.GetMethod(e,"return");if(n===void 0){return}var o,i;try{o=t(n,e)}catch(a){i=a}if(r){return}if(i){throw i}if(!J.TypeIsObject(o)){throw new TypeError("Iterator's return method returned a non-object.")}},IteratorNext:function(e){var t=arguments.length>1?e.next(arguments[1]):e.next();if(!J.TypeIsObject(t)){throw new TypeError("bad iterator")}return t},IteratorStep:function(e){var t=J.IteratorNext(e);var r=J.IteratorComplete(t);return r?false:t},Construct:function(e,t,r,n){var o=typeof r==="undefined"?e:r;if(!n){return V.construct(e,t,o)}var i=o.prototype;if(!J.TypeIsObject(i)){i=Object.prototype}var a=g(i);var u=J.Call(e,a,t);return J.TypeIsObject(u)?u:a},SpeciesConstructor:function(e,t){var r=e.constructor;if(r===void 0){return t}if(!J.TypeIsObject(r)){throw new TypeError("Bad constructor")}var n=r[z];if(n===void 0||n===null){return t}if(!J.IsConstructor(n)){throw new TypeError("Bad @@species")}return n},CreateHTML:function(e,t,r,n){var o=String(e);var i="<"+t;if(r!==""){var a=String(n);var u=a.replace(/"/g,"&quot;");i+=" "+r+'="'+u+'"'}var s=i+">";var f=s+o;return f+"</"+t+">"}};var U={getter:function(e,t,r){if(!s){throw new TypeError("getters require true ES5 support")}Object.defineProperty(e,t,{configurable:true,enumerable:false,get:r})},proxy:function(e,t,r){if(!s){throw new TypeError("getters require true ES5 support")}var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,{configurable:n.configurable,enumerable:n.enumerable,get:function getKey(){return e[t]},set:function setKey(r){e[t]=r}})},redefine:function(e,t,r){if(s){var n=Object.getOwnPropertyDescriptor(e,t);n.value=r;Object.defineProperty(e,t,n)}else{e[t]=r}},defineByDescriptor:function(e,t,r){if(s){Object.defineProperty(e,t,r)}else if("value"in r){e[t]=r.value}},preserveToString:function(e,t){if(t&&J.IsCallable(t.toString)){y(e,"toString",t.toString.bind(t),true)}}};var K=function wrapConstructor(e,t,r){U.preserveToString(t,e);if(Object.setPrototypeOf){Object.setPrototypeOf(e,t)}if(s){c(Object.getOwnPropertyNames(e),function(n){if(n in F||r[n]){return}U.proxy(e,n,t)})}else{c(Object.keys(e),function(n){if(n in F||r[n]){return}t[n]=e[n]})}t.prototype=e.prototype;U.redefine(e.prototype,"constructor",t)};var X=function(){return this};var Z=function(e){if(s&&!_(e,z)){U.getter(e,z,X)}};var Q=function overrideNative(e,t,r){var n=e[t];y(e,t,r,true);U.preserveToString(e[t],n)};var Y=function(e,t){var r=t||function iterator(){return this};y(e,$,r);if(!e[$]&&B.symbol($)){e[$]=r}};var ee=function createDataProperty(e,t,r){if(s){Object.defineProperty(e,t,{configurable:true,enumerable:true,writable:true,value:r})}else{e[t]=r}};var te=function createDataPropertyOrThrow(e,t,r){ee(e,t,r);if(!J.SameValue(e[t],r)){throw new TypeError("property is nonconfigurable")}};var re=function(e,t,r,n){if(!J.TypeIsObject(e)){throw new TypeError("Constructor requires `new`: "+t.name)}var o=t.prototype;if(!J.TypeIsObject(o)){o=r}var i=g(o);for(var a in n){if(_(n,a)){var u=n[a];y(i,a,u,true)}}return i};if(String.fromCodePoint&&String.fromCodePoint.length!==1){var ne=String.fromCodePoint;Q(String,"fromCodePoint",function fromCodePoint(t){return e(ne,this,arguments)})}var oe={fromCodePoint:function fromCodePoint(e){var t=[];var r;for(var n=0,o=arguments.length;n<o;n++){r=Number(arguments[n]);if(!J.SameValue(r,J.ToInteger(r))||r<0||r>1114111){throw new RangeError("Invalid code point "+r)}if(r<65536){I(t,String.fromCharCode(r))}else{r-=65536;I(t,String.fromCharCode((r>>10)+55296));I(t,String.fromCharCode(r%1024+56320))}}return t.join("")},raw:function raw(e){var t=J.ToObject(e,"bad callSite");var r=J.ToObject(t.raw,"bad raw value");var n=r.length;var o=J.ToLength(n);if(o<=0){return""}var i=[];var a=0;var u,s,f,c;while(a<o){u=String(a);f=String(r[u]);I(i,f);if(a+1>=o){break}s=a+1<arguments.length?arguments[a+1]:"";c=String(s);I(i,c);a+=1}return i.join("")}};if(String.raw&&String.raw({raw:{0:"x",1:"y",length:2}})!=="xy"){Q(String,"raw",oe.raw)}h(String,oe);var ie=function repeat(e,t){if(t<1){return""}if(t%2){return repeat(e,t-1)+e}var r=repeat(e,t/2);return r+r};var ae=Infinity;var ue={repeat:function repeat(e){J.RequireObjectCoercible(this);var t=String(this);var r=J.ToInteger(e);if(r<0||r>=ae){throw new RangeError("repeat count must be less than infinity and not overflow maximum string size")}return ie(t,r)},startsWith:function startsWith(e){J.RequireObjectCoercible(this);var t=String(this);if(B.regex(e)){throw new TypeError('Cannot call method "startsWith" with a regex')}var r=String(e);var n=arguments.length>1?arguments[1]:void 0;var o=P(J.ToInteger(n),0);return T(t,o,o+r.length)===r},endsWith:function endsWith(e){J.RequireObjectCoercible(this);var t=String(this);if(B.regex(e)){throw new TypeError('Cannot call method "endsWith" with a regex')}var r=String(e);var n=t.length;var o=arguments.length>1?arguments[1]:void 0;var i=typeof o==="undefined"?n:J.ToInteger(o);var a=x(P(i,0),n);return T(t,a-r.length,a)===r},includes:function includes(e){if(B.regex(e)){throw new TypeError('"includes" does not accept a RegExp')}var t;if(arguments.length>1){t=arguments[1]}return w(this,e,t)!==-1},codePointAt:function codePointAt(e){J.RequireObjectCoercible(this);var t=String(this);var r=J.ToInteger(e);var n=t.length;if(r>=0&&r<n){var o=t.charCodeAt(r);var i=r+1===n;if(o<55296||o>56319||i){return o}var a=t.charCodeAt(r+1);if(a<56320||a>57343){return o}return(o-55296)*1024+(a-56320)+65536}}};if(String.prototype.includes&&"a".includes("a",Infinity)!==false){Q(String.prototype,"includes",ue.includes)}if(String.prototype.startsWith&&String.prototype.endsWith){var se=o(function(){"/a/".startsWith(/a/)});var fe="abc".startsWith("a",Infinity)===false;if(!se||!fe){Q(String.prototype,"startsWith",ue.startsWith);Q(String.prototype,"endsWith",ue.endsWith)}}h(String.prototype,ue);var ce=["	\n\x0B\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003","\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028","\u2029\ufeff"].join("");var le=new RegExp("(^["+ce+"]+)|(["+ce+"]+$)","g");var pe=function trim(){if(typeof this==="undefined"||this===null){throw new TypeError("can't convert "+this+" to object")}return String(this).replace(le,"")};var ve=["\x85","\u200b","\ufffe"].join("");var ye=new RegExp("["+ve+"]","g");var he=/^[\-+]0x[0-9a-f]+$/i;var ge=ve.trim().length!==ve.length;y(String.prototype,"trim",pe,ge);var be=function(e){J.RequireObjectCoercible(e);this._s=String(e);this._i=0};be.prototype.next=function(){var e=this._s,t=this._i;if(typeof e==="undefined"||t>=e.length){this._s=void 0;return{value:void 0,done:true}}var r=e.charCodeAt(t),n,o;if(r<55296||r>56319||t+1===e.length){o=1}else{n=e.charCodeAt(t+1);o=n<56320||n>57343?1:2}this._i=t+o;return{value:e.substr(t,o),done:false}};Y(be.prototype);Y(String.prototype,function(){return new be(this)});var de={from:function from(e){var r=this;var n=arguments.length>1?arguments[1]:void 0;var o,i;if(n===void 0){o=false}else{if(!J.IsCallable(n)){throw new TypeError("Array.from: when provided, the second argument must be a function")}i=arguments.length>2?arguments[2]:void 0;o=true}var a=typeof(H(e)||J.GetMethod(e,$))!=="undefined";var u,s,f;if(a){s=J.IsConstructor(r)?Object(new r):[];var c=J.GetIterator(e);var l,p;f=0;while(true){l=J.IteratorStep(c);if(l===false){break}p=l.value;try{if(o){p=i===undefined?n(p,f):t(n,i,p,f)}s[f]=p}catch(v){J.IteratorClose(c,true);throw v}f+=1}u=f}else{var y=J.ToObject(e);u=J.ToLength(y.length);s=J.IsConstructor(r)?Object(new r(u)):new Array(u);var h;for(f=0;f<u;++f){h=y[f];if(o){h=i!==undefined?t(n,i,h,f):n(h,f)}s[f]=h}}s.length=u;return s},of:function of(){var e=arguments.length;var t=this;var n=r(t)||!J.IsCallable(t)?new Array(e):J.Construct(t,[e]);for(var o=0;o<e;++o){te(n,o,arguments[o])}n.length=e;return n}};h(Array,de);Z(Array);var me=function(e){return{value:e,done:arguments.length===0}};R=function(e,t){this.i=0;this.array=e;this.kind=t};h(R.prototype,{next:function(){var e=this.i,t=this.array;if(!(this instanceof R)){throw new TypeError("Not an ArrayIterator")}if(typeof t!=="undefined"){var r=J.ToLength(t.length);for(;e<r;e++){var n=this.kind;var o;if(n==="key"){o=e}else if(n==="value"){o=t[e]}else if(n==="entry"){o=[e,t[e]]}this.i=e+1;return{value:o,done:false}}}this.array=void 0;return{value:void 0,done:true}}});Y(R.prototype);var Oe=function getAllKeys(e){var t=[];for(var r in e){I(t,r)}return t};var we=function(e,t){h(this,{object:e,array:Oe(e),kind:t})};h(we.prototype,{next:function next(){var e;var t=this.array;if(!(this instanceof we)){throw new TypeError("Not an ObjectIterator")}while(t.length>0){e=M(t);if(!(e in this.object)){continue}if(this.kind==="key"){return me(e)}else if(this.kind==="value"){return me(this.object[e])}else{return me([e,this.object[e]])}}return me()}});Y(we.prototype);var je=Array.of===de.of||function(){var e=function Foo(e){this.length=e};e.prototype=[];var t=Array.of.apply(e,[1,2]);return t instanceof e&&t.length===2}();if(!je){Q(Array,"of",de.of)}var Se={copyWithin:function copyWithin(e,t){var r=arguments[2];var n=J.ToObject(this);var o=J.ToLength(n.length);var i=J.ToInteger(e);var a=J.ToInteger(t);var u=i<0?P(o+i,0):x(i,o);var s=a<0?P(o+a,0):x(a,o);r=typeof r==="undefined"?o:J.ToInteger(r);var f=r<0?P(o+r,0):x(r,o);var c=x(f-s,o-u);var l=1;if(s<u&&u<s+c){l=-1;s+=c-1;u+=c-1}while(c>0){if(_(n,s)){n[u]=n[s]}else{delete n[s]}s+=l;u+=l;c-=1}return n},fill:function fill(e){var t=arguments.length>1?arguments[1]:void 0;var r=arguments.length>2?arguments[2]:void 0;var n=J.ToObject(this);var o=J.ToLength(n.length);t=J.ToInteger(typeof t==="undefined"?0:t);r=J.ToInteger(typeof r==="undefined"?o:r);var i=t<0?P(o+t,0):x(t,o);var a=r<0?o+r:r;for(var u=i;u<o&&u<a;++u){n[u]=e}return n},find:function find(e){var r=J.ToObject(this);var n=J.ToLength(r.length);if(!J.IsCallable(e)){throw new TypeError("Array#find: predicate must be a function")}var o=arguments.length>1?arguments[1]:null;for(var i=0,a;i<n;i++){a=r[i];if(o){if(t(e,o,a,i,r)){return a}}else if(e(a,i,r)){return a}}},findIndex:function findIndex(e){var r=J.ToObject(this);var n=J.ToLength(r.length);if(!J.IsCallable(e)){throw new TypeError("Array#findIndex: predicate must be a function")}var o=arguments.length>1?arguments[1]:null;for(var i=0;i<n;i++){if(o){if(t(e,o,r[i],i,r)){return i}}else if(e(r[i],i,r)){return i}}return-1},keys:function keys(){return new R(this,"key")},values:function values(){return new R(this,"value")},entries:function entries(){return new R(this,"entry")}};if(Array.prototype.keys&&!J.IsCallable([1].keys().next)){delete Array.prototype.keys}if(Array.prototype.entries&&!J.IsCallable([1].entries().next)){delete Array.prototype.entries}if(Array.prototype.keys&&Array.prototype.entries&&!Array.prototype.values&&Array.prototype[$]){h(Array.prototype,{values:Array.prototype[$]});if(B.symbol(D.unscopables)){Array.prototype[D.unscopables].values=true}}if(f&&Array.prototype.values&&Array.prototype.values.name!=="values"){var Te=Array.prototype.values;Q(Array.prototype,"values",function values(){return t(Te,this)});y(Array.prototype,$,Array.prototype.values,true)}h(Array.prototype,Se);Y(Array.prototype,function(){return this.values()});if(Object.getPrototypeOf){Y(Object.getPrototypeOf([].values()))}var Ie=function(){return i(function(){return Array.from({length:-1}).length===0})}();var Ee=function(){var e=Array.from([0].entries());return e.length===1&&r(e[0])&&e[0][0]===0&&e[0][1]===0}();if(!Ie||!Ee){Q(Array,"from",de.from)}var Me=function(){return i(function(){return Array.from([0],undefined)})}();if(!Me){var Pe=Array.from;Q(Array,"from",function from(r){if(arguments.length>0&&typeof arguments[1]!=="undefined"){return e(Pe,this,arguments)}else{return t(Pe,this,r)}})}var xe=function(e,r){var n={length:-1};n[r?(-1>>>0)-1:0]=true;return i(function(){t(e,n,function(){throw new RangeError("should not reach here")},[])})};if(!xe(Array.prototype.forEach)){var Ne=Array.prototype.forEach;Q(Array.prototype,"forEach",function forEach(t){return e(Ne,this.length>=0?this:[],arguments)},true)}if(!xe(Array.prototype.map)){var Ce=Array.prototype.map;Q(Array.prototype,"map",function map(t){return e(Ce,this.length>=0?this:[],arguments)},true)}if(!xe(Array.prototype.filter)){var Ae=Array.prototype.filter;Q(Array.prototype,"filter",function filter(t){return e(Ae,this.length>=0?this:[],arguments)},true)}if(!xe(Array.prototype.some)){var ke=Array.prototype.some;Q(Array.prototype,"some",function some(t){return e(ke,this.length>=0?this:[],arguments)},true)}if(!xe(Array.prototype.every)){var _e=Array.prototype.every;Q(Array.prototype,"every",function every(t){return e(_e,this.length>=0?this:[],arguments)},true)}if(!xe(Array.prototype.reduce)){var Re=Array.prototype.reduce;Q(Array.prototype,"reduce",function reduce(t){return e(Re,this.length>=0?this:[],arguments)},true)}if(!xe(Array.prototype.reduceRight,true)){var Fe=Array.prototype.reduceRight;Q(Array.prototype,"reduceRight",function reduceRight(t){return e(Fe,this.length>=0?this:[],arguments)},true)}var De=Number("0o10")!==8;var ze=Number("0b10")!==2;var Le=v(ve,function(e){return Number(e+0+e)===0});if(De||ze||Le){var qe=Number;var Ge=/^0b[01]+$/i;var We=/^0o[0-7]+$/i;var He=Ge.test.bind(Ge);var Be=We.test.bind(We);var $e=function(e){var t;if(typeof e.valueOf==="function"){t=e.valueOf();if(B.primitive(t)){return t}}if(typeof e.toString==="function"){t=e.toString();if(B.primitive(t)){return t}}throw new TypeError("No default value")};var Ve=ye.test.bind(ye);var Je=he.test.bind(he);var Ue=function(){var e=function Number(r){var n;if(arguments.length>0){n=B.primitive(r)?r:$e(r,"number")}else{n=0}if(typeof n==="string"){n=t(pe,n);if(He(n)){n=parseInt(T(n,2),2)}else if(Be(n)){n=parseInt(T(n,2),8)}else if(Ve(n)||Je(n)){n=NaN}}var o=this;var a=i(function(){qe.prototype.valueOf.call(o);return true});if(o instanceof e&&!a){return new qe(n)}return qe(n)};return e}();K(qe,Ue,{});Number=Ue;U.redefine(m,"Number",Ue)}var Ke=Math.pow(2,53)-1;h(Number,{MAX_SAFE_INTEGER:Ke,MIN_SAFE_INTEGER:-Ke,EPSILON:2.220446049250313e-16,parseInt:m.parseInt,parseFloat:m.parseFloat,isFinite:q,isInteger:function isInteger(e){return q(e)&&J.ToInteger(e)===e},isSafeInteger:function isSafeInteger(e){return Number.isInteger(e)&&C(e)<=Number.MAX_SAFE_INTEGER},isNaN:L});y(Number,"parseInt",m.parseInt,Number.parseInt!==m.parseInt);if(![,1].find(function(e,t){return t===0})){Q(Array.prototype,"find",Se.find)}if([,1].findIndex(function(e,t){return t===0})!==0){Q(Array.prototype,"findIndex",Se.findIndex)}var Xe=Function.bind.call(Function.bind,Object.prototype.propertyIsEnumerable);var Ze=function sliceArgs(){var e=Number(this);var t=arguments.length;var r=t-e;var n=new Array(r<0?0:r);for(var o=e;o<t;++o){n[o-e]=arguments[o]}return n};var Qe=function assignTo(e){return function assignToSource(t,r){t[r]=e[r];return t}};var Ye=function(e,t){var r=Object.keys(Object(t));var n;if(J.IsCallable(Object.getOwnPropertySymbols)){n=p(Object.getOwnPropertySymbols(Object(t)),Xe(t))}return l(S(r,n||[]),Qe(t),e)};var et={assign:function(t,r){var n=J.ToObject(t,"Cannot convert undefined or null to object");return l(e(Ze,1,arguments),Ye,n)},is:function is(e,t){return J.SameValue(e,t)}};var tt=Object.assign&&Object.preventExtensions&&function(){var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return e[1]==="y"}}();if(tt){Q(Object,"assign",et.assign)}h(Object,et);if(s){var rt={setPrototypeOf:function(e,r){var n;var o=function(e,t){if(!J.TypeIsObject(e)){throw new TypeError("cannot set prototype on a non-object")}if(!(t===null||J.TypeIsObject(t))){throw new TypeError("can only set prototype to an object or null"+t)}};var i=function(e,r){o(e,r);t(n,e,r);return e};try{n=e.getOwnPropertyDescriptor(e.prototype,r).set;t(n,{},null)}catch(a){if(e.prototype!=={}[r]){return}n=function(e){this[r]=e};i.polyfill=i(i({},null),e.prototype)instanceof e}return i}(Object,"__proto__")};h(Object,rt)}if(Object.setPrototypeOf&&Object.getPrototypeOf&&Object.getPrototypeOf(Object.setPrototypeOf({},null))!==null&&Object.getPrototypeOf(Object.create(null))===null){(function(){var e=Object.create(null);var t=Object.getPrototypeOf,r=Object.setPrototypeOf;Object.getPrototypeOf=function(r){var n=t(r);return n===e?null:n};Object.setPrototypeOf=function(t,n){var o=n===null?e:n;return r(t,o)};Object.setPrototypeOf.polyfill=false})()}var nt=!o(function(){Object.keys("foo")});if(!nt){var ot=Object.keys;Q(Object,"keys",function keys(e){return ot(J.ToObject(e))})}if(Object.getOwnPropertyNames){var it=!o(function(){Object.getOwnPropertyNames("foo")});if(!it){var at=typeof window==="object"?Object.getOwnPropertyNames(window):[];var ut=Object.getOwnPropertyNames;Q(Object,"getOwnPropertyNames",function getOwnPropertyNames(e){var t=J.ToObject(e);if(j(t)==="[object Window]"){try{return ut(t)}catch(r){return S([],at)}}return ut(t)})}}if(Object.getOwnPropertyDescriptor){var st=!o(function(){Object.getOwnPropertyDescriptor("foo","bar")});if(!st){var ft=Object.getOwnPropertyDescriptor;Q(Object,"getOwnPropertyDescriptor",function getOwnPropertyDescriptor(e,t){return ft(J.ToObject(e),t)})}}if(Object.seal){var ct=!o(function(){Object.seal("foo")});if(!ct){var lt=Object.seal;Q(Object,"seal",function seal(e){if(!B.object(e)){return e}return lt(e)})}}if(Object.isSealed){var pt=!o(function(){Object.isSealed("foo")});if(!pt){var vt=Object.isSealed;Q(Object,"isSealed",function isSealed(e){if(!B.object(e)){return true}return vt(e)})}}if(Object.freeze){var yt=!o(function(){Object.freeze("foo")});if(!yt){var ht=Object.freeze;Q(Object,"freeze",function freeze(e){if(!B.object(e)){return e}return ht(e)})}}if(Object.isFrozen){var gt=!o(function(){Object.isFrozen("foo")});if(!gt){var bt=Object.isFrozen;Q(Object,"isFrozen",function isFrozen(e){if(!B.object(e)){return true}return bt(e)})}}if(Object.preventExtensions){var dt=!o(function(){Object.preventExtensions("foo")});if(!dt){var mt=Object.preventExtensions;Q(Object,"preventExtensions",function preventExtensions(e){if(!B.object(e)){return e}return mt(e)})}}if(Object.isExtensible){var Ot=!o(function(){Object.isExtensible("foo")});if(!Ot){var wt=Object.isExtensible;Q(Object,"isExtensible",function isExtensible(e){if(!B.object(e)){return false}return wt(e)})}}if(Object.getPrototypeOf){var jt=!o(function(){Object.getPrototypeOf("foo")});if(!jt){var St=Object.getPrototypeOf;Q(Object,"getPrototypeOf",function getPrototypeOf(e){return St(J.ToObject(e))})}}var Tt=s&&function(){var e=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags");return e&&J.IsCallable(e.get)}();if(s&&!Tt){var It=function flags(){if(!J.TypeIsObject(this)){throw new TypeError("Method called on incompatible type: must be an object.")}var e="";if(this.global){e+="g"}if(this.ignoreCase){e+="i"}if(this.multiline){e+="m"}if(this.unicode){e+="u"}if(this.sticky){e+="y"}return e};U.getter(RegExp.prototype,"flags",It)}var Et=i(function(){return String(new RegExp(/a/g,"i"))==="/a/i"});if(!Et&&s){var Mt=RegExp;var Pt=function(){return function RegExp(e,t){var r=this instanceof RegExp;if(!r&&(B.regex(e)||e&&e.constructor===RegExp)){return e}if(B.regex(e)&&B.string(t)){return new RegExp(e.source,t)}return new Mt(e,t)}}();K(Mt,Pt,{$input:true});RegExp=Pt;U.redefine(m,"RegExp",Pt)}if(s){var xt={input:"$_",lastMatch:"$&",lastParen:"$+",leftContext:"$`",rightContext:"$'"};c(Object.keys(xt),function(e){if(e in RegExp&&!(xt[e]in RegExp)){U.getter(RegExp,xt[e],function get(){return RegExp[e]})}})}Z(RegExp);var Nt=1/Number.EPSILON;var Ct=function roundTiesToEven(e){return e+Nt-Nt};var At=Math.pow(2,-23);var kt=Math.pow(2,127)*(2-At);var _t=Math.pow(2,-126);var Rt=Number.prototype.clz;delete Number.prototype.clz;var Ft={acosh:function acosh(e){var t=Number(e);if(Number.isNaN(t)||e<1){return NaN}if(t===1){return 0}if(t===Infinity){return t}return A(t/Math.E+k(t+1)*k(t-1)/Math.E)+1},asinh:function asinh(e){var t=Number(e);if(t===0||!O(t)){return t}return t<0?-Math.asinh(-t):A(t+k(t*t+1))},atanh:function atanh(e){var t=Number(e);if(Number.isNaN(t)||t<-1||t>1){return NaN}if(t===-1){return-Infinity}if(t===1){return Infinity}if(t===0){return t}return.5*A((1+t)/(1-t))},cbrt:function cbrt(e){var t=Number(e);if(t===0){return t}var r=t<0,n;if(r){t=-t}if(t===Infinity){n=Infinity}else{n=Math.exp(A(t)/3);n=(t/(n*n)+2*n)/3}return r?-n:n},clz32:function clz32(e){var r=Number(e);var n=J.ToUint32(r);if(n===0){return 32}return Rt?t(Rt,n):31-N(A(n+.5)*Math.LOG2E)},cosh:function cosh(e){var t=Number(e);if(t===0){return 1}if(Number.isNaN(t)){return NaN}if(!O(t)){return Infinity}if(t<0){t=-t}if(t>21){return Math.exp(t)/2}return(Math.exp(t)+Math.exp(-t))/2},expm1:function expm1(e){var t=Number(e);if(t===-Infinity){return-1}if(!O(t)||t===0){return t}if(C(t)>.5){return Math.exp(t)-1}var r=t;var n=0;var o=1;while(n+r!==n){n+=r;o+=1;r*=t/o}return n},hypot:function hypot(e,t){var r=0;var n=0;for(var o=0;o<arguments.length;++o){var i=C(Number(arguments[o]));if(n<i){r*=n/i*(n/i);r+=1;n=i}else{r+=i>0?i/n*(i/n):i}}return n===Infinity?Infinity:n*k(r)},log2:function log2(e){return A(e)*Math.LOG2E},log10:function log10(e){return A(e)*Math.LOG10E},log1p:function log1p(e){var t=Number(e);if(t<-1||Number.isNaN(t)){return NaN}if(t===0||t===Infinity){return t}if(t===-1){return-Infinity}return 1+t-1===0?t:t*(A(1+t)/(1+t-1))},sign:function sign(e){var t=Number(e);if(t===0){return t}if(Number.isNaN(t)){return t}return t<0?-1:1},sinh:function sinh(e){var t=Number(e);if(!O(t)||t===0){return t}if(C(t)<1){return(Math.expm1(t)-Math.expm1(-t))/2}return(Math.exp(t-1)-Math.exp(-t-1))*Math.E/2},tanh:function tanh(e){var t=Number(e);if(Number.isNaN(t)||t===0){return t}if(t===Infinity){return 1}if(t===-Infinity){return-1}var r=Math.expm1(t);var n=Math.expm1(-t);if(r===Infinity){return 1}if(n===Infinity){return-1}return(r-n)/(Math.exp(t)+Math.exp(-t))},trunc:function trunc(e){var t=Number(e);return t<0?-N(-t):N(t)},imul:function imul(e,t){var r=J.ToUint32(e);var n=J.ToUint32(t);var o=r>>>16&65535;var i=r&65535;var a=n>>>16&65535;var u=n&65535;return i*u+(o*u+i*a<<16>>>0)|0},fround:function fround(e){var t=Number(e);if(t===0||t===Infinity||t===-Infinity||L(t)){return t}var r=Math.sign(t);var n=C(t);if(n<_t){return r*Ct(n/_t/At)*_t*At}var o=(1+At/Number.EPSILON)*n;var i=o-(o-n);if(i>kt||L(i)){return r*Infinity}return r*i}};h(Math,Ft);y(Math,"log1p",Ft.log1p,Math.log1p(-1e-17)!==-1e-17);y(Math,"asinh",Ft.asinh,Math.asinh(-1e7)!==-Math.asinh(1e7));y(Math,"tanh",Ft.tanh,Math.tanh(-2e-17)!==-2e-17);y(Math,"acosh",Ft.acosh,Math.acosh(Number.MAX_VALUE)===Infinity);y(Math,"cbrt",Ft.cbrt,Math.abs(1-Math.cbrt(1e-300)/1e-100)/Number.EPSILON>8);y(Math,"sinh",Ft.sinh,Math.sinh(-2e-17)!==-2e-17);var Dt=Math.expm1(10);y(Math,"expm1",Ft.expm1,Dt>22025.465794806718||Dt<22025.465794806718);var zt=Math.round;var Lt=Math.round(.5-Number.EPSILON/4)===0&&Math.round(-.5+Number.EPSILON/3.99)===1;var qt=Nt+1;var Gt=2*Nt-1;var Wt=[qt,Gt].every(function(e){return Math.round(e)===e});y(Math,"round",function round(e){var t=N(e);var r=t===-1?-0:t+1;return e-t<.5?t:r},!Lt||!Wt);U.preserveToString(Math.round,zt);var Ht=Math.imul;if(Math.imul(4294967295,5)!==-5){Math.imul=Ft.imul;U.preserveToString(Math.imul,Ht)}if(Math.imul.length!==2){Q(Math,"imul",function imul(t,r){return e(Ht,Math,arguments)})}var Bt=function(){var e=m.setTimeout;if(typeof e!=="function"&&typeof e!=="object"){return}J.IsPromise=function(e){if(!J.TypeIsObject(e)){return false}if(typeof e._promise==="undefined"){return false}return true};var r=function(e){if(!J.IsConstructor(e)){throw new TypeError("Bad promise constructor")}var t=this;var r=function(e,r){if(t.resolve!==void 0||t.reject!==void 0){throw new TypeError("Bad Promise implementation!")}t.resolve=e;t.reject=r};t.promise=new e(r);if(!(J.IsCallable(t.resolve)&&J.IsCallable(t.reject))){throw new TypeError("Bad promise constructor")}};var n;if(typeof window!=="undefined"&&J.IsCallable(window.postMessage)){n=function(){var e=[];var t="zero-timeout-message";var r=function(r){I(e,r);window.postMessage(t,"*")};var n=function(r){if(r.source===window&&r.data===t){r.stopPropagation();if(e.length===0){return}var n=M(e);n()}};window.addEventListener("message",n,true);return r}}var o=function(){var e=m.Promise;return e&&e.resolve&&function(t){return e.resolve().then(t)}};var i=J.IsCallable(m.setImmediate)?m.setImmediate.bind(m):typeof process==="object"&&process.nextTick?process.nextTick:o()||(J.IsCallable(n)?n():function(t){e(t,0)});var a=1;var u=2;var s=3;var f=4;var l=5;var p=function(e,t){var r=e.capabilities;var n=e.handler;var o,i=false,s;if(n===a){o=t}else if(n===u){o=t;i=true}else{try{o=n(t)}catch(f){o=f;i=true}}s=i?r.reject:r.resolve;s(o)};var v=function(e,t){c(e,function(e){i(function(){p(e,t)})})};var y=function(e,t){var r=e._promise;var n=r.fulfillReactions;r.result=t;r.fulfillReactions=void 0;r.rejectReactions=void 0;r.state=f;v(n,t)};var g=function(e,t){var r=e._promise;var n=r.rejectReactions;r.result=t;r.fulfillReactions=void 0;r.rejectReactions=void 0;r.state=l;v(n,t)};var b=function(e){var t=false;var r=function(r){var n;if(t){return}t=true;if(r===e){return g(e,new TypeError("Self resolution"))}if(!J.TypeIsObject(r)){return y(e,r)}try{n=r.then}catch(o){return g(e,o)}if(!J.IsCallable(n)){return y(e,r)}i(function(){d(e,r,n)})};var n=function(r){if(t){return}t=true;return g(e,r)};return{resolve:r,reject:n}};var d=function(e,r,n){var o=b(e);var i=o.resolve;var a=o.reject;try{t(n,r,i,a)}catch(u){a(u)}};var O=function(e){if(!J.TypeIsObject(e)){throw new TypeError("Promise is not object")}var t=e[z];if(t!==void 0&&t!==null){return t}return e};var w;var j=function(){var e=function Promise(t){if(!(this instanceof e)){throw new TypeError('Constructor Promise requires "new"')}if(this&&this._promise){throw new TypeError("Bad construction")}if(!J.IsCallable(t)){throw new TypeError("not a valid resolver")}var r=re(this,e,w,{_promise:{result:void 0,state:s,fulfillReactions:[],rejectReactions:[]}});var n=b(r);var o=n.reject;try{t(n.resolve,o)}catch(i){o(i)}return r};return e}();w=j.prototype;var S=function(e,t,r,n){var o=false;return function(i){if(o){return}o=true;t[e]=i;if(--n.count===0){var a=r.resolve;a(t)}}};var T=function(e,t,r){var n=e.iterator;var o=[],i={count:1},a,u;var s=0;while(true){try{a=J.IteratorStep(n);if(a===false){e.done=true;break}u=a.value}catch(f){e.done=true;throw f}o[s]=void 0;var c=t.resolve(u);var l=S(s,o,r,i);i.count+=1;c.then(l,r.reject);s+=1}if(--i.count===0){var p=r.resolve;p(o)}return r.promise};var E=function(e,t,r){var n=e.iterator,o,i,a;while(true){try{o=J.IteratorStep(n);if(o===false){e.done=true;break}i=o.value}catch(u){e.done=true;throw u}a=t.resolve(i);a.then(r.resolve,r.reject)}return r.promise};h(j,{all:function all(e){var t=O(this);var n=new r(t);var o,i;try{o=J.GetIterator(e);i={iterator:o,done:false};return T(i,t,n)}catch(a){var u=a;if(i&&!i.done){try{J.IteratorClose(o,true)}catch(s){u=s}}var f=n.reject;f(u);return n.promise}},race:function race(e){var t=O(this);var n=new r(t);var o,i;try{o=J.GetIterator(e);i={iterator:o,done:false};return E(i,t,n)}catch(a){var u=a;if(i&&!i.done){try{J.IteratorClose(o,true)}catch(s){u=s}}var f=n.reject;f(u);return n.promise}},reject:function reject(e){
	var t=this;var n=new r(t);var o=n.reject;o(e);return n.promise},resolve:function resolve(e){var t=this;if(J.IsPromise(e)){var n=e.constructor;if(n===t){return e}}var o=new r(t);var i=o.resolve;i(e);return o.promise}});h(w,{"catch":function(e){return this.then(void 0,e)},then:function then(e,t){var n=this;if(!J.IsPromise(n)){throw new TypeError("not a promise")}var o=J.SpeciesConstructor(n,j);var c=new r(o);var v={capabilities:c,handler:J.IsCallable(e)?e:a};var y={capabilities:c,handler:J.IsCallable(t)?t:u};var h=n._promise;var g;if(h.state===s){I(h.fulfillReactions,v);I(h.rejectReactions,y)}else if(h.state===f){g=h.result;i(function(){p(v,g)})}else if(h.state===l){g=h.result;i(function(){p(y,g)})}else{throw new TypeError("unexpected Promise state")}return c.promise}});return j}();if(m.Promise){delete m.Promise.accept;delete m.Promise.defer;delete m.Promise.prototype.chain}if(typeof Bt==="function"){h(m,{Promise:Bt});var $t=b(m.Promise,function(e){return e.resolve(42).then(function(){})instanceof e});var Vt=!o(function(){m.Promise.reject(42).then(null,5).then(null,F)});var Jt=o(function(){m.Promise.call(3,F)});var Ut=function(e){var t=e.resolve(5);t.constructor={};var r=e.resolve(t);return t===r}(m.Promise);if(!$t||!Vt||!Jt||Ut){Promise=Bt;Q(m,"Promise",Bt)}Z(Promise)}var Kt=function(e){var t=Object.keys(l(e,function(e,t){e[t]=true;return e},{}));return e.join(":")===t.join(":")};var Xt=Kt(["z","a","bb"]);var Zt=Kt(["z",1,"a","3",2]);if(s){var Qt=function fastkey(e){if(!Xt){return null}var t=typeof e;if(t==="undefined"||e===null){return"^"+String(e)}else if(t==="string"){return"$"+e}else if(t==="number"){if(!Zt){return"n"+e}return e}else if(t==="boolean"){return"b"+e}return null};var Yt=function emptyObject(){return Object.create?Object.create(null):{}};var er=function addIterableToMap(e,n,o){if(r(o)||B.string(o)){c(o,function(e){n.set(e[0],e[1])})}else if(o instanceof e){t(e.prototype.forEach,o,function(e,t){n.set(t,e)})}else{var i,a;if(o!==null&&typeof o!=="undefined"){a=n.set;if(!J.IsCallable(a)){throw new TypeError("bad map")}i=J.GetIterator(o)}if(typeof i!=="undefined"){while(true){var u=J.IteratorStep(i);if(u===false){break}var s=u.value;try{if(!J.TypeIsObject(s)){throw new TypeError("expected iterable of pairs")}t(a,n,s[0],s[1])}catch(f){J.IteratorClose(i,true);throw f}}}}};var tr=function addIterableToSet(e,n,o){if(r(o)||B.string(o)){c(o,function(e){n.add(e)})}else if(o instanceof e){t(e.prototype.forEach,o,function(e){n.add(e)})}else{var i,a;if(o!==null&&typeof o!=="undefined"){a=n.add;if(!J.IsCallable(a)){throw new TypeError("bad set")}i=J.GetIterator(o)}if(typeof i!=="undefined"){while(true){var u=J.IteratorStep(i);if(u===false){break}var s=u.value;try{t(a,n,s)}catch(f){J.IteratorClose(i,true);throw f}}}}};var rr={Map:function(){var e={};var r=function MapEntry(e,t){this.key=e;this.value=t;this.next=null;this.prev=null};r.prototype.isRemoved=function isRemoved(){return this.key===e};var n=function isMap(e){return!!e._es6map};var o=function requireMapSlot(e,t){if(!J.TypeIsObject(e)||!n(e)){throw new TypeError("Method Map.prototype."+t+" called on incompatible receiver "+String(e))}};var i=function MapIterator(e,t){o(e,"[[MapIterator]]");this.head=e._head;this.i=this.head;this.kind=t};i.prototype={next:function next(){var e=this.i,t=this.kind,r=this.head,n;if(typeof this.i==="undefined"){return{value:void 0,done:true}}while(e.isRemoved()&&e!==r){e=e.prev}while(e.next!==r){e=e.next;if(!e.isRemoved()){if(t==="key"){n=e.key}else if(t==="value"){n=e.value}else{n=[e.key,e.value]}this.i=e;return{value:n,done:false}}}this.i=void 0;return{value:void 0,done:true}}};Y(i.prototype);var a;var u=function Map(){if(!(this instanceof Map)){throw new TypeError('Constructor Map requires "new"')}if(this&&this._es6map){throw new TypeError("Bad construction")}var e=re(this,Map,a,{_es6map:true,_head:null,_storage:Yt(),_size:0});var t=new r(null,null);t.next=t.prev=t;e._head=t;if(arguments.length>0){er(Map,e,arguments[0])}return e};a=u.prototype;U.getter(a,"size",function(){if(typeof this._size==="undefined"){throw new TypeError("size method called on incompatible Map")}return this._size});h(a,{get:function get(e){o(this,"get");var t=Qt(e);if(t!==null){var r=this._storage[t];if(r){return r.value}else{return}}var n=this._head,i=n;while((i=i.next)!==n){if(J.SameValueZero(i.key,e)){return i.value}}},has:function has(e){o(this,"has");var t=Qt(e);if(t!==null){return typeof this._storage[t]!=="undefined"}var r=this._head,n=r;while((n=n.next)!==r){if(J.SameValueZero(n.key,e)){return true}}return false},set:function set(e,t){o(this,"set");var n=this._head,i=n,a;var u=Qt(e);if(u!==null){if(typeof this._storage[u]!=="undefined"){this._storage[u].value=t;return this}else{a=this._storage[u]=new r(e,t);i=n.prev}}while((i=i.next)!==n){if(J.SameValueZero(i.key,e)){i.value=t;return this}}a=a||new r(e,t);if(J.SameValue(-0,e)){a.key=+0}a.next=this._head;a.prev=this._head.prev;a.prev.next=a;a.next.prev=a;this._size+=1;return this},"delete":function(t){o(this,"delete");var r=this._head,n=r;var i=Qt(t);if(i!==null){if(typeof this._storage[i]==="undefined"){return false}n=this._storage[i].prev;delete this._storage[i]}while((n=n.next)!==r){if(J.SameValueZero(n.key,t)){n.key=n.value=e;n.prev.next=n.next;n.next.prev=n.prev;this._size-=1;return true}}return false},clear:function clear(){o(this,"clear");this._size=0;this._storage=Yt();var t=this._head,r=t,n=r.next;while((r=n)!==t){r.key=r.value=e;n=r.next;r.next=r.prev=t}t.next=t.prev=t},keys:function keys(){o(this,"keys");return new i(this,"key")},values:function values(){o(this,"values");return new i(this,"value")},entries:function entries(){o(this,"entries");return new i(this,"key+value")},forEach:function forEach(e){o(this,"forEach");var r=arguments.length>1?arguments[1]:null;var n=this.entries();for(var i=n.next();!i.done;i=n.next()){if(r){t(e,r,i.value[1],i.value[0],this)}else{e(i.value[1],i.value[0],this)}}}});Y(a,a.entries);return u}(),Set:function(){var e=function isSet(e){return e._es6set&&typeof e._storage!=="undefined"};var r=function requireSetSlot(t,r){if(!J.TypeIsObject(t)||!e(t)){throw new TypeError("Set.prototype."+r+" called on incompatible receiver "+String(t))}};var n;var o=function Set(){if(!(this instanceof Set)){throw new TypeError('Constructor Set requires "new"')}if(this&&this._es6set){throw new TypeError("Bad construction")}var e=re(this,Set,n,{_es6set:true,"[[SetData]]":null,_storage:Yt()});if(!e._es6set){throw new TypeError("bad set")}if(arguments.length>0){tr(Set,e,arguments[0])}return e};n=o.prototype;var i=function ensureMap(e){if(!e["[[SetData]]"]){var t=e["[[SetData]]"]=new rr.Map;c(Object.keys(e._storage),function(e){var r=e;if(r==="^null"){r=null}else if(r==="^undefined"){r=void 0}else{var n=r.charAt(0);if(n==="$"){r=T(r,1)}else if(n==="n"){r=+T(r,1)}else if(n==="b"){r=r==="btrue"}else{r=+r}}t.set(r,r)});e._storage=null}};U.getter(o.prototype,"size",function(){r(this,"size");i(this);return this["[[SetData]]"].size});h(o.prototype,{has:function has(e){r(this,"has");var t;if(this._storage&&(t=Qt(e))!==null){return!!this._storage[t]}i(this);return this["[[SetData]]"].has(e)},add:function add(e){r(this,"add");var t;if(this._storage&&(t=Qt(e))!==null){this._storage[t]=true;return this}i(this);this["[[SetData]]"].set(e,e);return this},"delete":function(e){r(this,"delete");var t;if(this._storage&&(t=Qt(e))!==null){var n=_(this._storage,t);return delete this._storage[t]&&n}i(this);return this["[[SetData]]"]["delete"](e)},clear:function clear(){r(this,"clear");if(this._storage){this._storage=Yt()}else{this["[[SetData]]"].clear()}},values:function values(){r(this,"values");i(this);return this["[[SetData]]"].values()},entries:function entries(){r(this,"entries");i(this);return this["[[SetData]]"].entries()},forEach:function forEach(e){r(this,"forEach");var n=arguments.length>1?arguments[1]:null;var o=this;i(o);this["[[SetData]]"].forEach(function(r,i){if(n){t(e,n,i,i,o)}else{e(i,i,o)}})}});y(o.prototype,"keys",o.prototype.values,true);Y(o.prototype,o.prototype.values);return o}()};if(m.Map||m.Set){var nr=i(function(){return new Map([[1,2]]).get(1)===2});if(!nr){var or=m.Map;m.Map=function Map(){if(!(this instanceof Map)){throw new TypeError('Constructor Map requires "new"')}var e=new or;if(arguments.length>0){er(Map,e,arguments[0])}Object.setPrototypeOf(e,m.Map.prototype);y(e,"constructor",Map,true);return e};m.Map.prototype=g(or.prototype);U.preserveToString(m.Map,or)}var ir=new Map;var ar=function(e){e["delete"](0);e["delete"](-0);e.set(0,3);e.get(-0,4);return e.get(0)===3&&e.get(-0)===4}(ir);var ur=ir.set(1,2)===ir;if(!ar||!ur){var sr=Map.prototype.set;Q(Map.prototype,"set",function set(e,r){t(sr,this,e===0?0:e,r);return this})}if(!ar){var fr=Map.prototype.get;var cr=Map.prototype.has;h(Map.prototype,{get:function get(e){return t(fr,this,e===0?0:e)},has:function has(e){return t(cr,this,e===0?0:e)}},true);U.preserveToString(Map.prototype.get,fr);U.preserveToString(Map.prototype.has,cr)}var lr=new Set;var pr=function(e){e["delete"](0);e.add(-0);return!e.has(0)}(lr);var vr=lr.add(1)===lr;if(!pr||!vr){var yr=Set.prototype.add;Set.prototype.add=function add(e){t(yr,this,e===0?0:e);return this};U.preserveToString(Set.prototype.add,yr)}if(!pr){var hr=Set.prototype.has;Set.prototype.has=function has(e){return t(hr,this,e===0?0:e)};U.preserveToString(Set.prototype.has,hr);var gr=Set.prototype["delete"];Set.prototype["delete"]=function SetDelete(e){return t(gr,this,e===0?0:e)};U.preserveToString(Set.prototype["delete"],gr)}var br=b(m.Map,function(e){var t=new e([]);t.set(42,42);return t instanceof e});var dr=Object.setPrototypeOf&&!br;var mr=function(){try{return!(m.Map()instanceof m.Map)}catch(e){return e instanceof TypeError}}();if(m.Map.length!==0||dr||!mr){var Or=m.Map;m.Map=function Map(){if(!(this instanceof Map)){throw new TypeError('Constructor Map requires "new"')}var e=new Or;if(arguments.length>0){er(Map,e,arguments[0])}Object.setPrototypeOf(e,Map.prototype);y(e,"constructor",Map,true);return e};m.Map.prototype=Or.prototype;U.preserveToString(m.Map,Or)}var wr=b(m.Set,function(e){var t=new e([]);t.add(42,42);return t instanceof e});var jr=Object.setPrototypeOf&&!wr;var Sr=function(){try{return!(m.Set()instanceof m.Set)}catch(e){return e instanceof TypeError}}();if(m.Set.length!==0||jr||!Sr){var Tr=m.Set;m.Set=function Set(){if(!(this instanceof Set)){throw new TypeError('Constructor Set requires "new"')}var e=new Tr;if(arguments.length>0){tr(Set,e,arguments[0])}Object.setPrototypeOf(e,Set.prototype);y(e,"constructor",Set,true);return e};m.Set.prototype=Tr.prototype;U.preserveToString(m.Set,Tr)}var Ir=!i(function(){return(new Map).keys().next().done});if(typeof m.Map.prototype.clear!=="function"||(new m.Set).size!==0||(new m.Map).size!==0||typeof m.Map.prototype.keys!=="function"||typeof m.Set.prototype.keys!=="function"||typeof m.Map.prototype.forEach!=="function"||typeof m.Set.prototype.forEach!=="function"||a(m.Map)||a(m.Set)||typeof(new m.Map).keys().next!=="function"||Ir||!br){delete m.Map;delete m.Set;h(m,{Map:rr.Map,Set:rr.Set},true)}if(m.Set.prototype.keys!==m.Set.prototype.values){y(m.Set.prototype,"keys",m.Set.prototype.values,true)}Y(Object.getPrototypeOf((new m.Map).keys()));Y(Object.getPrototypeOf((new m.Set).keys()));if(f&&m.Set.prototype.has.name!=="has"){var Er=m.Set.prototype.has;Q(m.Set.prototype,"has",function has(e){return t(Er,this,e)})}}h(m,rr);Z(m.Map);Z(m.Set)}var Mr=function throwUnlessTargetIsObject(e){if(!J.TypeIsObject(e)){throw new TypeError("target must be an object")}};var Pr={apply:function apply(){return e(J.Call,null,arguments)},construct:function construct(e,t){if(!J.IsConstructor(e)){throw new TypeError("First argument must be a constructor.")}var r=arguments.length<3?e:arguments[2];if(!J.IsConstructor(r)){throw new TypeError("new.target must be a constructor.")}return J.Construct(e,t,r,"internal")},deleteProperty:function deleteProperty(e,t){Mr(e);if(s){var r=Object.getOwnPropertyDescriptor(e,t);if(r&&!r.configurable){return false}}return delete e[t]},enumerate:function enumerate(e){Mr(e);return new we(e,"key")},has:function has(e,t){Mr(e);return t in e}};if(Object.getOwnPropertyNames){Object.assign(Pr,{ownKeys:function ownKeys(e){Mr(e);var t=Object.getOwnPropertyNames(e);if(J.IsCallable(Object.getOwnPropertySymbols)){E(t,Object.getOwnPropertySymbols(e))}return t}})}var xr=function ConvertExceptionToBoolean(e){return!o(e)};if(Object.preventExtensions){Object.assign(Pr,{isExtensible:function isExtensible(e){Mr(e);return Object.isExtensible(e)},preventExtensions:function preventExtensions(e){Mr(e);return xr(function(){Object.preventExtensions(e)})}})}if(s){var Nr=function get(e,r,n){var o=Object.getOwnPropertyDescriptor(e,r);if(!o){var i=Object.getPrototypeOf(e);if(i===null){return undefined}return Nr(i,r,n)}if("value"in o){return o.value}if(o.get){return t(o.get,n)}return undefined};var Cr=function set(e,r,n,o){var i=Object.getOwnPropertyDescriptor(e,r);if(!i){var a=Object.getPrototypeOf(e);if(a!==null){return Cr(a,r,n,o)}i={value:void 0,writable:true,enumerable:true,configurable:true}}if("value"in i){if(!i.writable){return false}if(!J.TypeIsObject(o)){return false}var u=Object.getOwnPropertyDescriptor(o,r);if(u){return V.defineProperty(o,r,{value:n})}else{return V.defineProperty(o,r,{value:n,writable:true,enumerable:true,configurable:true})}}if(i.set){t(i.set,o,n);return true}return false};Object.assign(Pr,{defineProperty:function defineProperty(e,t,r){Mr(e);return xr(function(){Object.defineProperty(e,t,r)})},getOwnPropertyDescriptor:function getOwnPropertyDescriptor(e,t){Mr(e);return Object.getOwnPropertyDescriptor(e,t)},get:function get(e,t){Mr(e);var r=arguments.length>2?arguments[2]:e;return Nr(e,t,r)},set:function set(e,t,r){Mr(e);var n=arguments.length>3?arguments[3]:e;return Cr(e,t,r,n)}})}if(Object.getPrototypeOf){var Ar=Object.getPrototypeOf;Pr.getPrototypeOf=function getPrototypeOf(e){Mr(e);return Ar(e)}}if(Object.setPrototypeOf&&Pr.getPrototypeOf){var kr=function(e,t){var r=t;while(r){if(e===r){return true}r=Pr.getPrototypeOf(r)}return false};Object.assign(Pr,{setPrototypeOf:function setPrototypeOf(e,t){Mr(e);if(t!==null&&!J.TypeIsObject(t)){throw new TypeError("proto must be an object or null")}if(t===V.getPrototypeOf(e)){return true}if(V.isExtensible&&!V.isExtensible(e)){return false}if(kr(e,t)){return false}Object.setPrototypeOf(e,t);return true}})}var _r=function(e,t){if(!J.IsCallable(m.Reflect[e])){y(m.Reflect,e,t)}else{var r=i(function(){m.Reflect[e](1);m.Reflect[e](NaN);m.Reflect[e](true);return true});if(r){Q(m.Reflect,e,t)}}};Object.keys(Pr).forEach(function(e){_r(e,Pr[e])});if(f&&m.Reflect.getPrototypeOf.name!=="getPrototypeOf"){var Rr=m.Reflect.getPrototypeOf;Q(m.Reflect,"getPrototypeOf",function getPrototypeOf(e){return t(Rr,m.Reflect,e)})}if(m.Reflect.setPrototypeOf){if(i(function(){m.Reflect.setPrototypeOf(1,{});return true})){Q(m.Reflect,"setPrototypeOf",Pr.setPrototypeOf)}}if(m.Reflect.defineProperty){if(!i(function(){var e=!m.Reflect.defineProperty(1,"test",{value:1});var t=typeof Object.preventExtensions!=="function"||!m.Reflect.defineProperty(Object.preventExtensions({}),"test",{});return e&&t})){Q(m.Reflect,"defineProperty",Pr.defineProperty)}}if(m.Reflect.construct){if(!i(function(){var e=function F(){};return m.Reflect.construct(function(){},[],e)instanceof e})){Q(m.Reflect,"construct",Pr.construct)}}if(String(new Date(NaN))!=="Invalid Date"){var Fr=Date.prototype.toString;var Dr=function toString(){var e=+this;if(e!==e){return"Invalid Date"}return t(Fr,this)};Q(Date.prototype,"toString",Dr)}var zr={anchor:function anchor(e){return J.CreateHTML(this,"a","name",e)},big:function big(){return J.CreateHTML(this,"big","","")},blink:function blink(){return J.CreateHTML(this,"blink","","")},bold:function bold(){return J.CreateHTML(this,"b","","")},fixed:function fixed(){return J.CreateHTML(this,"tt","","")},fontcolor:function fontcolor(e){return J.CreateHTML(this,"font","color",e)},fontsize:function fontsize(e){return J.CreateHTML(this,"font","size",e)},italics:function italics(){return J.CreateHTML(this,"i","","")},link:function link(e){return J.CreateHTML(this,"a","href",e)},small:function small(){return J.CreateHTML(this,"small","","")},strike:function strike(){return J.CreateHTML(this,"strike","","")},sub:function sub(){return J.CreateHTML(this,"sub","","")},sup:function sub(){return J.CreateHTML(this,"sup","","")}};c(Object.keys(zr),function(e){var r=String.prototype[e];var n=false;if(J.IsCallable(r)){var o=t(r,"",' " ');var i=S([],o.match(/"/g)).length;n=o!==o.toLowerCase()||i>2}else{n=true}if(n){Q(String.prototype,e,zr[e])}});var Lr=function(){if(!B.symbol(D.iterator)){return false}var e=typeof JSON==="object"&&typeof JSON.stringify==="function"?JSON.stringify:null;if(!e){return false}if(typeof e(D())!=="undefined"){return true}if(e([D()])!=="[null]"){return true}var t={a:D()};t[D()]=true;if(e(t)!=="{}"){return true}return false}();var qr=i(function(){if(!B.symbol(D.iterator)){return true}return JSON.stringify(Object(D()))==="{}"&&JSON.stringify([Object(D())])==="[{}]"});if(Lr||!qr){var Gr=JSON.stringify;Q(JSON,"stringify",function stringify(e){if(typeof e==="symbol"){return}var n;if(arguments.length>1){n=arguments[1]}var o=[e];if(!r(n)){var i=J.IsCallable(n)?n:null;var a=function(e,r){var o=n?t(n,this,e,r):r;if(typeof o!=="symbol"){if(B.symbol(o)){return Qe({})(o)}else{return o}}};o.push(a)}else{o.push(n)}if(arguments.length>2){o.push(arguments[2])}return Gr.apply(this,o)})}return m});
	//# sourceMappingURL=es6-shim.map


/***/ },
/* 2 */
/***/ function(module, exports) {

	/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap.delete(metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return true;
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        }
	        return false;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        }
	        return undefined;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) { return keys.push(key); });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = {
	            get size() {
	                return this._keys.length;
	            },
	            has: function (key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function (key, value) {
	                this.delete(key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            delete: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function (callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function (key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        };
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = {
	            get size() {
	                return this._map.length;
	            },
	            has: function (value) {
	                return this._map.has(value);
	            },
	            add: function (value) {
	                this._map.set(value, value);
	                return this;
	            },
	            delete: function (value) {
	                return this._map.delete(value);
	            },
	            clear: function () {
	                this._map.clear();
	            },
	            forEach: function (callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        };
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" && Object.prototype.toString.call(global.process) === '[object process]';
	        var nodeCrypto = isNode && require("crypto");
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            delete: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            }
	            else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                }
	                else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                }
	                else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            }
	            else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map

/***/ },
/* 3 */
/***/ function(module, exports) {

	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {'use strict';
		var microtask = __webpack_require__(1);
		var es6Promise = __webpack_require__(2);
		var core = __webpack_require__(6);
		var browserPatch = __webpack_require__(10);
		if (core.Zone.prototype['scheduleMicrotask']) {
		    console.warn('Zone-microtasks already exported on window the object!');
		}
		else {
		    microtask.addMicrotaskSupport(core.Zone);
		    global.Zone = core.Zone;
		    global.zone = new global.Zone();
		    // Monkey patch the Promise implementation to add support for microtasks
		    global.Promise = es6Promise.Promise;
		    browserPatch.apply();
		}
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZS1taWNyb3Rhc2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYnJvd3Nlci96b25lLW1pY3JvdGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFZLFNBQVMsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUMxQyxJQUFZLFVBQVUsV0FBTSxhQUFhLENBQUMsQ0FBQTtBQUMxQyxJQUFZLElBQUksV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUNoQyxJQUFZLFlBQVksV0FBTSxrQkFBa0IsQ0FBQyxDQUFBO0FBRWpELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0RBQXdELENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBQUMsSUFBSSxDQUFDLENBQUM7SUFDTixTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN4QixNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRWhDLHdFQUF3RTtJQUN4RSxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFFcEMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIG1pY3JvdGFzayBmcm9tICcuLi9taWNyb3Rhc2snO1xuaW1wb3J0ICogYXMgZXM2UHJvbWlzZSBmcm9tICdlczYtcHJvbWlzZSc7XG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgYnJvd3NlclBhdGNoIGZyb20gJy4uL3BhdGNoL2Jyb3dzZXInO1xuXG5pZiAoY29yZS5ab25lLnByb3RvdHlwZVsnc2NoZWR1bGVNaWNyb3Rhc2snXSkge1xuICBjb25zb2xlLndhcm4oJ1pvbmUtbWljcm90YXNrcyBhbHJlYWR5IGV4cG9ydGVkIG9uIHdpbmRvdyB0aGUgb2JqZWN0IScpO1xufSBlbHNlIHtcbiAgbWljcm90YXNrLmFkZE1pY3JvdGFza1N1cHBvcnQoY29yZS5ab25lKTtcblxuICBnbG9iYWwuWm9uZSA9IGNvcmUuWm9uZTtcbiAgZ2xvYmFsLnpvbmUgPSBuZXcgZ2xvYmFsLlpvbmUoKTtcblxuICAvLyBNb25rZXkgcGF0Y2ggdGhlIFByb21pc2UgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yIG1pY3JvdGFza3NcbiAgZ2xvYmFsLlByb21pc2UgPSBlczZQcm9taXNlLlByb21pc2U7XG5cbiAgYnJvd3NlclBhdGNoLmFwcGx5KCk7XG59XG4iXX0=
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {// TODO(vicb): Create a benchmark for the different methods & the usage of the queue
		// see https://github.com/angular/zone.js/issues/97
		// It is required to initialize hasNativePromise before requiring es6-promise otherwise es6-promise would
		// overwrite the native Promise implementation on v8 and the check would always return false.
		// see https://github.com/jakearchibald/es6-promise/issues/140
		var hasNativePromise = typeof Promise !== "undefined" &&
		    Promise.toString().indexOf("[native code]") !== -1;
		var isFirefox = global.navigator &&
		    global.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
		var resolvedPromise;
		// TODO(vicb): remove '!isFirefox' when the bug gets fixed:
		// https://bugzilla.mozilla.org/show_bug.cgi?id=1162013
		if (hasNativePromise && !isFirefox) {
		    // When available use a native Promise to schedule microtasks.
		    // When not available, es6-promise fallback will be used
		    resolvedPromise = Promise.resolve();
		}
		var es6Promise = __webpack_require__(2).Promise;
		if (resolvedPromise) {
		    es6Promise._setScheduler(function (fn) {
		        resolvedPromise.then(fn);
		    });
		}
		// es6-promise asap should schedule microtasks via zone.scheduleMicrotask so that any
		// user defined hooks are triggered
		es6Promise._setAsap(function (fn, arg) {
		    global.zone.scheduleMicrotask(function () {
		        fn(arg);
		    });
		});
		// The default implementation of scheduleMicrotask use the original es6-promise implementation
		// to schedule a microtask
		function scheduleMicrotask(fn) {
		    es6Promise._asap(this.bind(fn));
		}
		function addMicrotaskSupport(zoneClass) {
		    zoneClass.prototype.scheduleMicrotask = scheduleMicrotask;
		    return zoneClass;
		}
		exports.addMicrotaskSupport = addMicrotaskSupport;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWljcm90YXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL21pY3JvdGFzay50cyJdLCJuYW1lcyI6WyJzY2hlZHVsZU1pY3JvdGFzayIsImFkZE1pY3JvdGFza1N1cHBvcnQiXSwibWFwcGluZ3MiOiJBQUFBLG9GQUFvRjtBQUNwRixtREFBbUQ7QUFFbkQseUdBQXlHO0FBQ3pHLDZGQUE2RjtBQUM3Riw4REFBOEQ7QUFDOUQsSUFBSSxnQkFBZ0IsR0FBRyxPQUFPLE9BQU8sS0FBSyxXQUFXO0lBQ2pELE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFdkQsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVM7SUFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRXJFLElBQUksZUFBZSxDQUFDO0FBRXBCLDJEQUEyRDtBQUMzRCx1REFBdUQ7QUFDdkQsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ25DLDhEQUE4RDtJQUM5RCx3REFBd0Q7SUFDeEQsZUFBZSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN0QyxDQUFDO0FBRUQsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUVoRCxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLFVBQVUsQ0FBQyxhQUFhLENBQUMsVUFBUyxFQUFFO1FBQ2xDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQscUZBQXFGO0FBQ3JGLG1DQUFtQztBQUNuQyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVMsRUFBRSxFQUFFLEdBQUc7SUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUM1QixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsOEZBQThGO0FBQzlGLDBCQUEwQjtBQUMxQiwyQkFBMkIsRUFBRTtJQUMzQkEsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDbENBLENBQUNBO0FBRUQsNkJBQW9DLFNBQVM7SUFDM0NDLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsR0FBR0EsaUJBQWlCQSxDQUFDQTtJQUMxREEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7QUFDbkJBLENBQUNBO0FBSGUsMkJBQW1CLHNCQUdsQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETyh2aWNiKTogQ3JlYXRlIGEgYmVuY2htYXJrIGZvciB0aGUgZGlmZmVyZW50IG1ldGhvZHMgJiB0aGUgdXNhZ2Ugb2YgdGhlIHF1ZXVlXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvem9uZS5qcy9pc3N1ZXMvOTdcblxuLy8gSXQgaXMgcmVxdWlyZWQgdG8gaW5pdGlhbGl6ZSBoYXNOYXRpdmVQcm9taXNlIGJlZm9yZSByZXF1aXJpbmcgZXM2LXByb21pc2Ugb3RoZXJ3aXNlIGVzNi1wcm9taXNlIHdvdWxkXG4vLyBvdmVyd3JpdGUgdGhlIG5hdGl2ZSBQcm9taXNlIGltcGxlbWVudGF0aW9uIG9uIHY4IGFuZCB0aGUgY2hlY2sgd291bGQgYWx3YXlzIHJldHVybiBmYWxzZS5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFrZWFyY2hpYmFsZC9lczYtcHJvbWlzZS9pc3N1ZXMvMTQwXG52YXIgaGFzTmF0aXZlUHJvbWlzZSA9IHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgUHJvbWlzZS50b1N0cmluZygpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcblxudmFyIGlzRmlyZWZveCA9IGdsb2JhbC5uYXZpZ2F0b3IgJiZcbiAgICBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSA+IC0xO1xuXG52YXIgcmVzb2x2ZWRQcm9taXNlO1xuXG4vLyBUT0RPKHZpY2IpOiByZW1vdmUgJyFpc0ZpcmVmb3gnIHdoZW4gdGhlIGJ1ZyBnZXRzIGZpeGVkOlxuLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTE2MjAxM1xuaWYgKGhhc05hdGl2ZVByb21pc2UgJiYgIWlzRmlyZWZveCkge1xuICAvLyBXaGVuIGF2YWlsYWJsZSB1c2UgYSBuYXRpdmUgUHJvbWlzZSB0byBzY2hlZHVsZSBtaWNyb3Rhc2tzLlxuICAvLyBXaGVuIG5vdCBhdmFpbGFibGUsIGVzNi1wcm9taXNlIGZhbGxiYWNrIHdpbGwgYmUgdXNlZFxuICByZXNvbHZlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxudmFyIGVzNlByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG5cbmlmIChyZXNvbHZlZFByb21pc2UpIHtcbiAgZXM2UHJvbWlzZS5fc2V0U2NoZWR1bGVyKGZ1bmN0aW9uKGZuKSB7XG4gICAgcmVzb2x2ZWRQcm9taXNlLnRoZW4oZm4pO1xuICB9KTtcbn1cblxuLy8gZXM2LXByb21pc2UgYXNhcCBzaG91bGQgc2NoZWR1bGUgbWljcm90YXNrcyB2aWEgem9uZS5zY2hlZHVsZU1pY3JvdGFzayBzbyB0aGF0IGFueVxuLy8gdXNlciBkZWZpbmVkIGhvb2tzIGFyZSB0cmlnZ2VyZWRcbmVzNlByb21pc2UuX3NldEFzYXAoZnVuY3Rpb24oZm4sIGFyZykge1xuICBnbG9iYWwuem9uZS5zY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbigpIHtcbiAgICBmbihhcmcpO1xuICB9KTtcbn0pO1xuXG4vLyBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBzY2hlZHVsZU1pY3JvdGFzayB1c2UgdGhlIG9yaWdpbmFsIGVzNi1wcm9taXNlIGltcGxlbWVudGF0aW9uXG4vLyB0byBzY2hlZHVsZSBhIG1pY3JvdGFza1xuZnVuY3Rpb24gc2NoZWR1bGVNaWNyb3Rhc2soZm4pIHtcbiAgZXM2UHJvbWlzZS5fYXNhcCh0aGlzLmJpbmQoZm4pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZE1pY3JvdGFza1N1cHBvcnQoem9uZUNsYXNzKSB7XG4gIHpvbmVDbGFzcy5wcm90b3R5cGUuc2NoZWR1bGVNaWNyb3Rhc2sgPSBzY2hlZHVsZU1pY3JvdGFzaztcbiAgcmV0dXJuIHpvbmVDbGFzcztcbn1cbiJdfQ==
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/*!
		 * @overview es6-promise - a tiny implementation of Promises/A+.
		 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
		 * @license   Licensed under MIT license
		 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
		 * @version   3.0.2
		 */

		(function() {
		    "use strict";
		    function lib$es6$promise$utils$$objectOrFunction(x) {
		      return typeof x === 'function' || (typeof x === 'object' && x !== null);
		    }

		    function lib$es6$promise$utils$$isFunction(x) {
		      return typeof x === 'function';
		    }

		    function lib$es6$promise$utils$$isMaybeThenable(x) {
		      return typeof x === 'object' && x !== null;
		    }

		    var lib$es6$promise$utils$$_isArray;
		    if (!Array.isArray) {
		      lib$es6$promise$utils$$_isArray = function (x) {
		        return Object.prototype.toString.call(x) === '[object Array]';
		      };
		    } else {
		      lib$es6$promise$utils$$_isArray = Array.isArray;
		    }

		    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
		    var lib$es6$promise$asap$$len = 0;
		    var lib$es6$promise$asap$$toString = {}.toString;
		    var lib$es6$promise$asap$$vertxNext;
		    var lib$es6$promise$asap$$customSchedulerFn;

		    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
		      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
		      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
		      lib$es6$promise$asap$$len += 2;
		      if (lib$es6$promise$asap$$len === 2) {
		        // If len is 2, that means that we need to schedule an async flush.
		        // If additional callbacks are queued before the queue is flushed, they
		        // will be processed by this flush that we are scheduling.
		        if (lib$es6$promise$asap$$customSchedulerFn) {
		          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
		        } else {
		          lib$es6$promise$asap$$scheduleFlush();
		        }
		      }
		    }

		    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
		      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
		    }

		    function lib$es6$promise$asap$$setAsap(asapFn) {
		      lib$es6$promise$asap$$asap = asapFn;
		    }

		    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
		    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
		    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
		    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

		    // test for web worker but not in IE10
		    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
		      typeof importScripts !== 'undefined' &&
		      typeof MessageChannel !== 'undefined';

		    // node
		    function lib$es6$promise$asap$$useNextTick() {
		      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
		      // see https://github.com/cujojs/when/issues/410 for details
		      return function() {
		        process.nextTick(lib$es6$promise$asap$$flush);
		      };
		    }

		    // vertx
		    function lib$es6$promise$asap$$useVertxTimer() {
		      return function() {
		        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
		      };
		    }

		    function lib$es6$promise$asap$$useMutationObserver() {
		      var iterations = 0;
		      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
		      var node = document.createTextNode('');
		      observer.observe(node, { characterData: true });

		      return function() {
		        node.data = (iterations = ++iterations % 2);
		      };
		    }

		    // web worker
		    function lib$es6$promise$asap$$useMessageChannel() {
		      var channel = new MessageChannel();
		      channel.port1.onmessage = lib$es6$promise$asap$$flush;
		      return function () {
		        channel.port2.postMessage(0);
		      };
		    }

		    function lib$es6$promise$asap$$useSetTimeout() {
		      return function() {
		        setTimeout(lib$es6$promise$asap$$flush, 1);
		      };
		    }

		    var lib$es6$promise$asap$$queue = new Array(1000);
		    function lib$es6$promise$asap$$flush() {
		      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
		        var callback = lib$es6$promise$asap$$queue[i];
		        var arg = lib$es6$promise$asap$$queue[i+1];

		        callback(arg);

		        lib$es6$promise$asap$$queue[i] = undefined;
		        lib$es6$promise$asap$$queue[i+1] = undefined;
		      }

		      lib$es6$promise$asap$$len = 0;
		    }

		    function lib$es6$promise$asap$$attemptVertx() {
		      try {
		        var r = require;
		        var vertx = __webpack_require__(4);
		        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
		        return lib$es6$promise$asap$$useVertxTimer();
		      } catch(e) {
		        return lib$es6$promise$asap$$useSetTimeout();
		      }
		    }

		    var lib$es6$promise$asap$$scheduleFlush;
		    // Decide what async method to use to triggering processing of queued callbacks:
		    if (lib$es6$promise$asap$$isNode) {
		      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
		    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
		      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
		    } else if (lib$es6$promise$asap$$isWorker) {
		      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
		    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
		      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
		    } else {
		      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
		    }

		    function lib$es6$promise$$internal$$noop() {}

		    var lib$es6$promise$$internal$$PENDING   = void 0;
		    var lib$es6$promise$$internal$$FULFILLED = 1;
		    var lib$es6$promise$$internal$$REJECTED  = 2;

		    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

		    function lib$es6$promise$$internal$$selfFulfillment() {
		      return new TypeError("You cannot resolve a promise with itself");
		    }

		    function lib$es6$promise$$internal$$cannotReturnOwn() {
		      return new TypeError('A promises callback cannot return that same promise.');
		    }

		    function lib$es6$promise$$internal$$getThen(promise) {
		      try {
		        return promise.then;
		      } catch(error) {
		        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
		        return lib$es6$promise$$internal$$GET_THEN_ERROR;
		      }
		    }

		    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
		      try {
		        then.call(value, fulfillmentHandler, rejectionHandler);
		      } catch(e) {
		        return e;
		      }
		    }

		    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
		       lib$es6$promise$asap$$asap(function(promise) {
		        var sealed = false;
		        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
		          if (sealed) { return; }
		          sealed = true;
		          if (thenable !== value) {
		            lib$es6$promise$$internal$$resolve(promise, value);
		          } else {
		            lib$es6$promise$$internal$$fulfill(promise, value);
		          }
		        }, function(reason) {
		          if (sealed) { return; }
		          sealed = true;

		          lib$es6$promise$$internal$$reject(promise, reason);
		        }, 'Settle: ' + (promise._label || ' unknown promise'));

		        if (!sealed && error) {
		          sealed = true;
		          lib$es6$promise$$internal$$reject(promise, error);
		        }
		      }, promise);
		    }

		    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
		      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
		        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
		      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
		        lib$es6$promise$$internal$$reject(promise, thenable._result);
		      } else {
		        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
		          lib$es6$promise$$internal$$resolve(promise, value);
		        }, function(reason) {
		          lib$es6$promise$$internal$$reject(promise, reason);
		        });
		      }
		    }

		    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
		      if (maybeThenable.constructor === promise.constructor) {
		        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
		      } else {
		        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

		        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
		          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
		        } else if (then === undefined) {
		          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
		        } else if (lib$es6$promise$utils$$isFunction(then)) {
		          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
		        } else {
		          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
		        }
		      }
		    }

		    function lib$es6$promise$$internal$$resolve(promise, value) {
		      if (promise === value) {
		        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
		      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
		        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
		      } else {
		        lib$es6$promise$$internal$$fulfill(promise, value);
		      }
		    }

		    function lib$es6$promise$$internal$$publishRejection(promise) {
		      if (promise._onerror) {
		        promise._onerror(promise._result);
		      }

		      lib$es6$promise$$internal$$publish(promise);
		    }

		    function lib$es6$promise$$internal$$fulfill(promise, value) {
		      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

		      promise._result = value;
		      promise._state = lib$es6$promise$$internal$$FULFILLED;

		      if (promise._subscribers.length !== 0) {
		        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
		      }
		    }

		    function lib$es6$promise$$internal$$reject(promise, reason) {
		      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
		      promise._state = lib$es6$promise$$internal$$REJECTED;
		      promise._result = reason;

		      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
		    }

		    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
		      var subscribers = parent._subscribers;
		      var length = subscribers.length;

		      parent._onerror = null;

		      subscribers[length] = child;
		      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
		      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

		      if (length === 0 && parent._state) {
		        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
		      }
		    }

		    function lib$es6$promise$$internal$$publish(promise) {
		      var subscribers = promise._subscribers;
		      var settled = promise._state;

		      if (subscribers.length === 0) { return; }

		      var child, callback, detail = promise._result;

		      for (var i = 0; i < subscribers.length; i += 3) {
		        child = subscribers[i];
		        callback = subscribers[i + settled];

		        if (child) {
		          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
		        } else {
		          callback(detail);
		        }
		      }

		      promise._subscribers.length = 0;
		    }

		    function lib$es6$promise$$internal$$ErrorObject() {
		      this.error = null;
		    }

		    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

		    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
		      try {
		        return callback(detail);
		      } catch(e) {
		        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
		        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
		      }
		    }

		    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
		      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
		          value, error, succeeded, failed;

		      if (hasCallback) {
		        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

		        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
		          failed = true;
		          error = value.error;
		          value = null;
		        } else {
		          succeeded = true;
		        }

		        if (promise === value) {
		          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
		          return;
		        }

		      } else {
		        value = detail;
		        succeeded = true;
		      }

		      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
		        // noop
		      } else if (hasCallback && succeeded) {
		        lib$es6$promise$$internal$$resolve(promise, value);
		      } else if (failed) {
		        lib$es6$promise$$internal$$reject(promise, error);
		      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
		        lib$es6$promise$$internal$$fulfill(promise, value);
		      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
		        lib$es6$promise$$internal$$reject(promise, value);
		      }
		    }

		    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
		      try {
		        resolver(function resolvePromise(value){
		          lib$es6$promise$$internal$$resolve(promise, value);
		        }, function rejectPromise(reason) {
		          lib$es6$promise$$internal$$reject(promise, reason);
		        });
		      } catch(e) {
		        lib$es6$promise$$internal$$reject(promise, e);
		      }
		    }

		    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
		      var enumerator = this;

		      enumerator._instanceConstructor = Constructor;
		      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

		      if (enumerator._validateInput(input)) {
		        enumerator._input     = input;
		        enumerator.length     = input.length;
		        enumerator._remaining = input.length;

		        enumerator._init();

		        if (enumerator.length === 0) {
		          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
		        } else {
		          enumerator.length = enumerator.length || 0;
		          enumerator._enumerate();
		          if (enumerator._remaining === 0) {
		            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
		          }
		        }
		      } else {
		        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
		      }
		    }

		    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
		      return lib$es6$promise$utils$$isArray(input);
		    };

		    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
		      return new Error('Array Methods must be provided an Array');
		    };

		    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
		      this._result = new Array(this.length);
		    };

		    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

		    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
		      var enumerator = this;

		      var length  = enumerator.length;
		      var promise = enumerator.promise;
		      var input   = enumerator._input;

		      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
		        enumerator._eachEntry(input[i], i);
		      }
		    };

		    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
		      var enumerator = this;
		      var c = enumerator._instanceConstructor;

		      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
		        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
		          entry._onerror = null;
		          enumerator._settledAt(entry._state, i, entry._result);
		        } else {
		          enumerator._willSettleAt(c.resolve(entry), i);
		        }
		      } else {
		        enumerator._remaining--;
		        enumerator._result[i] = entry;
		      }
		    };

		    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
		      var enumerator = this;
		      var promise = enumerator.promise;

		      if (promise._state === lib$es6$promise$$internal$$PENDING) {
		        enumerator._remaining--;

		        if (state === lib$es6$promise$$internal$$REJECTED) {
		          lib$es6$promise$$internal$$reject(promise, value);
		        } else {
		          enumerator._result[i] = value;
		        }
		      }

		      if (enumerator._remaining === 0) {
		        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
		      }
		    };

		    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
		      var enumerator = this;

		      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
		        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
		      }, function(reason) {
		        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
		      });
		    };
		    function lib$es6$promise$promise$all$$all(entries) {
		      return new lib$es6$promise$enumerator$$default(this, entries).promise;
		    }
		    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
		    function lib$es6$promise$promise$race$$race(entries) {
		      /*jshint validthis:true */
		      var Constructor = this;

		      var promise = new Constructor(lib$es6$promise$$internal$$noop);

		      if (!lib$es6$promise$utils$$isArray(entries)) {
		        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
		        return promise;
		      }

		      var length = entries.length;

		      function onFulfillment(value) {
		        lib$es6$promise$$internal$$resolve(promise, value);
		      }

		      function onRejection(reason) {
		        lib$es6$promise$$internal$$reject(promise, reason);
		      }

		      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
		        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
		      }

		      return promise;
		    }
		    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
		    function lib$es6$promise$promise$resolve$$resolve(object) {
		      /*jshint validthis:true */
		      var Constructor = this;

		      if (object && typeof object === 'object' && object.constructor === Constructor) {
		        return object;
		      }

		      var promise = new Constructor(lib$es6$promise$$internal$$noop);
		      lib$es6$promise$$internal$$resolve(promise, object);
		      return promise;
		    }
		    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
		    function lib$es6$promise$promise$reject$$reject(reason) {
		      /*jshint validthis:true */
		      var Constructor = this;
		      var promise = new Constructor(lib$es6$promise$$internal$$noop);
		      lib$es6$promise$$internal$$reject(promise, reason);
		      return promise;
		    }
		    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

		    var lib$es6$promise$promise$$counter = 0;

		    function lib$es6$promise$promise$$needsResolver() {
		      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
		    }

		    function lib$es6$promise$promise$$needsNew() {
		      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
		    }

		    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
		    /**
		      Promise objects represent the eventual result of an asynchronous operation. The
		      primary way of interacting with a promise is through its `then` method, which
		      registers callbacks to receive either a promise's eventual value or the reason
		      why the promise cannot be fulfilled.

		      Terminology
		      -----------

		      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
		      - `thenable` is an object or function that defines a `then` method.
		      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
		      - `exception` is a value that is thrown using the throw statement.
		      - `reason` is a value that indicates why a promise was rejected.
		      - `settled` the final resting state of a promise, fulfilled or rejected.

		      A promise can be in one of three states: pending, fulfilled, or rejected.

		      Promises that are fulfilled have a fulfillment value and are in the fulfilled
		      state.  Promises that are rejected have a rejection reason and are in the
		      rejected state.  A fulfillment value is never a thenable.

		      Promises can also be said to *resolve* a value.  If this value is also a
		      promise, then the original promise's settled state will match the value's
		      settled state.  So a promise that *resolves* a promise that rejects will
		      itself reject, and a promise that *resolves* a promise that fulfills will
		      itself fulfill.


		      Basic Usage:
		      ------------

		      ```js
		      var promise = new Promise(function(resolve, reject) {
		        // on success
		        resolve(value);

		        // on failure
		        reject(reason);
		      });

		      promise.then(function(value) {
		        // on fulfillment
		      }, function(reason) {
		        // on rejection
		      });
		      ```

		      Advanced Usage:
		      ---------------

		      Promises shine when abstracting away asynchronous interactions such as
		      `XMLHttpRequest`s.

		      ```js
		      function getJSON(url) {
		        return new Promise(function(resolve, reject){
		          var xhr = new XMLHttpRequest();

		          xhr.open('GET', url);
		          xhr.onreadystatechange = handler;
		          xhr.responseType = 'json';
		          xhr.setRequestHeader('Accept', 'application/json');
		          xhr.send();

		          function handler() {
		            if (this.readyState === this.DONE) {
		              if (this.status === 200) {
		                resolve(this.response);
		              } else {
		                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
		              }
		            }
		          };
		        });
		      }

		      getJSON('/posts.json').then(function(json) {
		        // on fulfillment
		      }, function(reason) {
		        // on rejection
		      });
		      ```

		      Unlike callbacks, promises are great composable primitives.

		      ```js
		      Promise.all([
		        getJSON('/posts'),
		        getJSON('/comments')
		      ]).then(function(values){
		        values[0] // => postsJSON
		        values[1] // => commentsJSON

		        return values;
		      });
		      ```

		      @class Promise
		      @param {function} resolver
		      Useful for tooling.
		      @constructor
		    */
		    function lib$es6$promise$promise$$Promise(resolver) {
		      this._id = lib$es6$promise$promise$$counter++;
		      this._state = undefined;
		      this._result = undefined;
		      this._subscribers = [];

		      if (lib$es6$promise$$internal$$noop !== resolver) {
		        if (!lib$es6$promise$utils$$isFunction(resolver)) {
		          lib$es6$promise$promise$$needsResolver();
		        }

		        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
		          lib$es6$promise$promise$$needsNew();
		        }

		        lib$es6$promise$$internal$$initializePromise(this, resolver);
		      }
		    }

		    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
		    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
		    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
		    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
		    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
		    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
		    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

		    lib$es6$promise$promise$$Promise.prototype = {
		      constructor: lib$es6$promise$promise$$Promise,

		    /**
		      The primary way of interacting with a promise is through its `then` method,
		      which registers callbacks to receive either a promise's eventual value or the
		      reason why the promise cannot be fulfilled.

		      ```js
		      findUser().then(function(user){
		        // user is available
		      }, function(reason){
		        // user is unavailable, and you are given the reason why
		      });
		      ```

		      Chaining
		      --------

		      The return value of `then` is itself a promise.  This second, 'downstream'
		      promise is resolved with the return value of the first promise's fulfillment
		      or rejection handler, or rejected if the handler throws an exception.

		      ```js
		      findUser().then(function (user) {
		        return user.name;
		      }, function (reason) {
		        return 'default name';
		      }).then(function (userName) {
		        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
		        // will be `'default name'`
		      });

		      findUser().then(function (user) {
		        throw new Error('Found user, but still unhappy');
		      }, function (reason) {
		        throw new Error('`findUser` rejected and we're unhappy');
		      }).then(function (value) {
		        // never reached
		      }, function (reason) {
		        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
		        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
		      });
		      ```
		      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

		      ```js
		      findUser().then(function (user) {
		        throw new PedagogicalException('Upstream error');
		      }).then(function (value) {
		        // never reached
		      }).then(function (value) {
		        // never reached
		      }, function (reason) {
		        // The `PedgagocialException` is propagated all the way down to here
		      });
		      ```

		      Assimilation
		      ------------

		      Sometimes the value you want to propagate to a downstream promise can only be
		      retrieved asynchronously. This can be achieved by returning a promise in the
		      fulfillment or rejection handler. The downstream promise will then be pending
		      until the returned promise is settled. This is called *assimilation*.

		      ```js
		      findUser().then(function (user) {
		        return findCommentsByAuthor(user);
		      }).then(function (comments) {
		        // The user's comments are now available
		      });
		      ```

		      If the assimliated promise rejects, then the downstream promise will also reject.

		      ```js
		      findUser().then(function (user) {
		        return findCommentsByAuthor(user);
		      }).then(function (comments) {
		        // If `findCommentsByAuthor` fulfills, we'll have the value here
		      }, function (reason) {
		        // If `findCommentsByAuthor` rejects, we'll have the reason here
		      });
		      ```

		      Simple Example
		      --------------

		      Synchronous Example

		      ```javascript
		      var result;

		      try {
		        result = findResult();
		        // success
		      } catch(reason) {
		        // failure
		      }
		      ```

		      Errback Example

		      ```js
		      findResult(function(result, err){
		        if (err) {
		          // failure
		        } else {
		          // success
		        }
		      });
		      ```

		      Promise Example;

		      ```javascript
		      findResult().then(function(result){
		        // success
		      }, function(reason){
		        // failure
		      });
		      ```

		      Advanced Example
		      --------------

		      Synchronous Example

		      ```javascript
		      var author, books;

		      try {
		        author = findAuthor();
		        books  = findBooksByAuthor(author);
		        // success
		      } catch(reason) {
		        // failure
		      }
		      ```

		      Errback Example

		      ```js

		      function foundBooks(books) {

		      }

		      function failure(reason) {

		      }

		      findAuthor(function(author, err){
		        if (err) {
		          failure(err);
		          // failure
		        } else {
		          try {
		            findBoooksByAuthor(author, function(books, err) {
		              if (err) {
		                failure(err);
		              } else {
		                try {
		                  foundBooks(books);
		                } catch(reason) {
		                  failure(reason);
		                }
		              }
		            });
		          } catch(error) {
		            failure(err);
		          }
		          // success
		        }
		      });
		      ```

		      Promise Example;

		      ```javascript
		      findAuthor().
		        then(findBooksByAuthor).
		        then(function(books){
		          // found books
		      }).catch(function(reason){
		        // something went wrong
		      });
		      ```

		      @method then
		      @param {Function} onFulfilled
		      @param {Function} onRejected
		      Useful for tooling.
		      @return {Promise}
		    */
		      then: function(onFulfillment, onRejection) {
		        var parent = this;
		        var state = parent._state;

		        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
		          return this;
		        }

		        var child = new this.constructor(lib$es6$promise$$internal$$noop);
		        var result = parent._result;

		        if (state) {
		          var callback = arguments[state - 1];
		          lib$es6$promise$asap$$asap(function(){
		            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
		          });
		        } else {
		          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
		        }

		        return child;
		      },

		    /**
		      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
		      as the catch block of a try/catch statement.

		      ```js
		      function findAuthor(){
		        throw new Error('couldn't find that author');
		      }

		      // synchronous
		      try {
		        findAuthor();
		      } catch(reason) {
		        // something went wrong
		      }

		      // async with promises
		      findAuthor().catch(function(reason){
		        // something went wrong
		      });
		      ```

		      @method catch
		      @param {Function} onRejection
		      Useful for tooling.
		      @return {Promise}
		    */
		      'catch': function(onRejection) {
		        return this.then(null, onRejection);
		      }
		    };
		    function lib$es6$promise$polyfill$$polyfill() {
		      var local;

		      if (typeof global !== 'undefined') {
		          local = global;
		      } else if (typeof self !== 'undefined') {
		          local = self;
		      } else {
		          try {
		              local = Function('return this')();
		          } catch (e) {
		              throw new Error('polyfill failed because global object is unavailable in this environment');
		          }
		      }

		      var P = local.Promise;

		      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
		        return;
		      }

		      local.Promise = lib$es6$promise$promise$$default;
		    }
		    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

		    var lib$es6$promise$umd$$ES6Promise = {
		      'Promise': lib$es6$promise$promise$$default,
		      'polyfill': lib$es6$promise$polyfill$$default
		    };

		    /* global define:true module:true window: true */
		    if ("function" === 'function' && __webpack_require__(5)['amd']) {
		      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		    } else if (typeof module !== 'undefined' && module['exports']) {
		      module['exports'] = lib$es6$promise$umd$$ES6Promise;
		    } else if (typeof this !== 'undefined') {
		      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
		    }

		    lib$es6$promise$polyfill$$default();
		}).call(this);


		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)(module)))

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		module.exports = function(module) {
			if(!module.webpackPolyfill) {
				module.deprecate = function() {};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		}


	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		/* (ignored) */

	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		module.exports = function() { throw new Error("define cannot be used indirect"); };


	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var keys = __webpack_require__(7);
		var promise = __webpack_require__(8);
		var deprecated = {};
		function deprecatedWarning(key, text) {
		    if (!deprecated.hasOwnProperty(key)) {
		        deprecated[key] = true;
		        console.warn("DEPRECATION WARNING: '" + key +
		            "' is no longer supported and will be removed in next major release. " + text);
		    }
		}
		var Zone = (function () {
		    function Zone(parentZone, data) {
		        this.parent = null;
		        // onError is used to override error handling.
		        // When a custom error handler is provided, it should most probably rethrow the exception
		        // not to break the expected control flow:
		        //
		        // `promise.then(fnThatThrows).catch(fn);`
		        //
		        // When this code is executed in a zone with a custom onError handler that doesn't rethrow, the
		        // `.catch()` branch will not be taken as the `fnThatThrows` exception will be swallowed by the
		        // handler.
		        this.onError = null;
		        var zone = (arguments.length) ? Object.create(parentZone) : this;
		        zone.parent = parentZone || null;
		        Object.keys(data || {}).forEach(function (property) {
		            var _property = property.substr(1);
		            // augment the new zone with a hook decorates the parent's hook
		            if (property[0] === '$') {
		                zone[_property] = data[property](parentZone[_property] || function () { });
		            }
		            else if (property[0] === '+') {
		                if (parentZone[_property]) {
		                    zone[_property] = function () {
		                        var result = parentZone[_property].apply(this, arguments);
		                        data[property].apply(this, arguments);
		                        return result;
		                    };
		                }
		                else {
		                    zone[_property] = data[property];
		                }
		            }
		            else if (property[0] === '-') {
		                if (parentZone[_property]) {
		                    zone[_property] = function () {
		                        data[property].apply(this, arguments);
		                        return parentZone[_property].apply(this, arguments);
		                    };
		                }
		                else {
		                    zone[_property] = data[property];
		                }
		            }
		            else {
		                zone[property] = (typeof data[property] === 'object') ?
		                    JSON.parse(JSON.stringify(data[property])) :
		                    data[property];
		            }
		        });
		        zone.$id = Zone.nextId++;
		        return zone;
		    }
		    Zone.prototype.fork = function (locals) {
		        this.onZoneCreated();
		        return new Zone(this, locals);
		    };
		    Zone.prototype.bind = function (fn, skipEnqueue) {
		        if (typeof fn !== 'function') {
		            throw new Error('Expecting function got: ' + fn);
		        }
		        skipEnqueue || this.enqueueTask(fn);
		        var zone = this.isRootZone() ? this : this.fork();
		        return function zoneBoundFn() {
		            return zone.run(fn, this, arguments);
		        };
		    };
		    /// @deprecated
		    Zone.prototype.bindOnce = function (fn) {
		        deprecatedWarning('bindOnce', 'There is no replacement.');
		        var boundZone = this;
		        return this.bind(function () {
		            var result = fn.apply(this, arguments);
		            boundZone.dequeueTask(fn);
		            return result;
		        });
		    };
		    Zone.prototype.isRootZone = function () {
		        return this.parent === null;
		    };
		    Zone.prototype.run = function (fn, applyTo, applyWith) {
		        applyWith = applyWith || [];
		        var oldZone = global.zone;
		        // MAKE THIS ZONE THE CURRENT ZONE
		        global.zone = this;
		        try {
		            this.beforeTask();
		            return fn.apply(applyTo, applyWith);
		        }
		        catch (e) {
		            if (this.onError) {
		                this.onError(e);
		            }
		            else {
		                throw e;
		            }
		        }
		        finally {
		            this.afterTask();
		            // REVERT THE CURRENT ZONE BACK TO THE ORIGINAL ZONE
		            global.zone = oldZone;
		        }
		    };
		    Zone.prototype.beforeTask = function () { };
		    Zone.prototype.onZoneCreated = function () { };
		    Zone.prototype.afterTask = function () { };
		    Zone.prototype.enqueueTask = function (fn) {
		        deprecatedWarning('enqueueTask', 'Use addTask/addRepeatingTask/addMicroTask');
		    };
		    Zone.prototype.dequeueTask = function (fn) {
		        deprecatedWarning('dequeueTask', 'Use removeTask/removeRepeatingTask/removeMicroTask');
		    };
		    Zone.prototype.addTask = function (taskFn) { this.enqueueTask(taskFn); };
		    Zone.prototype.removeTask = function (taskFn) { this.dequeueTask(taskFn); };
		    Zone.prototype.addRepeatingTask = function (taskFn) { this.enqueueTask(taskFn); };
		    Zone.prototype.removeRepeatingTask = function (taskFn) { this.dequeueTask(taskFn); };
		    Zone.prototype.addMicrotask = function (taskFn) { this.enqueueTask(taskFn); };
		    Zone.prototype.removeMicrotask = function (taskFn) { this.dequeueTask(taskFn); };
		    Zone.prototype.addEventListener = function () {
		        return this[keys.common.addEventListener].apply(this, arguments);
		    };
		    Zone.prototype.removeEventListener = function () {
		        return this[keys.common.removeEventListener].apply(this, arguments);
		    };
		    // Root zone ID === 1
		    Zone.nextId = 1;
		    Zone.bindPromiseFn = promise.bindPromiseFn;
		    return Zone;
		})();
		exports.Zone = Zone;
		;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb3JlLnRzIl0sIm5hbWVzIjpbImRlcHJlY2F0ZWRXYXJuaW5nIiwiWm9uZSIsIlpvbmUuY29uc3RydWN0b3IiLCJab25lLmZvcmsiLCJab25lLmJpbmQiLCJab25lLmJpbmQuem9uZUJvdW5kRm4iLCJab25lLmJpbmRPbmNlIiwiWm9uZS5pc1Jvb3Rab25lIiwiWm9uZS5ydW4iLCJab25lLmJlZm9yZVRhc2siLCJab25lLm9uWm9uZUNyZWF0ZWQiLCJab25lLmFmdGVyVGFzayIsIlpvbmUuZW5xdWV1ZVRhc2siLCJab25lLmRlcXVldWVUYXNrIiwiWm9uZS5hZGRUYXNrIiwiWm9uZS5yZW1vdmVUYXNrIiwiWm9uZS5hZGRSZXBlYXRpbmdUYXNrIiwiWm9uZS5yZW1vdmVSZXBlYXRpbmdUYXNrIiwiWm9uZS5hZGRNaWNyb3Rhc2siLCJab25lLnJlbW92ZU1pY3JvdGFzayIsIlpvbmUuYWRkRXZlbnRMaXN0ZW5lciIsIlpvbmUucmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxJQUFJLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFDL0IsSUFBWSxPQUFPLFdBQU0saUJBQWlCLENBQUMsQ0FBQTtBQUUzQyxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFFcEIsMkJBQTJCLEdBQUcsRUFBRSxJQUFJO0lBQ2xDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDdkJBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EsR0FBR0E7WUFDdkNBLHNFQUFzRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDckZBLENBQUNBO0FBQ0hBLENBQUNBO0FBRUQ7SUFRRUMsY0FBWUEsVUFBV0EsRUFBRUEsSUFBS0E7UUFGOUJDLFdBQU1BLEdBQVNBLElBQUlBLENBQUNBO1FBMEdwQkEsOENBQThDQTtRQUM5Q0EseUZBQXlGQTtRQUN6RkEsMENBQTBDQTtRQUMxQ0EsRUFBRUE7UUFDRkEsMENBQTBDQTtRQUMxQ0EsRUFBRUE7UUFDRkEsK0ZBQStGQTtRQUMvRkEsK0ZBQStGQTtRQUMvRkEsV0FBV0E7UUFDWEEsWUFBT0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFoSGJBLElBQUlBLElBQUlBLEdBQUdBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBRWpFQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxVQUFVQSxJQUFJQSxJQUFJQSxDQUFDQTtRQUVqQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBU0EsUUFBUUE7WUFFL0MsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVuQywrREFBK0Q7WUFDL0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGNBQWEsQ0FBQyxDQUFDLENBQUM7WUFHNUUsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHO3dCQUNoQixJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQzt3QkFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7d0JBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUM7b0JBQ2hCLENBQUMsQ0FBQztnQkFDSixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ25DLENBQUM7WUFHSCxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUc7d0JBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO3dCQUN0QyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7b0JBQ3RELENBQUMsQ0FBQztnQkFDSixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ25DLENBQUM7WUFHSCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssUUFBUSxDQUFDO29CQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQyxDQUFDO1FBQ0gsQ0FBQyxDQUFDQSxDQUFDQTtRQUVIQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFTQSxJQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUVoQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFFREQsbUJBQUlBLEdBQUpBLFVBQUtBLE1BQU9BO1FBQ1ZFLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO1FBQ3JCQSxNQUFNQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFREYsbUJBQUlBLEdBQUpBLFVBQUtBLEVBQUVBLEVBQUVBLFdBQVlBO1FBQ25CRyxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxLQUFLQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3QkEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUNuREEsQ0FBQ0E7UUFDREEsV0FBV0EsSUFBSUEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDcENBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2xEQSxNQUFNQSxDQUFDQTtZQUNMQyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxFQUFFQSxJQUFJQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUN2Q0EsQ0FBQ0EsQ0FBQ0Q7SUFDSkEsQ0FBQ0E7SUFFREgsZUFBZUE7SUFDZkEsdUJBQVFBLEdBQVJBLFVBQVNBLEVBQUVBO1FBQ1RLLGlCQUFpQkEsQ0FBQ0EsVUFBVUEsRUFBRUEsMEJBQTBCQSxDQUFDQSxDQUFDQTtRQUMxREEsSUFBSUEsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDckJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO1lBQ2YsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDdkMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFREwseUJBQVVBLEdBQVZBO1FBQ0VNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLElBQUlBLENBQUNBO0lBQzlCQSxDQUFDQTtJQUVETixrQkFBR0EsR0FBSEEsVUFBSUEsRUFBRUEsRUFBRUEsT0FBUUEsRUFBRUEsU0FBVUE7UUFDMUJPLFNBQVNBLEdBQUdBLFNBQVNBLElBQUlBLEVBQUVBLENBQUNBO1FBRTVCQSxJQUFJQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUUxQkEsa0NBQWtDQTtRQUNsQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFbkJBLElBQUlBLENBQUNBO1lBQ0hBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBO1lBQ2xCQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUN0Q0EsQ0FBRUE7UUFBQUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQkEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ05BLE1BQU1BLENBQUNBLENBQUNBO1lBQ1ZBLENBQUNBO1FBQ0hBLENBQUNBO2dCQUFTQSxDQUFDQTtZQUNUQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUNqQkEsb0RBQW9EQTtZQUNwREEsTUFBTUEsQ0FBQ0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFDeEJBLENBQUNBO0lBQ0hBLENBQUNBO0lBWURQLHlCQUFVQSxHQUFWQSxjQUFjUSxDQUFDQTtJQUNmUiw0QkFBYUEsR0FBYkEsY0FBaUJTLENBQUNBO0lBQ2xCVCx3QkFBU0EsR0FBVEEsY0FBYVUsQ0FBQ0E7SUFFZFYsMEJBQVdBLEdBQVhBLFVBQVlBLEVBQVlBO1FBQ3RCVyxpQkFBaUJBLENBQUNBLGFBQWFBLEVBQUVBLDJDQUEyQ0EsQ0FBQ0EsQ0FBQ0E7SUFDaEZBLENBQUNBO0lBQ0RYLDBCQUFXQSxHQUFYQSxVQUFZQSxFQUFZQTtRQUN0QlksaUJBQWlCQSxDQUFDQSxhQUFhQSxFQUFFQSxvREFBb0RBLENBQUNBLENBQUNBO0lBQ3pGQSxDQUFDQTtJQUVEWixzQkFBT0EsR0FBUEEsVUFBUUEsTUFBTUEsSUFBSWEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDN0NiLHlCQUFVQSxHQUFWQSxVQUFXQSxNQUFNQSxJQUFJYyxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVoRGQsK0JBQWdCQSxHQUFoQkEsVUFBaUJBLE1BQU1BLElBQUllLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQ3REZixrQ0FBbUJBLEdBQW5CQSxVQUFvQkEsTUFBTUEsSUFBSWdCLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRXpEaEIsMkJBQVlBLEdBQVpBLFVBQWFBLE1BQU1BLElBQUlpQixJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNsRGpCLDhCQUFlQSxHQUFmQSxVQUFnQkEsTUFBTUEsSUFBSWtCLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRXJEbEIsK0JBQWdCQSxHQUFoQkE7UUFDRW1CLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFDbkVBLENBQUNBO0lBRURuQixrQ0FBbUJBLEdBQW5CQTtRQUNFb0IsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUN0RUEsQ0FBQ0E7SUFuSkRwQixxQkFBcUJBO0lBQ2RBLFdBQU1BLEdBQUdBLENBQUNBLENBQUNBO0lBQ1hBLGtCQUFhQSxHQUFHQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQTtJQWtKL0NBLFdBQUNBO0FBQURBLENBQUNBLEFBckpELElBcUpDO0FBckpZLFlBQUksT0FxSmhCLENBQUE7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMga2V5cyBmcm9tICcuL2tleXMnO1xuaW1wb3J0ICogYXMgcHJvbWlzZSBmcm9tICcuL3BhdGNoL3Byb21pc2UnO1xuXG52YXIgZGVwcmVjYXRlZCA9IHt9O1xuXG5mdW5jdGlvbiBkZXByZWNhdGVkV2FybmluZyhrZXksIHRleHQpIHtcbiAgaWYgKCFkZXByZWNhdGVkLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICBkZXByZWNhdGVkW2tleV0gPSB0cnVlO1xuICAgIGNvbnNvbGUud2FybihcIkRFUFJFQ0FUSU9OIFdBUk5JTkc6ICdcIiArIGtleSArXG4gICAgICAgIFwiJyBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlLiBcIiArIHRleHQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBab25lIHtcbiAgLy8gUm9vdCB6b25lIElEID09PSAxXG4gIHN0YXRpYyBuZXh0SWQgPSAxO1xuICBzdGF0aWMgYmluZFByb21pc2VGbiA9IHByb21pc2UuYmluZFByb21pc2VGbjtcblxuXG4gIHBhcmVudDogWm9uZSA9IG51bGw7XG4gICRpZDogbnVtYmVyO1xuICBjb25zdHJ1Y3RvcihwYXJlbnRab25lPywgZGF0YT8pIHtcbiAgICB2YXIgem9uZSA9IChhcmd1bWVudHMubGVuZ3RoKSA/IE9iamVjdC5jcmVhdGUocGFyZW50Wm9uZSkgOiB0aGlzO1xuXG4gICAgem9uZS5wYXJlbnQgPSBwYXJlbnRab25lIHx8IG51bGw7XG5cbiAgICBPYmplY3Qua2V5cyhkYXRhIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG5cbiAgICAgIHZhciBfcHJvcGVydHkgPSBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgICAgIC8vIGF1Z21lbnQgdGhlIG5ldyB6b25lIHdpdGggYSBob29rIGRlY29yYXRlcyB0aGUgcGFyZW50J3MgaG9va1xuICAgICAgaWYgKHByb3BlcnR5WzBdID09PSAnJCcpIHtcbiAgICAgICAgem9uZVtfcHJvcGVydHldID0gZGF0YVtwcm9wZXJ0eV0ocGFyZW50Wm9uZVtfcHJvcGVydHldIHx8IGZ1bmN0aW9uICgpIHt9KTtcblxuICAgICAgLy8gYXVnbWVudCB0aGUgbmV3IHpvbmUgd2l0aCBhIGhvb2sgdGhhdCBydW5zIGFmdGVyIHRoZSBwYXJlbnQncyBob29rXG4gICAgICB9IGVsc2UgaWYgKHByb3BlcnR5WzBdID09PSAnKycpIHtcbiAgICAgICAgaWYgKHBhcmVudFpvbmVbX3Byb3BlcnR5XSkge1xuICAgICAgICAgIHpvbmVbX3Byb3BlcnR5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJlbnRab25lW19wcm9wZXJ0eV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGRhdGFbcHJvcGVydHldLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgem9uZVtfcHJvcGVydHldID0gZGF0YVtwcm9wZXJ0eV07XG4gICAgICAgIH1cblxuICAgICAgLy8gYXVnbWVudCB0aGUgbmV3IHpvbmUgd2l0aCBhIGhvb2sgdGhhdCBydW5zIGJlZm9yZSB0aGUgcGFyZW50J3MgaG9va1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eVswXSA9PT0gJy0nKSB7XG4gICAgICAgIGlmIChwYXJlbnRab25lW19wcm9wZXJ0eV0pIHtcbiAgICAgICAgICB6b25lW19wcm9wZXJ0eV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkYXRhW3Byb3BlcnR5XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFpvbmVbX3Byb3BlcnR5XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgem9uZVtfcHJvcGVydHldID0gZGF0YVtwcm9wZXJ0eV07XG4gICAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSBuZXcgem9uZSdzIGhvb2sgKHJlcGxhY2luZyB0aGUgcGFyZW50IHpvbmUncylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHpvbmVbcHJvcGVydHldID0gKHR5cGVvZiBkYXRhW3Byb3BlcnR5XSA9PT0gJ29iamVjdCcpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhW3Byb3BlcnR5XSkpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB6b25lLiRpZCA9ICg8YW55PlpvbmUpLm5leHRJZCsrO1xuXG4gICAgcmV0dXJuIHpvbmU7XG4gIH1cblxuICBmb3JrKGxvY2Fscz8pIHtcbiAgICB0aGlzLm9uWm9uZUNyZWF0ZWQoKTtcbiAgICByZXR1cm4gbmV3IFpvbmUodGhpcywgbG9jYWxzKTtcbiAgfVxuXG4gIGJpbmQoZm4sIHNraXBFbnF1ZXVlPykge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIGZ1bmN0aW9uIGdvdDogJyArIGZuKTtcbiAgICB9XG4gICAgc2tpcEVucXVldWUgfHwgdGhpcy5lbnF1ZXVlVGFzayhmbik7XG4gICAgdmFyIHpvbmUgPSB0aGlzLmlzUm9vdFpvbmUoKSA/IHRoaXMgOiB0aGlzLmZvcmsoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gem9uZUJvdW5kRm4oKSB7XG4gICAgICByZXR1cm4gem9uZS5ydW4oZm4sIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vLyBAZGVwcmVjYXRlZFxuICBiaW5kT25jZShmbikge1xuICAgIGRlcHJlY2F0ZWRXYXJuaW5nKCdiaW5kT25jZScsICdUaGVyZSBpcyBubyByZXBsYWNlbWVudC4nKTtcbiAgICB2YXIgYm91bmRab25lID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy5iaW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgYm91bmRab25lLmRlcXVldWVUYXNrKGZuKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBpc1Jvb3Rab25lKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA9PT0gbnVsbDtcbiAgfVxuXG4gIHJ1bihmbiwgYXBwbHlUbz8sIGFwcGx5V2l0aD8pIHtcbiAgICBhcHBseVdpdGggPSBhcHBseVdpdGggfHwgW107XG5cbiAgICB2YXIgb2xkWm9uZSA9IGdsb2JhbC56b25lO1xuXG4gICAgLy8gTUFLRSBUSElTIFpPTkUgVEhFIENVUlJFTlQgWk9ORVxuICAgIGdsb2JhbC56b25lID0gdGhpcztcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmJlZm9yZVRhc2soKTtcbiAgICAgIHJldHVybiBmbi5hcHBseShhcHBseVRvLCBhcHBseVdpdGgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICh0aGlzLm9uRXJyb3IpIHtcbiAgICAgICAgdGhpcy5vbkVycm9yKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5hZnRlclRhc2soKTtcbiAgICAgIC8vIFJFVkVSVCBUSEUgQ1VSUkVOVCBaT05FIEJBQ0sgVE8gVEhFIE9SSUdJTkFMIFpPTkVcbiAgICAgIGdsb2JhbC56b25lID0gb2xkWm9uZTtcbiAgICB9XG4gIH1cblxuICAvLyBvbkVycm9yIGlzIHVzZWQgdG8gb3ZlcnJpZGUgZXJyb3IgaGFuZGxpbmcuXG4gIC8vIFdoZW4gYSBjdXN0b20gZXJyb3IgaGFuZGxlciBpcyBwcm92aWRlZCwgaXQgc2hvdWxkIG1vc3QgcHJvYmFibHkgcmV0aHJvdyB0aGUgZXhjZXB0aW9uXG4gIC8vIG5vdCB0byBicmVhayB0aGUgZXhwZWN0ZWQgY29udHJvbCBmbG93OlxuICAvL1xuICAvLyBgcHJvbWlzZS50aGVuKGZuVGhhdFRocm93cykuY2F0Y2goZm4pO2BcbiAgLy9cbiAgLy8gV2hlbiB0aGlzIGNvZGUgaXMgZXhlY3V0ZWQgaW4gYSB6b25lIHdpdGggYSBjdXN0b20gb25FcnJvciBoYW5kbGVyIHRoYXQgZG9lc24ndCByZXRocm93LCB0aGVcbiAgLy8gYC5jYXRjaCgpYCBicmFuY2ggd2lsbCBub3QgYmUgdGFrZW4gYXMgdGhlIGBmblRoYXRUaHJvd3NgIGV4Y2VwdGlvbiB3aWxsIGJlIHN3YWxsb3dlZCBieSB0aGVcbiAgLy8gaGFuZGxlci5cbiAgb25FcnJvciA9IG51bGw7XG4gIGJlZm9yZVRhc2soKSB7fVxuICBvblpvbmVDcmVhdGVkKCkge31cbiAgYWZ0ZXJUYXNrKCkge31cbiAgXG4gIGVucXVldWVUYXNrKGZuOiBGdW5jdGlvbikge1xuICAgIGRlcHJlY2F0ZWRXYXJuaW5nKCdlbnF1ZXVlVGFzaycsICdVc2UgYWRkVGFzay9hZGRSZXBlYXRpbmdUYXNrL2FkZE1pY3JvVGFzaycpO1xuICB9XG4gIGRlcXVldWVUYXNrKGZuOiBGdW5jdGlvbikge1xuICAgIGRlcHJlY2F0ZWRXYXJuaW5nKCdkZXF1ZXVlVGFzaycsICdVc2UgcmVtb3ZlVGFzay9yZW1vdmVSZXBlYXRpbmdUYXNrL3JlbW92ZU1pY3JvVGFzaycpO1xuICB9XG5cbiAgYWRkVGFzayh0YXNrRm4pIHsgdGhpcy5lbnF1ZXVlVGFzayh0YXNrRm4pOyB9XG4gIHJlbW92ZVRhc2sodGFza0ZuKSB7IHRoaXMuZGVxdWV1ZVRhc2sodGFza0ZuKTsgfVxuXG4gIGFkZFJlcGVhdGluZ1Rhc2sodGFza0ZuKSB7IHRoaXMuZW5xdWV1ZVRhc2sodGFza0ZuKTsgfVxuICByZW1vdmVSZXBlYXRpbmdUYXNrKHRhc2tGbikgeyB0aGlzLmRlcXVldWVUYXNrKHRhc2tGbik7IH1cblxuICBhZGRNaWNyb3Rhc2sodGFza0ZuKSB7IHRoaXMuZW5xdWV1ZVRhc2sodGFza0ZuKTsgfVxuICByZW1vdmVNaWNyb3Rhc2sodGFza0ZuKSB7IHRoaXMuZGVxdWV1ZVRhc2sodGFza0ZuKTsgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5cy5jb21tb24uYWRkRXZlbnRMaXN0ZW5lcl0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5cy5jb21tb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcl0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufTtcblxuIl19
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		/**
		 * Creates keys for `private` properties on exposed objects to minimize interactions with other codebases.
		 */
		function create(name) {
		    // `Symbol` implementation is broken in Chrome 39.0.2171, do not use them even if they are available
		    return '_zone$' + name;
		}
		exports.create = create;
		exports.common = {
		    addEventListener: create('addEventListener'),
		    removeEventListener: create('removeEventListener')
		};
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9rZXlzLnRzIl0sIm5hbWVzIjpbImNyZWF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxnQkFBdUIsSUFBSTtJQUN6QkEsb0dBQW9HQTtJQUNwR0EsTUFBTUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7QUFDekJBLENBQUNBO0FBSGUsY0FBTSxTQUdyQixDQUFBO0FBRVUsY0FBTSxHQUFHO0lBQ2xCLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztJQUM1QyxtQkFBbUIsRUFBRSxNQUFNLENBQUMscUJBQXFCLENBQUM7Q0FDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlcyBrZXlzIGZvciBgcHJpdmF0ZWAgcHJvcGVydGllcyBvbiBleHBvc2VkIG9iamVjdHMgdG8gbWluaW1pemUgaW50ZXJhY3Rpb25zIHdpdGggb3RoZXIgY29kZWJhc2VzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUobmFtZSkge1xuICAvLyBgU3ltYm9sYCBpbXBsZW1lbnRhdGlvbiBpcyBicm9rZW4gaW4gQ2hyb21lIDM5LjAuMjE3MSwgZG8gbm90IHVzZSB0aGVtIGV2ZW4gaWYgdGhleSBhcmUgYXZhaWxhYmxlXG4gIHJldHVybiAnX3pvbmUkJyArIG5hbWU7XG59XG5cbmV4cG9ydCB2YXIgY29tbW9uID0ge1xuICBhZGRFdmVudExpc3RlbmVyOiBjcmVhdGUoJ2FkZEV2ZW50TGlzdGVuZXInKSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogY3JlYXRlKCdyZW1vdmVFdmVudExpc3RlbmVyJylcbn07XG4iXX0=

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var utils = __webpack_require__(9);
		if (global.Promise) {
		    exports.bindPromiseFn = function (delegate) {
		        return function () {
		            var delegatePromise = delegate.apply(this, arguments);
		            // if the delegate returned an instance of Promise, forward it.
		            if (delegatePromise instanceof Promise) {
		                return delegatePromise;
		            }
		            // Otherwise wrap the Promise-like in a global Promise
		            return new Promise(function (resolve, reject) {
		                delegatePromise.then(resolve, reject);
		            });
		        };
		    };
		}
		else {
		    exports.bindPromiseFn = function (delegate) {
		        return function () {
		            return _patchThenable(delegate.apply(this, arguments));
		        };
		    };
		}
		function _patchPromiseFnsOnObject(objectPath, fnNames) {
		    var obj = global;
		    var exists = objectPath.every(function (segment) {
		        obj = obj[segment];
		        return obj;
		    });
		    if (!exists) {
		        return;
		    }
		    fnNames.forEach(function (name) {
		        var fn = obj[name];
		        if (fn) {
		            obj[name] = exports.bindPromiseFn(fn);
		        }
		    });
		}
		function _patchThenable(thenable) {
		    var then = thenable.then;
		    thenable.then = function () {
		        var args = utils.bindArguments(arguments);
		        var nextThenable = then.apply(thenable, args);
		        return _patchThenable(nextThenable);
		    };
		    var ocatch = thenable.catch;
		    thenable.catch = function () {
		        var args = utils.bindArguments(arguments);
		        var nextThenable = ocatch.apply(thenable, args);
		        return _patchThenable(nextThenable);
		    };
		    return thenable;
		}
		function apply() {
		    // Patch .then() and .catch() on native Promises to execute callbacks in the zone where
		    // those functions are called.
		    if (global.Promise) {
		        utils.patchPrototype(Promise.prototype, [
		            'then',
		            'catch'
		        ]);
		        // Patch browser APIs that return a Promise
		        var patchFns = [
		            // fetch
		            [[], ['fetch']],
		            [['Response', 'prototype'], ['arrayBuffer', 'blob', 'json', 'text']]
		        ];
		        patchFns.forEach(function (objPathAndFns) {
		            _patchPromiseFnsOnObject(objPathAndFns[0], objPathAndFns[1]);
		        });
		    }
		}
		exports.apply = apply;
		module.exports = {
		    apply: apply,
		    bindPromiseFn: exports.bindPromiseFn
		};
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wYXRjaC9wcm9taXNlLnRzIl0sIm5hbWVzIjpbIl9wYXRjaFByb21pc2VGbnNPbk9iamVjdCIsIl9wYXRjaFRoZW5hYmxlIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQVksS0FBSyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBdUJsQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNuQixxQkFBYSxHQUFHLFVBQVUsUUFBUTtRQUNoQyxNQUFNLENBQUM7WUFDTCxJQUFJLGVBQWUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztZQUV0RCwrREFBK0Q7WUFDL0QsRUFBRSxDQUFDLENBQUMsZUFBZSxZQUFZLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDekIsQ0FBQztZQUVELHNEQUFzRDtZQUN0RCxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtnQkFDekMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBQUMsSUFBSSxDQUFDLENBQUM7SUFDTixxQkFBYSxHQUFHLFVBQVUsUUFBUTtRQUNoQyxNQUFNLENBQUM7WUFDTCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUdELGtDQUFrQyxVQUFVLEVBQUUsT0FBTztJQUNuREEsSUFBSUEsR0FBR0EsR0FBR0EsTUFBTUEsQ0FBQ0E7SUFFakJBLElBQUlBLE1BQU1BLEdBQUdBLFVBQVVBLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLE9BQU9BO1FBQzdDLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkIsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFFSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDWkEsTUFBTUEsQ0FBQ0E7SUFDVEEsQ0FBQ0E7SUFFREEsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsSUFBSUE7UUFDNUIsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcscUJBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDQSxDQUFDQTtBQUNMQSxDQUFDQTtBQUVELHdCQUF3QixRQUFRO0lBQzlCQyxJQUFJQSxJQUFJQSxHQUFHQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUN6QkEsUUFBUUEsQ0FBQ0EsSUFBSUEsR0FBR0E7UUFDZCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDQTtJQUVGQSxJQUFJQSxNQUFNQSxHQUFHQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUM1QkEsUUFBUUEsQ0FBQ0EsS0FBS0EsR0FBR0E7UUFDZixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDQTtJQUVGQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtBQUNsQkEsQ0FBQ0E7QUFHRDtJQUNFQyx1RkFBdUZBO0lBQ3ZGQSw4QkFBOEJBO0lBQzlCQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNuQkEsS0FBS0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsRUFBRUE7WUFDdENBLE1BQU1BO1lBQ05BLE9BQU9BO1NBQ1JBLENBQUNBLENBQUNBO1FBRUhBLDJDQUEyQ0E7UUFDM0NBLElBQUlBLFFBQVFBLEdBQUdBO1lBQ2JBLFFBQVFBO1lBQ1JBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQ2ZBLENBQUNBLENBQUNBLFVBQVVBLEVBQUVBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLGFBQWFBLEVBQUVBLE1BQU1BLEVBQUVBLE1BQU1BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1NBQ3JFQSxDQUFDQTtRQUVGQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFTQSxhQUFhQTtZQUNyQyx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDQSxDQUFDQTtJQUNMQSxDQUFDQTtBQUNIQSxDQUFDQTtBQXBCZSxhQUFLLFFBb0JwQixDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLEtBQUssRUFBRSxLQUFLO0lBQ1osYUFBYSxFQUFFLHFCQUFhO0NBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5cbi8qXG4gKiBQYXRjaGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgUHJvbWlzZS1saWtlIGluc3RhbmNlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIHdoZW4gZWl0aGVyOlxuICogLSBOYXRpdmUgUHJvbWlzZXMgYXJlIG5vdCBhdmFpbGFibGUsXG4gKiAtIFRoZSBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZS1saWtlIG9iamVjdC5cbiAqXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2Ugem9uZXMgcmVseSBvbiBhIFByb21pc2UgbW9ua2V5IHBhdGNoIHRoYXQgY291bGQgbm90IGJlIGFwcGxpZWQgd2hlblxuICogUHJvbWlzZSBpcyBub3QgbmF0aXZlbHkgYXZhaWxhYmxlIG9yIHdoZW4gdGhlIHJldHVybmVkIG9iamVjdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgUHJvbWlzZS5cbiAqXG4gKiBOb3RlIHRoYXQgY2FsbGluZyBgYmluZFByb21pc2VGbmAgb24gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBuYXRpdmUgUHJvbWlzZSB3aWxsIGFsc28gd29ya1xuICogd2l0aCBtaW5pbWFsIG92ZXJoZWFkLlxuICpcbiAqIGBgYFxuICogdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kUHJvbWlzZUZuKEZ1bmN0aW9uUmV0dXJuaW5nQVByb21pc2UpO1xuICpcbiAqIGJvdW5kRnVuY3Rpb24udGhlbihzdWNjZXNzSGFuZGxlciwgZXJyb3JIYW5kbGVyKTtcbiAqIGBgYFxuICovXG5leHBvcnQgdmFyIGJpbmRQcm9taXNlRm47XG5cbmlmIChnbG9iYWwuUHJvbWlzZSkge1xuICBiaW5kUHJvbWlzZUZuID0gZnVuY3Rpb24gKGRlbGVnYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRlbGVnYXRlUHJvbWlzZSA9IGRlbGVnYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgIC8vIGlmIHRoZSBkZWxlZ2F0ZSByZXR1cm5lZCBhbiBpbnN0YW5jZSBvZiBQcm9taXNlLCBmb3J3YXJkIGl0LlxuICAgICAgaWYgKGRlbGVnYXRlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlUHJvbWlzZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlIHdyYXAgdGhlIFByb21pc2UtbGlrZSBpbiBhIGdsb2JhbCBQcm9taXNlXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGRlbGVnYXRlUHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufSBlbHNlIHtcbiAgYmluZFByb21pc2VGbiA9IGZ1bmN0aW9uIChkZWxlZ2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3BhdGNoVGhlbmFibGUoZGVsZWdhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBfcGF0Y2hQcm9taXNlRm5zT25PYmplY3Qob2JqZWN0UGF0aCwgZm5OYW1lcykge1xuICB2YXIgb2JqID0gZ2xvYmFsO1xuXG4gIHZhciBleGlzdHMgPSBvYmplY3RQYXRoLmV2ZXJ5KGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgb2JqID0gb2JqW3NlZ21lbnRdO1xuICAgIHJldHVybiBvYmo7XG4gIH0pO1xuXG4gIGlmICghZXhpc3RzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm5OYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGZuID0gb2JqW25hbWVdO1xuICAgIGlmIChmbikge1xuICAgICAgb2JqW25hbWVdID0gYmluZFByb21pc2VGbihmbik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gX3BhdGNoVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIHRoZW4gPSB0aGVuYWJsZS50aGVuO1xuICB0aGVuYWJsZS50aGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gdXRpbHMuYmluZEFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICAgIHZhciBuZXh0VGhlbmFibGUgPSB0aGVuLmFwcGx5KHRoZW5hYmxlLCBhcmdzKTtcbiAgICByZXR1cm4gX3BhdGNoVGhlbmFibGUobmV4dFRoZW5hYmxlKTtcbiAgfTtcblxuICB2YXIgb2NhdGNoID0gdGhlbmFibGUuY2F0Y2g7XG4gIHRoZW5hYmxlLmNhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gdXRpbHMuYmluZEFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICAgIHZhciBuZXh0VGhlbmFibGUgPSBvY2F0Y2guYXBwbHkodGhlbmFibGUsIGFyZ3MpO1xuICAgIHJldHVybiBfcGF0Y2hUaGVuYWJsZShuZXh0VGhlbmFibGUpO1xuICB9O1xuXG4gIHJldHVybiB0aGVuYWJsZTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoKSB7XG4gIC8vIFBhdGNoIC50aGVuKCkgYW5kIC5jYXRjaCgpIG9uIG5hdGl2ZSBQcm9taXNlcyB0byBleGVjdXRlIGNhbGxiYWNrcyBpbiB0aGUgem9uZSB3aGVyZVxuICAvLyB0aG9zZSBmdW5jdGlvbnMgYXJlIGNhbGxlZC5cbiAgaWYgKGdsb2JhbC5Qcm9taXNlKSB7XG4gICAgdXRpbHMucGF0Y2hQcm90b3R5cGUoUHJvbWlzZS5wcm90b3R5cGUsIFtcbiAgICAgICd0aGVuJyxcbiAgICAgICdjYXRjaCdcbiAgICBdKTtcblxuICAgIC8vIFBhdGNoIGJyb3dzZXIgQVBJcyB0aGF0IHJldHVybiBhIFByb21pc2VcbiAgICB2YXIgcGF0Y2hGbnMgPSBbXG4gICAgICAvLyBmZXRjaFxuICAgICAgW1tdLCBbJ2ZldGNoJ11dLFxuICAgICAgW1snUmVzcG9uc2UnLCAncHJvdG90eXBlJ10sIFsnYXJyYXlCdWZmZXInLCAnYmxvYicsICdqc29uJywgJ3RleHQnXV1cbiAgICBdO1xuXG4gICAgcGF0Y2hGbnMuZm9yRWFjaChmdW5jdGlvbihvYmpQYXRoQW5kRm5zKSB7XG4gICAgICBfcGF0Y2hQcm9taXNlRm5zT25PYmplY3Qob2JqUGF0aEFuZEZuc1swXSwgb2JqUGF0aEFuZEZuc1sxXSk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwcGx5OiBhcHBseSxcbiAgYmluZFByb21pc2VGbjogYmluZFByb21pc2VGblxufTtcbiJdfQ==
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var keys = __webpack_require__(7);
		function bindArguments(args) {
		    for (var i = args.length - 1; i >= 0; i--) {
		        if (typeof args[i] === 'function') {
		            args[i] = global.zone.bind(args[i]);
		        }
		    }
		    return args;
		}
		exports.bindArguments = bindArguments;
		;
		function patchPrototype(obj, fnNames) {
		    fnNames.forEach(function (name) {
		        var delegate = obj[name];
		        if (delegate) {
		            obj[name] = function () {
		                return delegate.apply(this, bindArguments(arguments));
		            };
		        }
		    });
		}
		exports.patchPrototype = patchPrototype;
		;
		function isWebWorker() {
		    return (typeof document === "undefined");
		}
		exports.isWebWorker = isWebWorker;
		function patchProperty(obj, prop) {
		    var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
		        enumerable: true,
		        configurable: true
		    };
		    // A property descriptor cannot have getter/setter and be writable
		    // deleting the writable and value properties avoids this error:
		    //
		    // TypeError: property descriptors must not specify a value or be writable when a
		    // getter or setter has been specified
		    delete desc.writable;
		    delete desc.value;
		    // substr(2) cuz 'onclick' -> 'click', etc
		    var eventName = prop.substr(2);
		    var _prop = '_' + prop;
		    desc.set = function (fn) {
		        if (this[_prop]) {
		            this.removeEventListener(eventName, this[_prop]);
		        }
		        if (typeof fn === 'function') {
		            this[_prop] = fn;
		            this.addEventListener(eventName, fn, false);
		        }
		        else {
		            this[_prop] = null;
		        }
		    };
		    desc.get = function () {
		        return this[_prop];
		    };
		    Object.defineProperty(obj, prop, desc);
		}
		exports.patchProperty = patchProperty;
		;
		function patchProperties(obj, properties) {
		    (properties || (function () {
		        var props = [];
		        for (var prop in obj) {
		            props.push(prop);
		        }
		        return props;
		    }()).
		        filter(function (propertyName) {
		        return propertyName.substr(0, 2) === 'on';
		    })).
		        forEach(function (eventName) {
		        patchProperty(obj, eventName);
		    });
		}
		exports.patchProperties = patchProperties;
		;
		var originalFnKey = keys.create('originalFn');
		var boundFnsKey = keys.create('boundFns');
		function patchEventTargetMethods(obj) {
		    // This is required for the addEventListener hook on the root zone.
		    obj[keys.common.addEventListener] = obj.addEventListener;
		    obj.addEventListener = function (eventName, handler, useCapturing) {
		        //Ignore special listeners of IE11 & Edge dev tools, see https://github.com/angular/zone.js/issues/150
		        if (handler && handler.toString() !== "[object FunctionWrapper]") {
		            var eventType = eventName + (useCapturing ? '$capturing' : '$bubbling');
		            var fn;
		            if (handler.handleEvent) {
		                // Have to pass in 'handler' reference as an argument here, otherwise it gets clobbered in
		                // IE9 by the arguments[1] assignment at end of this function.
		                fn = (function (handler) {
		                    return function () {
		                        handler.handleEvent.apply(handler, arguments);
		                    };
		                })(handler);
		            }
		            else {
		                fn = handler;
		            }
		            handler[originalFnKey] = fn;
		            handler[boundFnsKey] = handler[boundFnsKey] || {};
		            handler[boundFnsKey][eventType] = handler[boundFnsKey][eventType] || global.zone.bind(fn);
		            arguments[1] = handler[boundFnsKey][eventType];
		        }
		        // - Inside a Web Worker, `this` is undefined, the context is `global` (= `self`)
		        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
		        // see https://github.com/angular/zone.js/issues/190
		        var target = this || global;
		        return global.zone.addEventListener.apply(target, arguments);
		    };
		    // This is required for the removeEventListener hook on the root zone.
		    obj[keys.common.removeEventListener] = obj.removeEventListener;
		    obj.removeEventListener = function (eventName, handler, useCapturing) {
		        var eventType = eventName + (useCapturing ? '$capturing' : '$bubbling');
		        if (handler && handler[boundFnsKey] && handler[boundFnsKey][eventType]) {
		            var _bound = handler[boundFnsKey];
		            arguments[1] = _bound[eventType];
		            delete _bound[eventType];
		            global.zone.dequeueTask(handler[originalFnKey]);
		        }
		        // - Inside a Web Worker, `this` is undefined, the context is `global`
		        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
		        // see https://github.com/angular/zone.js/issues/190
		        var target = this || global;
		        var result = global.zone.removeEventListener.apply(target, arguments);
		        return result;
		    };
		}
		exports.patchEventTargetMethods = patchEventTargetMethods;
		;
		var originalInstanceKey = keys.create('originalInstance');
		// wrap some native API on `window`
		function patchClass(className) {
		    var OriginalClass = global[className];
		    if (!OriginalClass)
		        return;
		    global[className] = function () {
		        var a = bindArguments(arguments);
		        switch (a.length) {
		            case 0:
		                this[originalInstanceKey] = new OriginalClass();
		                break;
		            case 1:
		                this[originalInstanceKey] = new OriginalClass(a[0]);
		                break;
		            case 2:
		                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
		                break;
		            case 3:
		                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
		                break;
		            case 4:
		                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
		                break;
		            default: throw new Error('what are you even doing?');
		        }
		    };
		    var instance = new OriginalClass();
		    var prop;
		    for (prop in instance) {
		        (function (prop) {
		            if (typeof instance[prop] === 'function') {
		                global[className].prototype[prop] = function () {
		                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
		                };
		            }
		            else {
		                Object.defineProperty(global[className].prototype, prop, {
		                    set: function (fn) {
		                        if (typeof fn === 'function') {
		                            this[originalInstanceKey][prop] = global.zone.bind(fn);
		                        }
		                        else {
		                            this[originalInstanceKey][prop] = fn;
		                        }
		                    },
		                    get: function () {
		                        return this[originalInstanceKey][prop];
		                    }
		                });
		            }
		        }(prop));
		    }
		    for (prop in OriginalClass) {
		        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
		            global[className][prop] = OriginalClass[prop];
		        }
		    }
		}
		exports.patchClass = patchClass;
		;
		//# sourceMappingURL=data:application/json;base64,
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var fnPatch = __webpack_require__(11);
		var promisePatch = __webpack_require__(8);
		var mutationObserverPatch = __webpack_require__(13);
		var definePropertyPatch = __webpack_require__(14);
		var registerElementPatch = __webpack_require__(15);
		var eventTargetPatch = __webpack_require__(16);
		var propertyDescriptorPatch = __webpack_require__(17);
		var geolocationPatch = __webpack_require__(19);
		var fileReaderPatch = __webpack_require__(20);
		function apply() {
		    fnPatch.patchSetClearFunction(global, global.Zone, [
		        ['setTimeout', 'clearTimeout', false, false],
		        ['setInterval', 'clearInterval', true, false],
		        ['setImmediate', 'clearImmediate', false, false],
		        ['requestAnimationFrame', 'cancelAnimationFrame', false, true],
		        ['mozRequestAnimationFrame', 'mozCancelAnimationFrame', false, true],
		        ['webkitRequestAnimationFrame', 'webkitCancelAnimationFrame', false, true]
		    ]);
		    fnPatch.patchFunction(global, [
		        'alert',
		        'prompt'
		    ]);
		    eventTargetPatch.apply();
		    propertyDescriptorPatch.apply();
		    promisePatch.apply();
		    mutationObserverPatch.patchClass('MutationObserver');
		    mutationObserverPatch.patchClass('WebKitMutationObserver');
		    definePropertyPatch.apply();
		    registerElementPatch.apply();
		    geolocationPatch.apply();
		    fileReaderPatch.apply();
		}
		exports.apply = apply;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wYXRjaC9icm93c2VyLnRzIl0sIm5hbWVzIjpbImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFZLE9BQU8sV0FBTSxhQUFhLENBQUMsQ0FBQTtBQUN2QyxJQUFZLFlBQVksV0FBTSxXQUFXLENBQUMsQ0FBQTtBQUMxQyxJQUFZLHFCQUFxQixXQUFNLHFCQUFxQixDQUFDLENBQUE7QUFDN0QsSUFBWSxtQkFBbUIsV0FBTSxtQkFBbUIsQ0FBQyxDQUFBO0FBQ3pELElBQVksb0JBQW9CLFdBQU0sb0JBQW9CLENBQUMsQ0FBQTtBQUUzRCxJQUFZLGdCQUFnQixXQUFNLGdCQUFnQixDQUFDLENBQUE7QUFDbkQsSUFBWSx1QkFBdUIsV0FBTSx1QkFBdUIsQ0FBQyxDQUFBO0FBQ2pFLElBQVksZ0JBQWdCLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFDbEQsSUFBWSxlQUFlLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFFakQ7SUFDRUEsT0FBT0EsQ0FBQ0EscUJBQXFCQSxDQUFDQSxNQUFNQSxFQUFFQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQTtRQUNqREEsQ0FBQ0EsWUFBWUEsRUFBRUEsY0FBY0EsRUFBRUEsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0E7UUFDNUNBLENBQUNBLGFBQWFBLEVBQUVBLGVBQWVBLEVBQUVBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBO1FBQzdDQSxDQUFDQSxjQUFjQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLEtBQUtBLEVBQUVBLEtBQUtBLENBQUNBO1FBQ2hEQSxDQUFDQSx1QkFBdUJBLEVBQUVBLHNCQUFzQkEsRUFBRUEsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0E7UUFDOURBLENBQUNBLDBCQUEwQkEsRUFBRUEseUJBQXlCQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQTtRQUNwRUEsQ0FBQ0EsNkJBQTZCQSxFQUFFQSw0QkFBNEJBLEVBQUVBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBO0tBQzNFQSxDQUFDQSxDQUFDQTtJQUVIQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxFQUFFQTtRQUM1QkEsT0FBT0E7UUFDUEEsUUFBUUE7S0FDVEEsQ0FBQ0EsQ0FBQ0E7SUFFSEEsZ0JBQWdCQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUV6QkEsdUJBQXVCQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtJQUVoQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7SUFFckJBLHFCQUFxQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQTtJQUNyREEscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQSx3QkFBd0JBLENBQUNBLENBQUNBO0lBRTNEQSxtQkFBbUJBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO0lBRTVCQSxvQkFBb0JBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO0lBRTdCQSxnQkFBZ0JBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO0lBRXpCQSxlQUFlQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtBQUMxQkEsQ0FBQ0E7QUEvQmUsYUFBSyxRQStCcEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZuUGF0Y2ggZnJvbSAnLi9mdW5jdGlvbnMnO1xuaW1wb3J0ICogYXMgcHJvbWlzZVBhdGNoIGZyb20gJy4vcHJvbWlzZSc7XG5pbXBvcnQgKiBhcyBtdXRhdGlvbk9ic2VydmVyUGF0Y2ggZnJvbSAnLi9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQgKiBhcyBkZWZpbmVQcm9wZXJ0eVBhdGNoIGZyb20gJy4vZGVmaW5lLXByb3BlcnR5JztcbmltcG9ydCAqIGFzIHJlZ2lzdGVyRWxlbWVudFBhdGNoIGZyb20gJy4vcmVnaXN0ZXItZWxlbWVudCc7XG5pbXBvcnQgKiBhcyB3ZWJTb2NrZXRQYXRjaCBmcm9tICcuL3dlYnNvY2tldCc7XG5pbXBvcnQgKiBhcyBldmVudFRhcmdldFBhdGNoIGZyb20gJy4vZXZlbnQtdGFyZ2V0JztcbmltcG9ydCAqIGFzIHByb3BlcnR5RGVzY3JpcHRvclBhdGNoIGZyb20gJy4vcHJvcGVydHktZGVzY3JpcHRvcic7XG5pbXBvcnQgKiBhcyBnZW9sb2NhdGlvblBhdGNoIGZyb20gJy4vZ2VvbG9jYXRpb24nO1xuaW1wb3J0ICogYXMgZmlsZVJlYWRlclBhdGNoIGZyb20gJy4vZmlsZS1yZWFkZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoKSB7XG4gIGZuUGF0Y2gucGF0Y2hTZXRDbGVhckZ1bmN0aW9uKGdsb2JhbCwgZ2xvYmFsLlpvbmUsIFtcbiAgICBbJ3NldFRpbWVvdXQnLCAnY2xlYXJUaW1lb3V0JywgZmFsc2UsIGZhbHNlXSxcbiAgICBbJ3NldEludGVydmFsJywgJ2NsZWFySW50ZXJ2YWwnLCB0cnVlLCBmYWxzZV0sXG4gICAgWydzZXRJbW1lZGlhdGUnLCAnY2xlYXJJbW1lZGlhdGUnLCBmYWxzZSwgZmFsc2VdLFxuICAgIFsncmVxdWVzdEFuaW1hdGlvbkZyYW1lJywgJ2NhbmNlbEFuaW1hdGlvbkZyYW1lJywgZmFsc2UsIHRydWVdLFxuICAgIFsnbW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lJywgJ21vekNhbmNlbEFuaW1hdGlvbkZyYW1lJywgZmFsc2UsIHRydWVdLFxuICAgIFsnd2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lJywgJ3dlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lJywgZmFsc2UsIHRydWVdXG4gIF0pO1xuXG4gIGZuUGF0Y2gucGF0Y2hGdW5jdGlvbihnbG9iYWwsIFtcbiAgICAnYWxlcnQnLFxuICAgICdwcm9tcHQnXG4gIF0pO1xuXG4gIGV2ZW50VGFyZ2V0UGF0Y2guYXBwbHkoKTtcblxuICBwcm9wZXJ0eURlc2NyaXB0b3JQYXRjaC5hcHBseSgpO1xuXG4gIHByb21pc2VQYXRjaC5hcHBseSgpO1xuXG4gIG11dGF0aW9uT2JzZXJ2ZXJQYXRjaC5wYXRjaENsYXNzKCdNdXRhdGlvbk9ic2VydmVyJyk7XG4gIG11dGF0aW9uT2JzZXJ2ZXJQYXRjaC5wYXRjaENsYXNzKCdXZWJLaXRNdXRhdGlvbk9ic2VydmVyJyk7XG5cbiAgZGVmaW5lUHJvcGVydHlQYXRjaC5hcHBseSgpO1xuXG4gIHJlZ2lzdGVyRWxlbWVudFBhdGNoLmFwcGx5KCk7XG5cbiAgZ2VvbG9jYXRpb25QYXRjaC5hcHBseSgpO1xuXG4gIGZpbGVSZWFkZXJQYXRjaC5hcHBseSgpO1xufVxuXG4iXX0=
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var wtf = __webpack_require__(12);
		function patchSetClearFunction(window, Zone, fnNames) {
		    function patchMacroTaskMethod(setName, clearName, repeating, isRaf) {
		        var setNative = window[setName];
		        var clearNative = window[clearName];
		        var ids = {};
		        if (setNative) {
		            var wtfSetEventFn = wtf.createEvent('Zone#' + setName + '(uint32 zone, uint32 id, uint32 delay)');
		            var wtfClearEventFn = wtf.createEvent('Zone#' + clearName + '(uint32 zone, uint32 id)');
		            var wtfCallbackFn = wtf.createScope('Zone#cb:' + setName + '(uint32 zone, uint32 id, uint32 delay)');
		            // Forward all calls from the window through the zone.
		            window[setName] = function () {
		                return global.zone[setName].apply(global.zone, arguments);
		            };
		            window[clearName] = function () {
		                return global.zone[clearName].apply(global.zone, arguments);
		            };
		            // Set up zone processing for the set function.
		            Zone.prototype[setName] = function (fn, delay) {
		                // We need to save `fn` in var different then argument. This is because
		                // in IE9 `argument[0]` and `fn` have same identity, and assigning to
		                // `argument[0]` changes `fn`.
		                var callbackFn = fn;
		                if (typeof callbackFn !== 'function') {
		                    // force the error by calling the method with wrong args
		                    setNative.apply(window, arguments);
		                }
		                var zone = this;
		                var setId = null;
		                // wrap the callback function into the zone.
		                arguments[0] = function () {
		                    var callbackZone = zone.isRootZone() || isRaf ? zone : zone.fork();
		                    var callbackThis = this;
		                    var callbackArgs = arguments;
		                    return wtf.leaveScope(wtfCallbackFn(callbackZone.$id, setId, delay), callbackZone.run(function () {
		                        if (!repeating) {
		                            delete ids[setId];
		                            callbackZone.removeTask(callbackFn);
		                        }
		                        return callbackFn.apply(callbackThis, callbackArgs);
		                    }));
		                };
		                if (repeating) {
		                    zone.addRepeatingTask(callbackFn);
		                }
		                else {
		                    zone.addTask(callbackFn);
		                }
		                setId = setNative.apply(window, arguments);
		                ids[setId] = callbackFn;
		                wtfSetEventFn(zone.$id, setId, delay);
		                return setId;
		            };
		            Zone.prototype[setName + 'Unpatched'] = function () {
		                return setNative.apply(window, arguments);
		            };
		            // Set up zone processing for the clear function.
		            Zone.prototype[clearName] = function (id) {
		                wtfClearEventFn(this.$id, id);
		                if (ids.hasOwnProperty(id)) {
		                    var callbackFn = ids[id];
		                    delete ids[id];
		                    if (repeating) {
		                        this.removeRepeatingTask(callbackFn);
		                    }
		                    else {
		                        this.removeTask(callbackFn);
		                    }
		                }
		                return clearNative.apply(window, arguments);
		            };
		            Zone.prototype[clearName + 'Unpatched'] = function () {
		                return clearNative.apply(window, arguments);
		            };
		        }
		    }
		    fnNames.forEach(function (args) {
		        patchMacroTaskMethod.apply(null, args);
		    });
		}
		exports.patchSetClearFunction = patchSetClearFunction;
		;
		function patchFunction(obj, fnNames) {
		    fnNames.forEach(function (name) {
		        var delegate = obj[name];
		        global.zone[name] = function () {
		            return delegate.apply(obj, arguments);
		        };
		        obj[name] = function () {
		            return global.zone[name].apply(this, arguments);
		        };
		    });
		}
		exports.patchFunction = patchFunction;
		;
		//# sourceMappingURL=data:application/json;base64,
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 12 */
	/***/ function(module, exports) {

		/* WEBPACK VAR INJECTION */(function(global) {// Detect and setup WTF.
		var wtfTrace = null;
		var wtfEvents = null;
		var wtfEnabled = (function () {
		    var wtf = global['wtf'];
		    if (wtf) {
		        wtfTrace = wtf['trace'];
		        if (wtfTrace) {
		            wtfEvents = wtfTrace['events'];
		            return true;
		        }
		    }
		    return false;
		})();
		function noop() {
		}
		exports.enabled = wtfEnabled;
		exports.createScope = wtfEnabled ? function (signature, flags) {
		    return wtfEvents.createScope(signature, flags);
		} : function (s, f) {
		    return noop;
		};
		exports.createEvent = wtfEnabled ? function (signature, flags) {
		    return wtfEvents.createInstance(signature, flags);
		} : function (s, f) {
		    return noop;
		};
		exports.leaveScope = wtfEnabled ? function (scope, returnValue) {
		    wtfTrace.leaveScope(scope, returnValue);
		    return returnValue;
		} : function (s, v) {
		    return v;
		};
		exports.beginTimeRange = wtfEnabled ? function (rangeType, action) {
		    return wtfTrace.beginTimeRange(rangeType, action);
		} : function (t, a) {
		    return null;
		};
		exports.endTimeRange = wtfEnabled ? function (range) {
		    wtfTrace.endTimeRange(range);
		} : function (r) {
		};
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3RmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3d0Zi50cyJdLCJuYW1lcyI6WyJub29wIl0sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7QUFDeEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztBQUNyQixJQUFJLFVBQVUsR0FBRyxDQUFDO0lBQ2hCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1IsUUFBUSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2IsU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMO0FBQ0FBLENBQUNBO0FBVVksZUFBTyxHQUFXLFVBQVUsQ0FBQztBQUM3QixtQkFBVyxHQUFnRCxVQUFVLEdBQUcsVUFBVSxTQUFTLEVBQUUsS0FBSztJQUM3RyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDakQsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUM7SUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUNXLG1CQUFXLEdBQXVELFVBQVUsR0FBRyxVQUFVLFNBQVMsRUFBRSxLQUFLO0lBQ3BILE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwRCxDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBQ1csa0JBQVUsR0FBRyxVQUFVLEdBQUcsVUFBVSxLQUFnQixFQUFFLFdBQWU7SUFDaEYsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUNyQixDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBQ1csc0JBQWMsR0FBRyxVQUFVLEdBQUcsVUFBVSxTQUFTLEVBQUUsTUFBTTtJQUNwRSxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEQsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUM7SUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUNXLG9CQUFZLEdBQUcsVUFBVSxHQUFHLFVBQVUsS0FBSztJQUN0RCxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CLENBQUMsR0FBRyxVQUFVLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZXRlY3QgYW5kIHNldHVwIFdURi5cbnZhciB3dGZUcmFjZSA9IG51bGw7XG52YXIgd3RmRXZlbnRzID0gbnVsbDtcbnZhciB3dGZFbmFibGVkID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHd0ZiA9IGdsb2JhbFsnd3RmJ107XG4gIGlmICh3dGYpIHtcbiAgICB3dGZUcmFjZSA9IHd0ZlsndHJhY2UnXTtcbiAgICBpZiAod3RmVHJhY2UpIHtcbiAgICAgIHd0ZkV2ZW50cyA9IHd0ZlRyYWNlWydldmVudHMnXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG5mdW5jdGlvbiBub29wKCkge1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFd0ZlNjb3BlRm4ge1xuICAoLi4uYXJncyk6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXdGZFdmVudEZuIHtcbiAgKC4uLmFyZ3MpOiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBlbmFibGVkOmJvb2xlYW4gPSB3dGZFbmFibGVkO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNjb3BlOihzaWduYXR1cmU6c3RyaW5nLCBmbGFncz86YW55KSA9PiBXdGZTY29wZUZuID0gd3RmRW5hYmxlZCA/IGZ1bmN0aW9uIChzaWduYXR1cmUsIGZsYWdzKSB7XG4gIHJldHVybiB3dGZFdmVudHMuY3JlYXRlU2NvcGUoc2lnbmF0dXJlLCBmbGFncyk7XG59IDogZnVuY3Rpb24gKHMsIGYpIHtcbiAgcmV0dXJuIG5vb3A7XG59O1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUV2ZW50OiAoc2lnbmF0dXJlOiBzdHJpbmcsIGFjdGlvbj86IHN0cmluZykgPT4gV3RmRXZlbnRGbiA9IHd0ZkVuYWJsZWQgPyBmdW5jdGlvbiAoc2lnbmF0dXJlLCBmbGFncykge1xuICByZXR1cm4gd3RmRXZlbnRzLmNyZWF0ZUluc3RhbmNlKHNpZ25hdHVyZSwgZmxhZ3MpO1xufSA6IGZ1bmN0aW9uIChzLCBmKSB7XG4gIHJldHVybiBub29wO1xufTtcbmV4cG9ydCBjb25zdCBsZWF2ZVNjb3BlID0gd3RmRW5hYmxlZCA/IGZ1bmN0aW9uIChzY29wZTpXdGZTY29wZUZuLCByZXR1cm5WYWx1ZTphbnkpOmFueSB7XG4gIHd0ZlRyYWNlLmxlYXZlU2NvcGUoc2NvcGUsIHJldHVyblZhbHVlKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufSA6IGZ1bmN0aW9uIChzLCB2KSB7XG4gIHJldHVybiB2O1xufTtcbmV4cG9ydCBjb25zdCBiZWdpblRpbWVSYW5nZSA9IHd0ZkVuYWJsZWQgPyBmdW5jdGlvbiAocmFuZ2VUeXBlLCBhY3Rpb24pIHtcbiAgcmV0dXJuIHd0ZlRyYWNlLmJlZ2luVGltZVJhbmdlKHJhbmdlVHlwZSwgYWN0aW9uKTtcbn0gOiBmdW5jdGlvbiAodCwgYSkge1xuICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnQgY29uc3QgZW5kVGltZVJhbmdlID0gd3RmRW5hYmxlZCA/IGZ1bmN0aW9uIChyYW5nZSkge1xuICB3dGZUcmFjZS5lbmRUaW1lUmFuZ2UocmFuZ2UpO1xufSA6IGZ1bmN0aW9uIChyKSB7XG59O1xuIl19
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var keys = __webpack_require__(7);
		var originalInstanceKey = keys.create('originalInstance');
		var creationZoneKey = keys.create('creationZone');
		var isActiveKey = keys.create('isActive');
		// wrap some native API on `window`
		function patchClass(className) {
		    var OriginalClass = global[className];
		    if (!OriginalClass)
		        return;
		    global[className] = function (fn) {
		        this[originalInstanceKey] = new OriginalClass(global.zone.bind(fn, true));
		        // Remember where the class was instantiate to execute the enqueueTask and dequeueTask hooks
		        this[creationZoneKey] = global.zone;
		    };
		    var instance = new OriginalClass(function () { });
		    global[className].prototype.disconnect = function () {
		        var result = this[originalInstanceKey].disconnect.apply(this[originalInstanceKey], arguments);
		        if (this[isActiveKey]) {
		            this[creationZoneKey].dequeueTask();
		            this[isActiveKey] = false;
		        }
		        return result;
		    };
		    global[className].prototype.observe = function () {
		        if (!this[isActiveKey]) {
		            this[creationZoneKey].enqueueTask();
		            this[isActiveKey] = true;
		        }
		        return this[originalInstanceKey].observe.apply(this[originalInstanceKey], arguments);
		    };
		    var prop;
		    for (prop in instance) {
		        (function (prop) {
		            if (typeof global[className].prototype !== 'undefined') {
		                return;
		            }
		            if (typeof instance[prop] === 'function') {
		                global[className].prototype[prop] = function () {
		                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
		                };
		            }
		            else {
		                Object.defineProperty(global[className].prototype, prop, {
		                    set: function (fn) {
		                        if (typeof fn === 'function') {
		                            this[originalInstanceKey][prop] = global.zone.bind(fn);
		                        }
		                        else {
		                            this[originalInstanceKey][prop] = fn;
		                        }
		                    },
		                    get: function () {
		                        return this[originalInstanceKey][prop];
		                    }
		                });
		            }
		        }(prop));
		    }
		}
		exports.patchClass = patchClass;
		;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24tb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcGF0Y2gvbXV0YXRpb24tb2JzZXJ2ZXIudHMiXSwibmFtZXMiOlsicGF0Y2hDbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxJQUFJLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFaEMsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDMUQsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNsRCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTFDLG1DQUFtQztBQUNuQyxvQkFBMkIsU0FBUztJQUNsQ0EsSUFBSUEsYUFBYUEsR0FBR0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFDdENBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLGFBQWFBLENBQUNBO1FBQUNBLE1BQU1BLENBQUNBO0lBRTNCQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxVQUFVQSxFQUFFQTtRQUM5QixJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRSw0RkFBNEY7UUFDNUYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDdEMsQ0FBQyxDQUFDQTtJQUVGQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxhQUFhQSxDQUFDQSxjQUFhLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFFakRBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLFVBQVVBLEdBQUdBO1FBQ3ZDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDOUYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUNBO0lBRUZBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEdBQUdBO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkYsQ0FBQyxDQUFDQTtJQUVGQSxJQUFJQSxJQUFJQSxDQUFDQTtJQUNUQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsQ0FBQ0EsVUFBVUEsSUFBSUE7WUFDYixFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsTUFBTSxDQUFDO1lBQ1QsQ0FBQztZQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUc7b0JBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ3JGLENBQUMsQ0FBQztZQUNKLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFO29CQUN2RCxHQUFHLEVBQUUsVUFBVSxFQUFFO3dCQUNmLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7NEJBQzdCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUN6RCxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzt3QkFDdkMsQ0FBQztvQkFDSCxDQUFDO29CQUNELEdBQUcsRUFBRTt3QkFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3pDLENBQUM7aUJBQ0YsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztRQUNILENBQUMsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDWEEsQ0FBQ0E7QUFDSEEsQ0FBQ0E7QUF2RGUsa0JBQVUsYUF1RHpCLENBQUE7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMga2V5cyBmcm9tICcuLi9rZXlzJztcblxudmFyIG9yaWdpbmFsSW5zdGFuY2VLZXkgPSBrZXlzLmNyZWF0ZSgnb3JpZ2luYWxJbnN0YW5jZScpO1xudmFyIGNyZWF0aW9uWm9uZUtleSA9IGtleXMuY3JlYXRlKCdjcmVhdGlvblpvbmUnKTtcbnZhciBpc0FjdGl2ZUtleSA9IGtleXMuY3JlYXRlKCdpc0FjdGl2ZScpO1xuXG4vLyB3cmFwIHNvbWUgbmF0aXZlIEFQSSBvbiBgd2luZG93YFxuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIHZhciBPcmlnaW5hbENsYXNzID0gZ2xvYmFsW2NsYXNzTmFtZV07XG4gIGlmICghT3JpZ2luYWxDbGFzcykgcmV0dXJuO1xuXG4gIGdsb2JhbFtjbGFzc05hbWVdID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgdGhpc1tvcmlnaW5hbEluc3RhbmNlS2V5XSA9IG5ldyBPcmlnaW5hbENsYXNzKGdsb2JhbC56b25lLmJpbmQoZm4sIHRydWUpKTtcbiAgICAvLyBSZW1lbWJlciB3aGVyZSB0aGUgY2xhc3Mgd2FzIGluc3RhbnRpYXRlIHRvIGV4ZWN1dGUgdGhlIGVucXVldWVUYXNrIGFuZCBkZXF1ZXVlVGFzayBob29rc1xuICAgIHRoaXNbY3JlYXRpb25ab25lS2V5XSA9IGdsb2JhbC56b25lO1xuICB9O1xuXG4gIHZhciBpbnN0YW5jZSA9IG5ldyBPcmlnaW5hbENsYXNzKGZ1bmN0aW9uICgpIHt9KTtcblxuICBnbG9iYWxbY2xhc3NOYW1lXS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpc1tvcmlnaW5hbEluc3RhbmNlS2V5XS5kaXNjb25uZWN0LmFwcGx5KHRoaXNbb3JpZ2luYWxJbnN0YW5jZUtleV0sIGFyZ3VtZW50cyk7XG4gICAgaWYgKHRoaXNbaXNBY3RpdmVLZXldKSB7XG4gICAgICB0aGlzW2NyZWF0aW9uWm9uZUtleV0uZGVxdWV1ZVRhc2soKTtcbiAgICAgIHRoaXNbaXNBY3RpdmVLZXldID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZ2xvYmFsW2NsYXNzTmFtZV0ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzW2lzQWN0aXZlS2V5XSkge1xuICAgICAgdGhpc1tjcmVhdGlvblpvbmVLZXldLmVucXVldWVUYXNrKCk7XG4gICAgICB0aGlzW2lzQWN0aXZlS2V5XSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzW29yaWdpbmFsSW5zdGFuY2VLZXldLm9ic2VydmUuYXBwbHkodGhpc1tvcmlnaW5hbEluc3RhbmNlS2V5XSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvcDtcbiAgZm9yIChwcm9wIGluIGluc3RhbmNlKSB7XG4gICAgKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBpZiAodHlwZW9mIGdsb2JhbFtjbGFzc05hbWVdLnByb3RvdHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZVtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBnbG9iYWxbY2xhc3NOYW1lXS5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbb3JpZ2luYWxJbnN0YW5jZUtleV1bcHJvcF0uYXBwbHkodGhpc1tvcmlnaW5hbEluc3RhbmNlS2V5XSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxbY2xhc3NOYW1lXS5wcm90b3R5cGUsIHByb3AsIHtcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0aGlzW29yaWdpbmFsSW5zdGFuY2VLZXldW3Byb3BdID0gZ2xvYmFsLnpvbmUuYmluZChmbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzW29yaWdpbmFsSW5zdGFuY2VLZXldW3Byb3BdID0gZm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW29yaWdpbmFsSW5zdGFuY2VLZXldW3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfShwcm9wKSk7XG4gIH1cbn07XG4iXX0=
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		var keys = __webpack_require__(7);
		// might need similar for object.freeze
		// i regret nothing
		var _defineProperty = Object.defineProperty;
		var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
		var _create = Object.create;
		var unconfigurablesKey = keys.create('unconfigurables');
		function apply() {
		    Object.defineProperty = function (obj, prop, desc) {
		        if (isUnconfigurable(obj, prop)) {
		            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
		        }
		        if (prop !== 'prototype') {
		            desc = rewriteDescriptor(obj, prop, desc);
		        }
		        return _defineProperty(obj, prop, desc);
		    };
		    Object.defineProperties = function (obj, props) {
		        Object.keys(props).forEach(function (prop) {
		            Object.defineProperty(obj, prop, props[prop]);
		        });
		        return obj;
		    };
		    Object.create = function (obj, proto) {
		        if (typeof proto === 'object') {
		            Object.keys(proto).forEach(function (prop) {
		                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
		            });
		        }
		        return _create(obj, proto);
		    };
		    Object.getOwnPropertyDescriptor = function (obj, prop) {
		        var desc = _getOwnPropertyDescriptor(obj, prop);
		        if (isUnconfigurable(obj, prop)) {
		            desc.configurable = false;
		        }
		        return desc;
		    };
		}
		exports.apply = apply;
		;
		function _redefineProperty(obj, prop, desc) {
		    desc = rewriteDescriptor(obj, prop, desc);
		    return _defineProperty(obj, prop, desc);
		}
		exports._redefineProperty = _redefineProperty;
		;
		function isUnconfigurable(obj, prop) {
		    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
		}
		function rewriteDescriptor(obj, prop, desc) {
		    desc.configurable = true;
		    if (!desc.configurable) {
		        if (!obj[unconfigurablesKey]) {
		            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
		        }
		        obj[unconfigurablesKey][prop] = true;
		    }
		    return desc;
		}
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5lLXByb3BlcnR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3BhdGNoL2RlZmluZS1wcm9wZXJ0eS50cyJdLCJuYW1lcyI6WyJhcHBseSIsIl9yZWRlZmluZVByb3BlcnR5IiwiaXNVbmNvbmZpZ3VyYWJsZSIsInJld3JpdGVEZXNjcmlwdG9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFZLElBQUksV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUVoQyx1Q0FBdUM7QUFDdkMsbUJBQW1CO0FBRW5CLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7QUFDNUMsSUFBSSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUM7QUFDaEUsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM1QixJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUV4RDtJQUNFQSxNQUFNQSxDQUFDQSxjQUFjQSxHQUFHQSxVQUFVQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQTtRQUMvQyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxTQUFTLENBQUMsd0NBQXdDLEdBQUcsSUFBSSxHQUFHLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4RixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUNELE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUNBO0lBRUZBLE1BQU1BLENBQUNBLGdCQUFnQkEsR0FBR0EsVUFBVUEsR0FBR0EsRUFBRUEsS0FBS0E7UUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJO1lBQ3ZDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUNBO0lBRUZBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLFVBQVVBLEdBQUdBLEVBQUVBLEtBQUtBO1FBQ2xDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJO2dCQUN2QyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxRCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUNBO0lBRUZBLE1BQU1BLENBQUNBLHdCQUF3QkEsR0FBR0EsVUFBVUEsR0FBR0EsRUFBRUEsSUFBSUE7UUFDbkQsSUFBSSxJQUFJLEdBQUcseUJBQXlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDNUIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUNBO0FBQ0pBLENBQUNBO0FBbENlLGFBQUssUUFrQ3BCLENBQUE7QUFBQSxDQUFDO0FBRUYsMkJBQWtDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUMvQ0MsSUFBSUEsR0FBR0EsaUJBQWlCQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUMxQ0EsTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsR0FBR0EsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7QUFDMUNBLENBQUNBO0FBSGUseUJBQWlCLG9CQUdoQyxDQUFBO0FBQUEsQ0FBQztBQUVGLDBCQUEyQixHQUFHLEVBQUUsSUFBSTtJQUNsQ0MsTUFBTUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxrQkFBa0JBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0FBQ3pFQSxDQUFDQTtBQUVELDJCQUE0QixHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDekNDLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3pCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3QkEsZUFBZUEsQ0FBQ0EsR0FBR0EsRUFBRUEsa0JBQWtCQSxFQUFFQSxFQUFFQSxRQUFRQSxFQUFFQSxJQUFJQSxFQUFFQSxLQUFLQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUMxRUEsQ0FBQ0E7UUFDREEsR0FBR0EsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFDREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7QUFDZEEsQ0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBrZXlzIGZyb20gJy4uL2tleXMnO1xuXG4vLyBtaWdodCBuZWVkIHNpbWlsYXIgZm9yIG9iamVjdC5mcmVlemVcbi8vIGkgcmVncmV0IG5vdGhpbmdcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciB1bmNvbmZpZ3VyYWJsZXNLZXkgPSBrZXlzLmNyZWF0ZSgndW5jb25maWd1cmFibGVzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseSgpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgZGVzYykge1xuICAgIGlmIChpc1VuY29uZmlndXJhYmxlKG9iaiwgcHJvcCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBhc3NpZ24gdG8gcmVhZCBvbmx5IHByb3BlcnR5IFxcJycgKyBwcm9wICsgJ1xcJyBvZiAnICsgb2JqKTtcbiAgICB9XG4gICAgaWYgKHByb3AgIT09ICdwcm90b3R5cGUnKSB7XG4gICAgICBkZXNjID0gcmV3cml0ZURlc2NyaXB0b3Iob2JqLCBwcm9wLCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2MpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwgcHJvcHMpIHtcbiAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgcHJvcHNbcHJvcF0pO1xuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChvYmosIHByb3RvKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90byA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKHByb3RvKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHByb3RvW3Byb3BdID0gcmV3cml0ZURlc2NyaXB0b3Iob2JqLCBwcm9wLCBwcm90b1twcm9wXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGUob2JqLCBwcm90byk7XG4gIH07XG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcbiAgICB2YXIgZGVzYyA9IF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKTtcbiAgICBpZiAoaXNVbmNvbmZpZ3VyYWJsZShvYmosIHByb3ApKSB7XG4gICAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZGVzYztcbiAgfTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfcmVkZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2MpIHtcbiAgZGVzYyA9IHJld3JpdGVEZXNjcmlwdG9yKG9iaiwgcHJvcCwgZGVzYyk7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBkZXNjKTtcbn07XG5cbmZ1bmN0aW9uIGlzVW5jb25maWd1cmFibGUgKG9iaiwgcHJvcCkge1xuICByZXR1cm4gb2JqICYmIG9ialt1bmNvbmZpZ3VyYWJsZXNLZXldICYmIG9ialt1bmNvbmZpZ3VyYWJsZXNLZXldW3Byb3BdO1xufVxuXG5mdW5jdGlvbiByZXdyaXRlRGVzY3JpcHRvciAob2JqLCBwcm9wLCBkZXNjKSB7XG4gIGRlc2MuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgaWYgKCFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuICAgIGlmICghb2JqW3VuY29uZmlndXJhYmxlc0tleV0pIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShvYmosIHVuY29uZmlndXJhYmxlc0tleSwgeyB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHt9IH0pO1xuICAgIH1cbiAgICBvYmpbdW5jb25maWd1cmFibGVzS2V5XVtwcm9wXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2M7XG59XG5cblxuIl19

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var define_property_1 = __webpack_require__(14);
		var utils = __webpack_require__(9);
		function apply() {
		    if (utils.isWebWorker() || !('registerElement' in global.document)) {
		        return;
		    }
		    var _registerElement = document.registerElement;
		    var callbacks = [
		        'createdCallback',
		        'attachedCallback',
		        'detachedCallback',
		        'attributeChangedCallback'
		    ];
		    document.registerElement = function (name, opts) {
		        if (opts && opts.prototype) {
		            callbacks.forEach(function (callback) {
		                if (opts.prototype.hasOwnProperty(callback)) {
		                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
		                    if (descriptor && descriptor.value) {
		                        descriptor.value = global.zone.bind(descriptor.value);
		                        define_property_1._redefineProperty(opts.prototype, callback, descriptor);
		                    }
		                    else {
		                        opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
		                    }
		                }
		                else if (opts.prototype[callback]) {
		                    opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
		                }
		            });
		        }
		        return _registerElement.apply(document, [name, opts]);
		    };
		}
		exports.apply = apply;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wYXRjaC9yZWdpc3Rlci1lbGVtZW50LnRzIl0sIm5hbWVzIjpbImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0MsbUJBQW1CLENBQUMsQ0FBQTtBQUNwRCxJQUFZLEtBQUssV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUVsQztJQUNFQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxpQkFBaUJBLElBQVVBLE1BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzFFQSxNQUFNQSxDQUFDQTtJQUNUQSxDQUFDQTtJQUVEQSxJQUFJQSxnQkFBZ0JBLEdBQVNBLFFBQVNBLENBQUNBLGVBQWVBLENBQUNBO0lBQ3ZEQSxJQUFJQSxTQUFTQSxHQUFHQTtRQUNkQSxpQkFBaUJBO1FBQ2pCQSxrQkFBa0JBO1FBQ2xCQSxrQkFBa0JBO1FBQ2xCQSwwQkFBMEJBO0tBQzNCQSxDQUFDQTtJQUVJQSxRQUFTQSxDQUFDQSxlQUFlQSxHQUFHQSxVQUFVQSxJQUFJQSxFQUFFQSxJQUFJQTtRQUNwRCxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLFFBQVE7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQzNFLEVBQUUsQ0FBQyxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsVUFBVSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3RELG1DQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUMxRCxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUN4RSxDQUFDO2dCQUNILENBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDQTtBQUNKQSxDQUFDQTtBQWhDZSxhQUFLLFFBZ0NwQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtfcmVkZWZpbmVQcm9wZXJ0eX0gZnJvbSAnLi9kZWZpbmUtcHJvcGVydHknO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoKSB7XG4gIGlmICh1dGlscy5pc1dlYldvcmtlcigpIHx8ICEoJ3JlZ2lzdGVyRWxlbWVudCcgaW4gKDxhbnk+Z2xvYmFsKS5kb2N1bWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX3JlZ2lzdGVyRWxlbWVudCA9ICg8YW55PmRvY3VtZW50KS5yZWdpc3RlckVsZW1lbnQ7XG4gIHZhciBjYWxsYmFja3MgPSBbXG4gICAgJ2NyZWF0ZWRDYWxsYmFjaycsXG4gICAgJ2F0dGFjaGVkQ2FsbGJhY2snLFxuICAgICdkZXRhY2hlZENhbGxiYWNrJyxcbiAgICAnYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJ1xuICBdO1xuXG4gICg8YW55PmRvY3VtZW50KS5yZWdpc3RlckVsZW1lbnQgPSBmdW5jdGlvbiAobmFtZSwgb3B0cykge1xuICAgIGlmIChvcHRzICYmIG9wdHMucHJvdG90eXBlKSB7XG4gICAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKG9wdHMucHJvdG90eXBlLmhhc093blByb3BlcnR5KGNhbGxiYWNrKSkge1xuICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvcHRzLnByb3RvdHlwZSwgY2FsbGJhY2spO1xuICAgICAgICAgIGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWUpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBnbG9iYWwuem9uZS5iaW5kKGRlc2NyaXB0b3IudmFsdWUpO1xuICAgICAgICAgICAgX3JlZGVmaW5lUHJvcGVydHkob3B0cy5wcm90b3R5cGUsIGNhbGxiYWNrLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0cy5wcm90b3R5cGVbY2FsbGJhY2tdID0gZ2xvYmFsLnpvbmUuYmluZChvcHRzLnByb3RvdHlwZVtjYWxsYmFja10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcHRzLnByb3RvdHlwZVtjYWxsYmFja10pIHtcbiAgICAgICAgICBvcHRzLnByb3RvdHlwZVtjYWxsYmFja10gPSBnbG9iYWwuem9uZS5iaW5kKG9wdHMucHJvdG90eXBlW2NhbGxiYWNrXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVnaXN0ZXJFbGVtZW50LmFwcGx5KGRvY3VtZW50LCBbbmFtZSwgb3B0c10pO1xuICB9O1xufVxuIl19
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {'use strict';
		var utils = __webpack_require__(9);
		function apply() {
		    // patched properties depend on addEventListener, so this needs to come first
		    if (global.EventTarget) {
		        utils.patchEventTargetMethods(global.EventTarget.prototype);
		    }
		    else {
		        var apis = [
		            'ApplicationCache',
		            'EventSource',
		            'FileReader',
		            'InputMethodContext',
		            'MediaController',
		            'MessagePort',
		            'Node',
		            'Performance',
		            'SVGElementInstance',
		            'SharedWorker',
		            'TextTrack',
		            'TextTrackCue',
		            'TextTrackList',
		            'WebKitNamedFlow',
		            'Worker',
		            'WorkerGlobalScope',
		            'XMLHttpRequest',
		            'XMLHttpRequestEventTarget',
		            'XMLHttpRequestUpload'
		        ];
		        apis.forEach(function (api) {
		            var proto = global[api] && global[api].prototype;
		            // Some browsers e.g. Android 4.3's don't actually implement
		            // the EventTarget methods for all of these e.g. FileReader.
		            // In this case, there is nothing to patch.
		            if (proto && proto.addEventListener) {
		                utils.patchEventTargetMethods(proto);
		            }
		        });
		        // Patch the methods on `window` instead of `Window.prototype`
		        // `Window` is not accessible on Android 4.3
		        if (typeof (window) !== 'undefined') {
		            utils.patchEventTargetMethods(window);
		        }
		    }
		}
		exports.apply = apply;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtdGFyZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3BhdGNoL2V2ZW50LXRhcmdldC50cyJdLCJuYW1lcyI6WyJhcHBseSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBWSxLQUFLLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFFbEM7SUFDRUEsNkVBQTZFQTtJQUM3RUEsRUFBRUEsQ0FBQ0EsQ0FBT0EsTUFBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDOUJBLEtBQUtBLENBQUNBLHVCQUF1QkEsQ0FBT0EsTUFBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFJckVBLENBQUNBO0lBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ05BLElBQUlBLElBQUlBLEdBQUdBO1lBQ1RBLGtCQUFrQkE7WUFDbEJBLGFBQWFBO1lBQ2JBLFlBQVlBO1lBQ1pBLG9CQUFvQkE7WUFDcEJBLGlCQUFpQkE7WUFDakJBLGFBQWFBO1lBQ2JBLE1BQU1BO1lBQ05BLGFBQWFBO1lBQ2JBLG9CQUFvQkE7WUFDcEJBLGNBQWNBO1lBQ2RBLFdBQVdBO1lBQ1hBLGNBQWNBO1lBQ2RBLGVBQWVBO1lBQ2ZBLGlCQUFpQkE7WUFDakJBLFFBQVFBO1lBQ1JBLG1CQUFtQkE7WUFDbkJBLGdCQUFnQkE7WUFDaEJBLDJCQUEyQkE7WUFDM0JBLHNCQUFzQkE7U0FDdkJBLENBQUNBO1FBRUZBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFVBQVNBLEdBQUdBO1lBQ3ZCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBRWpELDREQUE0RDtZQUM1RCw0REFBNEQ7WUFDNUQsMkNBQTJDO1lBQzNDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsQ0FBQztRQUNILENBQUMsQ0FBQ0EsQ0FBQ0E7UUFFSEEsOERBQThEQTtRQUM5REEsNENBQTRDQTtRQUM1Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLEtBQUtBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDeENBLENBQUNBO0lBQ0hBLENBQUNBO0FBQ0hBLENBQUNBO0FBL0NlLGFBQUssUUErQ3BCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KCkge1xuICAvLyBwYXRjaGVkIHByb3BlcnRpZXMgZGVwZW5kIG9uIGFkZEV2ZW50TGlzdGVuZXIsIHNvIHRoaXMgbmVlZHMgdG8gY29tZSBmaXJzdFxuICBpZiAoKDxhbnk+Z2xvYmFsKS5FdmVudFRhcmdldCkge1xuICAgIHV0aWxzLnBhdGNoRXZlbnRUYXJnZXRNZXRob2RzKCg8YW55Pmdsb2JhbCkuRXZlbnRUYXJnZXQucHJvdG90eXBlKTtcblxuICAvLyBOb3RlOiBFdmVudFRhcmdldCBpcyBub3QgYXZhaWxhYmxlIGluIGFsbCBicm93c2VycyxcbiAgLy8gaWYgaXQncyBub3QgYXZhaWxhYmxlLCB3ZSBpbnN0ZWFkIHBhdGNoIHRoZSBBUElzIGluIHRoZSBJREwgdGhhdCBpbmhlcml0IGZyb20gRXZlbnRUYXJnZXRcbiAgfSBlbHNlIHtcbiAgICB2YXIgYXBpcyA9IFtcbiAgICAgICdBcHBsaWNhdGlvbkNhY2hlJyxcbiAgICAgICdFdmVudFNvdXJjZScsXG4gICAgICAnRmlsZVJlYWRlcicsXG4gICAgICAnSW5wdXRNZXRob2RDb250ZXh0JyxcbiAgICAgICdNZWRpYUNvbnRyb2xsZXInLFxuICAgICAgJ01lc3NhZ2VQb3J0JyxcbiAgICAgICdOb2RlJyxcbiAgICAgICdQZXJmb3JtYW5jZScsXG4gICAgICAnU1ZHRWxlbWVudEluc3RhbmNlJyxcbiAgICAgICdTaGFyZWRXb3JrZXInLFxuICAgICAgJ1RleHRUcmFjaycsXG4gICAgICAnVGV4dFRyYWNrQ3VlJyxcbiAgICAgICdUZXh0VHJhY2tMaXN0JyxcbiAgICAgICdXZWJLaXROYW1lZEZsb3cnLFxuICAgICAgJ1dvcmtlcicsXG4gICAgICAnV29ya2VyR2xvYmFsU2NvcGUnLFxuICAgICAgJ1hNTEh0dHBSZXF1ZXN0JyxcbiAgICAgICdYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0JyxcbiAgICAgICdYTUxIdHRwUmVxdWVzdFVwbG9hZCdcbiAgICBdO1xuXG4gICAgYXBpcy5mb3JFYWNoKGZ1bmN0aW9uKGFwaSkge1xuICAgICAgdmFyIHByb3RvID0gZ2xvYmFsW2FwaV0gJiYgZ2xvYmFsW2FwaV0ucHJvdG90eXBlO1xuXG4gICAgICAvLyBTb21lIGJyb3dzZXJzIGUuZy4gQW5kcm9pZCA0LjMncyBkb24ndCBhY3R1YWxseSBpbXBsZW1lbnRcbiAgICAgIC8vIHRoZSBFdmVudFRhcmdldCBtZXRob2RzIGZvciBhbGwgb2YgdGhlc2UgZS5nLiBGaWxlUmVhZGVyLlxuICAgICAgLy8gSW4gdGhpcyBjYXNlLCB0aGVyZSBpcyBub3RoaW5nIHRvIHBhdGNoLlxuICAgICAgaWYgKHByb3RvICYmIHByb3RvLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgdXRpbHMucGF0Y2hFdmVudFRhcmdldE1ldGhvZHMocHJvdG8pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUGF0Y2ggdGhlIG1ldGhvZHMgb24gYHdpbmRvd2AgaW5zdGVhZCBvZiBgV2luZG93LnByb3RvdHlwZWBcbiAgICAvLyBgV2luZG93YCBpcyBub3QgYWNjZXNzaWJsZSBvbiBBbmRyb2lkIDQuM1xuICAgIGlmICh0eXBlb2Yod2luZG93KSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHV0aWxzLnBhdGNoRXZlbnRUYXJnZXRNZXRob2RzKHdpbmRvdyk7XG4gICAgfVxuICB9XG59XG4iXX0=
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var webSocketPatch = __webpack_require__(18);
		var utils = __webpack_require__(9);
		var keys = __webpack_require__(7);
		var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');
		function apply() {
		    if (utils.isWebWorker()) {
		        // on WebWorker so don't apply patch
		        return;
		    }
		    var supportsWebSocket = typeof WebSocket !== 'undefined';
		    if (canPatchViaPropertyDescriptor()) {
		        // for browsers that we can patch the descriptor:  Chrome & Firefox
		        var onEventNames = eventNames.map(function (property) {
		            return 'on' + property;
		        });
		        utils.patchProperties(HTMLElement.prototype, onEventNames);
		        utils.patchProperties(XMLHttpRequest.prototype);
		        if (supportsWebSocket) {
		            utils.patchProperties(WebSocket.prototype);
		        }
		    }
		    else {
		        // Safari, Android browsers (Jelly Bean)
		        patchViaCapturingAllTheEvents();
		        utils.patchClass('XMLHttpRequest');
		        if (supportsWebSocket) {
		            webSocketPatch.apply();
		        }
		    }
		}
		exports.apply = apply;
		function canPatchViaPropertyDescriptor() {
		    if (!Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
		        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
		        // IDL interface attributes are not configurable
		        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
		        if (desc && !desc.configurable)
		            return false;
		    }
		    Object.defineProperty(HTMLElement.prototype, 'onclick', {
		        get: function () {
		            return true;
		        }
		    });
		    var elt = document.createElement('div');
		    var result = !!elt.onclick;
		    Object.defineProperty(HTMLElement.prototype, 'onclick', {});
		    return result;
		}
		;
		var unboundKey = keys.create('unbound');
		// Whenever any event fires, we check the event target and all parents
		// for `onwhatever` properties and replace them with zone-bound functions
		// - Chrome (for now)
		function patchViaCapturingAllTheEvents() {
		    eventNames.forEach(function (property) {
		        var onproperty = 'on' + property;
		        document.addEventListener(property, function (event) {
		            var elt = event.target, bound;
		            while (elt) {
		                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
		                    bound = global.zone.bind(elt[onproperty]);
		                    bound[unboundKey] = elt[onproperty];
		                    elt[onproperty] = bound;
		                }
		                elt = elt.parentElement;
		            }
		        }, true);
		    });
		}
		;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktZGVzY3JpcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wYXRjaC9wcm9wZXJ0eS1kZXNjcmlwdG9yLnRzIl0sIm5hbWVzIjpbImFwcGx5IiwiY2FuUGF0Y2hWaWFQcm9wZXJ0eURlc2NyaXB0b3IiLCJwYXRjaFZpYUNhcHR1cmluZ0FsbFRoZUV2ZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxjQUFjLFdBQU0sYUFBYSxDQUFDLENBQUE7QUFDOUMsSUFBWSxLQUFLLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFDbEMsSUFBWSxJQUFJLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFaEMsSUFBSSxVQUFVLEdBQUcsdW1CQUF1bUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFcG9CO0lBQ0VBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLENBQUFBLENBQUNBO1FBQ3ZCQSxvQ0FBb0NBO1FBQ3BDQSxNQUFNQSxDQUFDQTtJQUNUQSxDQUFDQTtJQUVEQSxJQUFJQSxpQkFBaUJBLEdBQUdBLE9BQU9BLFNBQVNBLEtBQUtBLFdBQVdBLENBQUNBO0lBQ3pEQSxFQUFFQSxDQUFDQSxDQUFDQSw2QkFBNkJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BDQSxtRUFBbUVBO1FBQ25FQSxJQUFJQSxZQUFZQSxHQUFHQSxVQUFVQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxRQUFRQTtZQUNsRCxNQUFNLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUN6QixDQUFDLENBQUNBLENBQUNBO1FBQ0hBLEtBQUtBLENBQUNBLGVBQWVBLENBQUNBLFdBQVdBLENBQUNBLFNBQVNBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBO1FBQzNEQSxLQUFLQSxDQUFDQSxlQUFlQSxDQUFDQSxjQUFjQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNoREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0QkEsS0FBS0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFDN0NBLENBQUNBO0lBQ0hBLENBQUNBO0lBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ05BLHdDQUF3Q0E7UUFDeENBLDZCQUE2QkEsRUFBRUEsQ0FBQ0E7UUFDaENBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0E7UUFDbkNBLEVBQUVBLENBQUNBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLGNBQWNBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ3pCQSxDQUFDQTtJQUNIQSxDQUFDQTtBQUNIQSxDQUFDQTtBQXpCZSxhQUFLLFFBeUJwQixDQUFBO0FBRUQ7SUFDRUMsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxXQUFXQSxDQUFDQSxTQUFTQSxFQUFFQSxTQUFTQSxDQUFDQSxJQUFJQSxPQUFPQSxPQUFPQSxLQUFLQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN6R0Esd0RBQXdEQTtRQUN4REEsZ0RBQWdEQTtRQUNoREEsSUFBSUEsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUN6RUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDL0NBLENBQUNBO0lBRURBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLFdBQVdBLENBQUNBLFNBQVNBLEVBQUVBLFNBQVNBLEVBQUVBO1FBQ3REQSxHQUFHQSxFQUFFQTtZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQ0ZBLENBQUNBLENBQUNBO0lBQ0hBLElBQUlBLEdBQUdBLEdBQUdBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQ3hDQSxJQUFJQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQTtJQUMzQkEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsU0FBU0EsRUFBRUEsU0FBU0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDNURBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO0FBQ2hCQSxDQUFDQTtBQUFBLENBQUM7QUFFRixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXhDLHNFQUFzRTtBQUN0RSx5RUFBeUU7QUFDekUscUJBQXFCO0FBQ3JCO0lBQ0VDLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLFVBQVVBLFFBQVFBO1FBQ25DLElBQUksVUFBVSxHQUFHLElBQUksR0FBRyxRQUFRLENBQUM7UUFDakMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVLEtBQUs7WUFDakQsSUFBSSxHQUFHLEdBQVMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7WUFDcEMsT0FBTyxHQUFHLEVBQUUsQ0FBQztnQkFDWCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwRCxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQzFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3BDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQzFCLENBQUM7Z0JBQ0QsR0FBRyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7WUFDMUIsQ0FBQztRQUNILENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQ0EsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgd2ViU29ja2V0UGF0Y2ggZnJvbSAnLi93ZWJzb2NrZXQnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0ICogYXMga2V5cyBmcm9tICcuLi9rZXlzJztcblxudmFyIGV2ZW50TmFtZXMgPSAnY29weSBjdXQgcGFzdGUgYWJvcnQgYmx1ciBmb2N1cyBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGNoYW5nZSBjbGljayBjb250ZXh0bWVudSBkYmxjbGljayBkcmFnIGRyYWdlbmQgZHJhZ2VudGVyIGRyYWdsZWF2ZSBkcmFnb3ZlciBkcmFnc3RhcnQgZHJvcCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuZGVkIGlucHV0IGludmFsaWQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBsb2FkIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IG1lc3NhZ2UgbW91c2Vkb3duIG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBtb3VzZW1vdmUgbW91c2VvdXQgbW91c2VvdmVyIG1vdXNldXAgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzZXQgc2Nyb2xsIHNlZWtlZCBzZWVraW5nIHNlbGVjdCBzaG93IHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZyBtb3pmdWxsc2NyZWVuY2hhbmdlIG1vemZ1bGxzY3JlZW5lcnJvciBtb3pwb2ludGVybG9ja2NoYW5nZSBtb3pwb2ludGVybG9ja2Vycm9yIGVycm9yIHdlYmdsY29udGV4dHJlc3RvcmVkIHdlYmdsY29udGV4dGxvc3Qgd2ViZ2xjb250ZXh0Y3JlYXRpb25lcnJvcicuc3BsaXQoJyAnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KCkge1xuICBpZiAodXRpbHMuaXNXZWJXb3JrZXIoKSl7XG4gICAgLy8gb24gV2ViV29ya2VyIHNvIGRvbid0IGFwcGx5IHBhdGNoXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN1cHBvcnRzV2ViU29ja2V0ID0gdHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCc7XG4gIGlmIChjYW5QYXRjaFZpYVByb3BlcnR5RGVzY3JpcHRvcigpKSB7XG4gICAgLy8gZm9yIGJyb3dzZXJzIHRoYXQgd2UgY2FuIHBhdGNoIHRoZSBkZXNjcmlwdG9yOiAgQ2hyb21lICYgRmlyZWZveFxuICAgIHZhciBvbkV2ZW50TmFtZXMgPSBldmVudE5hbWVzLm1hcChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiAnb24nICsgcHJvcGVydHk7XG4gICAgfSk7XG4gICAgdXRpbHMucGF0Y2hQcm9wZXJ0aWVzKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgb25FdmVudE5hbWVzKTtcbiAgICB1dGlscy5wYXRjaFByb3BlcnRpZXMoWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlKTtcbiAgICBpZiAoc3VwcG9ydHNXZWJTb2NrZXQpIHtcbiAgICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhXZWJTb2NrZXQucHJvdG90eXBlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2FmYXJpLCBBbmRyb2lkIGJyb3dzZXJzIChKZWxseSBCZWFuKVxuICAgIHBhdGNoVmlhQ2FwdHVyaW5nQWxsVGhlRXZlbnRzKCk7XG4gICAgdXRpbHMucGF0Y2hDbGFzcygnWE1MSHR0cFJlcXVlc3QnKTtcbiAgICBpZiAoc3VwcG9ydHNXZWJTb2NrZXQpIHtcbiAgICAgIHdlYlNvY2tldFBhdGNoLmFwcGx5KCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNhblBhdGNoVmlhUHJvcGVydHlEZXNjcmlwdG9yKCkge1xuICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnb25jbGljaycpICYmIHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFdlYktpdCBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM0MzY0XG4gICAgLy8gSURMIGludGVyZmFjZSBhdHRyaWJ1dGVzIGFyZSBub3QgY29uZmlndXJhYmxlXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnQucHJvdG90eXBlLCAnb25jbGljaycpO1xuICAgIGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ29uY2xpY2snLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICB2YXIgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciByZXN1bHQgPSAhIWVsdC5vbmNsaWNrO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnb25jbGljaycsIHt9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciB1bmJvdW5kS2V5ID0ga2V5cy5jcmVhdGUoJ3VuYm91bmQnKTtcblxuLy8gV2hlbmV2ZXIgYW55IGV2ZW50IGZpcmVzLCB3ZSBjaGVjayB0aGUgZXZlbnQgdGFyZ2V0IGFuZCBhbGwgcGFyZW50c1xuLy8gZm9yIGBvbndoYXRldmVyYCBwcm9wZXJ0aWVzIGFuZCByZXBsYWNlIHRoZW0gd2l0aCB6b25lLWJvdW5kIGZ1bmN0aW9uc1xuLy8gLSBDaHJvbWUgKGZvciBub3cpXG5mdW5jdGlvbiBwYXRjaFZpYUNhcHR1cmluZ0FsbFRoZUV2ZW50cygpIHtcbiAgZXZlbnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgIHZhciBvbnByb3BlcnR5ID0gJ29uJyArIHByb3BlcnR5O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIocHJvcGVydHksIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGVsdCA9IDxOb2RlPmV2ZW50LnRhcmdldCwgYm91bmQ7XG4gICAgICB3aGlsZSAoZWx0KSB7XG4gICAgICAgIGlmIChlbHRbb25wcm9wZXJ0eV0gJiYgIWVsdFtvbnByb3BlcnR5XVt1bmJvdW5kS2V5XSkge1xuICAgICAgICAgIGJvdW5kID0gZ2xvYmFsLnpvbmUuYmluZChlbHRbb25wcm9wZXJ0eV0pO1xuICAgICAgICAgIGJvdW5kW3VuYm91bmRLZXldID0gZWx0W29ucHJvcGVydHldO1xuICAgICAgICAgIGVsdFtvbnByb3BlcnR5XSA9IGJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGVsdCA9IGVsdC5wYXJlbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0sIHRydWUpO1xuICB9KTtcbn07XG4iXX0=
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var utils = __webpack_require__(9);
		// we have to patch the instance since the proto is non-configurable
		function apply() {
		    var WS = global.WebSocket;
		    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
		    // On older Chrome, no need since EventTarget was already patched
		    if (!global.EventTarget) {
		        utils.patchEventTargetMethods(WS.prototype);
		    }
		    global.WebSocket = function (a, b) {
		        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
		        var proxySocket;
		        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
		        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
		        if (onmessageDesc && onmessageDesc.configurable === false) {
		            proxySocket = Object.create(socket);
		            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
		                proxySocket[propName] = function () {
		                    return socket[propName].apply(socket, arguments);
		                };
		            });
		        }
		        else {
		            // we can patch the real socket
		            proxySocket = socket;
		        }
		        utils.patchProperties(proxySocket, ['onclose', 'onerror', 'onmessage', 'onopen']);
		        return proxySocket;
		    };
		}
		exports.apply = apply;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3BhdGNoL3dlYnNvY2tldC50cyJdLCJuYW1lcyI6WyJhcHBseSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxLQUFLLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFFbEMsb0VBQW9FO0FBQ3BFO0lBQ0VBLElBQUlBLEVBQUVBLEdBQVNBLE1BQU9BLENBQUNBLFNBQVNBLENBQUNBO0lBQ2pDQSx5RkFBeUZBO0lBQ3pGQSxpRUFBaUVBO0lBQ2pFQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFPQSxNQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMvQkEsS0FBS0EsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxFQUFFQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtJQUM5Q0EsQ0FBQ0E7SUFDS0EsTUFBT0EsQ0FBQ0EsU0FBU0EsR0FBR0EsVUFBU0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDckMsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksV0FBVyxDQUFDO1FBRWhCLGdHQUFnRztRQUNoRyxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3pFLEVBQUUsQ0FBQyxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsWUFBWSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDMUQsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsUUFBUTtnQkFDcEYsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHO29CQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ25ELENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sK0JBQStCO1lBQy9CLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDdkIsQ0FBQztRQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUVsRixNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3JCLENBQUMsQ0FBQ0E7QUFDSkEsQ0FBQ0E7QUE3QmUsYUFBSyxRQTZCcEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcblxuLy8gd2UgaGF2ZSB0byBwYXRjaCB0aGUgaW5zdGFuY2Ugc2luY2UgdGhlIHByb3RvIGlzIG5vbi1jb25maWd1cmFibGVcbmV4cG9ydCBmdW5jdGlvbiBhcHBseSgpIHtcbiAgdmFyIFdTID0gKDxhbnk+Z2xvYmFsKS5XZWJTb2NrZXQ7XG4gIC8vIE9uIFNhZmFyaSB3aW5kb3cuRXZlbnRUYXJnZXQgZG9lc24ndCBleGlzdCBzbyBuZWVkIHRvIHBhdGNoIFdTIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyXG4gIC8vIE9uIG9sZGVyIENocm9tZSwgbm8gbmVlZCBzaW5jZSBFdmVudFRhcmdldCB3YXMgYWxyZWFkeSBwYXRjaGVkXG4gIGlmICghKDxhbnk+Z2xvYmFsKS5FdmVudFRhcmdldCkge1xuICAgIHV0aWxzLnBhdGNoRXZlbnRUYXJnZXRNZXRob2RzKFdTLnByb3RvdHlwZSk7XG4gIH1cbiAgKDxhbnk+Z2xvYmFsKS5XZWJTb2NrZXQgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHNvY2tldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gbmV3IFdTKGEsIGIpIDogbmV3IFdTKGEpO1xuICAgIHZhciBwcm94eVNvY2tldDtcblxuICAgIC8vIFNhZmFyaSA3LjAgaGFzIG5vbi1jb25maWd1cmFibGUgb3duICdvbm1lc3NhZ2UnIGFuZCBmcmllbmRzIHByb3BlcnRpZXMgb24gdGhlIHNvY2tldCBpbnN0YW5jZVxuICAgIHZhciBvbm1lc3NhZ2VEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb2NrZXQsICdvbm1lc3NhZ2UnKTtcbiAgICBpZiAob25tZXNzYWdlRGVzYyAmJiBvbm1lc3NhZ2VEZXNjLmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHByb3h5U29ja2V0ID0gT2JqZWN0LmNyZWF0ZShzb2NrZXQpO1xuICAgICAgWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCAnc2VuZCcsICdjbG9zZSddLmZvckVhY2goZnVuY3Rpb24ocHJvcE5hbWUpIHtcbiAgICAgICAgcHJveHlTb2NrZXRbcHJvcE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHNvY2tldFtwcm9wTmFtZV0uYXBwbHkoc29ja2V0LCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGNhbiBwYXRjaCB0aGUgcmVhbCBzb2NrZXRcbiAgICAgIHByb3h5U29ja2V0ID0gc29ja2V0O1xuICAgIH1cblxuICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm94eVNvY2tldCwgWydvbmNsb3NlJywgJ29uZXJyb3InLCAnb25tZXNzYWdlJywgJ29ub3BlbiddKTtcblxuICAgIHJldHVybiBwcm94eVNvY2tldDtcbiAgfTtcbn1cbiJdfQ==
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var utils = __webpack_require__(9);
		function apply() {
		    if (global.navigator && global.navigator.geolocation) {
		        utils.patchPrototype(global.navigator.geolocation, [
		            'getCurrentPosition',
		            'watchPosition'
		        ]);
		    }
		}
		exports.apply = apply;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcGF0Y2gvZ2VvbG9jYXRpb24udHMiXSwibmFtZXMiOlsiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQVksS0FBSyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBRWxDO0lBQ0VBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLFNBQVNBLElBQUlBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3JEQSxLQUFLQSxDQUFDQSxjQUFjQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFXQSxFQUFFQTtZQUNqREEsb0JBQW9CQTtZQUNwQkEsZUFBZUE7U0FDaEJBLENBQUNBLENBQUNBO0lBQ0xBLENBQUNBO0FBQ0hBLENBQUNBO0FBUGUsYUFBSyxRQU9wQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHkoKSB7XG4gIGlmIChnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcbiAgICB1dGlscy5wYXRjaFByb3RvdHlwZShnbG9iYWwubmF2aWdhdG9yLmdlb2xvY2F0aW9uLCBbXG4gICAgICAnZ2V0Q3VycmVudFBvc2l0aW9uJyxcbiAgICAgICd3YXRjaFBvc2l0aW9uJ1xuICAgIF0pO1xuICB9XG59XG4iXX0=
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		var utils = __webpack_require__(9);
		function apply() {
		    utils.patchClass('FileReader');
		}
		exports.apply = apply;
		//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcGF0Y2gvZmlsZS1yZWFkZXIudHMiXSwibmFtZXMiOlsiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQVksS0FBSyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBRWxDO0lBQ0VBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO0FBQ2pDQSxDQUFDQTtBQUZlLGFBQUssUUFFcEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KCkge1xuICB1dGlscy5wYXRjaENsYXNzKCdGaWxlUmVhZGVyJyk7XG59XG4iXX0=

	/***/ }
	/******/ ]);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.BoilerVR = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _class;

	var _ionicAngular = __webpack_require__(5);

	var _core = __webpack_require__(7);

	var _cardboarddata = __webpack_require__(362);

	var _intro = __webpack_require__(363);

	var _settings = __webpack_require__(365);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// http://ionicframework.com/docs/v2/api/config/Config/
	var BoilerVR = exports.BoilerVR = (_dec = (0, _ionicAngular.App)({
	  template: '<ion-nav [root]="rootPage"></ion-nav>',
	  config: {} }), _dec(_class = function () {
	  _createClass(BoilerVR, null, [{
	    key: 'parameters',
	    get: function get() {
	      return [[_ionicAngular.IonicApp], [_ionicAngular.Platform]];
	    }
	  }]);

	  function BoilerVR(app, platform) {
	    _classCallCheck(this, BoilerVR);

	    window._bartVR = this;
	    this.Data = new _cardboarddata.CardBoardData();
	    this.app = app;
	    this.babylonMod = null;
	    this.isNative = false;

	    this.pages = [{ title: 'CardboardVR', component: _intro.IntroPage }];

	    this.rootPage = _intro.IntroPage;
	    platform.ready().then(function () {
	      if (window.cordova && window.cordova.plugins.Keyboard) {
	        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
	        cordova.plugins.Keyboard.disableScroll(true);
	      }
	      platform.fullScreen();
	      if (window.StatusBar) {
	        return StatusBar.hide();
	      }
	    });
	  }

	  _createClass(BoilerVR, [{
	    key: 'launchIntoFullscreen',
	    value: function launchIntoFullscreen() {
	      var element = arguments.length <= 0 || arguments[0] === undefined ? document.documentElement : arguments[0];

	      if (typeof element.requestFullscreen != 'undefined') {
	        element.requestFullscreen();
	      } else if (typeof element.mozRequestFullScreen != 'undefined') {
	        element.mozRequestFullScreen();
	      } else if (typeof element.webkitRequestFullscreen != 'undefined') {
	        element.webkitRequestFullscreen();
	      } else if (typeof element.msRequestFullscreen != 'undefined') {
	        element.msRequestFullscreen();
	      }
	    }
	  }, {
	    key: 'exitFullscreen',
	    value: function exitFullscreen() {
	      if (typeof document.exitFullscreen != 'undefined') {
	        document.exitFullscreen();
	      } else if (typeof document.mozCancelFullScreen != 'undefined') {
	        document.mozCancelFullScreen();
	      } else if (typeof document.webkitExitFullscreen != 'undefined') {
	        document.webkitExitFullscreen();
	      }
	    }
	  }]);

	  return BoilerVR;
	}()) || _class);

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(6));
	__export(__webpack_require__(161));
	__export(__webpack_require__(284));
	__export(__webpack_require__(345));
	__export(__webpack_require__(346));
	__export(__webpack_require__(347));
	__export(__webpack_require__(162));
	__export(__webpack_require__(351));
	__export(__webpack_require__(160));
	__export(__webpack_require__(165));
	__export(__webpack_require__(276));
	__export(__webpack_require__(167));
	__export(__webpack_require__(306));
	__export(__webpack_require__(305));
	__export(__webpack_require__(283));
	__export(__webpack_require__(355));
	// these modules don't export anything
	__webpack_require__(356);
	__webpack_require__(357);
	__webpack_require__(358);
	__webpack_require__(359);
	__webpack_require__(360);
	__webpack_require__(361);


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var core_1 = __webpack_require__(7);
	var router_1 = __webpack_require__(117);
	var http_1 = __webpack_require__(145);
	var click_block_1 = __webpack_require__(160);
	var config_1 = __webpack_require__(161);
	var events_1 = __webpack_require__(165);
	var feature_detect_1 = __webpack_require__(166);
	var form_1 = __webpack_require__(167);
	var app_1 = __webpack_require__(168);
	var keyboard_1 = __webpack_require__(276);
	var menu_controller_1 = __webpack_require__(277);
	var nav_registry_1 = __webpack_require__(278);
	var platform_1 = __webpack_require__(162);
	var dom_1 = __webpack_require__(164);
	var scroll_to_1 = __webpack_require__(279);
	var tap_click_1 = __webpack_require__(280);
	var translate_1 = __webpack_require__(283);
	/**
	 * @private
	 */
	function ionicProviders(args) {
	    if (args === void 0) { args = {}; }
	    var platform = new platform_1.Platform();
	    var navRegistry = new nav_registry_1.NavRegistry(args.pages);
	    var config = args.config;
	    if (!(config instanceof config_1.Config)) {
	        config = new config_1.Config(config);
	    }
	    platform.setUrl(window.location.href);
	    platform.setUserAgent(window.navigator.userAgent);
	    platform.setNavigatorPlatform(window.navigator.platform);
	    platform.load();
	    config.setPlatform(platform);
	    var clickBlock = new click_block_1.ClickBlock();
	    var events = new events_1.Events();
	    var featureDetect = new feature_detect_1.FeatureDetect();
	    setupDom(window, document, config, platform, clickBlock, featureDetect);
	    bindEvents(window, document, platform, events);
	    // prepare the ready promise to fire....when ready
	    platform.prepareReady(config);
	    return [
	        app_1.IonicApp,
	        core_1.provide(click_block_1.ClickBlock, { useValue: clickBlock }),
	        core_1.provide(config_1.Config, { useValue: config }),
	        core_1.provide(platform_1.Platform, { useValue: platform }),
	        core_1.provide(feature_detect_1.FeatureDetect, { useValue: featureDetect }),
	        core_1.provide(events_1.Events, { useValue: events }),
	        core_1.provide(nav_registry_1.NavRegistry, { useValue: navRegistry }),
	        tap_click_1.TapClick,
	        form_1.Form,
	        keyboard_1.Keyboard,
	        menu_controller_1.MenuController,
	        translate_1.Translate,
	        router_1.ROUTER_PROVIDERS,
	        core_1.provide(router_1.LocationStrategy, { useClass: router_1.HashLocationStrategy }),
	        http_1.HTTP_PROVIDERS,
	    ];
	}
	exports.ionicProviders = ionicProviders;
	function setupDom(window, document, config, platform, clickBlock, featureDetect) {
	    var bodyEle = document.body;
	    var mode = config.get('mode');
	    // if dynamic mode links have been added the fire up the correct one
	    var modeLinkAttr = mode + '-href';
	    var linkEle = document.head.querySelector('link[' + modeLinkAttr + ']');
	    if (linkEle) {
	        var href = linkEle.getAttribute(modeLinkAttr);
	        linkEle.removeAttribute(modeLinkAttr);
	        linkEle.href = href;
	    }
	    // set the mode class name
	    // ios/md/wp
	    bodyEle.classList.add(mode);
	    // language and direction
	    platform.setDir(document.documentElement.dir, false);
	    platform.setLang(document.documentElement.lang, false);
	    var versions = platform.versions();
	    platform.platforms().forEach(function (platformName) {
	        // platform-ios
	        var platformClass = 'platform-' + platformName;
	        bodyEle.classList.add(platformClass);
	        var platformVersion = versions[platformName];
	        if (platformVersion) {
	            // platform-ios9
	            platformClass += platformVersion.major;
	            bodyEle.classList.add(platformClass);
	            // platform-ios9_3
	            bodyEle.classList.add(platformClass + '_' + platformVersion.minor);
	        }
	    });
	    // touch devices should not use :hover CSS pseudo
	    // enable :hover CSS when the "hoverCSS" setting is not false
	    if (config.get('hoverCSS') !== false) {
	        bodyEle.classList.add('enable-hover');
	    }
	    if (config.get('clickBlock')) {
	        clickBlock.enable();
	    }
	    // run feature detection tests
	    featureDetect.run(window, document);
	}
	/**
	 * Bind some global events and publish on the 'app' channel
	 */
	function bindEvents(window, document, platform, events) {
	    window.addEventListener('online', function (ev) {
	        events.publish('app:online', ev);
	    }, false);
	    window.addEventListener('offline', function (ev) {
	        events.publish('app:offline', ev);
	    }, false);
	    window.addEventListener('orientationchange', function (ev) {
	        events.publish('app:rotated', ev);
	    });
	    // When that status taps, we respond
	    window.addEventListener('statusTap', function (ev) {
	        // TODO: Make this more better
	        var el = document.elementFromPoint(platform.width() / 2, platform.height() / 2);
	        if (!el) {
	            return;
	        }
	        var content = dom_1.closest(el, 'scroll-content');
	        if (content) {
	            var scrollTo = new scroll_to_1.ScrollTo(content);
	            scrollTo.start(0, 0, 300, 0);
	        }
	    });
	    // start listening for resizes XXms after the app starts
	    setTimeout(function () {
	        window.addEventListener('resize', function () {
	            platform.windowResize();
	        });
	    }, 2000);
	}


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @description
	 * Starting point to import all public core APIs.
	 */
	__export(__webpack_require__(8));
	__export(__webpack_require__(82));
	__export(__webpack_require__(83));
	__export(__webpack_require__(11));
	__export(__webpack_require__(84));
	var lang_1 = __webpack_require__(10);
	exports.enableProdMode = lang_1.enableProdMode;
	var application_ref_1 = __webpack_require__(85);
	exports.platform = application_ref_1.platform;
	exports.createNgZone = application_ref_1.createNgZone;
	exports.PlatformRef = application_ref_1.PlatformRef;
	exports.ApplicationRef = application_ref_1.ApplicationRef;
	var application_tokens_1 = __webpack_require__(87);
	exports.APP_ID = application_tokens_1.APP_ID;
	exports.APP_COMPONENT = application_tokens_1.APP_COMPONENT;
	exports.APP_INITIALIZER = application_tokens_1.APP_INITIALIZER;
	exports.PACKAGE_ROOT_URL = application_tokens_1.PACKAGE_ROOT_URL;
	exports.PLATFORM_INITIALIZER = application_tokens_1.PLATFORM_INITIALIZER;
	__export(__webpack_require__(106));
	__export(__webpack_require__(107));
	__export(__webpack_require__(108));
	var debug_node_1 = __webpack_require__(111);
	exports.DebugElement = debug_node_1.DebugElement;
	exports.DebugNode = debug_node_1.DebugNode;
	exports.asNativeElements = debug_node_1.asNativeElements;
	__export(__webpack_require__(88));
	__export(__webpack_require__(29));
	__export(__webpack_require__(112));
	__export(__webpack_require__(113));
	__export(__webpack_require__(114));
	__export(__webpack_require__(21));


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var di_1 = __webpack_require__(9);
	exports.QueryMetadata = di_1.QueryMetadata;
	exports.ContentChildrenMetadata = di_1.ContentChildrenMetadata;
	exports.ContentChildMetadata = di_1.ContentChildMetadata;
	exports.ViewChildrenMetadata = di_1.ViewChildrenMetadata;
	exports.ViewQueryMetadata = di_1.ViewQueryMetadata;
	exports.ViewChildMetadata = di_1.ViewChildMetadata;
	exports.AttributeMetadata = di_1.AttributeMetadata;
	var directives_1 = __webpack_require__(28);
	exports.ComponentMetadata = directives_1.ComponentMetadata;
	exports.DirectiveMetadata = directives_1.DirectiveMetadata;
	exports.PipeMetadata = directives_1.PipeMetadata;
	exports.InputMetadata = directives_1.InputMetadata;
	exports.OutputMetadata = directives_1.OutputMetadata;
	exports.HostBindingMetadata = directives_1.HostBindingMetadata;
	exports.HostListenerMetadata = directives_1.HostListenerMetadata;
	var view_1 = __webpack_require__(81);
	exports.ViewMetadata = view_1.ViewMetadata;
	exports.ViewEncapsulation = view_1.ViewEncapsulation;
	var di_2 = __webpack_require__(9);
	var directives_2 = __webpack_require__(28);
	var view_2 = __webpack_require__(81);
	var decorators_1 = __webpack_require__(14);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ComponentMetadata.
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates all the injectable objects configured with `providers` and `viewProviders`.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link ViewMetadata}.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the component.
	 *
	 * ### Example
	 *
	 * {@example core/ts/metadata/metadata.ts region='component'}
	 */
	exports.Component = decorators_1.makeDecorator(directives_2.ComponentMetadata, function (fn) { return fn.View = exports.View; });
	// TODO(alexeagle): remove the duplication of this doc. It is copied from DirectiveMetadata.
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link ViewMetadata}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
	 * {@link DirectiveMetadata} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ### Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   inputs: [
	 *     'id: dependency'
	 *   ]
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the current element, the
	 * parent element, or its parents.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Host() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * `@Host` checks the current element, the parent, as well as its parents recursively. If
	 * `dependency="2"` didn't
	 * exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child directives, a directive can't simply inject the list of child directives. Instead,
	 * the directive injects a {@link QueryList}, which updates its contents as children are added,
	 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an
	 * `ngIf`, or an `ngSwitch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * By passing the descendant flag to `@Query` above, we can include the children of the child
	 * elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ### Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   inputs: [
	 *     'text: tooltip'
	 *   ],
	 *   host: {
	 *     '(mouseenter)': 'onMouseEnter()',
	 *     '(mouseleave)': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the directive.
	 *
	 * ### Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   inputs: ['unless']
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   templateRef: TemplateRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.templateRef = templateRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.templateRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 */
	exports.Directive = decorators_1.makeDecorator(directives_2.DirectiveMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewMetadata.
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	 * within the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 */
	exports.View = decorators_1.makeDecorator(view_2.ViewMetadata, function (fn) { return fn.View = exports.View; });
	/**
	 * Specifies that a constant attribute value should be injected.
	 *
	 * The directive can inject constant string literals of host element attributes.
	 *
	 * ### Example
	 *
	 * Suppose we have an `<input>` element and want to know its `type`.
	 *
	 * ```html
	 * <input type="text">
	 * ```
	 *
	 * A decorator can inject string literal `text` like so:
	 *
	 * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}
	 */
	exports.Attribute = decorators_1.makeParamDecorator(di_2.AttributeMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from QueryMetadata.
	/**
	 * Declares an injectable parameter to be a live list of directives or variable
	 * bindings from the content children of a directive.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	 *
	 * Assume that `<tabs>` component would like to get a list its children `<pane>`
	 * components as shown in this example:
	 *
	 * ```html
	 * <tabs>
	 *   <pane title="Overview">...</pane>
	 *   <pane *ngFor="#o of objects" [title]="o.title">{{o.text}}</pane>
	 * </tabs>
	 * ```
	 *
	 * The preferred solution is to query for `Pane` directives using this decorator.
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'pane',
	 *   inputs: ['title']
	 * })
	 * class Pane {
	 *   title:string;
	 * }
	 *
	 * @Component({
	 *  selector: 'tabs',
	 *  template: `
	 *    <ul>
	 *      <li *ngFor="#pane of panes">{{pane.title}}</li>
	 *    </ul>
	 *    <content></content>
	 *  `
	 * })
	 * class Tabs {
	 *   panes: QueryList<Pane>;
	 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
	 *     this.panes = panes;
	 *   }
	 * }
	 * ```
	 *
	 * A query can look for variable bindings by passing in a string with desired binding symbol.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
	 * ```html
	 * <seeker>
	 *   <div #findme>...</div>
	 * </seeker>
	 *
	 * @Component({ selector: 'foo' })
	 * class seeker {
	 *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * In this case the object that is injected depend on the type of the variable
	 * binding. It can be an ElementRef, a directive or a component.
	 *
	 * Passing in a comma separated list of variable bindings will query for all of them.
	 *
	 * ```html
	 * <seeker>
	 *   <div #findMe>...</div>
	 *   <div #findMeToo>...</div>
	 * </seeker>
	 *
	 *  @Component({
	 *   selector: 'foo'
	 * })
	 * class Seeker {
	 *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * Configure whether query looks for direct children or all descendants
	 * of the querying element, by using the `descendants` parameter.
	 * It is set to `false` by default.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
	 * ```html
	 * <container #first>
	 *   <item>a</item>
	 *   <item>b</item>
	 *   <container #second>
	 *     <item>c</item>
	 *   </container>
	 * </container>
	 * ```
	 *
	 * When querying for items, the first container will see only `a` and `b` by default,
	 * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
	 *
	 * The queried directives are kept in a depth-first pre-order with respect to their
	 * positions in the DOM.
	 *
	 * Query does not look deep into any subcomponent views.
	 *
	 * Query is updated as part of the change-detection cycle. Since change detection
	 * happens after construction of a directive, QueryList will always be empty when observed in the
	 * constructor.
	 *
	 * The injected object is an unmodifiable live list.
	 * See {@link QueryList} for more details.
	 */
	exports.Query = decorators_1.makeParamDecorator(di_2.QueryMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildrenMetadata.
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `ngAfterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
	 *
	 *   ngAfterContentInit() {
	 *     // contentChildren is set
	 *   }
	 * }
	 * ```
	 */
	exports.ContentChildren = decorators_1.makePropDecorator(di_2.ContentChildrenMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildMetadata.
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `ngAfterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChild(ChildDirective) contentChild;
	 *
	 *   ngAfterContentInit() {
	 *     // contentChild is set
	 *   }
	 * }
	 * ```
	 */
	exports.ContentChild = decorators_1.makePropDecorator(di_2.ContentChildMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildrenMetadata.
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `ngAfterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
	 *
	 *   ngAfterViewInit() {
	 *     // viewChildren is set
	 *   }
	 * }
	 * ```
	 */
	exports.ViewChildren = decorators_1.makePropDecorator(di_2.ViewChildrenMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildMetadata.
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `ngAfterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChild(ItemDirective) viewChild:ItemDirective;
	 *
	 *   ngAfterViewInit() {
	 *     // viewChild is set
	 *   }
	 * }
	 * ```
	 */
	exports.ViewChild = decorators_1.makePropDecorator(di_2.ViewChildMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewQueryMetadata.
	/**
	 * Similar to {@link QueryMetadata}, but querying the component view, instead of
	 * the content children.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
	 *
	 * ```javascript
	 * @Component({...})
	 * @View({
	 *   template: `
	 *     <item> a </item>
	 *     <item> b </item>
	 *     <item> c </item>
	 *   `
	 * })
	 * class MyComponent {
	 *   shown: boolean;
	 *
	 *   constructor(private @Query(Item) items:QueryList<Item>) {
	 *     items.changes.subscribe(() => console.log(items.length));
	 *   }
	 * }
	 * ```
	 *
	 * Supports the same querying parameters as {@link QueryMetadata}, except
	 * `descendants`. This always queries the whole view.
	 *
	 * As `shown` is flipped between true and false, items will contain zero of one
	 * items.
	 *
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * The injected object is an iterable and observable live list.
	 * See {@link QueryList} for more details.
	 */
	exports.ViewQuery = decorators_1.makeParamDecorator(di_2.ViewQueryMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from PipeMetadata.
	/**
	 * Declare reusable pipe function.
	 *
	 * ### Example
	 *
	 * {@example core/ts/metadata/metadata.ts region='pipe'}
	 */
	exports.Pipe = decorators_1.makeDecorator(directives_2.PipeMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from InputMetadata.
	/**
	 * Declares a data-bound input property.
	 *
	 * Angular automatically updates data-bound properties during change detection.
	 *
	 * `InputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * The following example creates a component with two input properties.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'bank-account',
	 *   template: `
	 *     Bank Name: {{bankName}}
	 *     Account Id: {{id}}
	 *   `
	 * })
	 * class BankAccount {
	 *   @Input() bankName: string;
	 *   @Input('account-id') id: string;
	 *
	 *   // this property is not bound, and won't be automatically updated by Angular
	 *   normalizedBankName: string;
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
	 *   `,
	 *   directives: [BankAccount]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	exports.Input = decorators_1.makePropDecorator(directives_2.InputMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from OutputMetadata.
	/**
	 * Declares an event-bound output property.
	 *
	 * When an output property emits an event, an event handler attached to that event
	 * the template is invoked.
	 *
	 * `OutputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Directive({
	 *   selector: 'interval-dir',
	 * })
	 * class IntervalDir {
	 *   @Output() everySecond = new EventEmitter();
	 *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
	 *
	 *   constructor() {
	 *     setInterval(() => this.everySecond.emit("event"), 1000);
	 *     setInterval(() => this.five5Secs.emit("event"), 5000);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
	 *     </interval-dir>
	 *   `,
	 *   directives: [IntervalDir]
	 * })
	 * class App {
	 *   everySecond() { console.log('second'); }
	 *   everyFiveSeconds() { console.log('five seconds'); }
	 * }
	 * bootstrap(App);
	 * ```
	 */
	exports.Output = decorators_1.makePropDecorator(directives_2.OutputMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from HostBindingMetadata.
	/**
	 * Declares a host property binding.
	 *
	 * Angular automatically checks host property bindings during change detection.
	 * If a binding changes, it will update the host element of the directive.
	 *
	 * `HostBindingMetadata` takes an optional parameter that specifies the property
	 * name of the host element that will be updated. When not provided,
	 * the class property name is used.
	 *
	 * ### Example
	 *
	 * The following example creates a directive that sets the `valid` and `invalid` classes
	 * on the DOM element that has ngModel directive on it.
	 *
	 * ```typescript
	 * @Directive({selector: '[ngModel]'})
	 * class NgModelStatus {
	 *   constructor(public control:NgModel) {}
	 *   @HostBinding('[class.valid]') get valid { return this.control.valid; }
	 *   @HostBinding('[class.invalid]') get invalid { return this.control.invalid; }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<input [(ngModel)]="prop">`,
	 *   directives: [FORM_DIRECTIVES, NgModelStatus]
	 * })
	 * class App {
	 *   prop;
	 * }
	 *
	 * bootstrap(App);
	 * ```
	 */
	exports.HostBinding = decorators_1.makePropDecorator(directives_2.HostBindingMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from HostListenerMetadata.
	/**
	 * Declares a host listener.
	 *
	 * Angular will invoke the decorated method when the host element emits the specified event.
	 *
	 * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
	 * event.
	 *
	 * ### Example
	 *
	 * The following example declares a directive that attaches a click listener to the button and
	 * counts clicks.
	 *
	 * ```typescript
	 * @Directive({selector: 'button[counting]'})
	 * class CountClicks {
	 *   numberOfClicks = 0;
	 *
	 *   @HostListener('click', ['$event.target'])
	 *   onClick(btn) {
	 *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<button counting>Increment</button>`,
	 *   directives: [CountClicks]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	exports.HostListener = decorators_1.makePropDecorator(directives_2.HostListenerMetadata);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var metadata_1 = __webpack_require__(12);
	/**
	 * Specifies that a constant attribute value should be injected.
	 *
	 * The directive can inject constant string literals of host element attributes.
	 *
	 * ### Example
	 *
	 * Suppose we have an `<input>` element and want to know its `type`.
	 *
	 * ```html
	 * <input type="text">
	 * ```
	 *
	 * A decorator can inject string literal `text` like so:
	 *
	 * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}
	 */
	var AttributeMetadata = (function (_super) {
	    __extends(AttributeMetadata, _super);
	    function AttributeMetadata(attributeName) {
	        _super.call(this);
	        this.attributeName = attributeName;
	    }
	    Object.defineProperty(AttributeMetadata.prototype, "token", {
	        get: function () {
	            // Normally one would default a token to a type of an injected value but here
	            // the type of a variable is "string" and we can't use primitive type as a return value
	            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
	            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
	            // account.
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AttributeMetadata.prototype.toString = function () { return "@Attribute(" + lang_1.stringify(this.attributeName) + ")"; };
	    AttributeMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], AttributeMetadata);
	    return AttributeMetadata;
	})(metadata_1.DependencyMetadata);
	exports.AttributeMetadata = AttributeMetadata;
	/**
	 * Declares an injectable parameter to be a live list of directives or variable
	 * bindings from the content children of a directive.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	 *
	 * Assume that `<tabs>` component would like to get a list its children `<pane>`
	 * components as shown in this example:
	 *
	 * ```html
	 * <tabs>
	 *   <pane title="Overview">...</pane>
	 *   <pane *ngFor="#o of objects" [title]="o.title">{{o.text}}</pane>
	 * </tabs>
	 * ```
	 *
	 * The preferred solution is to query for `Pane` directives using this decorator.
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'pane',
	 *   inputs: ['title']
	 * })
	 * class Pane {
	 *   title:string;
	 * }
	 *
	 * @Component({
	 *  selector: 'tabs',
	 *  template: `
	 *    <ul>
	 *      <li *ngFor="#pane of panes">{{pane.title}}</li>
	 *    </ul>
	 *    <content></content>
	 *  `
	 * })
	 * class Tabs {
	 *   panes: QueryList<Pane>;
	 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
	  *    this.panes = panes;
	  *  }
	 * }
	 * ```
	 *
	 * A query can look for variable bindings by passing in a string with desired binding symbol.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
	 * ```html
	 * <seeker>
	 *   <div #findme>...</div>
	 * </seeker>
	 *
	 * @Component({ selector: 'seeker' })
	 * class Seeker {
	 *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * In this case the object that is injected depend on the type of the variable
	 * binding. It can be an ElementRef, a directive or a component.
	 *
	 * Passing in a comma separated list of variable bindings will query for all of them.
	 *
	 * ```html
	 * <seeker>
	 *   <div #find-me>...</div>
	 *   <div #find-me-too>...</div>
	 * </seeker>
	 *
	 *  @Component({
	 *   selector: 'seeker'
	 * })
	 * class Seeker {
	 *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * Configure whether query looks for direct children or all descendants
	 * of the querying element, by using the `descendants` parameter.
	 * It is set to `false` by default.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
	 * ```html
	 * <container #first>
	 *   <item>a</item>
	 *   <item>b</item>
	 *   <container #second>
	 *     <item>c</item>
	 *   </container>
	 * </container>
	 * ```
	 *
	 * When querying for items, the first container will see only `a` and `b` by default,
	 * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
	 *
	 * The queried directives are kept in a depth-first pre-order with respect to their
	 * positions in the DOM.
	 *
	 * Query does not look deep into any subcomponent views.
	 *
	 * Query is updated as part of the change-detection cycle. Since change detection
	 * happens after construction of a directive, QueryList will always be empty when observed in the
	 * constructor.
	 *
	 * The injected object is an unmodifiable live list.
	 * See {@link QueryList} for more details.
	 */
	var QueryMetadata = (function (_super) {
	    __extends(QueryMetadata, _super);
	    function QueryMetadata(_selector, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
	        _super.call(this);
	        this._selector = _selector;
	        this.descendants = descendants;
	        this.first = first;
	    }
	    Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
	        /**
	         * always `false` to differentiate it with {@link ViewQueryMetadata}.
	         */
	        get: function () { return false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryMetadata.prototype, "selector", {
	        /**
	         * what this is querying for.
	         */
	        get: function () { return di_1.resolveForwardRef(this._selector); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
	        /**
	         * whether this is querying for a variable binding or a directive.
	         */
	        get: function () { return lang_1.isString(this.selector); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryMetadata.prototype, "varBindings", {
	        /**
	         * returns a list of variable bindings this is querying for.
	         * Only applicable if this is a variable bindings query.
	         */
	        get: function () { return this.selector.split(','); },
	        enumerable: true,
	        configurable: true
	    });
	    QueryMetadata.prototype.toString = function () { return "@Query(" + lang_1.stringify(this.selector) + ")"; };
	    QueryMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], QueryMetadata);
	    return QueryMetadata;
	})(metadata_1.DependencyMetadata);
	exports.QueryMetadata = QueryMetadata;
	// TODO: add an example after ContentChildren and ViewChildren are in master
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `ngAfterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
	 *
	 *   ngAfterContentInit() {
	 *     // contentChildren is set
	 *   }
	 * }
	 * ```
	 */
	var ContentChildrenMetadata = (function (_super) {
	    __extends(ContentChildrenMetadata, _super);
	    function ContentChildrenMetadata(_selector, _a) {
	        var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
	        _super.call(this, _selector, { descendants: descendants });
	    }
	    ContentChildrenMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], ContentChildrenMetadata);
	    return ContentChildrenMetadata;
	})(QueryMetadata);
	exports.ContentChildrenMetadata = ContentChildrenMetadata;
	// TODO: add an example after ContentChild and ViewChild are in master
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `ngAfterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChild(ChildDirective) contentChild;
	 *
	 *   ngAfterContentInit() {
	 *     // contentChild is set
	 *   }
	 * }
	 * ```
	 */
	var ContentChildMetadata = (function (_super) {
	    __extends(ContentChildMetadata, _super);
	    function ContentChildMetadata(_selector) {
	        _super.call(this, _selector, { descendants: true, first: true });
	    }
	    ContentChildMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ContentChildMetadata);
	    return ContentChildMetadata;
	})(QueryMetadata);
	exports.ContentChildMetadata = ContentChildMetadata;
	/**
	 * Similar to {@link QueryMetadata}, but querying the component view, instead of
	 * the content children.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
	 *
	 * ```javascript
	 * @Component({...})
	 * @View({
	 *   template: `
	 *     <item> a </item>
	 *     <item> b </item>
	 *     <item> c </item>
	 *   `
	 * })
	 * class MyComponent {
	 *   shown: boolean;
	 *
	 *   constructor(private @Query(Item) items:QueryList<Item>) {
	 *     items.changes.subscribe(() => console.log(items.length));
	 *   }
	 * }
	 * ```
	 *
	 * Supports the same querying parameters as {@link QueryMetadata}, except
	 * `descendants`. This always queries the whole view.
	 *
	 * As `shown` is flipped between true and false, items will contain zero of one
	 * items.
	 *
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * The injected object is an iterable and observable live list.
	 * See {@link QueryList} for more details.
	 */
	var ViewQueryMetadata = (function (_super) {
	    __extends(ViewQueryMetadata, _super);
	    function ViewQueryMetadata(_selector, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
	        _super.call(this, _selector, { descendants: descendants, first: first });
	    }
	    Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
	        /**
	         * always `true` to differentiate it with {@link QueryMetadata}.
	         */
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewQueryMetadata.prototype.toString = function () { return "@ViewQuery(" + lang_1.stringify(this.selector) + ")"; };
	    ViewQueryMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], ViewQueryMetadata);
	    return ViewQueryMetadata;
	})(QueryMetadata);
	exports.ViewQueryMetadata = ViewQueryMetadata;
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `ngAfterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
	 *
	 *   ngAfterViewInit() {
	 *     // viewChildren is set
	 *   }
	 * }
	 * ```
	 */
	var ViewChildrenMetadata = (function (_super) {
	    __extends(ViewChildrenMetadata, _super);
	    function ViewChildrenMetadata(_selector) {
	        _super.call(this, _selector, { descendants: true });
	    }
	    ViewChildrenMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ViewChildrenMetadata);
	    return ViewChildrenMetadata;
	})(ViewQueryMetadata);
	exports.ViewChildrenMetadata = ViewChildrenMetadata;
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `ngAfterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChild(ItemDirective) viewChild:ItemDirective;
	 *
	 *   ngAfterViewInit() {
	 *     // viewChild is set
	 *   }
	 * }
	 * ```
	 */
	var ViewChildMetadata = (function (_super) {
	    __extends(ViewChildMetadata, _super);
	    function ViewChildMetadata(_selector) {
	        _super.call(this, _selector, { descendants: true, first: true });
	    }
	    ViewChildMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ViewChildMetadata);
	    return ViewChildMetadata;
	})(ViewQueryMetadata);
	exports.ViewChildMetadata = ViewChildMetadata;


/***/ },
/* 10 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var globalScope;
	if (typeof window === 'undefined') {
	    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	        globalScope = self;
	    }
	    else {
	        globalScope = global;
	    }
	}
	else {
	    globalScope = window;
	}
	exports.IS_DART = false;
	// Need to declare a new variable for global here since TypeScript
	// exports the original value of the symbol.
	var _global = globalScope;
	exports.global = _global;
	exports.Type = Function;
	function getTypeNameForDebugging(type) {
	    return type['name'];
	}
	exports.getTypeNameForDebugging = getTypeNameForDebugging;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	var _devMode = true;
	var _modeLocked = false;
	function lockMode() {
	    _modeLocked = true;
	}
	exports.lockMode = lockMode;
	/**
	 * Disable Angular's development mode, which turns off assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this disables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 */
	function enableProdMode() {
	    if (_modeLocked) {
	        // Cannot use BaseException as that ends up importing from facade/lang.
	        throw 'Cannot enable prod mode after platform setup.';
	    }
	    _devMode = false;
	}
	exports.enableProdMode = enableProdMode;
	function assertionsEnabled() {
	    return _devMode;
	}
	exports.assertionsEnabled = assertionsEnabled;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert = function assert(condition) {
	    // TODO: to be fixed properly via #2830, noop for now
	};
	// This function is needed only to properly support Dart's const expressions
	// see https://github.com/angular/ts2dart/pull/151 for more info
	function CONST_EXPR(expr) {
	    return expr;
	}
	exports.CONST_EXPR = CONST_EXPR;
	function CONST() {
	    return function (target) { return target; };
	}
	exports.CONST = CONST;
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isString(obj) {
	    return typeof obj === "string";
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === "function";
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function isStringMap(obj) {
	    return typeof obj === 'object' && obj !== null;
	}
	exports.isStringMap = isStringMap;
	function isPromise(obj) {
	    return obj instanceof _global.Promise;
	}
	exports.isPromise = isPromise;
	function isArray(obj) {
	    return Array.isArray(obj);
	}
	exports.isArray = isArray;
	function isNumber(obj) {
	    return typeof obj === 'number';
	}
	exports.isNumber = isNumber;
	function isDate(obj) {
	    return obj instanceof exports.Date && !isNaN(obj.valueOf());
	}
	exports.isDate = isDate;
	function noop() { }
	exports.noop = noop;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    if (token.overriddenName) {
	        return token.overriddenName;
	    }
	    var res = token.toString();
	    var newLineIndex = res.indexOf("\n");
	    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	}
	exports.stringify = stringify;
	// serialize / deserialize enum exist only for consistency with dart API
	// enums in typescript don't need to be serialized
	function serializeEnum(val) {
	    return val;
	}
	exports.serializeEnum = serializeEnum;
	function deserializeEnum(val, values) {
	    return val;
	}
	exports.deserializeEnum = deserializeEnum;
	var StringWrapper = (function () {
	    function StringWrapper() {
	    }
	    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	    StringWrapper.equals = function (s, s2) { return s === s2; };
	    StringWrapper.stripLeft = function (s, charVal) {
	        if (s && s.length) {
	            var pos = 0;
	            for (var i = 0; i < s.length; i++) {
	                if (s[i] != charVal)
	                    break;
	                pos++;
	            }
	            s = s.substring(pos);
	        }
	        return s;
	    };
	    StringWrapper.stripRight = function (s, charVal) {
	        if (s && s.length) {
	            var pos = s.length;
	            for (var i = s.length - 1; i >= 0; i--) {
	                if (s[i] != charVal)
	                    break;
	                pos--;
	            }
	            s = s.substring(0, pos);
	        }
	        return s;
	    };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.slice = function (s, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return s.slice(from, to === null ? undefined : to);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	    StringWrapper.compare = function (a, b) {
	        if (a < b) {
	            return -1;
	        }
	        else if (a > b) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    return StringWrapper;
	})();
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) { parts = []; }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	    StringJoiner.prototype.toString = function () { return this.parts.join(""); };
	    return StringJoiner;
	})();
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () { return this.message; };
	    return NumberParseError;
	})(Error);
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {
	    }
	    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	    NumberWrapper.equal = function (a, b) { return a === b; };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError("Invalid integer literal when parsing " + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " +
	            radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
	    Object.defineProperty(NumberWrapper, "NaN", {
	        get: function () { return NaN; },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNaN = function (value) { return isNaN(value); };
	    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	    return NumberWrapper;
	})();
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {
	    }
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) { flags = ''; }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.test = function (regExp, input) {
	        regExp.lastIndex = 0;
	        return regExp.test(input);
	    };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    return RegExpWrapper;
	})();
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {
	    }
	    RegExpMatcherWrapper.next = function (matcher) {
	        return matcher.re.exec(matcher.input);
	    };
	    return RegExpMatcherWrapper;
	})();
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {
	    }
	    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
	    return FunctionWrapper;
	})();
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function normalizeBool(obj) {
	    return isBlank(obj) ? false : obj;
	}
	exports.normalizeBool = normalizeBool;
	function isJsObject(o) {
	    return o !== null && (typeof o === "function" || typeof o === "object");
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    console.log(obj);
	}
	exports.print = print;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {
	    }
	    Json.parse = function (s) { return _global.JSON.parse(s); };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	})();
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {
	    }
	    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	        if (month === void 0) { month = 1; }
	        if (day === void 0) { day = 1; }
	        if (hour === void 0) { hour = 0; }
	        if (minutes === void 0) { minutes = 0; }
	        if (seconds === void 0) { seconds = 0; }
	        if (milliseconds === void 0) { milliseconds = 0; }
	        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	    };
	    DateWrapper.fromISOString = function (str) { return new exports.Date(str); };
	    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
	    DateWrapper.toMillis = function (date) { return date.getTime(); };
	    DateWrapper.now = function () { return new exports.Date(); };
	    DateWrapper.toJson = function (date) { return date.toJSON(); };
	    return DateWrapper;
	})();
	exports.DateWrapper = DateWrapper;
	function setValueOnPath(global, path, value) {
	    var parts = path.split('.');
	    var obj = global;
	    while (parts.length > 1) {
	        var name = parts.shift();
	        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	exports.setValueOnPath = setValueOnPath;
	var _symbolIterator = null;
	function getSymbolIterator() {
	    if (isBlank(_symbolIterator)) {
	        if (isPresent(Symbol) && isPresent(Symbol.iterator)) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    Map.prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	exports.getSymbolIterator = getSymbolIterator;
	function evalExpression(sourceUrl, expr, declarations, vars) {
	    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	    var fnArgNames = [];
	    var fnArgValues = [];
	    for (var argName in vars) {
	        fnArgNames.push(argName);
	        fnArgValues.push(vars[argName]);
	    }
	    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	}
	exports.evalExpression = evalExpression;
	function isPrimitive(obj) {
	    return !isJsObject(obj);
	}
	exports.isPrimitive = isPrimitive;
	function hasConstructor(value, type) {
	    return value.constructor === type;
	}
	exports.hasConstructor = hasConstructor;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var metadata_1 = __webpack_require__(12);
	exports.InjectMetadata = metadata_1.InjectMetadata;
	exports.OptionalMetadata = metadata_1.OptionalMetadata;
	exports.InjectableMetadata = metadata_1.InjectableMetadata;
	exports.SelfMetadata = metadata_1.SelfMetadata;
	exports.HostMetadata = metadata_1.HostMetadata;
	exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
	exports.DependencyMetadata = metadata_1.DependencyMetadata;
	// we have to reexport * because Dart and TS export two different sets of types
	__export(__webpack_require__(13));
	var forward_ref_1 = __webpack_require__(15);
	exports.forwardRef = forward_ref_1.forwardRef;
	exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
	var injector_1 = __webpack_require__(16);
	exports.Injector = injector_1.Injector;
	var provider_1 = __webpack_require__(18);
	exports.Binding = provider_1.Binding;
	exports.ProviderBuilder = provider_1.ProviderBuilder;
	exports.ResolvedFactory = provider_1.ResolvedFactory;
	exports.Dependency = provider_1.Dependency;
	exports.bind = provider_1.bind;
	exports.Provider = provider_1.Provider;
	exports.provide = provider_1.provide;
	var key_1 = __webpack_require__(24);
	exports.Key = key_1.Key;
	exports.TypeLiteral = key_1.TypeLiteral;
	var exceptions_1 = __webpack_require__(26);
	exports.NoProviderError = exceptions_1.NoProviderError;
	exports.AbstractProviderError = exceptions_1.AbstractProviderError;
	exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
	exports.InstantiationError = exceptions_1.InstantiationError;
	exports.InvalidProviderError = exceptions_1.InvalidProviderError;
	exports.NoAnnotationError = exceptions_1.NoAnnotationError;
	exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
	var opaque_token_1 = __webpack_require__(27);
	exports.OpaqueToken = opaque_token_1.OpaqueToken;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	/**
	 * A parameter metadata that specifies a dependency.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))
	 *
	 * ```typescript
	 * class Engine {}
	 *
	 * @Injectable()
	 * class Car {
	 *   engine;
	 *   constructor(@Inject("MyEngine") engine:Engine) {
	 *     this.engine = engine;
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([
	 *  provide("MyEngine", {useClass: Engine}),
	 *  Car
	 * ]);
	 *
	 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * class Engine {}
	 *
	 * @Injectable()
	 * class Car {
	 *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Engine, Car]);
	 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
	 * ```
	 */
	var InjectMetadata = (function () {
	    function InjectMetadata(token) {
	        this.token = token;
	    }
	    InjectMetadata.prototype.toString = function () { return "@Inject(" + lang_1.stringify(this.token) + ")"; };
	    InjectMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], InjectMetadata);
	    return InjectMetadata;
	})();
	exports.InjectMetadata = InjectMetadata;
	/**
	 * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
	 * the dependency is not found.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))
	 *
	 * ```typescript
	 * class Engine {}
	 *
	 * @Injectable()
	 * class Car {
	 *   engine;
	 *   constructor(@Optional() engine:Engine) {
	 *     this.engine = engine;
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Car]);
	 * expect(injector.get(Car).engine).toBeNull();
	 * ```
	 */
	var OptionalMetadata = (function () {
	    function OptionalMetadata() {
	    }
	    OptionalMetadata.prototype.toString = function () { return "@Optional()"; };
	    OptionalMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], OptionalMetadata);
	    return OptionalMetadata;
	})();
	exports.OptionalMetadata = OptionalMetadata;
	/**
	 * `DependencyMetadata` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var DependencyMetadata = (function () {
	    function DependencyMetadata() {
	    }
	    Object.defineProperty(DependencyMetadata.prototype, "token", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    DependencyMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DependencyMetadata);
	    return DependencyMetadata;
	})();
	exports.DependencyMetadata = DependencyMetadata;
	/**
	 * A marker metadata that marks a class as available to {@link Injector} for creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))
	 *
	 * ```typescript
	 * @Injectable()
	 * class UsefulService {}
	 *
	 * @Injectable()
	 * class NeedsService {
	 *   constructor(public service:UsefulService) {}
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
	 * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);
	 * ```
	 * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that
	 * does not have `@Injectable` marker, as shown in the example below.
	 *
	 * ```typescript
	 * class UsefulService {}
	 *
	 * class NeedsService {
	 *   constructor(public service:UsefulService) {}
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
	 * expect(() => injector.get(NeedsService)).toThrowError();
	 * ```
	 */
	var InjectableMetadata = (function () {
	    function InjectableMetadata() {
	    }
	    InjectableMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], InjectableMetadata);
	    return InjectableMetadata;
	})();
	exports.InjectableMetadata = InjectableMetadata;
	/**
	 * Specifies that an {@link Injector} should retrieve a dependency only from itself.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))
	 *
	 * ```typescript
	 * class Dependency {
	 * }
	 *
	 * @Injectable()
	 * class NeedsDependency {
	 *   dependency;
	 *   constructor(@Self() dependency:Dependency) {
	 *     this.dependency = dependency;
	 *   }
	 * }
	 *
	 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
	 * var nd = inj.get(NeedsDependency);
	 *
	 * expect(nd.dependency instanceof Dependency).toBe(true);
	 *
	 * var inj = Injector.resolveAndCreate([Dependency]);
	 * var child = inj.resolveAndCreateChild([NeedsDependency]);
	 * expect(() => child.get(NeedsDependency)).toThrowError();
	 * ```
	 */
	var SelfMetadata = (function () {
	    function SelfMetadata() {
	    }
	    SelfMetadata.prototype.toString = function () { return "@Self()"; };
	    SelfMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], SelfMetadata);
	    return SelfMetadata;
	})();
	exports.SelfMetadata = SelfMetadata;
	/**
	 * Specifies that the dependency resolution should start from the parent injector.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))
	 *
	 * ```typescript
	 * class Dependency {
	 * }
	 *
	 * @Injectable()
	 * class NeedsDependency {
	 *   dependency;
	 *   constructor(@SkipSelf() dependency:Dependency) {
	 *     this.dependency = dependency;
	 *   }
	 * }
	 *
	 * var parent = Injector.resolveAndCreate([Dependency]);
	 * var child = parent.resolveAndCreateChild([NeedsDependency]);
	 * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);
	 *
	 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
	 * expect(() => inj.get(NeedsDependency)).toThrowError();
	 * ```
	 */
	var SkipSelfMetadata = (function () {
	    function SkipSelfMetadata() {
	    }
	    SkipSelfMetadata.prototype.toString = function () { return "@SkipSelf()"; };
	    SkipSelfMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], SkipSelfMetadata);
	    return SkipSelfMetadata;
	})();
	exports.SkipSelfMetadata = SkipSelfMetadata;
	/**
	 * Specifies that an injector should retrieve a dependency from any injector until reaching the
	 * closest host.
	 *
	 * In Angular, a component element is automatically declared as a host for all the injectors in
	 * its view.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))
	 *
	 * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.
	 * So `ParentCmp` is the host of `ChildDirective`.
	 *
	 * `ChildDirective` depends on two services: `HostService` and `OtherService`.
	 * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.
	 *
	 *```typescript
	 * class OtherService {}
	 * class HostService {}
	 *
	 * @Directive({
	 *   selector: 'child-directive'
	 * })
	 * class ChildDirective {
	 *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){
	 *     console.log("os is null", os);
	 *     console.log("hs is NOT null", hs);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'parent-cmp',
	 *   providers: [HostService],
	 *   template: `
	 *     Dir: <child-directive></child-directive>
	 *   `,
	 *   directives: [ChildDirective]
	 * })
	 * class ParentCmp {
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   providers: [OtherService],
	 *   template: `
	 *     Parent: <parent-cmp></parent-cmp>
	 *   `,
	 *   directives: [ParentCmp]
	 * })
	 * class App {
	 * }
	 *
	 * bootstrap(App);
	 *```
	 */
	var HostMetadata = (function () {
	    function HostMetadata() {
	    }
	    HostMetadata.prototype.toString = function () { return "@Host()"; };
	    HostMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], HostMetadata);
	    return HostMetadata;
	})();
	exports.HostMetadata = HostMetadata;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var metadata_1 = __webpack_require__(12);
	var decorators_1 = __webpack_require__(14);
	/**
	 * Factory for creating {@link InjectMetadata}.
	 */
	exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
	/**
	 * Factory for creating {@link OptionalMetadata}.
	 */
	exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
	/**
	 * Factory for creating {@link InjectableMetadata}.
	 */
	exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
	/**
	 * Factory for creating {@link SelfMetadata}.
	 */
	exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
	/**
	 * Factory for creating {@link HostMetadata}.
	 */
	exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
	/**
	 * Factory for creating {@link SkipSelfMetadata}.
	 */
	exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var _nextClassId = 0;
	function extractAnnotation(annotation) {
	    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
	        // it is a decorator, extract annotation
	        annotation = annotation.annotation;
	    }
	    return annotation;
	}
	function applyParams(fnOrArray, key) {
	    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	        fnOrArray === Number || fnOrArray === Array) {
	        throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
	    }
	    if (lang_1.isFunction(fnOrArray)) {
	        return fnOrArray;
	    }
	    else if (fnOrArray instanceof Array) {
	        var annotations = fnOrArray;
	        var fn = fnOrArray[fnOrArray.length - 1];
	        if (!lang_1.isFunction(fn)) {
	            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
	        }
	        var annoLength = annotations.length - 1;
	        if (annoLength != fn.length) {
	            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
	        }
	        var paramsAnnotations = [];
	        for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
	            var paramAnnotations = [];
	            paramsAnnotations.push(paramAnnotations);
	            var annotation = annotations[i];
	            if (annotation instanceof Array) {
	                for (var j = 0; j < annotation.length; j++) {
	                    paramAnnotations.push(extractAnnotation(annotation[j]));
	                }
	            }
	            else if (lang_1.isFunction(annotation)) {
	                paramAnnotations.push(extractAnnotation(annotation));
	            }
	            else {
	                paramAnnotations.push(annotation);
	            }
	        }
	        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	        return fn;
	    }
	    else {
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
	    }
	}
	/**
	 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	 *
	 * ## Basic Example
	 *
	 * ```
	 * var Greeter = ng.Class({
	 *   constructor: function(name) {
	 *     this.name = name;
	 *   },
	 *
	 *   greet: function() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class Greeter {
	 *   constructor(name) {
	 *     this.name = name;
	 *   }
	 *
	 *   greet() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * }
	 * ```
	 *
	 * or equivalent to ES5:
	 *
	 * ```
	 * var Greeter = function (name) {
	 *   this.name = name;
	 * }
	 *
	 * Greeter.prototype.greet = function () {
	 *   alert('Hello ' + this.name + '!');
	 * }
	 * ```
	 *
	 * ### Example with parameter annotations
	 *
	 * ```
	 * var MyService = ng.Class({
	 *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
	 *     ...
	 *   }]
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class MyService {
	 *   constructor(name: string, @Query() queryList: QueryList) {
	 *     ...
	 *   }
	 * }
	 * ```
	 *
	 * ### Example with inheritance
	 *
	 * ```
	 * var Shape = ng.Class({
	 *   constructor: (color) {
	 *     this.color = color;
	 *   }
	 * });
	 *
	 * var Square = ng.Class({
	 *   extends: Shape,
	 *   constructor: function(color, size) {
	 *     Shape.call(this, color);
	 *     this.size = size;
	 *   }
	 * });
	 * ```
	 */
	function Class(clsDef) {
	    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	    var proto = constructor.prototype;
	    if (clsDef.hasOwnProperty('extends')) {
	        if (lang_1.isFunction(clsDef.extends)) {
	            constructor.prototype = proto =
	                Object.create(clsDef.extends.prototype);
	        }
	        else {
	            throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
	        }
	    }
	    for (var key in clsDef) {
	        if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
	            proto[key] = applyParams(clsDef[key], key);
	        }
	    }
	    if (this && this.annotations instanceof Array) {
	        Reflect.defineMetadata('annotations', this.annotations, constructor);
	    }
	    if (!constructor['name']) {
	        constructor['overriddenName'] = "class" + _nextClassId++;
	    }
	    return constructor;
	}
	exports.Class = Class;
	var Reflect = lang_1.global.Reflect;
	if (!(Reflect && Reflect.getMetadata)) {
	    throw 'reflect-metadata shim is required when using class decorators';
	}
	function makeDecorator(annotationCls, chainFn) {
	    if (chainFn === void 0) { chainFn = null; }
	    function DecoratorFactory(objOrType) {
	        var annotationInstance = new annotationCls(objOrType);
	        if (this instanceof annotationCls) {
	            return annotationInstance;
	        }
	        else {
	            var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var TypeDecorator = function TypeDecorator(cls) {
	                var annotations = Reflect.getOwnMetadata('annotations', cls);
	                annotations = annotations || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            };
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	    }
	    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
	    return DecoratorFactory;
	}
	exports.makeDecorator = makeDecorator;
	function makeParamDecorator(annotationCls) {
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        if (this instanceof annotationCls) {
	            return annotationInstance;
	        }
	        else {
	            ParamDecorator.annotation = annotationInstance;
	            return ParamDecorator;
	        }
	        function ParamDecorator(cls, unusedKey, index) {
	            var parameters = Reflect.getMetadata('parameters', cls);
	            parameters = parameters || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            var annotationsForParam = parameters[index];
	            annotationsForParam.push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        }
	    }
	    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
	    return ParamDecoratorFactory;
	}
	exports.makeParamDecorator = makeParamDecorator;
	function makePropDecorator(decoratorCls) {
	    function PropDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var decoratorInstance = Object.create(decoratorCls.prototype);
	        decoratorCls.apply(decoratorInstance, args);
	        if (this instanceof decoratorCls) {
	            return decoratorInstance;
	        }
	        else {
	            return function PropDecorator(target, name) {
	                var meta = Reflect.getOwnMetadata('propMetadata', target.constructor);
	                meta = meta || {};
	                meta[name] = meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                Reflect.defineMetadata('propMetadata', meta, target.constructor);
	            };
	        }
	    }
	    PropDecoratorFactory.prototype = Object.create(decoratorCls.prototype);
	    return PropDecoratorFactory;
	}
	exports.makePropDecorator = makePropDecorator;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared,
	 * but not yet defined. It is also used when the `token` which we use when creating a query is not
	 * yet defined.
	 *
	 * ### Example
	 * {@example core/di/ts/forward_ref/forward_ref.ts region='forward_ref'}
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    forwardRefFn.toString = function () { return lang_1.stringify(this()); };
	    return forwardRefFn;
	}
	exports.forwardRef = forwardRef;
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	 *
	 * ```typescript
	 * var ref = forwardRef(() => "refValue");
	 * expect(resolveForwardRef(ref)).toEqual("refValue");
	 * expect(resolveForwardRef("regularValue")).toEqual("regularValue");
	 * ```
	 *
	 * See: {@link forwardRef}
	 */
	function resolveForwardRef(type) {
	    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return type();
	    }
	    else {
	        return type;
	    }
	}
	exports.resolveForwardRef = resolveForwardRef;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var provider_1 = __webpack_require__(18);
	var exceptions_1 = __webpack_require__(26);
	var lang_1 = __webpack_require__(10);
	var exceptions_2 = __webpack_require__(19);
	var key_1 = __webpack_require__(24);
	var metadata_1 = __webpack_require__(12);
	// Threshold for the dynamic version
	var _MAX_CONSTRUCTION_COUNTER = 10;
	exports.UNDEFINED = lang_1.CONST_EXPR(new Object());
	/**
	 * Visibility of a {@link Provider}.
	 */
	(function (Visibility) {
	    /**
	     * A `Public` {@link Provider} is only visible to regular (as opposed to host) child injectors.
	     */
	    Visibility[Visibility["Public"] = 0] = "Public";
	    /**
	     * A `Private` {@link Provider} is only visible to host (as opposed to regular) child injectors.
	     */
	    Visibility[Visibility["Private"] = 1] = "Private";
	    /**
	     * A `PublicAndPrivate` {@link Provider} is visible to both host and regular child injectors.
	     */
	    Visibility[Visibility["PublicAndPrivate"] = 2] = "PublicAndPrivate";
	})(exports.Visibility || (exports.Visibility = {}));
	var Visibility = exports.Visibility;
	function canSee(src, dst) {
	    return (src === dst) ||
	        (dst === Visibility.PublicAndPrivate || src === Visibility.PublicAndPrivate);
	}
	var ProtoInjectorInlineStrategy = (function () {
	    function ProtoInjectorInlineStrategy(protoEI, bwv) {
	        this.provider0 = null;
	        this.provider1 = null;
	        this.provider2 = null;
	        this.provider3 = null;
	        this.provider4 = null;
	        this.provider5 = null;
	        this.provider6 = null;
	        this.provider7 = null;
	        this.provider8 = null;
	        this.provider9 = null;
	        this.keyId0 = null;
	        this.keyId1 = null;
	        this.keyId2 = null;
	        this.keyId3 = null;
	        this.keyId4 = null;
	        this.keyId5 = null;
	        this.keyId6 = null;
	        this.keyId7 = null;
	        this.keyId8 = null;
	        this.keyId9 = null;
	        this.visibility0 = null;
	        this.visibility1 = null;
	        this.visibility2 = null;
	        this.visibility3 = null;
	        this.visibility4 = null;
	        this.visibility5 = null;
	        this.visibility6 = null;
	        this.visibility7 = null;
	        this.visibility8 = null;
	        this.visibility9 = null;
	        var length = bwv.length;
	        if (length > 0) {
	            this.provider0 = bwv[0].provider;
	            this.keyId0 = bwv[0].getKeyId();
	            this.visibility0 = bwv[0].visibility;
	        }
	        if (length > 1) {
	            this.provider1 = bwv[1].provider;
	            this.keyId1 = bwv[1].getKeyId();
	            this.visibility1 = bwv[1].visibility;
	        }
	        if (length > 2) {
	            this.provider2 = bwv[2].provider;
	            this.keyId2 = bwv[2].getKeyId();
	            this.visibility2 = bwv[2].visibility;
	        }
	        if (length > 3) {
	            this.provider3 = bwv[3].provider;
	            this.keyId3 = bwv[3].getKeyId();
	            this.visibility3 = bwv[3].visibility;
	        }
	        if (length > 4) {
	            this.provider4 = bwv[4].provider;
	            this.keyId4 = bwv[4].getKeyId();
	            this.visibility4 = bwv[4].visibility;
	        }
	        if (length > 5) {
	            this.provider5 = bwv[5].provider;
	            this.keyId5 = bwv[5].getKeyId();
	            this.visibility5 = bwv[5].visibility;
	        }
	        if (length > 6) {
	            this.provider6 = bwv[6].provider;
	            this.keyId6 = bwv[6].getKeyId();
	            this.visibility6 = bwv[6].visibility;
	        }
	        if (length > 7) {
	            this.provider7 = bwv[7].provider;
	            this.keyId7 = bwv[7].getKeyId();
	            this.visibility7 = bwv[7].visibility;
	        }
	        if (length > 8) {
	            this.provider8 = bwv[8].provider;
	            this.keyId8 = bwv[8].getKeyId();
	            this.visibility8 = bwv[8].visibility;
	        }
	        if (length > 9) {
	            this.provider9 = bwv[9].provider;
	            this.keyId9 = bwv[9].getKeyId();
	            this.visibility9 = bwv[9].visibility;
	        }
	    }
	    ProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
	        if (index == 0)
	            return this.provider0;
	        if (index == 1)
	            return this.provider1;
	        if (index == 2)
	            return this.provider2;
	        if (index == 3)
	            return this.provider3;
	        if (index == 4)
	            return this.provider4;
	        if (index == 5)
	            return this.provider5;
	        if (index == 6)
	            return this.provider6;
	        if (index == 7)
	            return this.provider7;
	        if (index == 8)
	            return this.provider8;
	        if (index == 9)
	            return this.provider9;
	        throw new exceptions_1.OutOfBoundsError(index);
	    };
	    ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	        return new InjectorInlineStrategy(injector, this);
	    };
	    return ProtoInjectorInlineStrategy;
	})();
	exports.ProtoInjectorInlineStrategy = ProtoInjectorInlineStrategy;
	var ProtoInjectorDynamicStrategy = (function () {
	    function ProtoInjectorDynamicStrategy(protoInj, bwv) {
	        var len = bwv.length;
	        this.providers = collection_1.ListWrapper.createFixedSize(len);
	        this.keyIds = collection_1.ListWrapper.createFixedSize(len);
	        this.visibilities = collection_1.ListWrapper.createFixedSize(len);
	        for (var i = 0; i < len; i++) {
	            this.providers[i] = bwv[i].provider;
	            this.keyIds[i] = bwv[i].getKeyId();
	            this.visibilities[i] = bwv[i].visibility;
	        }
	    }
	    ProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this.providers.length) {
	            throw new exceptions_1.OutOfBoundsError(index);
	        }
	        return this.providers[index];
	    };
	    ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	        return new InjectorDynamicStrategy(this, ei);
	    };
	    return ProtoInjectorDynamicStrategy;
	})();
	exports.ProtoInjectorDynamicStrategy = ProtoInjectorDynamicStrategy;
	var ProtoInjector = (function () {
	    function ProtoInjector(bwv) {
	        this.numberOfProviders = bwv.length;
	        this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ?
	            new ProtoInjectorDynamicStrategy(this, bwv) :
	            new ProtoInjectorInlineStrategy(this, bwv);
	    }
	    ProtoInjector.fromResolvedProviders = function (providers) {
	        var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
	        return new ProtoInjector(bd);
	    };
	    ProtoInjector.prototype.getProviderAtIndex = function (index) {
	        return this._strategy.getProviderAtIndex(index);
	    };
	    return ProtoInjector;
	})();
	exports.ProtoInjector = ProtoInjector;
	var InjectorInlineStrategy = (function () {
	    function InjectorInlineStrategy(injector, protoStrategy) {
	        this.injector = injector;
	        this.protoStrategy = protoStrategy;
	        this.obj0 = exports.UNDEFINED;
	        this.obj1 = exports.UNDEFINED;
	        this.obj2 = exports.UNDEFINED;
	        this.obj3 = exports.UNDEFINED;
	        this.obj4 = exports.UNDEFINED;
	        this.obj5 = exports.UNDEFINED;
	        this.obj6 = exports.UNDEFINED;
	        this.obj7 = exports.UNDEFINED;
	        this.obj8 = exports.UNDEFINED;
	        this.obj9 = exports.UNDEFINED;
	    }
	    InjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	    InjectorInlineStrategy.prototype.instantiateProvider = function (provider, visibility) {
	        return this.injector._new(provider, visibility);
	    };
	    InjectorInlineStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
	        var p = this.protoStrategy;
	        var inj = this.injector;
	        if (p.keyId0 === keyId && canSee(p.visibility0, visibility)) {
	            if (this.obj0 === exports.UNDEFINED) {
	                this.obj0 = inj._new(p.provider0, p.visibility0);
	            }
	            return this.obj0;
	        }
	        if (p.keyId1 === keyId && canSee(p.visibility1, visibility)) {
	            if (this.obj1 === exports.UNDEFINED) {
	                this.obj1 = inj._new(p.provider1, p.visibility1);
	            }
	            return this.obj1;
	        }
	        if (p.keyId2 === keyId && canSee(p.visibility2, visibility)) {
	            if (this.obj2 === exports.UNDEFINED) {
	                this.obj2 = inj._new(p.provider2, p.visibility2);
	            }
	            return this.obj2;
	        }
	        if (p.keyId3 === keyId && canSee(p.visibility3, visibility)) {
	            if (this.obj3 === exports.UNDEFINED) {
	                this.obj3 = inj._new(p.provider3, p.visibility3);
	            }
	            return this.obj3;
	        }
	        if (p.keyId4 === keyId && canSee(p.visibility4, visibility)) {
	            if (this.obj4 === exports.UNDEFINED) {
	                this.obj4 = inj._new(p.provider4, p.visibility4);
	            }
	            return this.obj4;
	        }
	        if (p.keyId5 === keyId && canSee(p.visibility5, visibility)) {
	            if (this.obj5 === exports.UNDEFINED) {
	                this.obj5 = inj._new(p.provider5, p.visibility5);
	            }
	            return this.obj5;
	        }
	        if (p.keyId6 === keyId && canSee(p.visibility6, visibility)) {
	            if (this.obj6 === exports.UNDEFINED) {
	                this.obj6 = inj._new(p.provider6, p.visibility6);
	            }
	            return this.obj6;
	        }
	        if (p.keyId7 === keyId && canSee(p.visibility7, visibility)) {
	            if (this.obj7 === exports.UNDEFINED) {
	                this.obj7 = inj._new(p.provider7, p.visibility7);
	            }
	            return this.obj7;
	        }
	        if (p.keyId8 === keyId && canSee(p.visibility8, visibility)) {
	            if (this.obj8 === exports.UNDEFINED) {
	                this.obj8 = inj._new(p.provider8, p.visibility8);
	            }
	            return this.obj8;
	        }
	        if (p.keyId9 === keyId && canSee(p.visibility9, visibility)) {
	            if (this.obj9 === exports.UNDEFINED) {
	                this.obj9 = inj._new(p.provider9, p.visibility9);
	            }
	            return this.obj9;
	        }
	        return exports.UNDEFINED;
	    };
	    InjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	        if (index == 0)
	            return this.obj0;
	        if (index == 1)
	            return this.obj1;
	        if (index == 2)
	            return this.obj2;
	        if (index == 3)
	            return this.obj3;
	        if (index == 4)
	            return this.obj4;
	        if (index == 5)
	            return this.obj5;
	        if (index == 6)
	            return this.obj6;
	        if (index == 7)
	            return this.obj7;
	        if (index == 8)
	            return this.obj8;
	        if (index == 9)
	            return this.obj9;
	        throw new exceptions_1.OutOfBoundsError(index);
	    };
	    InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	    return InjectorInlineStrategy;
	})();
	exports.InjectorInlineStrategy = InjectorInlineStrategy;
	var InjectorDynamicStrategy = (function () {
	    function InjectorDynamicStrategy(protoStrategy, injector) {
	        this.protoStrategy = protoStrategy;
	        this.injector = injector;
	        this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
	        collection_1.ListWrapper.fill(this.objs, exports.UNDEFINED);
	    }
	    InjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	    InjectorDynamicStrategy.prototype.instantiateProvider = function (provider, visibility) {
	        return this.injector._new(provider, visibility);
	    };
	    InjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
	        var p = this.protoStrategy;
	        for (var i = 0; i < p.keyIds.length; i++) {
	            if (p.keyIds[i] === keyId && canSee(p.visibilities[i], visibility)) {
	                if (this.objs[i] === exports.UNDEFINED) {
	                    this.objs[i] = this.injector._new(p.providers[i], p.visibilities[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return exports.UNDEFINED;
	    };
	    InjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	        if (index < 0 || index >= this.objs.length) {
	            throw new exceptions_1.OutOfBoundsError(index);
	        }
	        return this.objs[index];
	    };
	    InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	    return InjectorDynamicStrategy;
	})();
	exports.InjectorDynamicStrategy = InjectorDynamicStrategy;
	var ProviderWithVisibility = (function () {
	    function ProviderWithVisibility(provider, visibility) {
	        this.provider = provider;
	        this.visibility = visibility;
	    }
	    ;
	    ProviderWithVisibility.prototype.getKeyId = function () { return this.provider.key.id; };
	    return ProviderWithVisibility;
	})();
	exports.ProviderWithVisibility = ProviderWithVisibility;
	/**
	 * A dependency injection container used for instantiating objects and resolving dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * @Injectable()
	 * class Engine {
	 * }
	 *
	 * @Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 */
	var Injector = (function () {
	    /**
	     * Private
	     */
	    function Injector(_proto /* ProtoInjector */, _parent, _isHostBoundary, _depProvider, _debugContext) {
	        if (_parent === void 0) { _parent = null; }
	        if (_isHostBoundary === void 0) { _isHostBoundary = false; }
	        if (_depProvider === void 0) { _depProvider = null; }
	        if (_debugContext === void 0) { _debugContext = null; }
	        this._isHostBoundary = _isHostBoundary;
	        this._depProvider = _depProvider;
	        this._debugContext = _debugContext;
	        /** @internal */
	        this._constructionCounter = 0;
	        this._proto = _proto;
	        this._parent = _parent;
	        this._strategy = _proto._strategy.createInjectorStrategy(this);
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of {@link ResolvedProvider}s.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = Injector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     * See {@link Injector#fromResolvedProviders} for more info.
	     */
	    Injector.resolve = function (providers) {
	        return provider_1.resolveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, {@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     *
	     * This function is slower than the corresponding `fromResolvedProviders`
	     * because it needs to resolve the passed-in providers first.
	     * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
	     */
	    Injector.resolveAndCreate = function (providers) {
	        var resolvedProviders = Injector.resolve(providers);
	        return Injector.fromResolvedProviders(resolvedProviders);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = Injector.resolve([Car, Engine]);
	     * var injector = Injector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     */
	    Injector.fromResolvedProviders = function (providers) {
	        return new Injector(ProtoInjector.fromResolvedProviders(providers));
	    };
	    /**
	     * @deprecated
	     */
	    Injector.fromResolvedBindings = function (providers) {
	        return Injector.fromResolvedProviders(providers);
	    };
	    Object.defineProperty(Injector.prototype, "hostBoundary", {
	        /**
	         * Whether this injector is a boundary to a host.
	         * @internal
	         */
	        get: function () { return this._isHostBoundary; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @internal
	     */
	    Injector.prototype.debugContext = function () { return this._debugContext(); };
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * Throws {@link NoProviderError} if not found.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide("validToken", {useValue: "Value"})
	     * ]);
	     * expect(injector.get("validToken")).toEqual("Value");
	     * expect(() => injector.get("invalidToken")).toThrowError();
	     * ```
	     *
	     * `Injector` returns itself when given `Injector` as a token.
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([]);
	     * expect(injector.get(Injector)).toBe(injector);
	     * ```
	     */
	    Injector.prototype.get = function (token) {
	        return this._getByKey(key_1.Key.get(token), null, null, false, Visibility.PublicAndPrivate);
	    };
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * Returns null if not found.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/tpEbEy?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide("validToken", {useValue: "Value"})
	     * ]);
	     * expect(injector.getOptional("validToken")).toEqual("Value");
	     * expect(injector.getOptional("invalidToken")).toBe(null);
	     * ```
	     *
	     * `Injector` returns itself when given `Injector` as a token.
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([]);
	     * expect(injector.getOptional(Injector)).toBe(injector);
	     * ```
	     */
	    Injector.prototype.getOptional = function (token) {
	        return this._getByKey(key_1.Key.get(token), null, null, true, Visibility.PublicAndPrivate);
	    };
	    /**
	     * @internal
	     */
	    Injector.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	    Object.defineProperty(Injector.prototype, "parent", {
	        /**
	         * Parent of this injector.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	         *
	         * ```typescript
	         * var parent = Injector.resolveAndCreate([]);
	         * var child = parent.resolveAndCreateChild([]);
	         * expect(child.parent).toBe(parent);
	         * ```
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Injector.prototype, "internalStrategy", {
	        /**
	         * @internal
	         * Internal. Do not use.
	         * We return `any` not to export the InjectorStrategy type.
	         */
	        get: function () { return this._strategy; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Resolves an array of providers and creates a child injector from those providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * The passed-in providers can be an array of `Type`, {@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parent = Injector.resolveAndCreate([ParentProvider]);
	     * var child = parent.resolveAndCreateChild([ChildProvider]);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     *
	     * This function is slower than the corresponding `createChildFromResolved`
	     * because it needs to resolve the passed-in providers first.
	     * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
	     */
	    Injector.prototype.resolveAndCreateChild = function (providers) {
	        var resolvedProviders = Injector.resolve(providers);
	        return this.createChildFromResolved(resolvedProviders);
	    };
	    /**
	     * Creates a child injector from previously resolved providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parentProviders = Injector.resolve([ParentProvider]);
	     * var childProviders = Injector.resolve([ChildProvider]);
	     *
	     * var parent = Injector.fromResolvedProviders(parentProviders);
	     * var child = parent.createChildFromResolved(childProviders);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     */
	    Injector.prototype.createChildFromResolved = function (providers) {
	        var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
	        var proto = new ProtoInjector(bd);
	        var inj = new Injector(proto);
	        inj._parent = this;
	        return inj;
	    };
	    /**
	     * Resolves a provider and instantiates an object in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([Engine]);
	     *
	     * var car = injector.resolveAndInstantiate(Car);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	     * ```
	     */
	    Injector.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(Injector.resolve([provider])[0]);
	    };
	    /**
	     * Instantiates an object using a resolved provider in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([Engine]);
	     * var carProvider = Injector.resolve([Car])[0];
	     * var car = injector.instantiateResolved(carProvider);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	     * ```
	     */
	    Injector.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider, Visibility.PublicAndPrivate);
	    };
	    /** @internal */
	    Injector.prototype._new = function (provider, visibility) {
	        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	            throw new exceptions_1.CyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider, visibility);
	    };
	    Injector.prototype._instantiateProvider = function (provider, visibility) {
	        if (provider.multiProvider) {
	            var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
	            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i], visibility);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0], visibility);
	        }
	    };
	    Injector.prototype._instantiate = function (provider, resolvedFactory, visibility) {
	        var factory = resolvedFactory.factory;
	        var deps = resolvedFactory.dependencies;
	        var length = deps.length;
	        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19;
	        try {
	            d0 = length > 0 ? this._getByDependency(provider, deps[0], visibility) : null;
	            d1 = length > 1 ? this._getByDependency(provider, deps[1], visibility) : null;
	            d2 = length > 2 ? this._getByDependency(provider, deps[2], visibility) : null;
	            d3 = length > 3 ? this._getByDependency(provider, deps[3], visibility) : null;
	            d4 = length > 4 ? this._getByDependency(provider, deps[4], visibility) : null;
	            d5 = length > 5 ? this._getByDependency(provider, deps[5], visibility) : null;
	            d6 = length > 6 ? this._getByDependency(provider, deps[6], visibility) : null;
	            d7 = length > 7 ? this._getByDependency(provider, deps[7], visibility) : null;
	            d8 = length > 8 ? this._getByDependency(provider, deps[8], visibility) : null;
	            d9 = length > 9 ? this._getByDependency(provider, deps[9], visibility) : null;
	            d10 = length > 10 ? this._getByDependency(provider, deps[10], visibility) : null;
	            d11 = length > 11 ? this._getByDependency(provider, deps[11], visibility) : null;
	            d12 = length > 12 ? this._getByDependency(provider, deps[12], visibility) : null;
	            d13 = length > 13 ? this._getByDependency(provider, deps[13], visibility) : null;
	            d14 = length > 14 ? this._getByDependency(provider, deps[14], visibility) : null;
	            d15 = length > 15 ? this._getByDependency(provider, deps[15], visibility) : null;
	            d16 = length > 16 ? this._getByDependency(provider, deps[16], visibility) : null;
	            d17 = length > 17 ? this._getByDependency(provider, deps[17], visibility) : null;
	            d18 = length > 18 ? this._getByDependency(provider, deps[18], visibility) : null;
	            d19 = length > 19 ? this._getByDependency(provider, deps[19], visibility) : null;
	        }
	        catch (e) {
	            if (e instanceof exceptions_1.AbstractProviderError || e instanceof exceptions_1.InstantiationError) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var obj;
	        try {
	            switch (length) {
	                case 0:
	                    obj = factory();
	                    break;
	                case 1:
	                    obj = factory(d0);
	                    break;
	                case 2:
	                    obj = factory(d0, d1);
	                    break;
	                case 3:
	                    obj = factory(d0, d1, d2);
	                    break;
	                case 4:
	                    obj = factory(d0, d1, d2, d3);
	                    break;
	                case 5:
	                    obj = factory(d0, d1, d2, d3, d4);
	                    break;
	                case 6:
	                    obj = factory(d0, d1, d2, d3, d4, d5);
	                    break;
	                case 7:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                    break;
	                case 8:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                    break;
	                case 9:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                    break;
	                case 10:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                    break;
	                case 11:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                    break;
	                case 12:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                    break;
	                case 13:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                    break;
	                case 14:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                    break;
	                case 15:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                    break;
	                case 16:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                    break;
	                case 17:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                    break;
	                case 18:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                    break;
	                case 19:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                    break;
	                case 20:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                    break;
	                default:
	                    throw new exceptions_2.BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
	            }
	        }
	        catch (e) {
	            throw new exceptions_1.InstantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    Injector.prototype._getByDependency = function (provider, dep, providerVisibility) {
	        var special = lang_1.isPresent(this._depProvider) ?
	            this._depProvider.getDependency(this, provider, dep) :
	            exports.UNDEFINED;
	        if (special !== exports.UNDEFINED) {
	            return special;
	        }
	        else {
	            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional, providerVisibility);
	        }
	    };
	    Injector.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, optional, providerVisibility) {
	        if (key === INJECTOR_KEY) {
	            return this;
	        }
	        if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
	            return this._getByKeySelf(key, optional, providerVisibility);
	        }
	        else if (upperBoundVisibility instanceof metadata_1.HostMetadata) {
	            return this._getByKeyHost(key, optional, providerVisibility, lowerBoundVisibility);
	        }
	        else {
	            return this._getByKeyDefault(key, optional, providerVisibility, lowerBoundVisibility);
	        }
	    };
	    /** @internal */
	    Injector.prototype._throwOrNull = function (key, optional) {
	        if (optional) {
	            return null;
	        }
	        else {
	            throw new exceptions_1.NoProviderError(this, key);
	        }
	    };
	    /** @internal */
	    Injector.prototype._getByKeySelf = function (key, optional, providerVisibility) {
	        var obj = this._strategy.getObjByKeyId(key.id, providerVisibility);
	        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
	    };
	    /** @internal */
	    Injector.prototype._getByKeyHost = function (key, optional, providerVisibility, lowerBoundVisibility) {
	        var inj = this;
	        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
	            if (inj._isHostBoundary) {
	                return this._getPrivateDependency(key, optional, inj);
	            }
	            else {
	                inj = inj._parent;
	            }
	        }
	        while (inj != null) {
	            var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
	            if (obj !== exports.UNDEFINED)
	                return obj;
	            if (lang_1.isPresent(inj._parent) && inj._isHostBoundary) {
	                return this._getPrivateDependency(key, optional, inj);
	            }
	            else {
	                inj = inj._parent;
	            }
	        }
	        return this._throwOrNull(key, optional);
	    };
	    /** @internal */
	    Injector.prototype._getPrivateDependency = function (key, optional, inj) {
	        var obj = inj._parent._strategy.getObjByKeyId(key.id, Visibility.Private);
	        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
	    };
	    /** @internal */
	    Injector.prototype._getByKeyDefault = function (key, optional, providerVisibility, lowerBoundVisibility) {
	        var inj = this;
	        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
	            providerVisibility = inj._isHostBoundary ? Visibility.PublicAndPrivate : Visibility.Public;
	            inj = inj._parent;
	        }
	        while (inj != null) {
	            var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
	            if (obj !== exports.UNDEFINED)
	                return obj;
	            providerVisibility = inj._isHostBoundary ? Visibility.PublicAndPrivate : Visibility.Public;
	            inj = inj._parent;
	        }
	        return this._throwOrNull(key, optional);
	    };
	    Object.defineProperty(Injector.prototype, "displayName", {
	        get: function () {
	            return "Injector(providers: [" + _mapProviders(this, function (b) { return (" \"" + b.key.displayName + "\" "); }).join(", ") + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Injector.prototype.toString = function () { return this.displayName; };
	    return Injector;
	})();
	exports.Injector = Injector;
	var INJECTOR_KEY = key_1.Key.get(Injector);
	function _mapProviders(injector, fn) {
	    var res = [];
	    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
	        res.push(fn(injector._proto.getProviderAtIndex(i)));
	    }
	    return res;
	}


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([[1, 2]]).size === 1) {
	            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var createMapFromMap = (function () {
	    try {
	        if (new exports.Map(new exports.Map())) {
	            return function createMapFromMap(m) { return new exports.Map(m); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromMap(m) {
	        var map = new exports.Map();
	        m.forEach(function (v, k) { map.set(k, v); });
	        return map;
	    };
	})();
	var _clearValues = (function () {
	    if ((new exports.Map()).keys().next) {
	        return function _clearValues(m) {
	            var keyIterator = m.keys();
	            var k;
	            while (!((k = keyIterator.next()).done)) {
	                m.set(k.value, null);
	            }
	        };
	    }
	    else {
	        return function _clearValuesWithForeEach(m) {
	            m.forEach(function (v, k) { m.set(k, null); });
	        };
	    }
	})();
	// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	var _arrayFromMap = (function () {
	    try {
	        if ((new exports.Map()).values().next) {
	            return function createArrayFromMap(m, getValues) {
	                return getValues ? Array.from(m.values()) : Array.from(m.keys());
	            };
	        }
	    }
	    catch (e) {
	    }
	    return function createArrayFromMapWithForeach(m, getValues) {
	        var res = ListWrapper.createFixedSize(m.size), i = 0;
	        m.forEach(function (v, k) {
	            res[i] = getValues ? v : k;
	            i++;
	        });
	        return res;
	    };
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {
	    }
	    MapWrapper.clone = function (m) { return createMapFromMap(m); };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = new exports.Map();
	        for (var prop in stringMap) {
	            result.set(prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.toStringMap = function (m) {
	        var r = {};
	        m.forEach(function (v, k) { return r[k] = v; });
	        return r;
	    };
	    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	    MapWrapper.clearValues = function (m) { _clearValues(m); };
	    MapWrapper.iterable = function (m) { return m; };
	    MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
	    MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
	    return MapWrapper;
	})();
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	})();
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    // JS has no way to express a statically fixed size list, but dart does so we
	    // keep both methods.
	    ListWrapper.createFixedSize = function (size) { return new Array(size); };
	    ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	    ListWrapper.clone = function (array) { return array.slice(0); };
	    ListWrapper.forEachWithIndex = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i], i);
	        }
	    };
	    ListWrapper.first = function (array) {
	        if (!array)
	            return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0)
	            return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) { startIndex = 0; }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) { return a.concat(b); };
	    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) { list.length = 0; };
	    ListWrapper.isEmpty = function (list) { return list.length == 0; };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = null; }
	        list.fill(value, start, end === null ? list.length : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	    ListWrapper.sort = function (l, compareFn) {
	        if (lang_1.isPresent(compareFn)) {
	            l.sort(compareFn);
	        }
	        else {
	            l.sort();
	        }
	    };
	    ListWrapper.toString = function (l) { return l.toString(); };
	    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	    ListWrapper.maximum = function (list, predicate) {
	        if (list.length == 0) {
	            return null;
	        }
	        var solution = null;
	        var maxValue = -Infinity;
	        for (var index = 0; index < list.length; index++) {
	            var candidate = list[index];
	            if (lang_1.isBlank(candidate)) {
	                continue;
	            }
	            var candidateValue = predicate(candidate);
	            if (candidateValue > maxValue) {
	                solution = candidate;
	                maxValue = candidateValue;
	            }
	        }
	        return solution;
	    };
	    return ListWrapper;
	})();
	exports.ListWrapper = ListWrapper;
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj))
	        return false;
	    return lang_1.isArray(obj) ||
	        (!(obj instanceof exports.Map) &&
	            lang_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function areIterablesEqual(a, b, comparator) {
	    var iterator1 = a[lang_1.getSymbolIterator()]();
	    var iterator2 = b[lang_1.getSymbolIterator()]();
	    while (true) {
	        var item1 = iterator1.next();
	        var item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	exports.areIterablesEqual = areIterablesEqual;
	function iterateListLike(obj, fn) {
	    if (lang_1.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[lang_1.getSymbolIterator()]();
	        var item;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Set constructor.  We work around that by manually adding the items.
	var createSetFromList = (function () {
	    var test = new exports.Set([1, 2, 3]);
	    if (test.size === 3) {
	        return function createSetFromList(lst) { return new exports.Set(lst); };
	    }
	    else {
	        return function createSetAndPopulateFromList(lst) {
	            var res = new exports.Set(lst);
	            if (res.size !== lst.length) {
	                for (var i = 0; i < lst.length; i++) {
	                    res.add(lst[i]);
	                }
	            }
	            return res;
	        };
	    }
	})();
	var SetWrapper = (function () {
	    function SetWrapper() {
	    }
	    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	    SetWrapper.has = function (s, key) { return s.has(key); };
	    SetWrapper.delete = function (m, k) { m.delete(k); };
	    return SetWrapper;
	})();
	exports.SetWrapper = SetWrapper;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var reflection_1 = __webpack_require__(21);
	var key_1 = __webpack_require__(24);
	var metadata_1 = __webpack_require__(12);
	var exceptions_2 = __webpack_require__(26);
	var forward_ref_1 = __webpack_require__(15);
	/**
	 * `Dependency` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var Dependency = (function () {
	    function Dependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
	        this.key = key;
	        this.optional = optional;
	        this.lowerBoundVisibility = lowerBoundVisibility;
	        this.upperBoundVisibility = upperBoundVisibility;
	        this.properties = properties;
	    }
	    Dependency.fromKey = function (key) { return new Dependency(key, false, null, null, []); };
	    return Dependency;
	})();
	exports.Dependency = Dependency;
	var _EMPTY_LIST = lang_1.CONST_EXPR([]);
	/**
	 * Describes how the {@link Injector} should instantiate a given token.
	 *
	 * See {@link provide}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   new Provider("message", { useValue: 'Hello' })
	 * ]);
	 *
	 * expect(injector.get("message")).toEqual('Hello');
	 * ```
	 */
	var Provider = (function () {
	    function Provider(token, _a) {
	        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	        this.token = token;
	        this.useClass = useClass;
	        this.useValue = useValue;
	        this.useExisting = useExisting;
	        this.useFactory = useFactory;
	        this.dependencies = deps;
	        this._multi = multi;
	    }
	    Object.defineProperty(Provider.prototype, "multi", {
	        // TODO: Provide a full working example after alpha38 is released.
	        /**
	         * Creates multiple providers matching the same token (a multi-provider).
	         *
	         * Multi-providers are used for creating pluggable service, where the system comes
	         * with some default providers, and the user can register additional providers.
	         * The combination of the default providers and the additional providers will be
	         * used to drive the behavior of the system.
	         *
	         * ### Example
	         *
	         * ```typescript
	         * var injector = Injector.resolveAndCreate([
	         *   new Provider("Strings", { useValue: "String1", multi: true}),
	         *   new Provider("Strings", { useValue: "String2", multi: true})
	         * ]);
	         *
	         * expect(injector.get("Strings")).toEqual(["String1", "String2"]);
	         * ```
	         *
	         * Multi-providers and regular providers cannot be mixed. The following
	         * will throw an exception:
	         *
	         * ```typescript
	         * var injector = Injector.resolveAndCreate([
	         *   new Provider("Strings", { useValue: "String1", multi: true }),
	         *   new Provider("Strings", { useValue: "String2"})
	         * ]);
	         * ```
	         */
	        get: function () { return lang_1.normalizeBool(this._multi); },
	        enumerable: true,
	        configurable: true
	    });
	    Provider = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Provider);
	    return Provider;
	})();
	exports.Provider = Provider;
	/**
	 * See {@link Provider} instead.
	 *
	 * @deprecated
	 */
	var Binding = (function (_super) {
	    __extends(Binding, _super);
	    function Binding(token, _a) {
	        var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;
	        _super.call(this, token, {
	            useClass: toClass,
	            useValue: toValue,
	            useExisting: toAlias,
	            useFactory: toFactory,
	            deps: deps,
	            multi: multi
	        });
	    }
	    Object.defineProperty(Binding.prototype, "toClass", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useClass; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Binding.prototype, "toAlias", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useExisting; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Binding.prototype, "toFactory", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useFactory; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Binding.prototype, "toValue", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useValue; },
	        enumerable: true,
	        configurable: true
	    });
	    Binding = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Binding);
	    return Binding;
	})(Provider);
	exports.Binding = Binding;
	var ResolvedProvider_ = (function () {
	    function ResolvedProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	    }
	    Object.defineProperty(ResolvedProvider_.prototype, "resolvedFactory", {
	        get: function () { return this.resolvedFactories[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    return ResolvedProvider_;
	})();
	exports.ResolvedProvider_ = ResolvedProvider_;
	/**
	 * An internal resolved representation of a factory function created by resolving {@link Provider}.
	 */
	var ResolvedFactory = (function () {
	    function ResolvedFactory(
	        /**
	         * Factory function which can return an instance of an object represented by a key.
	         */
	        factory, 
	        /**
	         * Arguments (dependencies) to the `factory` function.
	         */
	        dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedFactory;
	})();
	exports.ResolvedFactory = ResolvedFactory;
	/**
	 * Creates a {@link Provider}.
	 *
	 * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,
	 * or
	 * to an existing `token`.
	 * See {@link ProviderBuilder} for more details.
	 *
	 * The `token` is most commonly a class or {@link angular2/di/OpaqueToken}.
	 *
	 * @deprecated
	 */
	function bind(token) {
	    return new ProviderBuilder(token);
	}
	exports.bind = bind;
	/**
	 * Creates a {@link Provider}.
	 *
	 * See {@link Provider} for more details.
	 *
	 * <!-- TODO: improve the docs -->
	 */
	function provide(token, _a) {
	    var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	    return new Provider(token, {
	        useClass: useClass,
	        useValue: useValue,
	        useExisting: useExisting,
	        useFactory: useFactory,
	        deps: deps,
	        multi: multi
	    });
	}
	exports.provide = provide;
	/**
	 * Helper class for the {@link bind} function.
	 */
	var ProviderBuilder = (function () {
	    function ProviderBuilder(token) {
	        this.token = token;
	    }
	    /**
	     * Binds a DI token to a class.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains
	     * both use cases for easy comparison.
	     *
	     * ```typescript
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useClass: Car})
	     * ]);
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useExisting: Car})
	     * ]);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    ProviderBuilder.prototype.toClass = function (type) {
	        if (!lang_1.isType(type)) {
	            throw new exceptions_1.BaseException("Trying to create a class provider but \"" + lang_1.stringify(type) + "\" is not a class!");
	        }
	        return new Provider(this.token, { useClass: type });
	    };
	    /**
	     * Binds a DI token to a value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide('message', {useValue: 'Hello'})
	     * ]);
	     *
	     * expect(injector.get('message')).toEqual('Hello');
	     * ```
	     */
	    ProviderBuilder.prototype.toValue = function (value) { return new Provider(this.token, { useValue: value }); };
	    /**
	     * Binds a DI token to an existing token.
	     *
	     * Angular will return the same instance as if the provided token was used. (This is
	     * in contrast to `useClass` where a separate instance of `useClass` will be returned.)
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains
	     * both use cases for easy comparison.
	     *
	     * ```typescript
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useExisting: Car})
	     * ]);
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useClass: Car})
	     * ]);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    ProviderBuilder.prototype.toAlias = function (aliasToken) {
	        if (lang_1.isBlank(aliasToken)) {
	            throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
	        }
	        return new Provider(this.token, { useExisting: aliasToken });
	    };
	    /**
	     * Binds a DI token to a function which computes the value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide(Number, {useFactory: () => { return 1+2; }}),
	     *   provide(String, {useFactory: (v) => { return "Value: " + v; }, deps: [Number]})
	     * ]);
	     *
	     * expect(injector.get(Number)).toEqual(3);
	     * expect(injector.get(String)).toEqual('Value: 3');
	     * ```
	     */
	    ProviderBuilder.prototype.toFactory = function (factory, dependencies) {
	        if (!lang_1.isFunction(factory)) {
	            throw new exceptions_1.BaseException("Trying to create a factory provider but \"" + lang_1.stringify(factory) + "\" is not a function!");
	        }
	        return new Provider(this.token, { useFactory: factory, deps: dependencies });
	    };
	    return ProviderBuilder;
	})();
	exports.ProviderBuilder = ProviderBuilder;
	/**
	 * Resolve a single provider.
	 */
	function resolveFactory(provider) {
	    var factoryFn;
	    var resolvedDeps;
	    if (lang_1.isPresent(provider.useClass)) {
	        var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
	        factoryFn = reflection_1.reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (lang_1.isPresent(provider.useExisting)) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [Dependency.fromKey(key_1.Key.get(provider.useExisting))];
	    }
	    else if (lang_1.isPresent(provider.useFactory)) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = _constructDependencies(provider.useFactory, provider.dependencies);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedFactory(factoryFn, resolvedDeps);
	}
	exports.resolveFactory = resolveFactory;
	/**
	 * Converts the {@link Provider} into {@link ResolvedProvider}.
	 *
	 * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
	 * convenience provider syntax.
	 */
	function resolveProvider(provider) {
	    return new ResolvedProvider_(key_1.Key.get(provider.token), [resolveFactory(provider)], provider.multi);
	}
	exports.resolveProvider = resolveProvider;
	/**
	 * Resolve a list of Providers.
	 */
	function resolveProviders(providers) {
	    var normalized = _normalizeProviders(providers, []);
	    var resolved = normalized.map(resolveProvider);
	    return collection_1.MapWrapper.values(mergeResolvedProviders(resolved, new Map()));
	}
	exports.resolveProviders = resolveProviders;
	/**
	 * Merges a list of ResolvedProviders into a list where
	 * each key is contained exactly once and multi providers
	 * have been merged.
	 */
	function mergeResolvedProviders(providers, normalizedProvidersMap) {
	    for (var i = 0; i < providers.length; i++) {
	        var provider = providers[i];
	        var existing = normalizedProvidersMap.get(provider.key.id);
	        if (lang_1.isPresent(existing)) {
	            if (provider.multiProvider !== existing.multiProvider) {
	                throw new exceptions_2.MixingMultiProvidersWithRegularProvidersError(existing, provider);
	            }
	            if (provider.multiProvider) {
	                for (var j = 0; j < provider.resolvedFactories.length; j++) {
	                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                }
	            }
	            else {
	                normalizedProvidersMap.set(provider.key.id, provider);
	            }
	        }
	        else {
	            var resolvedProvider;
	            if (provider.multiProvider) {
	                resolvedProvider = new ResolvedProvider_(provider.key, collection_1.ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
	            }
	            else {
	                resolvedProvider = provider;
	            }
	            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	        }
	    }
	    return normalizedProvidersMap;
	}
	exports.mergeResolvedProviders = mergeResolvedProviders;
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof lang_1.Type) {
	            res.push(provide(b, { useClass: b }));
	        }
	        else if (b instanceof Provider) {
	            res.push(b);
	        }
	        else if (b instanceof Array) {
	            _normalizeProviders(b, res);
	        }
	        else if (b instanceof ProviderBuilder) {
	            throw new exceptions_2.InvalidProviderError(b.token);
	        }
	        else {
	            throw new exceptions_2.InvalidProviderError(b);
	        }
	    });
	    return res;
	}
	function _constructDependencies(factoryFunction, dependencies) {
	    if (lang_1.isBlank(dependencies)) {
	        return _dependenciesFor(factoryFunction);
	    }
	    else {
	        var params = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(factoryFunction, t, params); });
	    }
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflection_1.reflector.parameters(typeOrFunc);
	    if (lang_1.isBlank(params))
	        return [];
	    if (params.some(lang_1.isBlank)) {
	        throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	function _extractToken(typeOrFunc, metadata /*any[] | any*/, params) {
	    var depProps = [];
	    var token = null;
	    var optional = false;
	    if (!lang_1.isArray(metadata)) {
	        if (metadata instanceof metadata_1.InjectMetadata) {
	            return _createDependency(metadata.token, optional, null, null, depProps);
	        }
	        else {
	            return _createDependency(metadata, optional, null, null, depProps);
	        }
	    }
	    var lowerBoundVisibility = null;
	    var upperBoundVisibility = null;
	    for (var i = 0; i < metadata.length; ++i) {
	        var paramMetadata = metadata[i];
	        if (paramMetadata instanceof lang_1.Type) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.InjectMetadata) {
	            token = paramMetadata.token;
	        }
	        else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof metadata_1.SelfMetadata) {
	            upperBoundVisibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.HostMetadata) {
	            upperBoundVisibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
	            lowerBoundVisibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
	            if (lang_1.isPresent(paramMetadata.token)) {
	                token = paramMetadata.token;
	            }
	            depProps.push(paramMetadata);
	        }
	    }
	    token = forward_ref_1.resolveForwardRef(token);
	    if (lang_1.isPresent(token)) {
	        return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	    }
	    else {
	        throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
	    }
	}
	function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
	    return new Dependency(key_1.Key.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	}


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exception_handler_1 = __webpack_require__(20);
	var exception_handler_2 = __webpack_require__(20);
	exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message) {
	        if (message === void 0) { message = "--"; }
	        _super.call(this, message);
	        this.message = message;
	        this.stack = (new Error(message)).stack;
	    }
	    BaseException.prototype.toString = function () { return this.message; };
	    return BaseException;
	})(Error);
	exports.BaseException = BaseException;
	/**
	 * Wraps an exception and provides additional context or information.
	 */
	var WrappedException = (function (_super) {
	    __extends(WrappedException, _super);
	    function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
	        _super.call(this, _wrapperMessage);
	        this._wrapperMessage = _wrapperMessage;
	        this._originalException = _originalException;
	        this._originalStack = _originalStack;
	        this._context = _context;
	        this._wrapperStack = (new Error(_wrapperMessage)).stack;
	    }
	    Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
	        get: function () { return this._wrapperMessage; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "wrapperStack", {
	        get: function () { return this._wrapperStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalException", {
	        get: function () { return this._originalException; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalStack", {
	        get: function () { return this._originalStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "context", {
	        get: function () { return this._context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "message", {
	        get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },
	        enumerable: true,
	        configurable: true
	    });
	    WrappedException.prototype.toString = function () { return this.message; };
	    return WrappedException;
	})(Error);
	exports.WrappedException = WrappedException;
	function makeTypeError(message) {
	    return new TypeError(message);
	}
	exports.makeTypeError = makeTypeError;
	function unimplemented() {
	    throw new BaseException('unimplemented');
	}
	exports.unimplemented = unimplemented;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var _ArrayLogger = (function () {
	    function _ArrayLogger() {
	        this.res = [];
	    }
	    _ArrayLogger.prototype.log = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroupEnd = function () { };
	    ;
	    return _ArrayLogger;
	})();
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```javascript
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * bootstrap(MyApp, [provide(ExceptionHandler, {useClass: MyExceptionHandler})])
	 *
	 * ```
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler(_logger, _rethrowException) {
	        if (_rethrowException === void 0) { _rethrowException = true; }
	        this._logger = _logger;
	        this._rethrowException = _rethrowException;
	    }
	    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var l = new _ArrayLogger();
	        var e = new ExceptionHandler(l, false);
	        e.call(exception, stackTrace, reason);
	        return l.res.join("\n");
	    };
	    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var originalException = this._findOriginalException(exception);
	        var originalStack = this._findOriginalStack(exception);
	        var context = this._findContext(exception);
	        this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
	        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
	            this._logger.logError("STACKTRACE:");
	            this._logger.logError(this._longStackTrace(stackTrace));
	        }
	        if (lang_1.isPresent(reason)) {
	            this._logger.logError("REASON: " + reason);
	        }
	        if (lang_1.isPresent(originalException)) {
	            this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
	        }
	        if (lang_1.isPresent(originalStack)) {
	            this._logger.logError("ORIGINAL STACKTRACE:");
	            this._logger.logError(this._longStackTrace(originalStack));
	        }
	        if (lang_1.isPresent(context)) {
	            this._logger.logError("ERROR CONTEXT:");
	            this._logger.logError(context);
	        }
	        this._logger.logGroupEnd();
	        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	        // when an exception happens. If we do not rethrow, bootstrap will always succeed.
	        if (this._rethrowException)
	            throw exception;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._extractMessage = function (exception) {
	        return exception instanceof exceptions_1.WrappedException ? exception.wrapperMessage : exception.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
	        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") :
	            stackTrace.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findContext = function (exception) {
	        try {
	            if (!(exception instanceof exceptions_1.WrappedException))
	                return null;
	            return lang_1.isPresent(exception.context) ? exception.context :
	                this._findContext(exception.originalException);
	        }
	        catch (e) {
	            // exception.context can throw an exception. if it happens, we ignore the context.
	            return null;
	        }
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalException = function (exception) {
	        if (!(exception instanceof exceptions_1.WrappedException))
	            return null;
	        var e = exception.originalException;
	        while (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	        }
	        return e;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalStack = function (exception) {
	        if (!(exception instanceof exceptions_1.WrappedException))
	            return null;
	        var e = exception;
	        var stack = exception.originalStack;
	        while (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	            if (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
	                stack = e.originalStack;
	            }
	        }
	        return stack;
	    };
	    return ExceptionHandler;
	})();
	exports.ExceptionHandler = ExceptionHandler;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var reflector_1 = __webpack_require__(22);
	var reflector_2 = __webpack_require__(22);
	exports.Reflector = reflector_2.Reflector;
	exports.ReflectionInfo = reflector_2.ReflectionInfo;
	var reflection_capabilities_1 = __webpack_require__(23);
	/**
	 * The {@link Reflector} used internally in Angular to access metadata
	 * about symbols.
	 */
	exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	/**
	 * Reflective information about a symbol, including annotations, interfaces, and other metadata.
	 */
	var ReflectionInfo = (function () {
	    function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
	        this.annotations = annotations;
	        this.parameters = parameters;
	        this.factory = factory;
	        this.interfaces = interfaces;
	        this.propMetadata = propMetadata;
	    }
	    return ReflectionInfo;
	})();
	exports.ReflectionInfo = ReflectionInfo;
	/**
	 * Provides access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 */
	var Reflector = (function () {
	    function Reflector(reflectionCapabilities) {
	        /** @internal */
	        this._injectableInfo = new collection_1.Map();
	        /** @internal */
	        this._getters = new collection_1.Map();
	        /** @internal */
	        this._setters = new collection_1.Map();
	        /** @internal */
	        this._methods = new collection_1.Map();
	        this._usedKeys = null;
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };
	    /**
	     * Causes `this` reflector to track keys used to access
	     * {@link ReflectionInfo} objects.
	     */
	    Reflector.prototype.trackUsage = function () { this._usedKeys = new collection_1.Set(); };
	    /**
	     * Lists types for which reflection information was not requested since
	     * {@link #trackUsage} was called. This list could later be audited as
	     * potential dead code.
	     */
	    Reflector.prototype.listUnusedKeys = function () {
	        var _this = this;
	        if (this._usedKeys == null) {
	            throw new exceptions_1.BaseException('Usage tracking is disabled');
	        }
	        var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
	        return allTypes.filter(function (key) { return !collection_1.SetWrapper.has(_this._usedKeys, key); });
	    };
	    Reflector.prototype.registerFunction = function (func, funcInfo) {
	        this._injectableInfo.set(func, funcInfo);
	    };
	    Reflector.prototype.registerType = function (type, typeInfo) {
	        this._injectableInfo.set(type, typeInfo);
	    };
	    Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };
	    Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };
	    Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };
	    Reflector.prototype.factory = function (type) {
	        if (this._containsReflectionInfo(type)) {
	            var res = this._getReflectionInfo(type).factory;
	            return lang_1.isPresent(res) ? res : null;
	        }
	        else {
	            return this.reflectionCapabilities.factory(type);
	        }
	    };
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            var res = this._getReflectionInfo(typeOrFunc).parameters;
	            return lang_1.isPresent(res) ? res : [];
	        }
	        else {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        }
	    };
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            var res = this._getReflectionInfo(typeOrFunc).annotations;
	            return lang_1.isPresent(res) ? res : [];
	        }
	        else {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        }
	    };
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            var res = this._getReflectionInfo(typeOrFunc).propMetadata;
	            return lang_1.isPresent(res) ? res : {};
	        }
	        else {
	            return this.reflectionCapabilities.propMetadata(typeOrFunc);
	        }
	    };
	    Reflector.prototype.interfaces = function (type) {
	        if (this._injectableInfo.has(type)) {
	            var res = this._getReflectionInfo(type).interfaces;
	            return lang_1.isPresent(res) ? res : [];
	        }
	        else {
	            return this.reflectionCapabilities.interfaces(type);
	        }
	    };
	    Reflector.prototype.getter = function (name) {
	        if (this._getters.has(name)) {
	            return this._getters.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.getter(name);
	        }
	    };
	    Reflector.prototype.setter = function (name) {
	        if (this._setters.has(name)) {
	            return this._setters.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.setter(name);
	        }
	    };
	    Reflector.prototype.method = function (name) {
	        if (this._methods.has(name)) {
	            return this._methods.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.method(name);
	        }
	    };
	    /** @internal */
	    Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
	        if (lang_1.isPresent(this._usedKeys)) {
	            this._usedKeys.add(typeOrFunc);
	        }
	        return this._injectableInfo.get(typeOrFunc);
	    };
	    /** @internal */
	    Reflector.prototype._containsReflectionInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };
	    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	    return Reflector;
	})();
	exports.Reflector = Reflector;
	function _mergeMaps(target, config) {
	    collection_1.StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var ReflectionCapabilities = (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
	    }
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    ReflectionCapabilities.prototype.factory = function (t) {
	        switch (t.length) {
	            case 0:
	                return function () { return new t(); };
	            case 1:
	                return function (a1) { return new t(a1); };
	            case 2:
	                return function (a1, a2) { return new t(a1, a2); };
	            case 3:
	                return function (a1, a2, a3) { return new t(a1, a2, a3); };
	            case 4:
	                return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return new t(a1, a2, a3, a4, a5, a6); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return new t(a1, a2, a3, a4, a5, a6, a7); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return new t(a1, a2, a3, a4, a5, a6, a7, a8); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9); };
	            case 10:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	                };
	            case 11:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
	                };
	            case 12:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
	                };
	            case 13:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
	                };
	            case 14:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
	                };
	            case 15:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
	                };
	            case 16:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
	                };
	            case 17:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	                };
	            case 18:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	                };
	            case 19:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
	                };
	            case 20:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
	                };
	        }
	        ;
	        throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
	    };
	    /** @internal */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = new Array(paramAnnotations.length);
	        }
	        else {
	            result = new Array(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOrFunc.parameters)) {
	            return typeOrFunc.parameters;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
	            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
	            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	        }
	        // The array has to be filled with `undefined` because holes would be skipped by `some`
	        var parameters = new Array(typeOrFunc.length);
	        parameters.fill(undefined);
	        return parameters;
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOrFunc.annotations)) {
	            var annotations = typeOrFunc.annotations;
	            if (lang_1.isFunction(annotations) && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
	            if (lang_1.isPresent(annotations))
	                return annotations;
	        }
	        return [];
	    };
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOrFunc.propMetadata)) {
	            var propMetadata = typeOrFunc.propMetadata;
	            if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
	            if (lang_1.isPresent(propMetadata))
	                return propMetadata;
	        }
	        return {};
	    };
	    ReflectionCapabilities.prototype.interfaces = function (type) {
	        throw new exceptions_1.BaseException("JavaScript does not support interfaces");
	    };
	    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return new Function('o', 'v', 'return o.' + name + ' = v;');
	    };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return new Function('o', 'args', functionBody);
	    };
	    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
	    ReflectionCapabilities.prototype.importUri = function (type) { return './'; };
	    return ReflectionCapabilities;
	})();
	exports.ReflectionCapabilities = ReflectionCapabilities;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var type_literal_1 = __webpack_require__(25);
	var forward_ref_1 = __webpack_require__(15);
	var type_literal_2 = __webpack_require__(25);
	exports.TypeLiteral = type_literal_2.TypeLiteral;
	/**
	 * A unique object used for retrieving items from the {@link Injector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {@link Injector} because its system-wide unique `id` allows the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {@link Injector} creates keys automatically when resolving
	 * providers.
	 */
	var Key = (function () {
	    /**
	     * Private
	     */
	    function Key(token, id) {
	        this.token = token;
	        this.id = id;
	        if (lang_1.isBlank(token)) {
	            throw new exceptions_1.BaseException('Token must be defined!');
	        }
	    }
	    Object.defineProperty(Key.prototype, "displayName", {
	        /**
	         * Returns a stringified token.
	         */
	        get: function () { return lang_1.stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    Key.get = function (token) { return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token)); };
	    Object.defineProperty(Key, "numberOfKeys", {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return Key;
	})();
	exports.Key = Key;
	/**
	 * @internal
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof Key)
	            return token;
	        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123
	        var theToken = token;
	        if (token instanceof type_literal_1.TypeLiteral) {
	            theToken = token.type;
	        }
	        token = theToken;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var newKey = new Key(token, Key.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        get: function () { return this._allKeys.size; },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	})();
	exports.KeyRegistry = KeyRegistry;
	var _globalKeyRegistry = new KeyRegistry();


/***/ },
/* 25 */
/***/ function(module, exports) {

	'use strict';/**
	 * Type literals is a Dart-only feature. This is here only so we can x-compile
	 * to multiple languages.
	 */
	var TypeLiteral = (function () {
	    function TypeLiteral() {
	    }
	    Object.defineProperty(TypeLiteral.prototype, "type", {
	        get: function () { throw new Error("Type literals are only supported in Dart"); },
	        enumerable: true,
	        configurable: true
	    });
	    return TypeLiteral;
	})();
	exports.TypeLiteral = TypeLiteral;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (collection_1.ListWrapper.contains(res, keys[i])) {
	            res.push(keys[i]);
	            return res;
	        }
	        else {
	            res.push(keys[i]);
	        }
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
	        var tokenStrs = reversed.map(function (k) { return lang_1.stringify(k.token); });
	        return " (" + tokenStrs.join(' -> ') + ")";
	    }
	    else {
	        return "";
	    }
	}
	/**
	 * Base class for all errors arising from misconfigured providers.
	 */
	var AbstractProviderError = (function (_super) {
	    __extends(AbstractProviderError, _super);
	    function AbstractProviderError(injector, key, constructResolvingMessage) {
	        _super.call(this, "DI Exception");
	        this.keys = [key];
	        this.injectors = [injector];
	        this.constructResolvingMessage = constructResolvingMessage;
	        this.message = this.constructResolvingMessage(this.keys);
	    }
	    AbstractProviderError.prototype.addKey = function (injector, key) {
	        this.injectors.push(injector);
	        this.keys.push(key);
	        this.message = this.constructResolvingMessage(this.keys);
	    };
	    Object.defineProperty(AbstractProviderError.prototype, "context", {
	        get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractProviderError;
	})(exceptions_1.BaseException);
	exports.AbstractProviderError = AbstractProviderError;
	/**
	 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Provider} for {@link Key}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 */
	var NoProviderError = (function (_super) {
	    __extends(NoProviderError, _super);
	    function NoProviderError(injector, key) {
	        _super.call(this, injector, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "No provider for " + first + "!" + constructResolvingPath(keys);
	        });
	    }
	    return NoProviderError;
	})(AbstractProviderError);
	exports.NoProviderError = NoProviderError;
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   provide("one", {useFactory: (two) => "two", deps: [[new Inject("two")]]}),
	 *   provide("two", {useFactory: (one) => "one", deps: [[new Inject("one")]]})
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 */
	var CyclicDependencyError = (function (_super) {
	    __extends(CyclicDependencyError, _super);
	    function CyclicDependencyError(injector, key) {
	        _super.call(this, injector, key, function (keys) {
	            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	        });
	    }
	    return CyclicDependencyError;
	})(AbstractProviderError);
	exports.CyclicDependencyError = CyclicDependencyError;
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);

	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 */
	var InstantiationError = (function (_super) {
	    __extends(InstantiationError, _super);
	    function InstantiationError(injector, originalException, originalStack, key) {
	        _super.call(this, "DI Exception", originalException, originalStack, null);
	        this.keys = [key];
	        this.injectors = [injector];
	    }
	    InstantiationError.prototype.addKey = function (injector, key) {
	        this.injectors.push(injector);
	        this.keys.push(key);
	    };
	    Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
	        get: function () {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
	            return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InstantiationError.prototype, "causeKey", {
	        get: function () { return this.keys[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InstantiationError.prototype, "context", {
	        get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
	        enumerable: true,
	        configurable: true
	    });
	    return InstantiationError;
	})(exceptions_1.WrappedException);
	exports.InstantiationError = InstantiationError;
	/**
	 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	 * creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 */
	var InvalidProviderError = (function (_super) {
	    __extends(InvalidProviderError, _super);
	    function InvalidProviderError(provider) {
	        _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " +
	            provider.toString());
	    }
	    return InvalidProviderError;
	})(exceptions_1.BaseException);
	exports.InvalidProviderError = InvalidProviderError;
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 */
	var NoAnnotationError = (function (_super) {
	    __extends(NoAnnotationError, _super);
	    function NoAnnotationError(typeOrFunc, params) {
	        _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	    }
	    NoAnnotationError._genMessage = function (typeOrFunc, params) {
	        var signature = [];
	        for (var i = 0, ii = params.length; i < ii; i++) {
	            var parameter = params[i];
	            if (lang_1.isBlank(parameter) || parameter.length == 0) {
	                signature.push('?');
	            }
	            else {
	                signature.push(parameter.map(lang_1.stringify).join(' '));
	            }
	        }
	        return "Cannot resolve all parameters for '" + lang_1.stringify(typeOrFunc) + "'(" +
	            signature.join(', ') + "). " +
	            "Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" +
	            lang_1.stringify(typeOrFunc) + "' is decorated with Injectable.";
	    };
	    return NoAnnotationError;
	})(exceptions_1.BaseException);
	exports.NoAnnotationError = NoAnnotationError;
	/**
	 * Thrown when getting an object by index.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 */
	var OutOfBoundsError = (function (_super) {
	    __extends(OutOfBoundsError, _super);
	    function OutOfBoundsError(index) {
	        _super.call(this, "Index " + index + " is out-of-bounds.");
	    }
	    return OutOfBoundsError;
	})(exceptions_1.BaseException);
	exports.OutOfBoundsError = OutOfBoundsError;
	// TODO: add a working example after alpha38 is released
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   new Provider("Strings", {useValue: "string1", multi: true}),
	 *   new Provider("Strings", {useValue: "string2", multi: false})
	 * ])).toThrowError();
	 * ```
	 */
	var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	    __extends(MixingMultiProvidersWithRegularProvidersError, _super);
	    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	        _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " +
	            provider2.toString());
	    }
	    return MixingMultiProvidersWithRegularProvidersError;
	})(exceptions_1.BaseException);
	exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	 *
	 * ```typescript
	 * var t = new OpaqueToken("value");
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   provide(t, {useValue: "bindingValue"})
	 * ]);
	 *
	 * expect(injector.get(t)).toEqual("bindingValue");
	 * ```
	 *
	 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	 * caused by multiple providers using the same string as two different tokens.
	 *
	 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	 * error messages.
	 */
	var OpaqueToken = (function () {
	    function OpaqueToken(_desc) {
	        this._desc = _desc;
	    }
	    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	    OpaqueToken = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], OpaqueToken);
	    return OpaqueToken;
	})();
	exports.OpaqueToken = OpaqueToken;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var metadata_1 = __webpack_require__(12);
	var change_detection_1 = __webpack_require__(29);
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link ViewMetadata}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
	 * {@link DirectiveMetadata} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ### Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   inputs: [
	 *     'id: dependency'
	 *   ]
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the current element, the
	 * parent element, or its parents.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Host() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * `@Host` checks the current element, the parent, as well as its parents recursively. If
	 * `dependency="2"` didn't
	 * exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child directives, a directive can't simply inject the list of child directives. Instead,
	 * the directive injects a {@link QueryList}, which updates its contents as children are added,
	 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an
	 * `ngIf`, or an `ngSwitch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * `Dependency` 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * By passing the descendant flag to `@Query` above, we can include the children of the child
	 * elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ### Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   inputs: [
	 *     'text: tooltip'
	 *   ],
	 *   host: {
	 *     '(mouseenter)': 'onMouseEnter()',
	 *     '(mouseleave)': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the directive.
	 *
	 * ### Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   inputs: ['unless']
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   templateRef: TemplateRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.templateRef = templateRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.templateRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 */
	var DirectiveMetadata = (function (_super) {
	    __extends(DirectiveMetadata, _super);
	    function DirectiveMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, bindings = _b.bindings, providers = _b.providers, exportAs = _b.exportAs, queries = _b.queries;
	        _super.call(this);
	        this.selector = selector;
	        this._inputs = inputs;
	        this._properties = properties;
	        this._outputs = outputs;
	        this._events = events;
	        this.host = host;
	        this.exportAs = exportAs;
	        this.queries = queries;
	        this._providers = providers;
	        this._bindings = bindings;
	    }
	    Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
	        /**
	         * Enumerates the set of data-bound input properties for a directive
	         *
	         * Angular automatically updates input properties during change detection.
	         *
	         * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`
	         * configuration:
	         *
	         * - `directiveProperty` specifies the component property where the value is written.
	         * - `bindingProperty` specifies the DOM property where the value is read from.
	         *
	         * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ivhfXY?p=preview))
	         *
	         * The following example creates a component with two data-bound properties.
	         *
	         * ```typescript
	         * @Component({
	         *   selector: 'bank-account',
	         *   inputs: ['bankName', 'id: account-id'],
	         *   template: `
	         *     Bank Name: {{bankName}}
	         *     Account Id: {{id}}
	         *   `
	         * })
	         * class BankAccount {
	         *   bankName: string;
	         *   id: string;
	         *
	         *   // this property is not bound, and won't be automatically updated by Angular
	         *   normalizedBankName: string;
	         * }
	         *
	         * @Component({
	         *   selector: 'app',
	         *   template: `
	         *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
	         *   `,
	         *   directives: [BankAccount]
	         * })
	         * class App {}
	         *
	         * bootstrap(App);
	         * ```
	         *
	         */
	        get: function () {
	            return lang_1.isPresent(this._properties) && this._properties.length > 0 ? this._properties :
	                this._inputs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "properties", {
	        get: function () { return this.inputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
	        /**
	         * Enumerates the set of event-bound output properties.
	         *
	         * When an output property emits an event, an event handler attached to that event
	         * the template is invoked.
	         *
	         * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`
	         * configuration:
	         *
	         * - `directiveProperty` specifies the component property that emits events.
	         * - `bindingProperty` specifies the DOM property the event handler is attached to.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/d5CNq7?p=preview))
	         *
	         * ```typescript
	         * @Directive({
	         *   selector: 'interval-dir',
	         *   outputs: ['everySecond', 'five5Secs: everyFiveSeconds']
	         * })
	         * class IntervalDir {
	         *   everySecond = new EventEmitter();
	         *   five5Secs = new EventEmitter();
	         *
	         *   constructor() {
	         *     setInterval(() => this.everySecond.emit("event"), 1000);
	         *     setInterval(() => this.five5Secs.emit("event"), 5000);
	         *   }
	         * }
	         *
	         * @Component({
	         *   selector: 'app',
	         *   template: `
	         *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
	         *     </interval-dir>
	         *   `,
	         *   directives: [IntervalDir]
	         * })
	         * class App {
	         *   everySecond() { console.log('second'); }
	         *   everyFiveSeconds() { console.log('five seconds'); }
	         * }
	         * bootstrap(App);
	         * ```
	         *
	         */
	        get: function () {
	            return lang_1.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "events", {
	        get: function () { return this.outputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "providers", {
	        /**
	         * Defines the set of injectable objects that are visible to a Directive and its light DOM
	         * children.
	         *
	         * ## Simple Example
	         *
	         * Here is an example of a class that can be injected:
	         *
	         * ```
	         * class Greeter {
	         *    greet(name:string) {
	         *      return 'Hello ' + name + '!';
	         *    }
	         * }
	         *
	         * @Directive({
	         *   selector: 'greet',
	         *   bindings: [
	         *     Greeter
	         *   ]
	         * })
	         * class HelloWorld {
	         *   greeter:Greeter;
	         *
	         *   constructor(greeter:Greeter) {
	         *     this.greeter = greeter;
	         *   }
	         * }
	         * ```
	         */
	        get: function () {
	            return lang_1.isPresent(this._bindings) && this._bindings.length > 0 ? this._bindings :
	                this._providers;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "bindings", {
	        /** @deprecated */
	        get: function () { return this.providers; },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], DirectiveMetadata);
	    return DirectiveMetadata;
	})(metadata_1.InjectableMetadata);
	exports.DirectiveMetadata = DirectiveMetadata;
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates all the injectable objects configured with `providers` and `viewProviders`.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link ViewMetadata}.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the component.
	 *
	 * ### Example
	 *
	 * {@example core/ts/metadata/metadata.ts region='component'}
	 */
	var ComponentMetadata = (function (_super) {
	    __extends(ComponentMetadata, _super);
	    function ComponentMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, bindings = _b.bindings, providers = _b.providers, viewBindings = _b.viewBindings, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_1.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation;
	        _super.call(this, {
	            selector: selector,
	            inputs: inputs,
	            outputs: outputs,
	            properties: properties,
	            events: events,
	            host: host,
	            exportAs: exportAs,
	            bindings: bindings,
	            providers: providers,
	            queries: queries
	        });
	        this.changeDetection = changeDetection;
	        this._viewProviders = viewProviders;
	        this._viewBindings = viewBindings;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.directives = directives;
	        this.pipes = pipes;
	        this.encapsulation = encapsulation;
	        this.moduleId = moduleId;
	    }
	    Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
	        /**
	         * Defines the set of injectable objects that are visible to its view DOM children.
	         *
	         * ## Simple Example
	         *
	         * Here is an example of a class that can be injected:
	         *
	         * ```
	         * class Greeter {
	         *    greet(name:string) {
	         *      return 'Hello ' + name + '!';
	         *    }
	         * }
	         *
	         * @Directive({
	         *   selector: 'needs-greeter'
	         * })
	         * class NeedsGreeter {
	         *   greeter:Greeter;
	         *
	         *   constructor(greeter:Greeter) {
	         *     this.greeter = greeter;
	         *   }
	         * }
	         *
	         * @Component({
	         *   selector: 'greet',
	         *   viewProviders: [
	         *     Greeter
	         *   ],
	         *   template: `<needs-greeter></needs-greeter>`,
	         *   directives: [NeedsGreeter]
	         * })
	         * class HelloWorld {
	         * }
	         *
	         * ```
	         */
	        get: function () {
	            return lang_1.isPresent(this._viewBindings) && this._viewBindings.length > 0 ? this._viewBindings :
	                this._viewProviders;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentMetadata.prototype, "viewBindings", {
	        get: function () { return this.viewProviders; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ComponentMetadata);
	    return ComponentMetadata;
	})(DirectiveMetadata);
	exports.ComponentMetadata = ComponentMetadata;
	/**
	 * Declare reusable pipe function.
	 *
	 * A "pure" pipe is only re-evaluated when either the input or any of the arguments change.
	 *
	 * When not specified, pipes default to being pure.
	 *
	 * ### Example
	 *
	 * {@example core/ts/metadata/metadata.ts region='pipe'}
	 */
	var PipeMetadata = (function (_super) {
	    __extends(PipeMetadata, _super);
	    function PipeMetadata(_a) {
	        var name = _a.name, pure = _a.pure;
	        _super.call(this);
	        this.name = name;
	        this._pure = pure;
	    }
	    Object.defineProperty(PipeMetadata.prototype, "pure", {
	        get: function () { return lang_1.isPresent(this._pure) ? this._pure : true; },
	        enumerable: true,
	        configurable: true
	    });
	    PipeMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], PipeMetadata);
	    return PipeMetadata;
	})(metadata_1.InjectableMetadata);
	exports.PipeMetadata = PipeMetadata;
	/**
	 * Declares a data-bound input property.
	 *
	 * Angular automatically updates data-bound properties during change detection.
	 *
	 * `InputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * The following example creates a component with two input properties.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'bank-account',
	 *   template: `
	 *     Bank Name: {{bankName}}
	 *     Account Id: {{id}}
	 *   `
	 * })
	 * class BankAccount {
	 *   @Input() bankName: string;
	 *   @Input('account-id') id: string;
	 *
	 *   // this property is not bound, and won't be automatically updated by Angular
	 *   normalizedBankName: string;
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
	 *   `,
	 *   directives: [BankAccount]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	var InputMetadata = (function () {
	    function InputMetadata(
	        /**
	         * Name used when instantiating a component in the temlate.
	         */
	        bindingPropertyName) {
	        this.bindingPropertyName = bindingPropertyName;
	    }
	    InputMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], InputMetadata);
	    return InputMetadata;
	})();
	exports.InputMetadata = InputMetadata;
	/**
	 * Declares an event-bound output property.
	 *
	 * When an output property emits an event, an event handler attached to that event
	 * the template is invoked.
	 *
	 * `OutputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Directive({
	 *   selector: 'interval-dir',
	 * })
	 * class IntervalDir {
	 *   @Output() everySecond = new EventEmitter();
	 *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
	 *
	 *   constructor() {
	 *     setInterval(() => this.everySecond.emit("event"), 1000);
	 *     setInterval(() => this.five5Secs.emit("event"), 5000);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
	 *     </interval-dir>
	 *   `,
	 *   directives: [IntervalDir]
	 * })
	 * class App {
	 *   everySecond() { console.log('second'); }
	 *   everyFiveSeconds() { console.log('five seconds'); }
	 * }
	 * bootstrap(App);
	 * ```
	 */
	var OutputMetadata = (function () {
	    function OutputMetadata(bindingPropertyName) {
	        this.bindingPropertyName = bindingPropertyName;
	    }
	    OutputMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], OutputMetadata);
	    return OutputMetadata;
	})();
	exports.OutputMetadata = OutputMetadata;
	/**
	 * Declares a host property binding.
	 *
	 * Angular automatically checks host property bindings during change detection.
	 * If a binding changes, it will update the host element of the directive.
	 *
	 * `HostBindingMetadata` takes an optional parameter that specifies the property
	 * name of the host element that will be updated. When not provided,
	 * the class property name is used.
	 *
	 * ### Example
	 *
	 * The following example creates a directive that sets the `valid` and `invalid` classes
	 * on the DOM element that has ngModel directive on it.
	 *
	 * ```typescript
	 * @Directive({selector: '[ngModel]'})
	 * class NgModelStatus {
	 *   constructor(public control:NgModel) {}
	 *   @HostBinding('class.valid') get valid { return this.control.valid; }
	 *   @HostBinding('class.invalid') get invalid { return this.control.invalid; }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<input [(ngModel)]="prop">`,
	 *   directives: [FORM_DIRECTIVES, NgModelStatus]
	 * })
	 * class App {
	 *   prop;
	 * }
	 *
	 * bootstrap(App);
	 * ```
	 */
	var HostBindingMetadata = (function () {
	    function HostBindingMetadata(hostPropertyName) {
	        this.hostPropertyName = hostPropertyName;
	    }
	    HostBindingMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], HostBindingMetadata);
	    return HostBindingMetadata;
	})();
	exports.HostBindingMetadata = HostBindingMetadata;
	/**
	 * Declares a host listener.
	 *
	 * Angular will invoke the decorated method when the host element emits the specified event.
	 *
	 * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
	 * event.
	 *
	 * ### Example
	 *
	 * The following example declares a directive that attaches a click listener to the button and
	 * counts clicks.
	 *
	 * ```typescript
	 * @Directive({selector: 'button[counting]'})
	 * class CountClicks {
	 *   numberOfClicks = 0;
	 *
	 *   @HostListener('click', ['$event.target'])
	 *   onClick(btn) {
	 *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<button counting>Increment</button>`,
	 *   directives: [CountClicks]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	var HostListenerMetadata = (function () {
	    function HostListenerMetadata(eventName, args) {
	        this.eventName = eventName;
	        this.args = args;
	    }
	    HostListenerMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Array])
	    ], HostListenerMetadata);
	    return HostListenerMetadata;
	})();
	exports.HostListenerMetadata = HostListenerMetadata;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	var change_detection_1 = __webpack_require__(30);
	exports.ChangeDetectionStrategy = change_detection_1.ChangeDetectionStrategy;
	exports.ExpressionChangedAfterItHasBeenCheckedException = change_detection_1.ExpressionChangedAfterItHasBeenCheckedException;
	exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
	exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
	exports.WrappedValue = change_detection_1.WrappedValue;
	exports.SimpleChange = change_detection_1.SimpleChange;
	exports.IterableDiffers = change_detection_1.IterableDiffers;
	exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var iterable_differs_1 = __webpack_require__(31);
	var default_iterable_differ_1 = __webpack_require__(32);
	var keyvalue_differs_1 = __webpack_require__(33);
	var default_keyvalue_differ_1 = __webpack_require__(34);
	var lang_1 = __webpack_require__(10);
	var ast_1 = __webpack_require__(35);
	exports.ASTWithSource = ast_1.ASTWithSource;
	exports.AST = ast_1.AST;
	exports.AstTransformer = ast_1.AstTransformer;
	exports.PropertyRead = ast_1.PropertyRead;
	exports.LiteralArray = ast_1.LiteralArray;
	exports.ImplicitReceiver = ast_1.ImplicitReceiver;
	var lexer_1 = __webpack_require__(36);
	exports.Lexer = lexer_1.Lexer;
	var parser_1 = __webpack_require__(37);
	exports.Parser = parser_1.Parser;
	var locals_1 = __webpack_require__(38);
	exports.Locals = locals_1.Locals;
	var exceptions_1 = __webpack_require__(39);
	exports.DehydratedException = exceptions_1.DehydratedException;
	exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
	exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
	var interfaces_1 = __webpack_require__(40);
	exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
	exports.DebugContext = interfaces_1.DebugContext;
	exports.ChangeDetectorGenConfig = interfaces_1.ChangeDetectorGenConfig;
	var constants_1 = __webpack_require__(41);
	exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
	exports.CHANGE_DETECTION_STRATEGY_VALUES = constants_1.CHANGE_DETECTION_STRATEGY_VALUES;
	var proto_change_detector_1 = __webpack_require__(42);
	exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
	var jit_proto_change_detector_1 = __webpack_require__(76);
	exports.JitProtoChangeDetector = jit_proto_change_detector_1.JitProtoChangeDetector;
	var binding_record_1 = __webpack_require__(45);
	exports.BindingRecord = binding_record_1.BindingRecord;
	exports.BindingTarget = binding_record_1.BindingTarget;
	var directive_record_1 = __webpack_require__(46);
	exports.DirectiveIndex = directive_record_1.DirectiveIndex;
	exports.DirectiveRecord = directive_record_1.DirectiveRecord;
	var dynamic_change_detector_1 = __webpack_require__(47);
	exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
	var change_detector_ref_1 = __webpack_require__(49);
	exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
	var iterable_differs_2 = __webpack_require__(31);
	exports.IterableDiffers = iterable_differs_2.IterableDiffers;
	var keyvalue_differs_2 = __webpack_require__(33);
	exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
	var change_detection_util_1 = __webpack_require__(43);
	exports.WrappedValue = change_detection_util_1.WrappedValue;
	exports.SimpleChange = change_detection_util_1.SimpleChange;
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	exports.keyValDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_keyvalue_differ_1.DefaultKeyValueDifferFactory())]);
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	exports.iterableDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_iterable_differ_1.DefaultIterableDifferFactory())]);
	exports.defaultIterableDiffers = lang_1.CONST_EXPR(new iterable_differs_1.IterableDiffers(exports.iterableDiff));
	exports.defaultKeyValueDiffers = lang_1.CONST_EXPR(new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff));


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var di_1 = __webpack_require__(11);
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 */
	var IterableDiffers = (function () {
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    IterableDiffers.create = function (factories, parent) {
	        if (lang_1.isPresent(parent)) {
	            var copied = collection_1.ListWrapper.clone(parent.factories);
	            factories = factories.concat(copied);
	            return new IterableDiffers(factories);
	        }
	        else {
	            return new IterableDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {@link IterableDiffers} instance with the provided factories and return a new
	     * {@link IterableDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	           * which will only be applied to the injector for this component and its children.
	           * This step is all that's required to make a new {@link IterableDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    IterableDiffers.extend = function (factories) {
	        return new di_1.Provider(IterableDiffers, {
	            useFactory: function (parent) {
	                if (lang_1.isBlank(parent)) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new exceptions_1.BaseException('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
	        });
	    };
	    IterableDiffers.prototype.find = function (iterable) {
	        var factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (lang_1.isPresent(factory)) {
	            return factory;
	        }
	        else {
	            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "'");
	        }
	    };
	    IterableDiffers = __decorate([
	        di_1.Injectable(),
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array])
	    ], IterableDiffers);
	    return IterableDiffers;
	})();
	exports.IterableDiffers = IterableDiffers;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var lang_2 = __webpack_require__(10);
	var DefaultIterableDifferFactory = (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    DefaultIterableDifferFactory.prototype.supports = function (obj) { return collection_1.isListLikeIterable(obj); };
	    DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
	        return new DefaultIterableDiffer(trackByFn);
	    };
	    DefaultIterableDifferFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DefaultIterableDifferFactory);
	    return DefaultIterableDifferFactory;
	})();
	exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
	var trackByIdentity = function (index, item) { return item; };
	var DefaultIterableDiffer = (function () {
	    function DefaultIterableDiffer(_trackByFn) {
	        this._trackByFn = _trackByFn;
	        this._length = null;
	        this._collection = null;
	        // Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        // Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	        // Keeps track of records where custom track by is the same, but item identity has changed
	        this._identityChangesHead = null;
	        this._identityChangesTail = null;
	        this._trackByFn = lang_2.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
	    }
	    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	        var record;
	        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (lang_2.isBlank(collection))
	            collection = [];
	        if (!collection_1.isListLikeIterable(collection)) {
	            throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        var itemTrackBy;
	        if (lang_2.isArray(collection)) {
	            var list = collection;
	            this._length = collection.length;
	            for (index = 0; index < this._length; index++) {
	                item = list[index];
	                itemTrackBy = this._trackByFn(index, item);
	                if (record === null || !lang_2.looseIdentical(record.trackById, itemTrackBy)) {
	                    record = this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!lang_2.looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            collection_1.iterateListLike(collection, function (item) {
	                itemTrackBy = _this._trackByFn(index, item);
	                if (record === null || !lang_2.looseIdentical(record.trackById, itemTrackBy)) {
	                    record = _this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!lang_2.looseIdentical(record.item, item))
	                        _this._addIdentityChange(record, item);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
	         * changes.
	         */
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null ||
	                this._removalsHead !== null || this._identityChangesHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            var nextRecord;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	            this._identityChangesHead = this._identityChangesTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            // But first we need to check if identity changed, so we can update in view if necessary
	            if (!lang_2.looseIdentical(record.item, item))
	                this._addIdentityChange(record, item);
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!lang_2.looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record =
	                    this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	     *
	     * - `record` The first excess {@link CollectionChangeRecord}.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	        record.item = item;
	        if (this._identityChangesTail === null) {
	            this._identityChangesTail = this._identityChangesHead = record;
	        }
	        else {
	            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	        }
	        return record;
	    };
	    DefaultIterableDiffer.prototype.toString = function () {
	        var list = [];
	        this.forEachItem(function (record) { return list.push(record); });
	        var previous = [];
	        this.forEachPreviousItem(function (record) { return previous.push(record); });
	        var additions = [];
	        this.forEachAddedItem(function (record) { return additions.push(record); });
	        var moves = [];
	        this.forEachMovedItem(function (record) { return moves.push(record); });
	        var removals = [];
	        this.forEachRemovedItem(function (record) { return removals.push(record); });
	        var identityChanges = [];
	        this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
	        return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n" + "identityChanges: " +
	            identityChanges.join(', ') + "\n";
	    };
	    return DefaultIterableDiffer;
	})();
	exports.DefaultIterableDiffer = DefaultIterableDiffer;
	var CollectionChangeRecord = (function () {
	    function CollectionChangeRecord(item, trackById) {
	        this.item = item;
	        this.trackById = trackById;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._prev = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._prevDup = null;
	        /** @internal */
	        this._nextDup = null;
	        /** @internal */
	        this._prevRemoved = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextMoved = null;
	        /** @internal */
	        this._nextIdentityChange = null;
	    }
	    CollectionChangeRecord.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ?
	            lang_2.stringify(this.item) :
	            lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' +
	                lang_2.stringify(this.currentIndex) + ']';
	    };
	    return CollectionChangeRecord;
	})();
	exports.CollectionChangeRecord = CollectionChangeRecord;
	// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        /** @internal */
	        this._head = null;
	        /** @internal */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and
	    // CollectionChangeRecord.currentIndex >= afterIndex
	    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                lang_2.looseIdentical(record.trackById, trackById)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	})();
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        // todo(vicb) handle corner cases
	        var key = lang_2.getMapKey(record.trackById);
	        var duplicates = this.map.get(key);
	        if (!lang_2.isPresent(duplicates)) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     */
	    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	        if (afterIndex === void 0) { afterIndex = null; }
	        var key = lang_2.getMapKey(trackById);
	        var recordList = this.map.get(key);
	        return lang_2.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
	    };
	    /**
	     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = lang_2.getMapKey(record.trackById);
	        // todo(vicb)
	        // assert(this.map.containsKey(key));
	        var recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function () { return this.map.size === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_2.stringify(this.map) + ')'; };
	    return _DuplicateMap;
	})();


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var di_1 = __webpack_require__(11);
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 */
	var KeyValueDiffers = (function () {
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    KeyValueDiffers.create = function (factories, parent) {
	        if (lang_1.isPresent(parent)) {
	            var copied = collection_1.ListWrapper.clone(parent.factories);
	            factories = factories.concat(copied);
	            return new KeyValueDiffers(factories);
	        }
	        else {
	            return new KeyValueDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	     * {@link KeyValueDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	           * which will only be applied to the injector for this component and its children.
	           * This step is all that's required to make a new {@link KeyValueDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return new di_1.Provider(KeyValueDiffers, {
	            useFactory: function (parent) {
	                if (lang_1.isBlank(parent)) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new exceptions_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
	        });
	    };
	    KeyValueDiffers.prototype.find = function (kv) {
	        var factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (lang_1.isPresent(factory)) {
	            return factory;
	        }
	        else {
	            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
	        }
	    };
	    KeyValueDiffers = __decorate([
	        di_1.Injectable(),
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array])
	    ], KeyValueDiffers);
	    return KeyValueDiffers;
	})();
	exports.KeyValueDiffers = KeyValueDiffers;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var DefaultKeyValueDifferFactory = (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || lang_1.isJsObject(obj); };
	    DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	    DefaultKeyValueDifferFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DefaultKeyValueDifferFactory);
	    return DefaultKeyValueDifferFactory;
	})();
	exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
	var DefaultKeyValueDiffer = (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.diff = function (map) {
	        if (lang_1.isBlank(map))
	            map = collection_1.MapWrapper.createFromPairs([]);
	        if (!(map instanceof Map || lang_1.isJsObject(map))) {
	            throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
	        }
	        if (this.check(map)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    DefaultKeyValueDiffer.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var records = this._records;
	        var oldSeqRecord = this._mapHead;
	        var lastOldSeqRecord = null;
	        var lastNewSeqRecord = null;
	        var seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var newSeqRecord;
	            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
	                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	                    oldSeqRecord.currentValue = value;
	                    _this._addToChanges(oldSeqRecord);
	                }
	            }
	            else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    oldSeqRecord._next = null;
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (records.has(key)) {
	                    newSeqRecord = records.get(key);
	                }
	                else {
	                    newSeqRecord = new KVChangeRecord(key);
	                    records.set(key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                }
	                else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            // todo(vicb) once assert is supported
	            // assert(() {
	            //  var r = _changesHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextChanged;
	            //    r._nextChanged = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _additionsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextAdded;
	            //    r._nextAdded = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _removalsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextRemoved;
	            //    r._nextRemoved = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  return true;
	            //});
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            }
	            else {
	                lastRecord._next = null;
	            }
	            var nextRecord = record._next;
	            // todo(vicb) assert
	            // assert((() {
	            //  record._next = null;
	            //  return true;
	            //}));
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            this._records.delete(rec.key);
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null ||
	            record._prevRemoved !== null;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        }
	        else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	        var next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        // todo(vicb) assert
	        // assert((() {
	        //  record._next = null;
	        //  return true;
	        //})());
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        // todo(vicb): assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        // todo(vicb) assert
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    DefaultKeyValueDiffer.prototype.toString = function () {
	        var items = [];
	        var previous = [];
	        var changes = [];
	        var additions = [];
	        var removals = [];
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            items.push(lang_1.stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            previous.push(lang_1.stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            changes.push(lang_1.stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(lang_1.stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(lang_1.stringify(record));
	        }
	        return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            collection_1.StringMapWrapper.forEach(obj, fn);
	        }
	    };
	    return DefaultKeyValueDiffer;
	})();
	exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
	var KVChangeRecord = (function () {
	    function KVChangeRecord(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._prevRemoved = null;
	        /** @internal */
	        this._nextChanged = null;
	    }
	    KVChangeRecord.prototype.toString = function () {
	        return lang_1.looseIdentical(this.previousValue, this.currentValue) ?
	            lang_1.stringify(this.key) :
	            (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' +
	                lang_1.stringify(this.currentValue) + ']');
	    };
	    return KVChangeRecord;
	})();
	exports.KVChangeRecord = KVChangeRecord;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var AST = (function () {
	    function AST() {
	    }
	    AST.prototype.visit = function (visitor) { return null; };
	    AST.prototype.toString = function () { return "AST"; };
	    return AST;
	})();
	exports.AST = AST;
	/**
	 * Represents a quoted expression of the form:
	 *
	 * quote = prefix `:` uninterpretedExpression
	 * prefix = identifier
	 * uninterpretedExpression = arbitrary string
	 *
	 * A quoted expression is meant to be pre-processed by an AST transformer that
	 * converts it into another AST that no longer contains quoted expressions.
	 * It is meant to allow third-party developers to extend Angular template
	 * expression language. The `uninterpretedExpression` part of the quote is
	 * therefore not interpreted by the Angular's own expression parser.
	 */
	var Quote = (function (_super) {
	    __extends(Quote, _super);
	    function Quote(prefix, uninterpretedExpression, location) {
	        _super.call(this);
	        this.prefix = prefix;
	        this.uninterpretedExpression = uninterpretedExpression;
	        this.location = location;
	    }
	    Quote.prototype.visit = function (visitor) { return visitor.visitQuote(this); };
	    Quote.prototype.toString = function () { return "Quote"; };
	    return Quote;
	})(AST);
	exports.Quote = Quote;
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        _super.apply(this, arguments);
	    }
	    EmptyExpr.prototype.visit = function (visitor) {
	        // do nothing
	    };
	    return EmptyExpr;
	})(AST);
	exports.EmptyExpr = EmptyExpr;
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        _super.apply(this, arguments);
	    }
	    ImplicitReceiver.prototype.visit = function (visitor) { return visitor.visitImplicitReceiver(this); };
	    return ImplicitReceiver;
	})(AST);
	exports.ImplicitReceiver = ImplicitReceiver;
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    function Chain(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    Chain.prototype.visit = function (visitor) { return visitor.visitChain(this); };
	    return Chain;
	})(AST);
	exports.Chain = Chain;
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    Conditional.prototype.visit = function (visitor) { return visitor.visitConditional(this); };
	    return Conditional;
	})(AST);
	exports.Conditional = Conditional;
	var PropertyRead = (function (_super) {
	    __extends(PropertyRead, _super);
	    function PropertyRead(receiver, name, getter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	    }
	    PropertyRead.prototype.visit = function (visitor) { return visitor.visitPropertyRead(this); };
	    return PropertyRead;
	})(AST);
	exports.PropertyRead = PropertyRead;
	var PropertyWrite = (function (_super) {
	    __extends(PropertyWrite, _super);
	    function PropertyWrite(receiver, name, setter, value) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.setter = setter;
	        this.value = value;
	    }
	    PropertyWrite.prototype.visit = function (visitor) { return visitor.visitPropertyWrite(this); };
	    return PropertyWrite;
	})(AST);
	exports.PropertyWrite = PropertyWrite;
	var SafePropertyRead = (function (_super) {
	    __extends(SafePropertyRead, _super);
	    function SafePropertyRead(receiver, name, getter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	    }
	    SafePropertyRead.prototype.visit = function (visitor) { return visitor.visitSafePropertyRead(this); };
	    return SafePropertyRead;
	})(AST);
	exports.SafePropertyRead = SafePropertyRead;
	var KeyedRead = (function (_super) {
	    __extends(KeyedRead, _super);
	    function KeyedRead(obj, key) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	    }
	    KeyedRead.prototype.visit = function (visitor) { return visitor.visitKeyedRead(this); };
	    return KeyedRead;
	})(AST);
	exports.KeyedRead = KeyedRead;
	var KeyedWrite = (function (_super) {
	    __extends(KeyedWrite, _super);
	    function KeyedWrite(obj, key, value) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	        this.value = value;
	    }
	    KeyedWrite.prototype.visit = function (visitor) { return visitor.visitKeyedWrite(this); };
	    return KeyedWrite;
	})(AST);
	exports.KeyedWrite = KeyedWrite;
	var BindingPipe = (function (_super) {
	    __extends(BindingPipe, _super);
	    function BindingPipe(exp, name, args) {
	        _super.call(this);
	        this.exp = exp;
	        this.name = name;
	        this.args = args;
	    }
	    BindingPipe.prototype.visit = function (visitor) { return visitor.visitPipe(this); };
	    return BindingPipe;
	})(AST);
	exports.BindingPipe = BindingPipe;
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    LiteralPrimitive.prototype.visit = function (visitor) { return visitor.visitLiteralPrimitive(this); };
	    return LiteralPrimitive;
	})(AST);
	exports.LiteralPrimitive = LiteralPrimitive;
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    LiteralArray.prototype.visit = function (visitor) { return visitor.visitLiteralArray(this); };
	    return LiteralArray;
	})(AST);
	exports.LiteralArray = LiteralArray;
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(keys, values) {
	        _super.call(this);
	        this.keys = keys;
	        this.values = values;
	    }
	    LiteralMap.prototype.visit = function (visitor) { return visitor.visitLiteralMap(this); };
	    return LiteralMap;
	})(AST);
	exports.LiteralMap = LiteralMap;
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(strings, expressions) {
	        _super.call(this);
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    Interpolation.prototype.visit = function (visitor) { return visitor.visitInterpolation(this); };
	    return Interpolation;
	})(AST);
	exports.Interpolation = Interpolation;
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    function Binary(operation, left, right) {
	        _super.call(this);
	        this.operation = operation;
	        this.left = left;
	        this.right = right;
	    }
	    Binary.prototype.visit = function (visitor) { return visitor.visitBinary(this); };
	    return Binary;
	})(AST);
	exports.Binary = Binary;
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(expression) {
	        _super.call(this);
	        this.expression = expression;
	    }
	    PrefixNot.prototype.visit = function (visitor) { return visitor.visitPrefixNot(this); };
	    return PrefixNot;
	})(AST);
	exports.PrefixNot = PrefixNot;
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    MethodCall.prototype.visit = function (visitor) { return visitor.visitMethodCall(this); };
	    return MethodCall;
	})(AST);
	exports.MethodCall = MethodCall;
	var SafeMethodCall = (function (_super) {
	    __extends(SafeMethodCall, _super);
	    function SafeMethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    SafeMethodCall.prototype.visit = function (visitor) { return visitor.visitSafeMethodCall(this); };
	    return SafeMethodCall;
	})(AST);
	exports.SafeMethodCall = SafeMethodCall;
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(target, args) {
	        _super.call(this);
	        this.target = target;
	        this.args = args;
	    }
	    FunctionCall.prototype.visit = function (visitor) { return visitor.visitFunctionCall(this); };
	    return FunctionCall;
	})(AST);
	exports.FunctionCall = FunctionCall;
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location) {
	        _super.call(this);
	        this.ast = ast;
	        this.source = source;
	        this.location = location;
	    }
	    ASTWithSource.prototype.visit = function (visitor) { return this.ast.visit(visitor); };
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	})(AST);
	exports.ASTWithSource = ASTWithSource;
	var TemplateBinding = (function () {
	    function TemplateBinding(key, keyIsVar, name, expression) {
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	})();
	exports.TemplateBinding = TemplateBinding;
	var RecursiveAstVisitor = (function () {
	    function RecursiveAstVisitor() {
	    }
	    RecursiveAstVisitor.prototype.visitBinary = function (ast) {
	        ast.left.visit(this);
	        ast.right.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitChain = function (ast) { return this.visitAll(ast.expressions); };
	    RecursiveAstVisitor.prototype.visitConditional = function (ast) {
	        ast.condition.visit(this);
	        ast.trueExp.visit(this);
	        ast.falseExp.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPipe = function (ast) {
	        ast.exp.visit(this);
	        this.visitAll(ast.args);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast) {
	        ast.target.visit(this);
	        this.visitAll(ast.args);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast) { return null; };
	    RecursiveAstVisitor.prototype.visitInterpolation = function (ast) { return this.visitAll(ast.expressions); };
	    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast) { return this.visitAll(ast.expressions); };
	    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast) { return this.visitAll(ast.values); };
	    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast) { return null; };
	    RecursiveAstVisitor.prototype.visitMethodCall = function (ast) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args);
	    };
	    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast) {
	        ast.expression.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast) {
	        ast.receiver.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args);
	    };
	    RecursiveAstVisitor.prototype.visitAll = function (asts) {
	        var _this = this;
	        asts.forEach(function (ast) { return ast.visit(_this); });
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitQuote = function (ast) { return null; };
	    return RecursiveAstVisitor;
	})();
	exports.RecursiveAstVisitor = RecursiveAstVisitor;
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.visitImplicitReceiver = function (ast) { return ast; };
	    AstTransformer.prototype.visitInterpolation = function (ast) {
	        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast) { return new LiteralPrimitive(ast.value); };
	    AstTransformer.prototype.visitPropertyRead = function (ast) {
	        return new PropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
	    };
	    AstTransformer.prototype.visitPropertyWrite = function (ast) {
	        return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.setter, ast.value);
	    };
	    AstTransformer.prototype.visitSafePropertyRead = function (ast) {
	        return new SafePropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast) {
	        return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitSafeMethodCall = function (ast) {
	        return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast) {
	        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast) {
	        return new LiteralArray(this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralMap = function (ast) {
	        return new LiteralMap(ast.keys, this.visitAll(ast.values));
	    };
	    AstTransformer.prototype.visitBinary = function (ast) {
	        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast) { return new PrefixNot(ast.expression.visit(this)); };
	    AstTransformer.prototype.visitConditional = function (ast) {
	        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast) {
	        return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitKeyedRead = function (ast) {
	        return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitKeyedWrite = function (ast) {
	        return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    AstTransformer.prototype.visitChain = function (ast) { return new Chain(this.visitAll(ast.expressions)); };
	    AstTransformer.prototype.visitQuote = function (ast) {
	        return new Quote(ast.prefix, ast.uninterpretedExpression, ast.location);
	    };
	    return AstTransformer;
	})();
	exports.AstTransformer = AstTransformer;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(13);
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	(function (TokenType) {
	    TokenType[TokenType["Character"] = 0] = "Character";
	    TokenType[TokenType["Identifier"] = 1] = "Identifier";
	    TokenType[TokenType["Keyword"] = 2] = "Keyword";
	    TokenType[TokenType["String"] = 3] = "String";
	    TokenType[TokenType["Operator"] = 4] = "Operator";
	    TokenType[TokenType["Number"] = 5] = "Number";
	})(exports.TokenType || (exports.TokenType = {}));
	var TokenType = exports.TokenType;
	var Lexer = (function () {
	    function Lexer() {
	    }
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    Lexer = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Lexer);
	    return Lexer;
	})();
	exports.Lexer = Lexer;
	var Token = (function () {
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return (this.type == TokenType.Character && this.numValue == code);
	    };
	    Token.prototype.isNumber = function () { return (this.type == TokenType.Number); };
	    Token.prototype.isString = function () { return (this.type == TokenType.String); };
	    Token.prototype.isOperator = function (operater) {
	        return (this.type == TokenType.Operator && this.strValue == operater);
	    };
	    Token.prototype.isIdentifier = function () { return (this.type == TokenType.Identifier); };
	    Token.prototype.isKeyword = function () { return (this.type == TokenType.Keyword); };
	    Token.prototype.isKeywordVar = function () { return (this.type == TokenType.Keyword && this.strValue == "var"); };
	    Token.prototype.isKeywordNull = function () { return (this.type == TokenType.Keyword && this.strValue == "null"); };
	    Token.prototype.isKeywordUndefined = function () {
	        return (this.type == TokenType.Keyword && this.strValue == "undefined");
	    };
	    Token.prototype.isKeywordTrue = function () { return (this.type == TokenType.Keyword && this.strValue == "true"); };
	    Token.prototype.isKeywordFalse = function () { return (this.type == TokenType.Keyword && this.strValue == "false"); };
	    Token.prototype.toNumber = function () {
	        // -1 instead of NULL ok?
	        return (this.type == TokenType.Number) ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType.Character:
	            case TokenType.Identifier:
	            case TokenType.Keyword:
	            case TokenType.Operator:
	            case TokenType.String:
	                return this.strValue;
	            case TokenType.Number:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	})();
	exports.Token = Token;
	function newCharacterToken(index, code) {
	    return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
	}
	function newIdentifierToken(index, text) {
	    return new Token(index, TokenType.Identifier, 0, text);
	}
	function newKeywordToken(index, text) {
	    return new Token(index, TokenType.Keyword, 0, text);
	}
	function newOperatorToken(index, text) {
	    return new Token(index, TokenType.Operator, 0, text);
	}
	function newStringToken(index, text) {
	    return new Token(index, TokenType.String, 0, text);
	}
	function newNumberToken(index, n) {
	    return new Token(index, TokenType.Number, n, "");
	}
	exports.EOF = new Token(-1, TokenType.Character, 0, "");
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65, $E = 69, $Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	var $NBSP = 160;
	var ScannerError = (function (_super) {
	    __extends(ScannerError, _super);
	    function ScannerError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    ScannerError.prototype.toString = function () { return this.message; };
	    return ScannerError;
	})(exceptions_1.BaseException);
	exports.ScannerError = ScannerError;
	var _Scanner = (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek =
	            ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input, length = this.length, peek = this.peek, index = this.index;
	        // Skip whitespace.
	        while (peek <= exports.$SPACE) {
	            if (++index >= length) {
	                peek = exports.$EOF;
	                break;
	            }
	            else {
	                peek = lang_1.StringWrapper.charCodeAt(input, index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case exports.$PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
	            case exports.$LPAREN:
	            case exports.$RPAREN:
	            case exports.$LBRACE:
	            case exports.$RBRACE:
	            case exports.$LBRACKET:
	            case exports.$RBRACKET:
	            case exports.$COMMA:
	            case exports.$COLON:
	            case exports.$SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case exports.$SQ:
	            case exports.$DQ:
	                return this.scanString();
	            case exports.$HASH:
	            case exports.$PLUS:
	            case exports.$MINUS:
	            case exports.$STAR:
	            case exports.$SLASH:
	            case exports.$PERCENT:
	            case $CARET:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$QUESTION:
	                return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
	            case exports.$LT:
	            case exports.$GT:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
	            case exports.$BANG:
	            case exports.$EQ:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
	            case exports.$AMPERSAND:
	                return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
	            case exports.$BAR:
	                return this.scanComplexOperator(start, '|', exports.$BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
	        return null;
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param start start index in the expression
	     * @param one first symbol (always part of the operator)
	     * @param twoCode code point for the second symbol
	     * @param two second symbol (part of the operator when the second code point matches)
	     * @param threeCode code point for the third symbol
	     * @param three third symbol (part of the operator when provided and matches source expression)
	     * @returns {Token}
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        this.advance();
	        var str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var str = this.input.substring(start, this.index);
	        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
	            return newKeywordToken(start, str);
	        }
	        else {
	            return newIdentifierToken(start, str);
	        }
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        var simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == exports.$PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        // TODO
	        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer;
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == exports.$BACKSLASH) {
	                if (buffer == null)
	                    buffer = new lang_1.StringJoiner();
	                buffer.add(input.substring(marker, this.index));
	                this.advance();
	                var unescapedCode;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    try {
	                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
	                    }
	                    catch (e) {
	                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
	                marker = this.index;
	            }
	            else if (this.peek == exports.$EOF) {
	                this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        // Compute the unescaped string value.
	        var unescaped = last;
	        if (buffer != null) {
	            buffer.add(last);
	            unescaped = buffer.toString();
	        }
	        return newStringToken(start, unescaped);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	})();
	function isWhitespace(code) {
	    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
	}
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
	}
	function isIdentifier(input) {
	    if (input.length == 0)
	        return false;
	    var scanner = new _Scanner(input);
	    if (!isIdentifierStart(scanner.peek))
	        return false;
	    scanner.advance();
	    while (scanner.peek !== exports.$EOF) {
	        if (!isIdentifierPart(scanner.peek))
	            return false;
	        scanner.advance();
	    }
	    return true;
	}
	exports.isIdentifier = isIdentifier;
	function isIdentifierPart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
	        (code == $_) || (code == exports.$$);
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == exports.$MINUS || code == exports.$PLUS;
	}
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return exports.$LF;
	        case $f:
	            return exports.$FF;
	        case $r:
	            return exports.$CR;
	        case $t:
	            return exports.$TAB;
	        case $v:
	            return exports.$VTAB;
	        default:
	            return code;
	    }
	}
	var OPERATORS = collection_1.SetWrapper.createFromList([
	    '+',
	    '-',
	    '*',
	    '/',
	    '%',
	    '^',
	    '=',
	    '==',
	    '!=',
	    '===',
	    '!==',
	    '<',
	    '>',
	    '<=',
	    '>=',
	    '&&',
	    '||',
	    '&',
	    '|',
	    '!',
	    '?',
	    '#',
	    '?.'
	]);
	var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var lexer_1 = __webpack_require__(36);
	var reflection_1 = __webpack_require__(21);
	var ast_1 = __webpack_require__(35);
	var _implicitReceiver = new ast_1.ImplicitReceiver();
	// TODO(tbosch): Cannot make this const/final right now because of the transpiler...
	var INTERPOLATION_REGEXP = /\{\{([\s\S]*?)\}\}/g;
	var ParseException = (function (_super) {
	    __extends(ParseException, _super);
	    function ParseException(message, input, errLocation, ctxLocation) {
	        _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
	    }
	    return ParseException;
	})(exceptions_1.BaseException);
	var Parser = (function () {
	    function Parser(/** @internal */ _lexer, providedReflector) {
	        if (providedReflector === void 0) { providedReflector = null; }
	        this._lexer = _lexer;
	        this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
	    }
	    Parser.prototype.parseAction = function (input, location) {
	        this._checkNoInterpolation(input, location);
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseBinding = function (input, location) {
	        var ast = this._parseBindingAst(input, location);
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseSimpleBinding = function (input, location) {
	        var ast = this._parseBindingAst(input, location);
	        if (!SimpleExpressionChecker.check(ast)) {
	            throw new ParseException('Host binding expression can only contain field access and constants', input, location);
	        }
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype._parseBindingAst = function (input, location) {
	        // Quotes expressions use 3rd-party expression language. We don't want to use
	        // our lexer or parser for that, so we check for that ahead of time.
	        var quote = this._parseQuote(input, location);
	        if (lang_1.isPresent(quote)) {
	            return quote;
	        }
	        this._checkNoInterpolation(input, location);
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	    };
	    Parser.prototype._parseQuote = function (input, location) {
	        if (lang_1.isBlank(input))
	            return null;
	        var prefixSeparatorIndex = input.indexOf(':');
	        if (prefixSeparatorIndex == -1)
	            return null;
	        var prefix = input.substring(0, prefixSeparatorIndex).trim();
	        if (!lexer_1.isIdentifier(prefix))
	            return null;
	        var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	        return new ast_1.Quote(prefix, uninterpretedExpression, location);
	    };
	    Parser.prototype.parseTemplateBindings = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
	    };
	    Parser.prototype.parseInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	            }
	            else if (part.trim().length > 0) {
	                var tokens = this._lexer.tokenize(part);
	                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	                expressions.push(ast);
	            }
	            else {
	                throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
	            }
	        }
	        return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
	    };
	    Parser.prototype._checkNoInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length > 1) {
	            throw new ParseException('Got interpolation ({{}}) where expression was expected', input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
	        }
	    };
	    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx) {
	        var errLocation = '';
	        for (var j = 0; j < partInErrIdx; j++) {
	            errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
	        }
	        return errLocation.length;
	    };
	    Parser = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])
	    ], Parser);
	    return Parser;
	})();
	exports.Parser = Parser;
	var _ParseAST = (function () {
	    function _ParseAST(input, location, tokens, reflector, parseAction) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.reflector = reflector;
	        this.parseAction = parseAction;
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index : this.input.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.advance = function () { this.index++; };
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.optionalKeywordVar = function () {
	        if (this.peekKeywordVar()) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
	    };
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error("Binding expression cannot contain chained expression");
	                }
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.optionalOperator("|")) {
	            if (this.parseAction) {
	                this.error("Cannot have a pipe in an action expression");
	            }
	            do {
	                var name = this.expectIdentifierOrKeyword();
	                var args = [];
	                while (this.optionalCharacter(lexer_1.$COLON)) {
	                    args.push(this.parseExpression());
	                }
	                result = new ast_1.BindingPipe(result, name, args);
	            } while (this.optionalOperator("|"));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var yes = this.parsePipe();
	            if (!this.optionalCharacter(lexer_1.$COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	            }
	            var no = this.parsePipe();
	            return new ast_1.Conditional(result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            result = new ast_1.Binary('||', result, this.parseLogicalAnd());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            result = new ast_1.Binary('&&', result, this.parseEquality());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (true) {
	            if (this.optionalOperator('==')) {
	                result = new ast_1.Binary('==', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('===')) {
	                result = new ast_1.Binary('===', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!=')) {
	                result = new ast_1.Binary('!=', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!==')) {
	                result = new ast_1.Binary('!==', result, this.parseRelational());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (true) {
	            if (this.optionalOperator('<')) {
	                result = new ast_1.Binary('<', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>')) {
	                result = new ast_1.Binary('>', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('<=')) {
	                result = new ast_1.Binary('<=', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>=')) {
	                result = new ast_1.Binary('>=', result, this.parseAdditive());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (true) {
	            if (this.optionalOperator('+')) {
	                result = new ast_1.Binary('+', result, this.parseMultiplicative());
	            }
	            else if (this.optionalOperator('-')) {
	                result = new ast_1.Binary('-', result, this.parseMultiplicative());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (true) {
	            if (this.optionalOperator('*')) {
	                result = new ast_1.Binary('*', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('%')) {
	                result = new ast_1.Binary('%', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('/')) {
	                result = new ast_1.Binary('/', result, this.parsePrefix());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.optionalOperator('+')) {
	            return this.parsePrefix();
	        }
	        else if (this.optionalOperator('-')) {
	            return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
	        }
	        else if (this.optionalOperator('!')) {
	            return new ast_1.PrefixNot(this.parsePrefix());
	        }
	        else {
	            return this.parseCallChain();
	        }
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter(lexer_1.$PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.optionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	                var key = this.parsePipe();
	                this.expectCharacter(lexer_1.$RBRACKET);
	                if (this.optionalOperator("=")) {
	                    var value = this.parseConditional();
	                    result = new ast_1.KeyedWrite(result, key, value);
	                }
	                else {
	                    result = new ast_1.KeyedRead(result, key);
	                }
	            }
	            else if (this.optionalCharacter(lexer_1.$LPAREN)) {
	                var args = this.parseCallArguments();
	                this.expectCharacter(lexer_1.$RPAREN);
	                result = new ast_1.FunctionCall(result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var result = this.parsePipe();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(null);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(false);
	        }
	        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
	            this.expectCharacter(lexer_1.$RBRACKET);
	            return new ast_1.LiteralArray(elements);
	        }
	        else if (this.next.isCharacter(lexer_1.$LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
	        }
	        else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new ast_1.LiteralPrimitive(value);
	        }
	        else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new ast_1.LiteralPrimitive(literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	        }
	        // error() throws, so we don't reach here.
	        throw new exceptions_1.BaseException("Fell through all cases in parsePrimary");
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        this.expectCharacter(lexer_1.$LBRACE);
	        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
	            do {
	                var key = this.expectIdentifierOrKeywordOrString();
	                keys.push(key);
	                this.expectCharacter(lexer_1.$COLON);
	                values.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	            this.expectCharacter(lexer_1.$RBRACE);
	        }
	        return new ast_1.LiteralMap(keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var args = this.parseCallArguments();
	            this.expectCharacter(lexer_1.$RPAREN);
	            var fn = this.reflector.method(id);
	            return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) :
	                new ast_1.MethodCall(receiver, id, fn, args);
	        }
	        else {
	            if (isSafe) {
	                if (this.optionalOperator("=")) {
	                    this.error("The '?.' operator cannot be used in the assignment");
	                }
	                else {
	                    return new ast_1.SafePropertyRead(receiver, id, this.reflector.getter(id));
	                }
	            }
	            else {
	                if (this.optionalOperator("=")) {
	                    if (!this.parseAction) {
	                        this.error("Bindings cannot contain assignments");
	                    }
	                    var value = this.parseConditional();
	                    return new ast_1.PropertyWrite(receiver, id, this.reflector.setter(id), value);
	                }
	                else {
	                    return new ast_1.PropertyRead(receiver, id, this.reflector.getter(id));
	                }
	            }
	        }
	        return null;
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter(lexer_1.$RPAREN))
	            return [];
	        var positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.optionalCharacter(lexer_1.$COMMA));
	        return positionals;
	    };
	    _ParseAST.prototype.parseBlockContent = function () {
	        if (!this.parseAction) {
	            this.error("Binding expression cannot contain chained expression");
	        }
	        var exprs = [];
	        while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
	            var expr = this.parseExpression();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = '';
	        var operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var bindings = [];
	        var prefix = null;
	        while (this.index < this.tokens.length) {
	            var keyIsVar = this.optionalKeywordVar();
	            var key = this.expectTemplateBindingKey();
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + key[0].toUpperCase() + key.substring(1);
	                }
	            }
	            this.optionalCharacter(lexer_1.$COLON);
	            var name = null;
	            var expression = null;
	            if (keyIsVar) {
	                if (this.optionalOperator("=")) {
	                    name = this.expectTemplateBindingKey();
	                }
	                else {
	                    name = '\$implicit';
	                }
	            }
	            else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
	                var start = this.inputIndex;
	                var ast = this.parsePipe();
	                var source = this.input.substring(start, this.inputIndex);
	                expression = new ast_1.ASTWithSource(ast, source, this.location);
	            }
	            bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
	            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                this.optionalCharacter(lexer_1.$COMMA);
	            }
	        }
	        return bindings;
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        if (lang_1.isBlank(index))
	            index = this.index;
	        var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	        throw new ParseException(message, this.input, location, this.location);
	    };
	    return _ParseAST;
	})();
	exports._ParseAST = _ParseAST;
	var SimpleExpressionChecker = (function () {
	    function SimpleExpressionChecker() {
	        this.simple = true;
	    }
	    SimpleExpressionChecker.check = function (ast) {
	        var s = new SimpleExpressionChecker();
	        ast.visit(s);
	        return s.simple;
	    };
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast) { };
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast) { };
	    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast) { };
	    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast) { this.visitAll(ast.expressions); };
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast) { this.visitAll(ast.values); };
	    SimpleExpressionChecker.prototype.visitBinary = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitConditional = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPipe = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    SimpleExpressionChecker.prototype.visitChain = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitQuote = function (ast) { this.simple = false; };
	    return SimpleExpressionChecker;
	})();


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var Locals = (function () {
	    function Locals(parent, current) {
	        this.parent = parent;
	        this.current = current;
	    }
	    Locals.prototype.contains = function (name) {
	        if (this.current.has(name)) {
	            return true;
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.contains(name);
	        }
	        return false;
	    };
	    Locals.prototype.get = function (name) {
	        if (this.current.has(name)) {
	            return this.current.get(name);
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.get(name);
	        }
	        throw new exceptions_1.BaseException("Cannot find '" + name + "'");
	    };
	    Locals.prototype.set = function (name, value) {
	        // TODO(rado): consider removing this check if we can guarantee this is not
	        // exposed to the public API.
	        // TODO: vsavkin maybe it should check only the local map
	        if (this.current.has(name)) {
	            this.current.set(name, value);
	        }
	        else {
	            throw new exceptions_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
	        }
	    };
	    Locals.prototype.clearLocalValues = function () { collection_1.MapWrapper.clearValues(this.current); };
	    return Locals;
	})();
	exports.Locals = Locals;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(19);
	/**
	 * An error thrown if application changes model breaking the top-down data flow.
	 *
	 * This exception is only thrown in dev mode.
	 *
	 * <!-- TODO: Add a link once the dev mode option is configurable -->
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'parent',
	 *   template: `
	 *     <child [prop]="parentProp"></child>
	 *   `,
	 *   directives: [forwardRef(() => Child)]
	 * })
	 * class Parent {
	 *   parentProp = "init";
	 * }
	 *
	 * @Directive({selector: 'child', inputs: ['prop']})
	 * class Child {
	 *   constructor(public parent: Parent) {}
	 *
	 *   set prop(v) {
	 *     // this updates the parent property, which is disallowed during change detection
	 *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
	 *     this.parent.parentProp = "updated";
	 *   }
	 * }
	 * ```
	 */
	var ExpressionChangedAfterItHasBeenCheckedException = (function (_super) {
	    __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
	    function ExpressionChangedAfterItHasBeenCheckedException(exp, oldValue, currValue, context) {
	        _super.call(this, ("Expression '" + exp + "' has changed after it was checked. ") +
	            ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
	    }
	    return ExpressionChangedAfterItHasBeenCheckedException;
	})(exceptions_1.BaseException);
	exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
	/**
	 * Thrown when an expression evaluation raises an exception.
	 *
	 * This error wraps the original exception to attach additional contextual information that can
	 * be useful for debugging.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/2Kywoz?p=preview))
	 *
	 * ```typescript
	 * @Directive({selector: 'child', inputs: ['prop']})
	 * class Child {
	 *   prop;
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <child [prop]="field.first"></child>
	 *   `,
	 *   directives: [Child]
	 * })
	 * class App {
	 *   field = null;
	 * }
	 *
	 * bootstrap(App);
	 * ```
	 *
	 * You can access the original exception and stack through the `originalException` and
	 * `originalStack` properties.
	 */
	var ChangeDetectionError = (function (_super) {
	    __extends(ChangeDetectionError, _super);
	    function ChangeDetectionError(exp, originalException, originalStack, context) {
	        _super.call(this, originalException + " in [" + exp + "]", originalException, originalStack, context);
	        this.location = exp;
	    }
	    return ChangeDetectionError;
	})(exceptions_1.WrappedException);
	exports.ChangeDetectionError = ChangeDetectionError;
	/**
	 * Thrown when change detector executes on dehydrated view.
	 *
	 * This error indicates a bug in the framework.
	 *
	 * This is an internal Angular error.
	 */
	var DehydratedException = (function (_super) {
	    __extends(DehydratedException, _super);
	    function DehydratedException(details) {
	        _super.call(this, "Attempt to use a dehydrated detector: " + details);
	    }
	    return DehydratedException;
	})(exceptions_1.BaseException);
	exports.DehydratedException = DehydratedException;
	/**
	 * Wraps an exception thrown by an event handler.
	 */
	var EventEvaluationError = (function (_super) {
	    __extends(EventEvaluationError, _super);
	    function EventEvaluationError(eventName, originalException, originalStack, context) {
	        _super.call(this, "Error during evaluation of \"" + eventName + "\"", originalException, originalStack, context);
	    }
	    return EventEvaluationError;
	})(exceptions_1.WrappedException);
	exports.EventEvaluationError = EventEvaluationError;
	/**
	 * Error context included when an event handler throws an exception.
	 */
	var EventEvaluationErrorContext = (function () {
	    function EventEvaluationErrorContext(element, componentElement, context, locals, injector) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.context = context;
	        this.locals = locals;
	        this.injector = injector;
	    }
	    return EventEvaluationErrorContext;
	})();
	exports.EventEvaluationErrorContext = EventEvaluationErrorContext;


/***/ },
/* 40 */
/***/ function(module, exports) {

	'use strict';var DebugContext = (function () {
	    function DebugContext(element, componentElement, directive, context, locals, injector) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.directive = directive;
	        this.context = context;
	        this.locals = locals;
	        this.injector = injector;
	    }
	    return DebugContext;
	})();
	exports.DebugContext = DebugContext;
	var ChangeDetectorGenConfig = (function () {
	    function ChangeDetectorGenConfig(genDebugInfo, logBindingUpdate, useJit) {
	        this.genDebugInfo = genDebugInfo;
	        this.logBindingUpdate = logBindingUpdate;
	        this.useJit = useJit;
	    }
	    return ChangeDetectorGenConfig;
	})();
	exports.ChangeDetectorGenConfig = ChangeDetectorGenConfig;
	var ChangeDetectorDefinition = (function () {
	    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, genConfig) {
	        this.id = id;
	        this.strategy = strategy;
	        this.variableNames = variableNames;
	        this.bindingRecords = bindingRecords;
	        this.eventRecords = eventRecords;
	        this.directiveRecords = directiveRecords;
	        this.genConfig = genConfig;
	    }
	    return ChangeDetectorDefinition;
	})();
	exports.ChangeDetectorDefinition = ChangeDetectorDefinition;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	/**
	 * Describes the current state of the change detector.
	 */
	(function (ChangeDetectorState) {
	    /**
	     * `NeverChecked` means that the change detector has not been checked yet, and
	     * initialization methods should be called during detection.
	     */
	    ChangeDetectorState[ChangeDetectorState["NeverChecked"] = 0] = "NeverChecked";
	    /**
	     * `CheckedBefore` means that the change detector has successfully completed at least
	     * one detection previously.
	     */
	    ChangeDetectorState[ChangeDetectorState["CheckedBefore"] = 1] = "CheckedBefore";
	    /**
	     * `Errored` means that the change detector encountered an error checking a binding
	     * or calling a directive lifecycle method and is now in an inconsistent state. Change
	     * detectors in this state will no longer detect changes.
	     */
	    ChangeDetectorState[ChangeDetectorState["Errored"] = 2] = "Errored";
	})(exports.ChangeDetectorState || (exports.ChangeDetectorState = {}));
	var ChangeDetectorState = exports.ChangeDetectorState;
	/**
	 * Describes within the change detector which strategy will be used the next time change
	 * detection is triggered.
	 */
	(function (ChangeDetectionStrategy) {
	    /**
	     * `CheckedOnce` means that after calling detectChanges the mode of the change detector
	     * will become `Checked`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
	    /**
	     * `Checked` means that the change detector should be skipped until its mode changes to
	     * `CheckOnce`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
	    /**
	     * `CheckAlways` means that after calling detectChanges the mode of the change detector
	     * will remain `CheckAlways`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
	    /**
	     * `Detached` means that the change detector sub tree is not a part of the main tree and
	     * should be skipped.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
	    /**
	     * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
	    /**
	     * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
	    /**
	     * This is an experimental feature. Works only in Dart.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPushObserve"] = 6] = "OnPushObserve";
	})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
	var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
	/**
	 * List of possible {@link ChangeDetectionStrategy} values.
	 */
	exports.CHANGE_DETECTION_STRATEGY_VALUES = [
	    ChangeDetectionStrategy.CheckOnce,
	    ChangeDetectionStrategy.Checked,
	    ChangeDetectionStrategy.CheckAlways,
	    ChangeDetectionStrategy.Detached,
	    ChangeDetectionStrategy.OnPush,
	    ChangeDetectionStrategy.Default,
	    ChangeDetectionStrategy.OnPushObserve
	];
	/**
	 * List of possible {@link ChangeDetectorState} values.
	 */
	exports.CHANGE_DETECTOR_STATE_VALUES = [
	    ChangeDetectorState.NeverChecked,
	    ChangeDetectorState.CheckedBefore,
	    ChangeDetectorState.Errored
	];
	function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	    return lang_1.isBlank(changeDetectionStrategy) ||
	        changeDetectionStrategy === ChangeDetectionStrategy.Default;
	}
	exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var ast_1 = __webpack_require__(35);
	var change_detection_util_1 = __webpack_require__(43);
	var dynamic_change_detector_1 = __webpack_require__(47);
	var directive_record_1 = __webpack_require__(46);
	var event_binding_1 = __webpack_require__(74);
	var coalesce_1 = __webpack_require__(75);
	var proto_record_1 = __webpack_require__(73);
	var DynamicProtoChangeDetector = (function () {
	    function DynamicProtoChangeDetector(_definition) {
	        this._definition = _definition;
	        this._propertyBindingRecords = createPropertyRecords(_definition);
	        this._eventBindingRecords = createEventRecords(_definition);
	        this._propertyBindingTargets = this._definition.bindingRecords.map(function (b) { return b.target; });
	        this._directiveIndices = this._definition.directiveRecords.map(function (d) { return d.directiveIndex; });
	    }
	    DynamicProtoChangeDetector.prototype.instantiate = function () {
	        return new dynamic_change_detector_1.DynamicChangeDetector(this._definition.id, this._propertyBindingRecords.length, this._propertyBindingTargets, this._directiveIndices, this._definition.strategy, this._propertyBindingRecords, this._eventBindingRecords, this._definition.directiveRecords, this._definition.genConfig);
	    };
	    return DynamicProtoChangeDetector;
	})();
	exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	function createPropertyRecords(definition) {
	    var recordBuilder = new ProtoRecordBuilder();
	    collection_1.ListWrapper.forEachWithIndex(definition.bindingRecords, function (b, index) { return recordBuilder.add(b, definition.variableNames, index); });
	    return coalesce_1.coalesce(recordBuilder.records);
	}
	exports.createPropertyRecords = createPropertyRecords;
	function createEventRecords(definition) {
	    // TODO: vsavkin: remove $event when the compiler handles render-side variables properly
	    var varNames = collection_1.ListWrapper.concat(['$event'], definition.variableNames);
	    return definition.eventRecords.map(function (er) {
	        var records = _ConvertAstIntoProtoRecords.create(er, varNames);
	        var dirIndex = er.implicitReceiver instanceof directive_record_1.DirectiveIndex ? er.implicitReceiver : null;
	        return new event_binding_1.EventBinding(er.target.name, er.target.elementIndex, dirIndex, records);
	    });
	}
	exports.createEventRecords = createEventRecords;
	var ProtoRecordBuilder = (function () {
	    function ProtoRecordBuilder() {
	        this.records = [];
	    }
	    ProtoRecordBuilder.prototype.add = function (b, variableNames, bindingIndex) {
	        var oldLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
	            oldLast.lastInDirective = false;
	        }
	        var numberOfRecordsBefore = this.records.length;
	        this._appendRecords(b, variableNames, bindingIndex);
	        var newLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(newLast) && newLast !== oldLast) {
	            newLast.lastInBinding = true;
	            newLast.lastInDirective = true;
	            this._setArgumentToPureFunction(numberOfRecordsBefore);
	        }
	    };
	    /** @internal */
	    ProtoRecordBuilder.prototype._setArgumentToPureFunction = function (startIndex) {
	        var _this = this;
	        for (var i = startIndex; i < this.records.length; ++i) {
	            var rec = this.records[i];
	            if (rec.isPureFunction()) {
	                rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
	                    true; });
	            }
	            if (rec.mode === proto_record_1.RecordType.Pipe) {
	                rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
	                    true; });
	                this.records[rec.contextIndex - 1].argumentToPureFunction = true;
	            }
	        }
	    };
	    /** @internal */
	    ProtoRecordBuilder.prototype._appendRecords = function (b, variableNames, bindingIndex) {
	        if (b.isDirectiveLifecycle()) {
	            this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DirectiveLifecycle, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, false, false, false, false, null));
	        }
	        else {
	            _ConvertAstIntoProtoRecords.append(this.records, b, variableNames, bindingIndex);
	        }
	    };
	    return ProtoRecordBuilder;
	})();
	exports.ProtoRecordBuilder = ProtoRecordBuilder;
	var _ConvertAstIntoProtoRecords = (function () {
	    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _variableNames, _bindingIndex) {
	        this._records = _records;
	        this._bindingRecord = _bindingRecord;
	        this._variableNames = _variableNames;
	        this._bindingIndex = _bindingIndex;
	    }
	    _ConvertAstIntoProtoRecords.append = function (records, b, variableNames, bindingIndex) {
	        var c = new _ConvertAstIntoProtoRecords(records, b, variableNames, bindingIndex);
	        b.ast.visit(c);
	    };
	    _ConvertAstIntoProtoRecords.create = function (b, variableNames) {
	        var rec = [];
	        _ConvertAstIntoProtoRecords.append(rec, b, variableNames, null);
	        rec[rec.length - 1].lastInBinding = true;
	        return rec;
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) { return this._bindingRecord.implicitReceiver; };
	    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
	        var args = this._visitAll(ast.expressions);
	        return this._addRecord(proto_record_1.RecordType.Interpolate, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
	        return this._addRecord(proto_record_1.RecordType.Const, "literal", ast.value, [], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPropertyRead = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
	            ast.receiver instanceof ast_1.ImplicitReceiver) {
	            return this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
	        }
	        else {
	            return this._addRecord(proto_record_1.RecordType.PropertyRead, ast.name, ast.getter, [], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPropertyWrite = function (ast) {
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
	            ast.receiver instanceof ast_1.ImplicitReceiver) {
	            throw new exceptions_1.BaseException("Cannot reassign a variable binding " + ast.name);
	        }
	        else {
	            var receiver = ast.receiver.visit(this);
	            var value = ast.value.visit(this);
	            return this._addRecord(proto_record_1.RecordType.PropertyWrite, ast.name, ast.setter, [value], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedWrite = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        var value = ast.value.visit(this);
	        return this._addRecord(proto_record_1.RecordType.KeyedWrite, null, null, [key, value], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitSafePropertyRead = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        return this._addRecord(proto_record_1.RecordType.SafeProperty, ast.name, ast.getter, [], null, receiver);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
	            var target = this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
	            return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
	        }
	        else {
	            return this._addRecord(proto_record_1.RecordType.InvokeMethod, ast.name, ast.fn, args, null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.SafeMethodInvoke, ast.name, ast.fn, args, null, receiver);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
	        var target = ast.target.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
	        var primitiveName = "arrayFn" + ast.expressions.length;
	        return this._addRecord(proto_record_1.RecordType.CollectionLiteral, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
	        return this._addRecord(proto_record_1.RecordType.CollectionLiteral, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
	        var left = ast.left.visit(this);
	        switch (ast.operation) {
	            case '&&':
	                var branchEnd = [null];
	                this._addRecord(proto_record_1.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], branchEnd, left);
	                var right = ast.right.visit(this);
	                branchEnd[0] = right;
	                return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [left, right, left], null, 0);
	            case '||':
	                var branchEnd = [null];
	                this._addRecord(proto_record_1.RecordType.SkipRecordsIf, "SkipRecordsIf", null, [], branchEnd, left);
	                var right = ast.right.visit(this);
	                branchEnd[0] = right;
	                return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [left, left, right], null, 0);
	            default:
	                var right = ast.right.visit(this);
	                return this._addRecord(proto_record_1.RecordType.PrimitiveOp, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
	        var exp = ast.expression.visit(this);
	        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
	        var condition = ast.condition.visit(this);
	        var startOfFalseBranch = [null];
	        var endOfFalseBranch = [null];
	        this._addRecord(proto_record_1.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], startOfFalseBranch, condition);
	        var whenTrue = ast.trueExp.visit(this);
	        var skip = this._addRecord(proto_record_1.RecordType.SkipRecords, "SkipRecords", null, [], endOfFalseBranch, 0);
	        var whenFalse = ast.falseExp.visit(this);
	        startOfFalseBranch[0] = skip;
	        endOfFalseBranch[0] = whenFalse;
	        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [condition, whenTrue, whenFalse], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
	        var value = ast.exp.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.Pipe, ast.name, ast.name, args, null, value);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedRead = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        return this._addRecord(proto_record_1.RecordType.KeyedRead, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitChain = function (ast) {
	        var _this = this;
	        var args = ast.expressions.map(function (e) { return e.visit(_this); });
	        return this._addRecord(proto_record_1.RecordType.Chain, "chain", null, args, null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitQuote = function (ast) {
	        throw new exceptions_1.BaseException(("Caught uninterpreted expression at " + ast.location + ": " + ast.uninterpretedExpression + ". ") +
	            ("Expression prefix " + ast.prefix + " did not match a template transformer to interpret the expression."));
	    };
	    _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    /**
	     * Adds a `ProtoRecord` and returns its selfIndex.
	     */
	    _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
	        var selfIndex = this._records.length + 1;
	        if (context instanceof directive_record_1.DirectiveIndex) {
	            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
	        }
	        else {
	            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
	        }
	        return selfIndex;
	    };
	    return _ConvertAstIntoProtoRecords;
	})();
	function _arrayFn(length) {
	    switch (length) {
	        case 0:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
	        case 1:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
	        case 2:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
	        case 3:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
	        case 4:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
	        case 5:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
	        case 6:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
	        case 7:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
	        case 8:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
	        case 9:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
	        default:
	            throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
	    }
	}
	function _mapPrimitiveName(keys) {
	    var stringifiedKeys = keys.map(function (k) { return lang_1.isString(k) ? "\"" + k + "\"" : "" + k; }).join(', ');
	    return "mapFn([" + stringifiedKeys + "])";
	}
	function _operationToPrimitiveName(operation) {
	    switch (operation) {
	        case '+':
	            return "operation_add";
	        case '-':
	            return "operation_subtract";
	        case '*':
	            return "operation_multiply";
	        case '/':
	            return "operation_divide";
	        case '%':
	            return "operation_remainder";
	        case '==':
	            return "operation_equals";
	        case '!=':
	            return "operation_not_equals";
	        case '===':
	            return "operation_identical";
	        case '!==':
	            return "operation_not_identical";
	        case '<':
	            return "operation_less_then";
	        case '>':
	            return "operation_greater_then";
	        case '<=':
	            return "operation_less_or_equals_then";
	        case '>=':
	            return "operation_greater_or_equals_then";
	        default:
	            throw new exceptions_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function _operationToFunction(operation) {
	    switch (operation) {
	        case '+':
	            return change_detection_util_1.ChangeDetectionUtil.operation_add;
	        case '-':
	            return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
	        case '*':
	            return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
	        case '/':
	            return change_detection_util_1.ChangeDetectionUtil.operation_divide;
	        case '%':
	            return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
	        case '==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_equals;
	        case '!=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
	        case '===':
	            return change_detection_util_1.ChangeDetectionUtil.operation_identical;
	        case '!==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
	        case '<':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
	        case '>':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
	        case '<=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
	        case '>=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
	        default:
	            throw new exceptions_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function s(v) {
	    return lang_1.isPresent(v) ? "" + v : '';
	}
	function _interpolationFn(strings) {
	    var length = strings.length;
	    var c0 = length > 0 ? strings[0] : null;
	    var c1 = length > 1 ? strings[1] : null;
	    var c2 = length > 2 ? strings[2] : null;
	    var c3 = length > 3 ? strings[3] : null;
	    var c4 = length > 4 ? strings[4] : null;
	    var c5 = length > 5 ? strings[5] : null;
	    var c6 = length > 6 ? strings[6] : null;
	    var c7 = length > 7 ? strings[7] : null;
	    var c8 = length > 8 ? strings[8] : null;
	    var c9 = length > 9 ? strings[9] : null;
	    switch (length - 1) {
	        case 1:
	            return function (a1) { return c0 + s(a1) + c1; };
	        case 2:
	            return function (a1, a2) { return c0 + s(a1) + c1 + s(a2) + c2; };
	        case 3:
	            return function (a1, a2, a3) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3; };
	        case 4:
	            return function (a1, a2, a3, a4) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4; };
	        case 5:
	            return function (a1, a2, a3, a4, a5) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	            };
	        case 6:
	            return function (a1, a2, a3, a4, a5, a6) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	            };
	        case 7:
	            return function (a1, a2, a3, a4, a5, a6, a7) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7; };
	        case 8:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) +
	                c8; };
	        case 9:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 +
	                s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) +
	                c7 + s(a8) + c8 + s(a9) + c9; };
	        default:
	            throw new exceptions_1.BaseException("Does not support more than 9 expressions");
	    }
	}


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var constants_1 = __webpack_require__(41);
	var pipe_lifecycle_reflector_1 = __webpack_require__(44);
	var binding_record_1 = __webpack_require__(45);
	var directive_record_1 = __webpack_require__(46);
	/**
	 * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the
	 * reference
	 * has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 */
	var WrappedValue = (function () {
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    WrappedValue.wrap = function (value) {
	        var w = _wrappedValues[_wrappedIndex++ % 5];
	        w.wrapped = value;
	        return w;
	    };
	    return WrappedValue;
	})();
	exports.WrappedValue = WrappedValue;
	var _wrappedValues = [
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null)
	];
	var _wrappedIndex = 0;
	/**
	 * Represents a basic change from a previous to a new value.
	 */
	var SimpleChange = (function () {
	    function SimpleChange(previousValue, currentValue) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	    }
	    /**
	     * Check whether the new value is the first value assigned.
	     */
	    SimpleChange.prototype.isFirstChange = function () { return this.previousValue === ChangeDetectionUtil.uninitialized; };
	    return SimpleChange;
	})();
	exports.SimpleChange = SimpleChange;
	var _simpleChangesIndex = 0;
	var _simpleChanges = [
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null)
	];
	function _simpleChange(previousValue, currentValue) {
	    var index = _simpleChangesIndex++ % 20;
	    var s = _simpleChanges[index];
	    s.previousValue = previousValue;
	    s.currentValue = currentValue;
	    return s;
	}
	/* tslint:disable:requireParameterType */
	var ChangeDetectionUtil = (function () {
	    function ChangeDetectionUtil() {
	    }
	    ChangeDetectionUtil.arrayFn0 = function () { return []; };
	    ChangeDetectionUtil.arrayFn1 = function (a1) { return [a1]; };
	    ChangeDetectionUtil.arrayFn2 = function (a1, a2) { return [a1, a2]; };
	    ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) { return [a1, a2, a3]; };
	    ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) { return [a1, a2, a3, a4]; };
	    ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) { return [a1, a2, a3, a4, a5]; };
	    ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) { return [a1, a2, a3, a4, a5, a6]; };
	    ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) { return [a1, a2, a3, a4, a5, a6, a7]; };
	    ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8];
	    };
	    ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	    };
	    ChangeDetectionUtil.operation_negate = function (value) { return !value; };
	    ChangeDetectionUtil.operation_add = function (left, right) { return left + right; };
	    ChangeDetectionUtil.operation_subtract = function (left, right) { return left - right; };
	    ChangeDetectionUtil.operation_multiply = function (left, right) { return left * right; };
	    ChangeDetectionUtil.operation_divide = function (left, right) { return left / right; };
	    ChangeDetectionUtil.operation_remainder = function (left, right) { return left % right; };
	    ChangeDetectionUtil.operation_equals = function (left, right) { return left == right; };
	    ChangeDetectionUtil.operation_not_equals = function (left, right) { return left != right; };
	    ChangeDetectionUtil.operation_identical = function (left, right) { return left === right; };
	    ChangeDetectionUtil.operation_not_identical = function (left, right) { return left !== right; };
	    ChangeDetectionUtil.operation_less_then = function (left, right) { return left < right; };
	    ChangeDetectionUtil.operation_greater_then = function (left, right) { return left > right; };
	    ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) { return left <= right; };
	    ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) { return left >= right; };
	    ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) { return cond ? trueVal : falseVal; };
	    ChangeDetectionUtil.mapFn = function (keys) {
	        function buildMap(values) {
	            var res = collection_1.StringMapWrapper.create();
	            for (var i = 0; i < keys.length; ++i) {
	                collection_1.StringMapWrapper.set(res, keys[i], values[i]);
	            }
	            return res;
	        }
	        switch (keys.length) {
	            case 0:
	                return function () { return []; };
	            case 1:
	                return function (a1) { return buildMap([a1]); };
	            case 2:
	                return function (a1, a2) { return buildMap([a1, a2]); };
	            case 3:
	                return function (a1, a2, a3) { return buildMap([a1, a2, a3]); };
	            case 4:
	                return function (a1, a2, a3, a4) { return buildMap([a1, a2, a3, a4]); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return buildMap([a1, a2, a3, a4, a5]); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return buildMap([a1, a2, a3, a4, a5, a6]); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return buildMap([a1, a2, a3, a4, a5, a6, a7]); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	                };
	            default:
	                throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
	        }
	    };
	    ChangeDetectionUtil.keyedAccess = function (obj, args) { return obj[args[0]]; };
	    ChangeDetectionUtil.unwrapValue = function (value) {
	        if (value instanceof WrappedValue) {
	            return value.wrapped;
	        }
	        else {
	            return value;
	        }
	    };
	    ChangeDetectionUtil.changeDetectionMode = function (strategy) {
	        return constants_1.isDefaultChangeDetectionStrategy(strategy) ? constants_1.ChangeDetectionStrategy.CheckAlways :
	            constants_1.ChangeDetectionStrategy.CheckOnce;
	    };
	    ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
	        return _simpleChange(previousValue, currentValue);
	    };
	    ChangeDetectionUtil.isValueBlank = function (value) { return lang_1.isBlank(value); };
	    ChangeDetectionUtil.s = function (value) { return lang_1.isPresent(value) ? "" + value : ''; };
	    ChangeDetectionUtil.protoByIndex = function (protos, selfIndex) {
	        return selfIndex < 1 ?
	            null :
	            protos[selfIndex - 1]; // self index is shifted by one because of context
	    };
	    ChangeDetectionUtil.callPipeOnDestroy = function (selectedPipe) {
	        if (pipe_lifecycle_reflector_1.implementsOnDestroy(selectedPipe.pipe)) {
	            selectedPipe.pipe.ngOnDestroy();
	        }
	    };
	    ChangeDetectionUtil.bindingTarget = function (mode, elementIndex, name, unit, debug) {
	        return new binding_record_1.BindingTarget(mode, elementIndex, name, unit, debug);
	    };
	    ChangeDetectionUtil.directiveIndex = function (elementIndex, directiveIndex) {
	        return new directive_record_1.DirectiveIndex(elementIndex, directiveIndex);
	    };
	    ChangeDetectionUtil.looseNotIdentical = function (a, b) { return !lang_1.looseIdentical(a, b); };
	    ChangeDetectionUtil.devModeEqual = function (a, b) {
	        if (collection_1.isListLikeIterable(a) && collection_1.isListLikeIterable(b)) {
	            return collection_1.areIterablesEqual(a, b, ChangeDetectionUtil.devModeEqual);
	        }
	        else if (!collection_1.isListLikeIterable(a) && !lang_1.isPrimitive(a) && !collection_1.isListLikeIterable(b) &&
	            !lang_1.isPrimitive(b)) {
	            return true;
	        }
	        else {
	            return lang_1.looseIdentical(a, b);
	        }
	    };
	    ChangeDetectionUtil.uninitialized = lang_1.CONST_EXPR(new Object());
	    return ChangeDetectionUtil;
	})();
	exports.ChangeDetectionUtil = ChangeDetectionUtil;


/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';function implementsOnDestroy(pipe) {
	    return pipe.constructor.prototype.ngOnDestroy;
	}
	exports.implementsOnDestroy = implementsOnDestroy;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
	var BINDING = "native";
	var DIRECTIVE = "directive";
	var ELEMENT_PROPERTY = "elementProperty";
	var ELEMENT_ATTRIBUTE = "elementAttribute";
	var ELEMENT_CLASS = "elementClass";
	var ELEMENT_STYLE = "elementStyle";
	var TEXT_NODE = "textNode";
	var EVENT = "event";
	var HOST_EVENT = "hostEvent";
	var BindingTarget = (function () {
	    function BindingTarget(mode, elementIndex, name, unit, debug) {
	        this.mode = mode;
	        this.elementIndex = elementIndex;
	        this.name = name;
	        this.unit = unit;
	        this.debug = debug;
	    }
	    BindingTarget.prototype.isDirective = function () { return this.mode === DIRECTIVE; };
	    BindingTarget.prototype.isElementProperty = function () { return this.mode === ELEMENT_PROPERTY; };
	    BindingTarget.prototype.isElementAttribute = function () { return this.mode === ELEMENT_ATTRIBUTE; };
	    BindingTarget.prototype.isElementClass = function () { return this.mode === ELEMENT_CLASS; };
	    BindingTarget.prototype.isElementStyle = function () { return this.mode === ELEMENT_STYLE; };
	    BindingTarget.prototype.isTextNode = function () { return this.mode === TEXT_NODE; };
	    return BindingTarget;
	})();
	exports.BindingTarget = BindingTarget;
	var BindingRecord = (function () {
	    function BindingRecord(mode, target, implicitReceiver, ast, setter, lifecycleEvent, directiveRecord) {
	        this.mode = mode;
	        this.target = target;
	        this.implicitReceiver = implicitReceiver;
	        this.ast = ast;
	        this.setter = setter;
	        this.lifecycleEvent = lifecycleEvent;
	        this.directiveRecord = directiveRecord;
	    }
	    BindingRecord.prototype.isDirectiveLifecycle = function () { return this.mode === DIRECTIVE_LIFECYCLE; };
	    BindingRecord.prototype.callOnChanges = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChanges;
	    };
	    BindingRecord.prototype.isDefaultChangeDetection = function () {
	        return lang_1.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
	    };
	    BindingRecord.createDirectiveDoCheck = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "DoCheck", directiveRecord);
	    };
	    BindingRecord.createDirectiveOnInit = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnInit", directiveRecord);
	    };
	    BindingRecord.createDirectiveOnChanges = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnChanges", directiveRecord);
	    };
	    BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
	        var elementIndex = directiveRecord.directiveIndex.elementIndex;
	        var t = new BindingTarget(DIRECTIVE, elementIndex, propertyName, null, ast.toString());
	        return new BindingRecord(DIRECTIVE, t, 0, ast, setter, null, directiveRecord);
	    };
	    BindingRecord.createForElementProperty = function (ast, elementIndex, propertyName) {
	        var t = new BindingTarget(ELEMENT_PROPERTY, elementIndex, propertyName, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForElementAttribute = function (ast, elementIndex, attributeName) {
	        var t = new BindingTarget(ELEMENT_ATTRIBUTE, elementIndex, attributeName, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForElementClass = function (ast, elementIndex, className) {
	        var t = new BindingTarget(ELEMENT_CLASS, elementIndex, className, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForElementStyle = function (ast, elementIndex, styleName, unit) {
	        var t = new BindingTarget(ELEMENT_STYLE, elementIndex, styleName, unit, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
	        var t = new BindingTarget(ELEMENT_PROPERTY, directiveIndex.elementIndex, propertyName, null, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForHostAttribute = function (directiveIndex, ast, attributeName) {
	        var t = new BindingTarget(ELEMENT_ATTRIBUTE, directiveIndex.elementIndex, attributeName, null, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForHostClass = function (directiveIndex, ast, className) {
	        var t = new BindingTarget(ELEMENT_CLASS, directiveIndex.elementIndex, className, null, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForHostStyle = function (directiveIndex, ast, styleName, unit) {
	        var t = new BindingTarget(ELEMENT_STYLE, directiveIndex.elementIndex, styleName, unit, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForTextNode = function (ast, elementIndex) {
	        var t = new BindingTarget(TEXT_NODE, elementIndex, null, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForEvent = function (ast, eventName, elementIndex) {
	        var t = new BindingTarget(EVENT, elementIndex, eventName, null, ast.toString());
	        return new BindingRecord(EVENT, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForHostEvent = function (ast, eventName, directiveRecord) {
	        var directiveIndex = directiveRecord.directiveIndex;
	        var t = new BindingTarget(HOST_EVENT, directiveIndex.elementIndex, eventName, null, ast.toString());
	        return new BindingRecord(HOST_EVENT, t, directiveIndex, ast, null, null, directiveRecord);
	    };
	    return BindingRecord;
	})();
	exports.BindingRecord = BindingRecord;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var constants_1 = __webpack_require__(41);
	var DirectiveIndex = (function () {
	    function DirectiveIndex(elementIndex, directiveIndex) {
	        this.elementIndex = elementIndex;
	        this.directiveIndex = directiveIndex;
	    }
	    Object.defineProperty(DirectiveIndex.prototype, "name", {
	        get: function () { return this.elementIndex + "_" + this.directiveIndex; },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveIndex;
	})();
	exports.DirectiveIndex = DirectiveIndex;
	var DirectiveRecord = (function () {
	    function DirectiveRecord(_a) {
	        var _b = _a === void 0 ? {} : _a, directiveIndex = _b.directiveIndex, callAfterContentInit = _b.callAfterContentInit, callAfterContentChecked = _b.callAfterContentChecked, callAfterViewInit = _b.callAfterViewInit, callAfterViewChecked = _b.callAfterViewChecked, callOnChanges = _b.callOnChanges, callDoCheck = _b.callDoCheck, callOnInit = _b.callOnInit, callOnDestroy = _b.callOnDestroy, changeDetection = _b.changeDetection, outputs = _b.outputs;
	        this.directiveIndex = directiveIndex;
	        this.callAfterContentInit = lang_1.normalizeBool(callAfterContentInit);
	        this.callAfterContentChecked = lang_1.normalizeBool(callAfterContentChecked);
	        this.callOnChanges = lang_1.normalizeBool(callOnChanges);
	        this.callAfterViewInit = lang_1.normalizeBool(callAfterViewInit);
	        this.callAfterViewChecked = lang_1.normalizeBool(callAfterViewChecked);
	        this.callDoCheck = lang_1.normalizeBool(callDoCheck);
	        this.callOnInit = lang_1.normalizeBool(callOnInit);
	        this.callOnDestroy = lang_1.normalizeBool(callOnDestroy);
	        this.changeDetection = changeDetection;
	        this.outputs = outputs;
	    }
	    DirectiveRecord.prototype.isDefaultChangeDetection = function () {
	        return constants_1.isDefaultChangeDetectionStrategy(this.changeDetection);
	    };
	    return DirectiveRecord;
	})();
	exports.DirectiveRecord = DirectiveRecord;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var abstract_change_detector_1 = __webpack_require__(48);
	var change_detection_util_1 = __webpack_require__(43);
	var constants_1 = __webpack_require__(41);
	var proto_record_1 = __webpack_require__(73);
	var reflection_1 = __webpack_require__(21);
	var async_1 = __webpack_require__(53);
	var DynamicChangeDetector = (function (_super) {
	    __extends(DynamicChangeDetector, _super);
	    function DynamicChangeDetector(id, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy, _records, _eventBindings, _directiveRecords, _genConfig) {
	        _super.call(this, id, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy);
	        this._records = _records;
	        this._eventBindings = _eventBindings;
	        this._directiveRecords = _directiveRecords;
	        this._genConfig = _genConfig;
	        var len = _records.length + 1;
	        this.values = collection_1.ListWrapper.createFixedSize(len);
	        this.localPipes = collection_1.ListWrapper.createFixedSize(len);
	        this.prevContexts = collection_1.ListWrapper.createFixedSize(len);
	        this.changes = collection_1.ListWrapper.createFixedSize(len);
	        this.dehydrateDirectives(false);
	    }
	    DynamicChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) {
	        var _this = this;
	        var preventDefault = false;
	        this._matchingEventBindings(eventName, elIndex)
	            .forEach(function (rec) {
	            var res = _this._processEventBinding(rec, locals);
	            if (res === false) {
	                preventDefault = true;
	            }
	        });
	        return preventDefault;
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._processEventBinding = function (eb, locals) {
	        var values = collection_1.ListWrapper.createFixedSize(eb.records.length);
	        values[0] = this.values[0];
	        for (var protoIdx = 0; protoIdx < eb.records.length; ++protoIdx) {
	            var proto = eb.records[protoIdx];
	            if (proto.isSkipRecord()) {
	                protoIdx += this._computeSkipLength(protoIdx, proto, values);
	            }
	            else {
	                var res = this._calculateCurrValue(proto, values, locals);
	                if (proto.lastInBinding) {
	                    this._markPathAsCheckOnce(proto);
	                    return res;
	                }
	                else {
	                    this._writeSelf(proto, res, values);
	                }
	            }
	        }
	        throw new exceptions_1.BaseException("Cannot be reached");
	    };
	    DynamicChangeDetector.prototype._computeSkipLength = function (protoIndex, proto, values) {
	        if (proto.mode === proto_record_1.RecordType.SkipRecords) {
	            return proto.fixedArgs[0] - protoIndex - 1;
	        }
	        if (proto.mode === proto_record_1.RecordType.SkipRecordsIf) {
	            var condition = this._readContext(proto, values);
	            return condition ? proto.fixedArgs[0] - protoIndex - 1 : 0;
	        }
	        if (proto.mode === proto_record_1.RecordType.SkipRecordsIfNot) {
	            var condition = this._readContext(proto, values);
	            return condition ? 0 : proto.fixedArgs[0] - protoIndex - 1;
	        }
	        throw new exceptions_1.BaseException("Cannot be reached");
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._markPathAsCheckOnce = function (proto) {
	        if (!proto.bindingRecord.isDefaultChangeDetection()) {
	            var dir = proto.bindingRecord.directiveRecord;
	            this._getDetectorFor(dir.directiveIndex).markPathToRootAsCheckOnce();
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._matchingEventBindings = function (eventName, elIndex) {
	        return this._eventBindings.filter(function (eb) { return eb.eventName == eventName && eb.elIndex === elIndex; });
	    };
	    DynamicChangeDetector.prototype.hydrateDirectives = function (dispatcher) {
	        var _this = this;
	        this.values[0] = this.context;
	        this.dispatcher = dispatcher;
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            for (var i = 0; i < this.directiveIndices.length; ++i) {
	                var index = this.directiveIndices[i];
	                _super.prototype.observeDirective.call(this, this._getDirectiveFor(index), i);
	            }
	        }
	        this.outputSubscriptions = [];
	        for (var i = 0; i < this._directiveRecords.length; ++i) {
	            var r = this._directiveRecords[i];
	            if (lang_1.isPresent(r.outputs)) {
	                r.outputs.forEach(function (output) {
	                    var eventHandler = _this._createEventHandler(r.directiveIndex.elementIndex, output[1]);
	                    var directive = _this._getDirectiveFor(r.directiveIndex);
	                    var getter = reflection_1.reflector.getter(output[0]);
	                    _this.outputSubscriptions.push(async_1.ObservableWrapper.subscribe(getter(directive), eventHandler));
	                });
	            }
	        }
	    };
	    DynamicChangeDetector.prototype._createEventHandler = function (boundElementIndex, eventName) {
	        var _this = this;
	        return function (event) { return _this.handleEvent(eventName, boundElementIndex, event); };
	    };
	    DynamicChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) {
	        if (destroyPipes) {
	            this._destroyPipes();
	            this._destroyDirectives();
	        }
	        this.values[0] = null;
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.ChangeDetectionUtil.uninitialized, 1);
	        collection_1.ListWrapper.fill(this.changes, false);
	        collection_1.ListWrapper.fill(this.localPipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.ChangeDetectionUtil.uninitialized);
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._destroyPipes = function () {
	        for (var i = 0; i < this.localPipes.length; ++i) {
	            if (lang_1.isPresent(this.localPipes[i])) {
	                change_detection_util_1.ChangeDetectionUtil.callPipeOnDestroy(this.localPipes[i]);
	            }
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._destroyDirectives = function () {
	        for (var i = 0; i < this._directiveRecords.length; ++i) {
	            var record = this._directiveRecords[i];
	            if (record.callOnDestroy) {
	                this._getDirectiveFor(record.directiveIndex).ngOnDestroy();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.checkNoChanges = function () { this.runDetectChanges(true); };
	    DynamicChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) {
	        var protos = this._records;
	        var changes = null;
	        var isChanged = false;
	        for (var protoIdx = 0; protoIdx < protos.length; ++protoIdx) {
	            var proto = protos[protoIdx];
	            var bindingRecord = proto.bindingRecord;
	            var directiveRecord = bindingRecord.directiveRecord;
	            if (this._firstInBinding(proto)) {
	                this.propertyBindingIndex = proto.propertyBindingIndex;
	            }
	            if (proto.isLifeCycleRecord()) {
	                if (proto.name === "DoCheck" && !throwOnChange) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).ngDoCheck();
	                }
	                else if (proto.name === "OnInit" && !throwOnChange &&
	                    this.state == constants_1.ChangeDetectorState.NeverChecked) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).ngOnInit();
	                }
	                else if (proto.name === "OnChanges" && lang_1.isPresent(changes) && !throwOnChange) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).ngOnChanges(changes);
	                }
	            }
	            else if (proto.isSkipRecord()) {
	                protoIdx += this._computeSkipLength(protoIdx, proto, this.values);
	            }
	            else {
	                var change = this._check(proto, throwOnChange, this.values, this.locals);
	                if (lang_1.isPresent(change)) {
	                    this._updateDirectiveOrElement(change, bindingRecord);
	                    isChanged = true;
	                    changes = this._addChange(bindingRecord, change, changes);
	                }
	            }
	            if (proto.lastInDirective) {
	                changes = null;
	                if (isChanged && !bindingRecord.isDefaultChangeDetection()) {
	                    this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
	                }
	                isChanged = false;
	            }
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._firstInBinding = function (r) {
	        var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this._records, r.selfIndex - 1);
	        return lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
	    };
	    DynamicChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () {
	        var dirs = this._directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callAfterContentInit && this.state == constants_1.ChangeDetectorState.NeverChecked) {
	                this._getDirectiveFor(dir.directiveIndex).ngAfterContentInit();
	            }
	            if (dir.callAfterContentChecked) {
	                this._getDirectiveFor(dir.directiveIndex).ngAfterContentChecked();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () {
	        var dirs = this._directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callAfterViewInit && this.state == constants_1.ChangeDetectorState.NeverChecked) {
	                this._getDirectiveFor(dir.directiveIndex).ngAfterViewInit();
	            }
	            if (dir.callAfterViewChecked) {
	                this._getDirectiveFor(dir.directiveIndex).ngAfterViewChecked();
	            }
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
	        if (lang_1.isBlank(bindingRecord.directiveRecord)) {
	            _super.prototype.notifyDispatcher.call(this, change.currentValue);
	        }
	        else {
	            var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
	            bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
	        }
	        if (this._genConfig.logBindingUpdate) {
	            _super.prototype.logBindingUpdate.call(this, change.currentValue);
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
	        if (bindingRecord.callOnChanges()) {
	            return _super.prototype.addChange.call(this, changes, change.previousValue, change.currentValue);
	        }
	        else {
	            return changes;
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) {
	        return this.dispatcher.getDirectiveFor(directiveIndex);
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) {
	        return this.dispatcher.getDetectorFor(directiveIndex);
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._check = function (proto, throwOnChange, values, locals) {
	        if (proto.isPipeRecord()) {
	            return this._pipeCheck(proto, throwOnChange, values);
	        }
	        else {
	            return this._referenceCheck(proto, throwOnChange, values, locals);
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange, values, locals) {
	        if (this._pureFuncAndArgsDidNotChange(proto)) {
	            this._setChanged(proto, false);
	            return null;
	        }
	        var currValue = this._calculateCurrValue(proto, values, locals);
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            _super.prototype.observeValue.call(this, currValue, proto.selfIndex);
	        }
	        if (proto.shouldBeChecked()) {
	            var prevValue = this._readSelf(proto, values);
	            var detectedChange = throwOnChange ?
	                !change_detection_util_1.ChangeDetectionUtil.devModeEqual(prevValue, currValue) :
	                change_detection_util_1.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue);
	            if (detectedChange) {
	                if (proto.lastInBinding) {
	                    var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                    if (throwOnChange)
	                        this.throwOnChangeError(prevValue, currValue);
	                    this._writeSelf(proto, currValue, values);
	                    this._setChanged(proto, true);
	                    return change;
	                }
	                else {
	                    this._writeSelf(proto, currValue, values);
	                    this._setChanged(proto, true);
	                    return null;
	                }
	            }
	            else {
	                this._setChanged(proto, false);
	                return null;
	            }
	        }
	        else {
	            this._writeSelf(proto, currValue, values);
	            this._setChanged(proto, true);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._calculateCurrValue = function (proto, values, locals) {
	        switch (proto.mode) {
	            case proto_record_1.RecordType.Self:
	                return this._readContext(proto, values);
	            case proto_record_1.RecordType.Const:
	                return proto.funcOrValue;
	            case proto_record_1.RecordType.PropertyRead:
	                var context = this._readContext(proto, values);
	                return proto.funcOrValue(context);
	            case proto_record_1.RecordType.SafeProperty:
	                var context = this._readContext(proto, values);
	                return lang_1.isBlank(context) ? null : proto.funcOrValue(context);
	            case proto_record_1.RecordType.PropertyWrite:
	                var context = this._readContext(proto, values);
	                var value = this._readArgs(proto, values)[0];
	                proto.funcOrValue(context, value);
	                return value;
	            case proto_record_1.RecordType.KeyedWrite:
	                var context = this._readContext(proto, values);
	                var key = this._readArgs(proto, values)[0];
	                var value = this._readArgs(proto, values)[1];
	                context[key] = value;
	                return value;
	            case proto_record_1.RecordType.Local:
	                return locals.get(proto.name);
	            case proto_record_1.RecordType.InvokeMethod:
	                var context = this._readContext(proto, values);
	                var args = this._readArgs(proto, values);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RecordType.SafeMethodInvoke:
	                var context = this._readContext(proto, values);
	                if (lang_1.isBlank(context)) {
	                    return null;
	                }
	                var args = this._readArgs(proto, values);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RecordType.KeyedRead:
	                var arg = this._readArgs(proto, values)[0];
	                return this._readContext(proto, values)[arg];
	            case proto_record_1.RecordType.Chain:
	                var args = this._readArgs(proto, values);
	                return args[args.length - 1];
	            case proto_record_1.RecordType.InvokeClosure:
	                return lang_1.FunctionWrapper.apply(this._readContext(proto, values), this._readArgs(proto, values));
	            case proto_record_1.RecordType.Interpolate:
	            case proto_record_1.RecordType.PrimitiveOp:
	            case proto_record_1.RecordType.CollectionLiteral:
	                return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto, values));
	            default:
	                throw new exceptions_1.BaseException("Unknown operation " + proto.mode);
	        }
	    };
	    DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange, values) {
	        var context = this._readContext(proto, values);
	        var selectedPipe = this._pipeFor(proto, context);
	        if (!selectedPipe.pure || this._argsOrContextChanged(proto)) {
	            var args = this._readArgs(proto, values);
	            var currValue = selectedPipe.pipe.transform(context, args);
	            if (proto.shouldBeChecked()) {
	                var prevValue = this._readSelf(proto, values);
	                var detectedChange = throwOnChange ?
	                    !change_detection_util_1.ChangeDetectionUtil.devModeEqual(prevValue, currValue) :
	                    change_detection_util_1.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue);
	                if (detectedChange) {
	                    currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
	                    if (proto.lastInBinding) {
	                        var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                        if (throwOnChange)
	                            this.throwOnChangeError(prevValue, currValue);
	                        this._writeSelf(proto, currValue, values);
	                        this._setChanged(proto, true);
	                        return change;
	                    }
	                    else {
	                        this._writeSelf(proto, currValue, values);
	                        this._setChanged(proto, true);
	                        return null;
	                    }
	                }
	                else {
	                    this._setChanged(proto, false);
	                    return null;
	                }
	            }
	            else {
	                this._writeSelf(proto, currValue, values);
	                this._setChanged(proto, true);
	                return null;
	            }
	        }
	    };
	    DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
	        var storedPipe = this._readPipe(proto);
	        if (lang_1.isPresent(storedPipe))
	            return storedPipe;
	        var pipe = this.pipes.get(proto.name);
	        this._writePipe(proto, pipe);
	        return pipe;
	    };
	    DynamicChangeDetector.prototype._readContext = function (proto, values) {
	        if (proto.contextIndex == -1) {
	            return this._getDirectiveFor(proto.directiveIndex);
	        }
	        return values[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readSelf = function (proto, values) { return values[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writeSelf = function (proto, value, values) { values[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._readPipe = function (proto) { return this.localPipes[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writePipe = function (proto, value) { this.localPipes[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._setChanged = function (proto, value) {
	        if (proto.argumentToPureFunction)
	            this.changes[proto.selfIndex] = value;
	    };
	    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
	        return proto.isPureFunction() && !this._argsChanged(proto);
	    };
	    DynamicChangeDetector.prototype._argsChanged = function (proto) {
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            if (this.changes[args[i]]) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DynamicChangeDetector.prototype._argsOrContextChanged = function (proto) {
	        return this._argsChanged(proto) || this.changes[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readArgs = function (proto, values) {
	        var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            res[i] = values[args[i]];
	        }
	        return res;
	    };
	    return DynamicChangeDetector;
	})(abstract_change_detector_1.AbstractChangeDetector);
	exports.DynamicChangeDetector = DynamicChangeDetector;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var change_detection_util_1 = __webpack_require__(43);
	var change_detector_ref_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(39);
	var locals_1 = __webpack_require__(38);
	var constants_1 = __webpack_require__(41);
	var profile_1 = __webpack_require__(50);
	var observable_facade_1 = __webpack_require__(52);
	var async_1 = __webpack_require__(53);
	var _scope_check = profile_1.wtfCreateScope("ChangeDetector#check(ascii id, bool throwOnChange)");
	var _Context = (function () {
	    function _Context(element, componentElement, context, locals, injector, expression) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.context = context;
	        this.locals = locals;
	        this.injector = injector;
	        this.expression = expression;
	    }
	    return _Context;
	})();
	var AbstractChangeDetector = (function () {
	    function AbstractChangeDetector(id, numberOfPropertyProtoRecords, bindingTargets, directiveIndices, strategy) {
	        this.id = id;
	        this.numberOfPropertyProtoRecords = numberOfPropertyProtoRecords;
	        this.bindingTargets = bindingTargets;
	        this.directiveIndices = directiveIndices;
	        this.strategy = strategy;
	        this.contentChildren = [];
	        this.viewChildren = [];
	        // The names of the below fields must be kept in sync with codegen_name_util.ts or
	        // change detection will fail.
	        this.state = constants_1.ChangeDetectorState.NeverChecked;
	        this.locals = null;
	        this.mode = null;
	        this.pipes = null;
	        this.ref = new change_detector_ref_1.ChangeDetectorRef_(this);
	    }
	    AbstractChangeDetector.prototype.addContentChild = function (cd) {
	        this.contentChildren.push(cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeContentChild = function (cd) { collection_1.ListWrapper.remove(this.contentChildren, cd); };
	    AbstractChangeDetector.prototype.addViewChild = function (cd) {
	        this.viewChildren.push(cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeViewChild = function (cd) { collection_1.ListWrapper.remove(this.viewChildren, cd); };
	    AbstractChangeDetector.prototype.remove = function () { this.parent.removeContentChild(this); };
	    AbstractChangeDetector.prototype.handleEvent = function (eventName, elIndex, event) {
	        if (!this.hydrated()) {
	            this.throwDehydratedError(this.id + " -> " + eventName);
	        }
	        try {
	            var locals = new Map();
	            locals.set('$event', event);
	            var res = !this.handleEventInternal(eventName, elIndex, new locals_1.Locals(this.locals, locals));
	            this.markPathToRootAsCheckOnce();
	            return res;
	        }
	        catch (e) {
	            var c = this.dispatcher.getDebugContext(null, elIndex, null);
	            var context = lang_1.isPresent(c) ?
	                new exceptions_1.EventEvaluationErrorContext(c.element, c.componentElement, c.context, c.locals, c.injector) :
	                null;
	            throw new exceptions_1.EventEvaluationError(eventName, e, e.stack, context);
	        }
	    };
	    AbstractChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) { return false; };
	    AbstractChangeDetector.prototype.detectChanges = function () { this.runDetectChanges(false); };
	    AbstractChangeDetector.prototype.checkNoChanges = function () {
	        if (lang_1.assertionsEnabled()) {
	            this.runDetectChanges(true);
	        }
	    };
	    AbstractChangeDetector.prototype.runDetectChanges = function (throwOnChange) {
	        if (this.mode === constants_1.ChangeDetectionStrategy.Detached ||
	            this.mode === constants_1.ChangeDetectionStrategy.Checked || this.state === constants_1.ChangeDetectorState.Errored)
	            return;
	        var s = _scope_check(this.id, throwOnChange);
	        this.detectChangesInRecords(throwOnChange);
	        this._detectChangesContentChildren(throwOnChange);
	        if (!throwOnChange)
	            this.afterContentLifecycleCallbacks();
	        this._detectChangesInViewChildren(throwOnChange);
	        if (!throwOnChange)
	            this.afterViewLifecycleCallbacks();
	        if (this.mode === constants_1.ChangeDetectionStrategy.CheckOnce)
	            this.mode = constants_1.ChangeDetectionStrategy.Checked;
	        this.state = constants_1.ChangeDetectorState.CheckedBefore;
	        profile_1.wtfLeave(s);
	    };
	    // This method is not intended to be overridden. Subclasses should instead provide an
	    // implementation of `detectChangesInRecordsInternal` which does the work of detecting changes
	    // and which this method will call.
	    // This method expects that `detectChangesInRecordsInternal` will set the property
	    // `this.propertyBindingIndex` to the propertyBindingIndex of the first proto record. This is to
	    // facilitate error reporting.
	    AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
	        if (!this.hydrated()) {
	            this.throwDehydratedError(this.id);
	        }
	        try {
	            this.detectChangesInRecordsInternal(throwOnChange);
	        }
	        catch (e) {
	            // throwOnChange errors aren't counted as fatal errors.
	            if (!(e instanceof exceptions_1.ExpressionChangedAfterItHasBeenCheckedException)) {
	                this.state = constants_1.ChangeDetectorState.Errored;
	            }
	            this._throwError(e, e.stack);
	        }
	    };
	    // Subclasses should override this method to perform any work necessary to detect and report
	    // changes. For example, changes should be reported via `ChangeDetectionUtil.addChange`, lifecycle
	    // methods should be called, etc.
	    // This implementation should also set `this.propertyBindingIndex` to the propertyBindingIndex of
	    // the
	    // first proto record to facilitate error reporting. See {@link #detectChangesInRecords}.
	    AbstractChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) { };
	    // This method is not intended to be overridden. Subclasses should instead provide an
	    // implementation of `hydrateDirectives`.
	    AbstractChangeDetector.prototype.hydrate = function (context, locals, dispatcher, pipes) {
	        this.dispatcher = dispatcher;
	        this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.strategy);
	        this.context = context;
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            this.observeComponent(context);
	        }
	        this.locals = locals;
	        this.pipes = pipes;
	        this.hydrateDirectives(dispatcher);
	        this.state = constants_1.ChangeDetectorState.NeverChecked;
	    };
	    // Subclasses should override this method to hydrate any directives.
	    AbstractChangeDetector.prototype.hydrateDirectives = function (dispatcher) { };
	    // This method is not intended to be overridden. Subclasses should instead provide an
	    // implementation of `dehydrateDirectives`.
	    AbstractChangeDetector.prototype.dehydrate = function () {
	        this.dehydrateDirectives(true);
	        // This is an experimental feature. Works only in Dart.
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            this._unsubsribeFromObservables();
	        }
	        this._unsubscribeFromOutputs();
	        this.dispatcher = null;
	        this.context = null;
	        this.locals = null;
	        this.pipes = null;
	    };
	    // Subclasses should override this method to dehydrate any directives. This method should reverse
	    // any work done in `hydrateDirectives`.
	    AbstractChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) { };
	    AbstractChangeDetector.prototype.hydrated = function () { return lang_1.isPresent(this.context); };
	    AbstractChangeDetector.prototype.destroyRecursive = function () {
	        this.dispatcher.notifyOnDestroy();
	        this.dehydrate();
	        var children = this.contentChildren;
	        for (var i = 0; i < children.length; i++) {
	            children[i].destroyRecursive();
	        }
	        children = this.viewChildren;
	        for (var i = 0; i < children.length; i++) {
	            children[i].destroyRecursive();
	        }
	    };
	    AbstractChangeDetector.prototype.afterContentLifecycleCallbacks = function () {
	        this.dispatcher.notifyAfterContentChecked();
	        this.afterContentLifecycleCallbacksInternal();
	    };
	    AbstractChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () { };
	    AbstractChangeDetector.prototype.afterViewLifecycleCallbacks = function () {
	        this.dispatcher.notifyAfterViewChecked();
	        this.afterViewLifecycleCallbacksInternal();
	    };
	    AbstractChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () { };
	    /** @internal */
	    AbstractChangeDetector.prototype._detectChangesContentChildren = function (throwOnChange) {
	        var c = this.contentChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i].runDetectChanges(throwOnChange);
	        }
	    };
	    /** @internal */
	    AbstractChangeDetector.prototype._detectChangesInViewChildren = function (throwOnChange) {
	        var c = this.viewChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i].runDetectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype.markAsCheckOnce = function () { this.mode = constants_1.ChangeDetectionStrategy.CheckOnce; };
	    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
	        var c = this;
	        while (lang_1.isPresent(c) && c.mode !== constants_1.ChangeDetectionStrategy.Detached) {
	            if (c.mode === constants_1.ChangeDetectionStrategy.Checked)
	                c.mode = constants_1.ChangeDetectionStrategy.CheckOnce;
	            c = c.parent;
	        }
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype._unsubsribeFromObservables = function () {
	        if (lang_1.isPresent(this.subscriptions)) {
	            for (var i = 0; i < this.subscriptions.length; ++i) {
	                var s = this.subscriptions[i];
	                if (lang_1.isPresent(this.subscriptions[i])) {
	                    s.cancel();
	                    this.subscriptions[i] = null;
	                }
	            }
	        }
	    };
	    AbstractChangeDetector.prototype._unsubscribeFromOutputs = function () {
	        if (lang_1.isPresent(this.outputSubscriptions)) {
	            for (var i = 0; i < this.outputSubscriptions.length; ++i) {
	                async_1.ObservableWrapper.dispose(this.outputSubscriptions[i]);
	                this.outputSubscriptions[i] = null;
	            }
	        }
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype.observeValue = function (value, index) {
	        var _this = this;
	        if (observable_facade_1.isObservable(value)) {
	            this._createArrayToStoreObservables();
	            if (lang_1.isBlank(this.subscriptions[index])) {
	                this.streams[index] = value.changes;
	                this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	            }
	            else if (this.streams[index] !== value.changes) {
	                this.subscriptions[index].cancel();
	                this.streams[index] = value.changes;
	                this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	            }
	        }
	        return value;
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype.observeDirective = function (value, index) {
	        var _this = this;
	        if (observable_facade_1.isObservable(value)) {
	            this._createArrayToStoreObservables();
	            var arrayIndex = this.numberOfPropertyProtoRecords + index + 2; // +1 is component
	            this.streams[arrayIndex] = value.changes;
	            this.subscriptions[arrayIndex] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	        }
	        return value;
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype.observeComponent = function (value) {
	        var _this = this;
	        if (observable_facade_1.isObservable(value)) {
	            this._createArrayToStoreObservables();
	            var index = this.numberOfPropertyProtoRecords + 1;
	            this.streams[index] = value.changes;
	            this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	        }
	        return value;
	    };
	    AbstractChangeDetector.prototype._createArrayToStoreObservables = function () {
	        if (lang_1.isBlank(this.subscriptions)) {
	            this.subscriptions = collection_1.ListWrapper.createFixedSize(this.numberOfPropertyProtoRecords +
	                this.directiveIndices.length + 2);
	            this.streams = collection_1.ListWrapper.createFixedSize(this.numberOfPropertyProtoRecords +
	                this.directiveIndices.length + 2);
	        }
	    };
	    AbstractChangeDetector.prototype.getDirectiveFor = function (directives, index) {
	        return directives.getDirectiveFor(this.directiveIndices[index]);
	    };
	    AbstractChangeDetector.prototype.getDetectorFor = function (directives, index) {
	        return directives.getDetectorFor(this.directiveIndices[index]);
	    };
	    AbstractChangeDetector.prototype.notifyDispatcher = function (value) {
	        this.dispatcher.notifyOnBinding(this._currentBinding(), value);
	    };
	    AbstractChangeDetector.prototype.logBindingUpdate = function (value) {
	        this.dispatcher.logBindingUpdate(this._currentBinding(), value);
	    };
	    AbstractChangeDetector.prototype.addChange = function (changes, oldValue, newValue) {
	        if (lang_1.isBlank(changes)) {
	            changes = {};
	        }
	        changes[this._currentBinding().name] = change_detection_util_1.ChangeDetectionUtil.simpleChange(oldValue, newValue);
	        return changes;
	    };
	    AbstractChangeDetector.prototype._throwError = function (exception, stack) {
	        var error;
	        try {
	            var c = this.dispatcher.getDebugContext(null, this._currentBinding().elementIndex, null);
	            var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector, this._currentBinding().debug) :
	                null;
	            error = new exceptions_1.ChangeDetectionError(this._currentBinding().debug, exception, stack, context);
	        }
	        catch (e) {
	            // if an error happens during getting the debug context, we throw a ChangeDetectionError
	            // without the extra information.
	            error = new exceptions_1.ChangeDetectionError(null, exception, stack, null);
	        }
	        throw error;
	    };
	    AbstractChangeDetector.prototype.throwOnChangeError = function (oldValue, newValue) {
	        throw new exceptions_1.ExpressionChangedAfterItHasBeenCheckedException(this._currentBinding().debug, oldValue, newValue, null);
	    };
	    AbstractChangeDetector.prototype.throwDehydratedError = function (detail) { throw new exceptions_1.DehydratedException(detail); };
	    AbstractChangeDetector.prototype._currentBinding = function () {
	        return this.bindingTargets[this.propertyBindingIndex];
	    };
	    return AbstractChangeDetector;
	})();
	exports.AbstractChangeDetector = AbstractChangeDetector;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var constants_1 = __webpack_require__(41);
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef() {
	    }
	    return ChangeDetectorRef;
	})();
	exports.ChangeDetectorRef = ChangeDetectorRef;
	var ChangeDetectorRef_ = (function (_super) {
	    __extends(ChangeDetectorRef_, _super);
	    function ChangeDetectorRef_(_cd) {
	        _super.call(this);
	        this._cd = _cd;
	    }
	    ChangeDetectorRef_.prototype.markForCheck = function () { this._cd.markPathToRootAsCheckOnce(); };
	    ChangeDetectorRef_.prototype.detach = function () { this._cd.mode = constants_1.ChangeDetectionStrategy.Detached; };
	    ChangeDetectorRef_.prototype.detectChanges = function () { this._cd.detectChanges(); };
	    ChangeDetectorRef_.prototype.checkNoChanges = function () { this._cd.checkNoChanges(); };
	    ChangeDetectorRef_.prototype.reattach = function () {
	        this._cd.mode = constants_1.ChangeDetectionStrategy.CheckAlways;
	        this.markForCheck();
	    };
	    return ChangeDetectorRef_;
	})(ChangeDetectorRef);
	exports.ChangeDetectorRef_ = ChangeDetectorRef_;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var impl = __webpack_require__(51);
	// Change exports to const once https://github.com/angular/ts2dart/issues/150
	/**
	 * True if WTF is enabled.
	 */
	exports.wtfEnabled = impl.detectWTF();
	function noopScope(arg0, arg1) {
	    return null;
	}
	/**
	 * Create trace scope.
	 *
	 * Scopes must be strictly nested and are analogous to stack frames, but
	 * do not have to follow the stack frames. Instead it is recommended that they follow logical
	 * nesting. You may want to use
	 * [Event
	 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	 * as they are defined in WTF.
	 *
	 * Used to mark scope entry. The return value is used to leave the scope.
	 *
	 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	 *
	 *     someMethod() {
	 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	 *        // DO SOME WORK HERE
	 *        return wtfLeave(s, 123); // Return value 123
	 *     }
	 *
	 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	 * negatively impact the performance of your application. For this reason we recommend that
	 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	 * exception, will produce incorrect trace, but presence of exception signifies logic error which
	 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	 * an exception is expected during normal execution while profiling.
	 *
	 */
	exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function (signature, flags) { return noopScope; };
	/**
	 * Used to mark end of Scope.
	 *
	 * - `scope` to end.
	 * - `returnValue` (optional) to be passed to the WTF.
	 *
	 * Returns the `returnValue for easy chaining.
	 */
	exports.wtfLeave = exports.wtfEnabled ? impl.leave : function (s, r) { return r; };
	/**
	 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	 * enabled.
	 *
	 *     someMethod() {
	 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	 *        var future = new Future.delay(5).then((_) {
	 *          wtfEndTimeRange(s);
	 *        });
	 *     }
	 */
	exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function (rangeType, action) { return null; };
	/**
	 * Ends a async time range operation.
	 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	 * enabled.
	 */
	exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function (r) {
	    return null;
	};


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var trace;
	var events;
	function detectWTF() {
	    var wtf = lang_1.global['wtf'];
	    if (wtf) {
	        trace = wtf['trace'];
	        if (trace) {
	            events = trace['events'];
	            return true;
	        }
	    }
	    return false;
	}
	exports.detectWTF = detectWTF;
	function createScope(signature, flags) {
	    if (flags === void 0) { flags = null; }
	    return events.createScope(signature, flags);
	}
	exports.createScope = createScope;
	function leave(scope, returnValue) {
	    trace.leaveScope(scope, returnValue);
	    return returnValue;
	}
	exports.leave = leave;
	function startTimeRange(rangeType, action) {
	    return trace.beginTimeRange(rangeType, action);
	}
	exports.startTimeRange = startTimeRange;
	function endTimeRange(range) {
	    trace.endTimeRange(range);
	}
	exports.endTimeRange = endTimeRange;


/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';function isObservable(value) {
	    return false;
	}
	exports.isObservable = isObservable;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var promise_1 = __webpack_require__(54);
	exports.PromiseWrapper = promise_1.PromiseWrapper;
	exports.Promise = promise_1.Promise;
	var Subject_1 = __webpack_require__(55);
	var fromPromise_1 = __webpack_require__(67);
	var toPromise_1 = __webpack_require__(72);
	var Observable_1 = __webpack_require__(56);
	exports.Observable = Observable_1.Observable;
	var Subject_2 = __webpack_require__(55);
	exports.Subject = Subject_2.Subject;
	var TimerWrapper = (function () {
	    function TimerWrapper() {
	    }
	    TimerWrapper.setTimeout = function (fn, millis) {
	        return lang_1.global.setTimeout(fn, millis);
	    };
	    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
	    TimerWrapper.setInterval = function (fn, millis) {
	        return lang_1.global.setInterval(fn, millis);
	    };
	    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
	    return TimerWrapper;
	})();
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {
	    }
	    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
	    ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {
	        if (onComplete === void 0) { onComplete = function () { }; }
	        onError = (typeof onError === "function") && onError || lang_1.noop;
	        onComplete = (typeof onComplete === "function") && onComplete || lang_1.noop;
	        return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });
	    };
	    ObservableWrapper.isObservable = function (obs) { return !!obs.subscribe; };
	    /**
	     * Returns whether `obs` has any subscribers listening to events.
	     */
	    ObservableWrapper.hasSubscribers = function (obs) { return obs.observers.length > 0; };
	    ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };
	    /**
	     * @deprecated - use callEmit() instead
	     */
	    ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };
	    ObservableWrapper.callEmit = function (emitter, value) { emitter.emit(value); };
	    ObservableWrapper.callError = function (emitter, error) { emitter.error(error); };
	    ObservableWrapper.callComplete = function (emitter) { emitter.complete(); };
	    ObservableWrapper.fromPromise = function (promise) {
	        return fromPromise_1.PromiseObservable.create(promise);
	    };
	    ObservableWrapper.toPromise = function (obj) { return toPromise_1.toPromise.call(obj); };
	    return ObservableWrapper;
	})();
	exports.ObservableWrapper = ObservableWrapper;
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * @Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   @Output() open: EventEmitter<any> = new EventEmitter();
	 *   @Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * Use Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = true; }
	        _super.call(this);
	        this._isAsync = isAsync;
	    }
	    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	    /**
	     * @deprecated - use .emit(value) instead
	     */
	    EventEmitter.prototype.next = function (value) { _super.prototype.next.call(this, value); };
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var schedulerFn;
	        var errorFn = function (err) { return null; };
	        var completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext.next(value); }); } :
	                function (value) { generatorOrNext.next(value); };
	            if (generatorOrNext.error) {
	                errorFn = this._isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                    function (err) { generatorOrNext.error(err); };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this._isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                    function () { generatorOrNext.complete(); };
	            }
	        }
	        else {
	            schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                function (value) { generatorOrNext(value); };
	            if (error) {
	                errorFn =
	                    this._isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	            }
	            if (complete) {
	                completeFn =
	                    this._isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	            }
	        }
	        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	    };
	    return EventEmitter;
	})(Subject_1.Subject);
	exports.EventEmitter = EventEmitter;


/***/ },
/* 54 */
/***/ function(module, exports) {

	'use strict';// Promises are put into their own facade file so that they can be used without
	// introducing a dependency on rxjs. They are re-exported through facade/async.
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {
	    }
	    PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };
	    PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise.catch(onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0)
	            return Promise.resolve([]);
	        return Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.wrap = function (computation) {
	        return new Promise(function (res, rej) {
	            try {
	                res(computation());
	            }
	            catch (e) {
	                rej(e);
	            }
	        });
	    };
	    PromiseWrapper.scheduleMicrotask = function (computation) {
	        PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) { });
	    };
	    PromiseWrapper.isPromise = function (obj) { return obj instanceof Promise; };
	    PromiseWrapper.completer = function () {
	        var resolve;
	        var reject;
	        var p = new Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        return { promise: p, resolve: resolve, reject: reject };
	    };
	    return PromiseWrapper;
	})();
	exports.PromiseWrapper = PromiseWrapper;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(56);
	var Subscriber_1 = __webpack_require__(57);
	var Subscription_1 = __webpack_require__(61);
	var SubjectSubscription_1 = __webpack_require__(66);
	var rxSubscriber_1 = __webpack_require__(62);
	var subscriptionAdd = Subscription_1.Subscription.prototype.add;
	var subscriptionRemove = Subscription_1.Subscription.prototype.remove;
	var subscriptionUnsubscribe = Subscription_1.Subscription.prototype.unsubscribe;
	var subscriberNext = Subscriber_1.Subscriber.prototype.next;
	var subscriberError = Subscriber_1.Subscriber.prototype.error;
	var subscriberComplete = Subscriber_1.Subscriber.prototype.complete;
	var _subscriberNext = Subscriber_1.Subscriber.prototype._next;
	var _subscriberError = Subscriber_1.Subscriber.prototype._error;
	var _subscriberComplete = Subscriber_1.Subscriber.prototype._complete;
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.apply(this, arguments);
	        this.observers = [];
	        this.isUnsubscribed = false;
	        this.dispatching = false;
	        this.errorSignal = false;
	        this.completeSignal = false;
	    }
	    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
	        return this;
	    };
	    Subject.create = function (source, destination) {
	        return new BidirectionalSubject(source, destination);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new BidirectionalSubject(this, this.destination || this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        else if (this.errorSignal) {
	            subscriber.error(this.errorInstance);
	            return;
	        }
	        else if (this.completeSignal) {
	            subscriber.complete();
	            return;
	        }
	        else if (this.isUnsubscribed) {
	            throw new Error('Cannot subscribe to a disposed Subject.');
	        }
	        this.observers.push(subscriber);
	        return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	    };
	    Subject.prototype.add = function (subscription) {
	        subscriptionAdd.call(this, subscription);
	    };
	    Subject.prototype.remove = function (subscription) {
	        subscriptionRemove.call(this, subscription);
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.observers = void 0;
	        subscriptionUnsubscribe.call(this);
	    };
	    Subject.prototype.next = function (value) {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.dispatching = true;
	        this._next(value);
	        this.dispatching = false;
	        if (this.errorSignal) {
	            this.error(this.errorInstance);
	        }
	        else if (this.completeSignal) {
	            this.complete();
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.isUnsubscribed || this.completeSignal) {
	            return;
	        }
	        this.errorSignal = true;
	        this.errorInstance = err;
	        if (this.dispatching) {
	            return;
	        }
	        this._error(err);
	        this.unsubscribe();
	    };
	    Subject.prototype.complete = function () {
	        if (this.isUnsubscribed || this.errorSignal) {
	            return;
	        }
	        this.completeSignal = true;
	        if (this.dispatching) {
	            return;
	        }
	        this._complete();
	        this.unsubscribe();
	    };
	    Subject.prototype._next = function (value) {
	        var index = -1;
	        var observers = this.observers.slice(0);
	        var len = observers.length;
	        while (++index < len) {
	            observers[index].next(value);
	        }
	    };
	    Subject.prototype._error = function (err) {
	        var index = -1;
	        var observers = this.observers;
	        var len = observers.length;
	        // optimization -- block next, complete, and unsubscribe while dispatching
	        this.observers = void 0;
	        this.isUnsubscribed = true;
	        while (++index < len) {
	            observers[index].error(err);
	        }
	        this.isUnsubscribed = false;
	    };
	    Subject.prototype._complete = function () {
	        var index = -1;
	        var observers = this.observers;
	        var len = observers.length;
	        // optimization -- block next, complete, and unsubscribe while dispatching
	        this.observers = void 0; // optimization
	        this.isUnsubscribed = true;
	        while (++index < len) {
	            observers[index].complete();
	        }
	        this.isUnsubscribed = false;
	    };
	    return Subject;
	})(Observable_1.Observable);
	exports.Subject = Subject;
	var BidirectionalSubject = (function (_super) {
	    __extends(BidirectionalSubject, _super);
	    function BidirectionalSubject(source, destination) {
	        _super.call(this);
	        this.source = source;
	        this.destination = destination;
	    }
	    BidirectionalSubject.prototype._subscribe = function (subscriber) {
	        var operator = this.operator;
	        return this.source._subscribe.call(this.source, operator ? operator.call(subscriber) : subscriber);
	    };
	    BidirectionalSubject.prototype.next = function (value) {
	        subscriberNext.call(this, value);
	    };
	    BidirectionalSubject.prototype.error = function (err) {
	        subscriberError.call(this, err);
	    };
	    BidirectionalSubject.prototype.complete = function () {
	        subscriberComplete.call(this);
	    };
	    BidirectionalSubject.prototype._next = function (value) {
	        _subscriberNext.call(this, value);
	    };
	    BidirectionalSubject.prototype._error = function (err) {
	        _subscriberError.call(this, err);
	    };
	    BidirectionalSubject.prototype._complete = function () {
	        _subscriberComplete.call(this);
	    };
	    return BidirectionalSubject;
	})(Subject);
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var Subscriber_1 = __webpack_require__(57);
	var root_1 = __webpack_require__(64);
	var SymbolShim_1 = __webpack_require__(63);
	var rxSubscriber_1 = __webpack_require__(62);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is
	     * called when the Observable is initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or `complete` can be called to notify
	     * of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @returns {Observable} a new observable with the Operator applied
	     * @description creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    /**
	     * @method Symbol.observable
	     * @returns {Observable} this instance of the observable
	     * @description an interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     */
	    Observable.prototype[SymbolShim_1.SymbolShim.observable] = function () {
	        return this;
	    };
	    /**
	     * @method subscribe
	     * @param {Observer|Function} observerOrNext (optional) either an observer defining all functions to be called,
	     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
	     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
	     *  the error will be thrown as unhandled
	     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
	     * @returns {Subscription} a subscription reference to the registered handlers
	     * @description registers handlers for handling emitted values, error and completions from the observable, and
	     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
	     */
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var subscriber;
	        if (observerOrNext && typeof observerOrNext === 'object') {
	            if (observerOrNext instanceof Subscriber_1.Subscriber) {
	                subscriber = observerOrNext;
	            }
	            else if (observerOrNext[rxSubscriber_1.rxSubscriber]) {
	                subscriber = observerOrNext[rxSubscriber_1.rxSubscriber]();
	            }
	            else {
	                subscriber = new Subscriber_1.Subscriber(observerOrNext);
	            }
	        }
	        else {
	            var next = observerOrNext;
	            subscriber = Subscriber_1.Subscriber.create(next, error, complete);
	        }
	        subscriber.add(this._subscribe(subscriber));
	        return subscriber;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {any} [thisArg] a `this` context for the `next` handler function
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @returns {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, thisArg, PromiseCtor) {
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        var nextHandler;
	        if (thisArg) {
	            nextHandler = function nextHandlerFn(value) {
	                var _a = nextHandlerFn, thisArg = _a.thisArg, next = _a.next;
	                return next.call(thisArg, value);
	            };
	            nextHandler.thisArg = thisArg;
	            nextHandler.next = next;
	        }
	        else {
	            nextHandler = next;
	        }
	        var promiseCallback = function promiseCallbackFn(resolve, reject) {
	            var _a = promiseCallbackFn, source = _a.source, nextHandler = _a.nextHandler;
	            source.subscribe(nextHandler, reject, resolve);
	        };
	        promiseCallback.source = this;
	        promiseCallback.nextHandler = nextHandler;
	        return new PromiseCtor(promiseCallback);
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source._subscribe(this.operator.call(subscriber));
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * @static
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @returns {Observable} a new cold observable
	     * @description creates a new cold Observable by calling the Observable constructor
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	})();
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var noop_1 = __webpack_require__(58);
	var throwError_1 = __webpack_require__(59);
	var tryOrOnError_1 = __webpack_require__(60);
	var Subscription_1 = __webpack_require__(61);
	var rxSubscriber_1 = __webpack_require__(62);
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    function Subscriber(destination) {
	        _super.call(this);
	        this.destination = destination;
	        this._isUnsubscribed = false;
	        if (!this.destination) {
	            return;
	        }
	        var subscription = destination._subscription;
	        if (subscription) {
	            this._subscription = subscription;
	        }
	        else if (destination instanceof Subscriber) {
	            this._subscription = destination;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {
	        return this;
	    };
	    Object.defineProperty(Subscriber.prototype, "isUnsubscribed", {
	        get: function () {
	            var subscription = this._subscription;
	            if (subscription) {
	                // route to the shared Subscription if it exists
	                return this._isUnsubscribed || subscription.isUnsubscribed;
	            }
	            else {
	                return this._isUnsubscribed;
	            }
	        },
	        set: function (value) {
	            var subscription = this._subscription;
	            if (subscription) {
	                // route to the shared Subscription if it exists
	                subscription.isUnsubscribed = Boolean(value);
	            }
	            else {
	                this._isUnsubscribed = Boolean(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber();
	        subscriber._next = (typeof next === 'function') && tryOrOnError_1.tryOrOnError(next) || noop_1.noop;
	        subscriber._error = (typeof error === 'function') && error || throwError_1.throwError;
	        subscriber._complete = (typeof complete === 'function') && complete || noop_1.noop;
	        return subscriber;
	    };
	    Subscriber.prototype.add = function (sub) {
	        // route add to the shared Subscription if it exists
	        var _subscription = this._subscription;
	        if (_subscription) {
	            _subscription.add(sub);
	        }
	        else {
	            _super.prototype.add.call(this, sub);
	        }
	    };
	    Subscriber.prototype.remove = function (sub) {
	        // route remove to the shared Subscription if it exists
	        if (this._subscription) {
	            this._subscription.remove(sub);
	        }
	        else {
	            _super.prototype.remove.call(this, sub);
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this._isUnsubscribed) {
	            return;
	        }
	        else if (this._subscription) {
	            this._isUnsubscribed = true;
	        }
	        else {
	            _super.prototype.unsubscribe.call(this);
	        }
	    };
	    Subscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (destination.next) {
	            destination.next(value);
	        }
	    };
	    Subscriber.prototype._error = function (err) {
	        var destination = this.destination;
	        if (destination.error) {
	            destination.error(err);
	        }
	    };
	    Subscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (destination.complete) {
	            destination.complete();
	        }
	    };
	    Subscriber.prototype.next = function (value) {
	        if (!this.isUnsubscribed) {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (!this.isUnsubscribed) {
	            this._error(err);
	            this.unsubscribe();
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (!this.isUnsubscribed) {
	            this._complete();
	            this.unsubscribe();
	        }
	    };
	    return Subscriber;
	})(Subscription_1.Subscription);
	exports.Subscriber = Subscriber;
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 58 */
/***/ function(module, exports) {

	/* tslint:disable:no-empty */
	function noop() { }
	exports.noop = noop;
	//# sourceMappingURL=noop.js.map

/***/ },
/* 59 */
/***/ function(module, exports) {

	function throwError(e) { throw e; }
	exports.throwError = throwError;
	//# sourceMappingURL=throwError.js.map

/***/ },
/* 60 */
/***/ function(module, exports) {

	function tryOrOnError(target) {
	    function tryCatcher() {
	        try {
	            tryCatcher.target.apply(this, arguments);
	        }
	        catch (e) {
	            this.error(e);
	        }
	    }
	    tryCatcher.target = target;
	    return tryCatcher;
	}
	exports.tryOrOnError = tryOrOnError;
	//# sourceMappingURL=tryOrOnError.js.map

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var noop_1 = __webpack_require__(58);
	var Subscription = (function () {
	    function Subscription(_unsubscribe) {
	        this.isUnsubscribed = false;
	        if (_unsubscribe) {
	            this._unsubscribe = _unsubscribe;
	        }
	    }
	    Subscription.prototype._unsubscribe = function () {
	        noop_1.noop();
	    };
	    Subscription.prototype.unsubscribe = function () {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isUnsubscribed = true;
	        var unsubscribe = this._unsubscribe;
	        var subscriptions = this._subscriptions;
	        this._subscriptions = void 0;
	        if (unsubscribe) {
	            unsubscribe.call(this);
	        }
	        if (subscriptions != null) {
	            var index = -1;
	            var len = subscriptions.length;
	            while (++index < len) {
	                subscriptions[index].unsubscribe();
	            }
	        }
	    };
	    Subscription.prototype.add = function (subscription) {
	        // return early if:
	        //  1. the subscription is null
	        //  2. we're attempting to add our this
	        //  3. we're attempting to add the static `empty` Subscription
	        if (!subscription || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var sub = subscription;
	        switch (typeof subscription) {
	            case 'function':
	                sub = new Subscription(subscription);
	            case 'object':
	                if (sub.isUnsubscribed || typeof sub.unsubscribe !== 'function') {
	                    break;
	                }
	                else if (this.isUnsubscribed) {
	                    sub.unsubscribe();
	                }
	                else {
	                    var subscriptions = this._subscriptions || (this._subscriptions = []);
	                    subscriptions.push(sub);
	                }
	                break;
	            default:
	                throw new Error('Unrecognized subscription ' + subscription + ' added to Subscription.');
	        }
	    };
	    Subscription.prototype.remove = function (subscription) {
	        // return early if:
	        //  1. the subscription is null
	        //  2. we're attempting to remove ourthis
	        //  3. we're attempting to remove the static `empty` Subscription
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.isUnsubscribed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	})();
	exports.Subscription = Subscription;
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var SymbolShim_1 = __webpack_require__(63);
	/**
	 * rxSubscriber symbol is a symbol for retreiving an "Rx safe" Observer from an object
	 * "Rx safety" can be defined as an object that has all of the traits of an Rx Subscriber,
	 * including the ability to add and remove subscriptions to the subscription chain and
	 * guarantees involving event triggering (can't "next" after unsubscription, etc).
	 */
	exports.rxSubscriber = SymbolShim_1.SymbolShim.for('rxSubscriber');
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var root_1 = __webpack_require__(64);
	function polyfillSymbol(root) {
	    var Symbol = ensureSymbol(root);
	    ensureIterator(Symbol, root);
	    ensureObservable(Symbol);
	    ensureFor(Symbol);
	    return Symbol;
	}
	exports.polyfillSymbol = polyfillSymbol;
	function ensureFor(Symbol) {
	    if (!Symbol.for) {
	        Symbol.for = symbolForPolyfill;
	    }
	}
	exports.ensureFor = ensureFor;
	var id = 0;
	function ensureSymbol(root) {
	    if (!root.Symbol) {
	        root.Symbol = function symbolFuncPolyfill(description) {
	            return "@@Symbol(" + description + "):" + id++;
	        };
	    }
	    return root.Symbol;
	}
	exports.ensureSymbol = ensureSymbol;
	function symbolForPolyfill(key) {
	    return '@@' + key;
	}
	exports.symbolForPolyfill = symbolForPolyfill;
	function ensureIterator(Symbol, root) {
	    if (!Symbol.iterator) {
	        if (typeof Symbol.for === 'function') {
	            Symbol.iterator = Symbol.for('iterator');
	        }
	        else if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	            // Bug for mozilla version
	            Symbol.iterator = '@@iterator';
	        }
	        else if (root.Map) {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(root.Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {
	                    Symbol.iterator = key;
	                    break;
	                }
	            }
	        }
	        else {
	            Symbol.iterator = '@@iterator';
	        }
	    }
	}
	exports.ensureIterator = ensureIterator;
	function ensureObservable(Symbol) {
	    if (!Symbol.observable) {
	        if (typeof Symbol.for === 'function') {
	            Symbol.observable = Symbol.for('observable');
	        }
	        else {
	            Symbol.observable = '@@observable';
	        }
	    }
	}
	exports.ensureObservable = ensureObservable;
	exports.SymbolShim = polyfillSymbol(root_1.root);
	//# sourceMappingURL=SymbolShim.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	};
	exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
	/* tslint:disable:no-unused-variable */
	var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	var freeGlobal = objectTypes[typeof global] && global;
	if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    exports.root = freeGlobal;
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(65)(module), (function() { return this; }())))

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(61);
	var Subscriber_1 = __webpack_require__(57);
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, observer) {
	        _super.call(this);
	        this.subject = subject;
	        this.observer = observer;
	        this.isUnsubscribed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isUnsubscribed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = void 0;
	        if (!observers || observers.length === 0 || subject.isUnsubscribed) {
	            return;
	        }
	        if (this.observer instanceof Subscriber_1.Subscriber) {
	            this.observer.unsubscribe();
	        }
	        var subscriberIndex = observers.indexOf(this.observer);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	})(Subscription_1.Subscription);
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(56);
	var Subscription_1 = __webpack_require__(61);
	var queue_1 = __webpack_require__(68);
	var PromiseObservable = (function (_super) {
	    __extends(PromiseObservable, _super);
	    function PromiseObservable(promise, scheduler) {
	        if (scheduler === void 0) { scheduler = queue_1.queue; }
	        _super.call(this);
	        this.promise = promise;
	        this.scheduler = scheduler;
	        this._isScalar = false;
	    }
	    PromiseObservable.create = function (promise, scheduler) {
	        if (scheduler === void 0) { scheduler = queue_1.queue; }
	        return new PromiseObservable(promise, scheduler);
	    };
	    PromiseObservable.prototype._subscribe = function (subscriber) {
	        var _this = this;
	        var scheduler = this.scheduler;
	        var promise = this.promise;
	        if (scheduler === queue_1.queue) {
	            if (this._isScalar) {
	                subscriber.next(this.value);
	                subscriber.complete();
	            }
	            else {
	                promise.then(function (value) {
	                    _this._isScalar = true;
	                    _this.value = value;
	                    subscriber.next(value);
	                    subscriber.complete();
	                }, function (err) { return subscriber.error(err); })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    setTimeout(function () { throw err; });
	                });
	            }
	        }
	        else {
	            var subscription = new Subscription_1.Subscription();
	            if (this._isScalar) {
	                var value = this.value;
	                subscription.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	            }
	            else {
	                promise.then(function (value) {
	                    _this._isScalar = true;
	                    _this.value = value;
	                    subscription.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	                }, function (err) { return subscription.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber })); })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    scheduler.schedule(function () { throw err; });
	                });
	            }
	            return subscription;
	        }
	    };
	    return PromiseObservable;
	})(Observable_1.Observable);
	exports.PromiseObservable = PromiseObservable;
	function dispatchNext(_a) {
	    var value = _a.value, subscriber = _a.subscriber;
	    subscriber.next(value);
	    subscriber.complete();
	}
	function dispatchError(_a) {
	    var err = _a.err, subscriber = _a.subscriber;
	    subscriber.error(err);
	}
	//# sourceMappingURL=fromPromise.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var QueueScheduler_1 = __webpack_require__(69);
	exports.queue = new QueueScheduler_1.QueueScheduler();
	//# sourceMappingURL=queue.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var QueueAction_1 = __webpack_require__(70);
	var FutureAction_1 = __webpack_require__(71);
	var QueueScheduler = (function () {
	    function QueueScheduler() {
	        this.actions = [];
	        this.active = false;
	        this.scheduled = false;
	    }
	    QueueScheduler.prototype.now = function () {
	        return Date.now();
	    };
	    QueueScheduler.prototype.flush = function () {
	        if (this.active || this.scheduled) {
	            return;
	        }
	        this.active = true;
	        var actions = this.actions;
	        for (var action = void 0; action = actions.shift();) {
	            action.execute();
	        }
	        this.active = false;
	    };
	    QueueScheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return (delay <= 0) ?
	            this.scheduleNow(work, state) :
	            this.scheduleLater(work, delay, state);
	    };
	    QueueScheduler.prototype.scheduleNow = function (work, state) {
	        return new QueueAction_1.QueueAction(this, work).schedule(state);
	    };
	    QueueScheduler.prototype.scheduleLater = function (work, delay, state) {
	        return new FutureAction_1.FutureAction(this, work).schedule(state, delay);
	    };
	    return QueueScheduler;
	})();
	exports.QueueScheduler = QueueScheduler;
	//# sourceMappingURL=QueueScheduler.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(61);
	var QueueAction = (function (_super) {
	    __extends(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        _super.call(this);
	        this.scheduler = scheduler;
	        this.work = work;
	    }
	    QueueAction.prototype.schedule = function (state) {
	        if (this.isUnsubscribed) {
	            return this;
	        }
	        this.state = state;
	        var scheduler = this.scheduler;
	        scheduler.actions.push(this);
	        scheduler.flush();
	        return this;
	    };
	    QueueAction.prototype.execute = function () {
	        if (this.isUnsubscribed) {
	            throw new Error('How did did we execute a canceled Action?');
	        }
	        this.work(this.state);
	    };
	    QueueAction.prototype.unsubscribe = function () {
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = void 0;
	        this.state = void 0;
	        this.scheduler = void 0;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        _super.prototype.unsubscribe.call(this);
	    };
	    return QueueAction;
	})(Subscription_1.Subscription);
	exports.QueueAction = QueueAction;
	//# sourceMappingURL=QueueAction.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var QueueAction_1 = __webpack_require__(70);
	var FutureAction = (function (_super) {
	    __extends(FutureAction, _super);
	    function FutureAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	    }
	    FutureAction.prototype.schedule = function (state, delay) {
	        var _this = this;
	        if (delay === void 0) { delay = 0; }
	        if (this.isUnsubscribed) {
	            return this;
	        }
	        this.delay = delay;
	        this.state = state;
	        var id = this.id;
	        if (id != null) {
	            this.id = undefined;
	            clearTimeout(id);
	        }
	        var scheduler = this.scheduler;
	        this.id = setTimeout(function () {
	            _this.id = void 0;
	            scheduler.actions.push(_this);
	            scheduler.flush();
	        }, this.delay);
	        return this;
	    };
	    FutureAction.prototype.unsubscribe = function () {
	        var id = this.id;
	        if (id != null) {
	            this.id = void 0;
	            clearTimeout(id);
	        }
	        _super.prototype.unsubscribe.call(this);
	    };
	    return FutureAction;
	})(QueueAction_1.QueueAction);
	exports.FutureAction = FutureAction;
	//# sourceMappingURL=FutureAction.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var root_1 = __webpack_require__(64);
	function toPromise(PromiseCtor) {
	    var _this = this;
	    if (!PromiseCtor) {
	        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	            PromiseCtor = root_1.root.Rx.config.Promise;
	        }
	        else if (root_1.root.Promise) {
	            PromiseCtor = root_1.root.Promise;
	        }
	    }
	    if (!PromiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return new PromiseCtor(function (resolve, reject) {
	        var value;
	        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	    });
	}
	exports.toPromise = toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 73 */
/***/ function(module, exports) {

	'use strict';(function (RecordType) {
	    RecordType[RecordType["Self"] = 0] = "Self";
	    RecordType[RecordType["Const"] = 1] = "Const";
	    RecordType[RecordType["PrimitiveOp"] = 2] = "PrimitiveOp";
	    RecordType[RecordType["PropertyRead"] = 3] = "PropertyRead";
	    RecordType[RecordType["PropertyWrite"] = 4] = "PropertyWrite";
	    RecordType[RecordType["Local"] = 5] = "Local";
	    RecordType[RecordType["InvokeMethod"] = 6] = "InvokeMethod";
	    RecordType[RecordType["InvokeClosure"] = 7] = "InvokeClosure";
	    RecordType[RecordType["KeyedRead"] = 8] = "KeyedRead";
	    RecordType[RecordType["KeyedWrite"] = 9] = "KeyedWrite";
	    RecordType[RecordType["Pipe"] = 10] = "Pipe";
	    RecordType[RecordType["Interpolate"] = 11] = "Interpolate";
	    RecordType[RecordType["SafeProperty"] = 12] = "SafeProperty";
	    RecordType[RecordType["CollectionLiteral"] = 13] = "CollectionLiteral";
	    RecordType[RecordType["SafeMethodInvoke"] = 14] = "SafeMethodInvoke";
	    RecordType[RecordType["DirectiveLifecycle"] = 15] = "DirectiveLifecycle";
	    RecordType[RecordType["Chain"] = 16] = "Chain";
	    RecordType[RecordType["SkipRecordsIf"] = 17] = "SkipRecordsIf";
	    RecordType[RecordType["SkipRecordsIfNot"] = 18] = "SkipRecordsIfNot";
	    RecordType[RecordType["SkipRecords"] = 19] = "SkipRecords"; // Skip records unconditionally
	})(exports.RecordType || (exports.RecordType = {}));
	var RecordType = exports.RecordType;
	var ProtoRecord = (function () {
	    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, lastInBinding, lastInDirective, argumentToPureFunction, referencedBySelf, propertyBindingIndex) {
	        this.mode = mode;
	        this.name = name;
	        this.funcOrValue = funcOrValue;
	        this.args = args;
	        this.fixedArgs = fixedArgs;
	        this.contextIndex = contextIndex;
	        this.directiveIndex = directiveIndex;
	        this.selfIndex = selfIndex;
	        this.bindingRecord = bindingRecord;
	        this.lastInBinding = lastInBinding;
	        this.lastInDirective = lastInDirective;
	        this.argumentToPureFunction = argumentToPureFunction;
	        this.referencedBySelf = referencedBySelf;
	        this.propertyBindingIndex = propertyBindingIndex;
	    }
	    ProtoRecord.prototype.isPureFunction = function () {
	        return this.mode === RecordType.Interpolate || this.mode === RecordType.CollectionLiteral;
	    };
	    ProtoRecord.prototype.isUsedByOtherRecord = function () { return !this.lastInBinding || this.referencedBySelf; };
	    ProtoRecord.prototype.shouldBeChecked = function () {
	        return this.argumentToPureFunction || this.lastInBinding || this.isPureFunction() ||
	            this.isPipeRecord();
	    };
	    ProtoRecord.prototype.isPipeRecord = function () { return this.mode === RecordType.Pipe; };
	    ProtoRecord.prototype.isConditionalSkipRecord = function () {
	        return this.mode === RecordType.SkipRecordsIfNot || this.mode === RecordType.SkipRecordsIf;
	    };
	    ProtoRecord.prototype.isUnconditionalSkipRecord = function () { return this.mode === RecordType.SkipRecords; };
	    ProtoRecord.prototype.isSkipRecord = function () {
	        return this.isConditionalSkipRecord() || this.isUnconditionalSkipRecord();
	    };
	    ProtoRecord.prototype.isLifeCycleRecord = function () { return this.mode === RecordType.DirectiveLifecycle; };
	    return ProtoRecord;
	})();
	exports.ProtoRecord = ProtoRecord;


/***/ },
/* 74 */
/***/ function(module, exports) {

	'use strict';var EventBinding = (function () {
	    function EventBinding(eventName, elIndex, dirIndex, records) {
	        this.eventName = eventName;
	        this.elIndex = elIndex;
	        this.dirIndex = dirIndex;
	        this.records = records;
	    }
	    return EventBinding;
	})();
	exports.EventBinding = EventBinding;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var proto_record_1 = __webpack_require__(73);
	/**
	 * Removes "duplicate" records. It assumes that record evaluation does not have side-effects.
	 *
	 * Records that are not last in bindings are removed and all the indices of the records that depend
	 * on them are updated.
	 *
	 * Records that are last in bindings CANNOT be removed, and instead are replaced with very cheap
	 * SELF records.
	 *
	 * @internal
	 */
	function coalesce(srcRecords) {
	    var dstRecords = [];
	    var excludedIdxs = [];
	    var indexMap = new collection_1.Map();
	    var skipDepth = 0;
	    var skipSources = collection_1.ListWrapper.createFixedSize(srcRecords.length);
	    for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
	        var skipRecord = skipSources[protoIndex];
	        if (lang_1.isPresent(skipRecord)) {
	            skipDepth--;
	            skipRecord.fixedArgs[0] = dstRecords.length;
	        }
	        var src = srcRecords[protoIndex];
	        var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
	        if (dst.isSkipRecord()) {
	            dstRecords.push(dst);
	            skipDepth++;
	            skipSources[dst.fixedArgs[0]] = dst;
	        }
	        else {
	            var record = _mayBeAddRecord(dst, dstRecords, excludedIdxs, skipDepth > 0);
	            indexMap.set(src.selfIndex, record.selfIndex);
	        }
	    }
	    return _optimizeSkips(dstRecords);
	}
	exports.coalesce = coalesce;
	/**
	 * - Conditional skip of 1 record followed by an unconditional skip of N are replaced by  a
	 *   conditional skip of N with the negated condition,
	 * - Skips of 0 records are removed
	 */
	function _optimizeSkips(srcRecords) {
	    var dstRecords = [];
	    var skipSources = collection_1.ListWrapper.createFixedSize(srcRecords.length);
	    var indexMap = new collection_1.Map();
	    for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
	        var skipRecord = skipSources[protoIndex];
	        if (lang_1.isPresent(skipRecord)) {
	            skipRecord.fixedArgs[0] = dstRecords.length;
	        }
	        var src = srcRecords[protoIndex];
	        if (src.isSkipRecord()) {
	            if (src.isConditionalSkipRecord() && src.fixedArgs[0] === protoIndex + 2 &&
	                protoIndex < srcRecords.length - 1 &&
	                srcRecords[protoIndex + 1].mode === proto_record_1.RecordType.SkipRecords) {
	                src.mode = src.mode === proto_record_1.RecordType.SkipRecordsIf ? proto_record_1.RecordType.SkipRecordsIfNot :
	                    proto_record_1.RecordType.SkipRecordsIf;
	                src.fixedArgs[0] = srcRecords[protoIndex + 1].fixedArgs[0];
	                protoIndex++;
	            }
	            if (src.fixedArgs[0] > protoIndex + 1) {
	                var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
	                dstRecords.push(dst);
	                skipSources[dst.fixedArgs[0]] = dst;
	            }
	        }
	        else {
	            var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
	            dstRecords.push(dst);
	            indexMap.set(src.selfIndex, dst.selfIndex);
	        }
	    }
	    return dstRecords;
	}
	/**
	 * Add a new record or re-use one of the existing records.
	 */
	function _mayBeAddRecord(record, dstRecords, excludedIdxs, excluded) {
	    var match = _findFirstMatch(record, dstRecords, excludedIdxs);
	    if (lang_1.isPresent(match)) {
	        if (record.lastInBinding) {
	            dstRecords.push(_createSelfRecord(record, match.selfIndex, dstRecords.length + 1));
	            match.referencedBySelf = true;
	        }
	        else {
	            if (record.argumentToPureFunction) {
	                match.argumentToPureFunction = true;
	            }
	        }
	        return match;
	    }
	    if (excluded) {
	        excludedIdxs.push(record.selfIndex);
	    }
	    dstRecords.push(record);
	    return record;
	}
	/**
	 * Returns the first `ProtoRecord` that matches the record.
	 */
	function _findFirstMatch(record, dstRecords, excludedIdxs) {
	    return dstRecords.find(
	    // TODO(vicb): optimize excludedIdxs.indexOf (sorted array)
	    function (rr) { return excludedIdxs.indexOf(rr.selfIndex) == -1 && rr.mode !== proto_record_1.RecordType.DirectiveLifecycle &&
	        _haveSameDirIndex(rr, record) && rr.mode === record.mode &&
	        lang_1.looseIdentical(rr.funcOrValue, record.funcOrValue) &&
	        rr.contextIndex === record.contextIndex && lang_1.looseIdentical(rr.name, record.name) &&
	        collection_1.ListWrapper.equals(rr.args, record.args); });
	}
	/**
	 * Clone the `ProtoRecord` and changes the indexes for the ones in the destination array for:
	 * - the arguments,
	 * - the context,
	 * - self
	 */
	function _cloneAndUpdateIndexes(record, dstRecords, indexMap) {
	    var args = record.args.map(function (src) { return _srcToDstSelfIndex(indexMap, src); });
	    var contextIndex = _srcToDstSelfIndex(indexMap, record.contextIndex);
	    var selfIndex = dstRecords.length + 1;
	    return new proto_record_1.ProtoRecord(record.mode, record.name, record.funcOrValue, args, record.fixedArgs, contextIndex, record.directiveIndex, selfIndex, record.bindingRecord, record.lastInBinding, record.lastInDirective, record.argumentToPureFunction, record.referencedBySelf, record.propertyBindingIndex);
	}
	/**
	 * Returns the index in the destination array corresponding to the index in the src array.
	 * When the element is not present in the destination array, return the source index.
	 */
	function _srcToDstSelfIndex(indexMap, srcIdx) {
	    var dstIdx = indexMap.get(srcIdx);
	    return lang_1.isPresent(dstIdx) ? dstIdx : srcIdx;
	}
	function _createSelfRecord(r, contextIndex, selfIndex) {
	    return new proto_record_1.ProtoRecord(proto_record_1.RecordType.Self, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.lastInBinding, r.lastInDirective, false, false, r.propertyBindingIndex);
	}
	function _haveSameDirIndex(a, b) {
	    var di1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
	    var ei1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
	    var di2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
	    var ei2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
	    return di1 === di2 && ei1 === ei2;
	}


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var change_detection_jit_generator_1 = __webpack_require__(77);
	var JitProtoChangeDetector = (function () {
	    function JitProtoChangeDetector(definition) {
	        this.definition = definition;
	        this._factory = this._createFactory(definition);
	    }
	    JitProtoChangeDetector.isSupported = function () { return true; };
	    JitProtoChangeDetector.prototype.instantiate = function () { return this._factory(); };
	    /** @internal */
	    JitProtoChangeDetector.prototype._createFactory = function (definition) {
	        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, 'util', 'AbstractChangeDetector', 'ChangeDetectorStatus')
	            .generate();
	    };
	    return JitProtoChangeDetector;
	})();
	exports.JitProtoChangeDetector = JitProtoChangeDetector;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var abstract_change_detector_1 = __webpack_require__(48);
	var change_detection_util_1 = __webpack_require__(43);
	var proto_record_1 = __webpack_require__(73);
	var codegen_name_util_1 = __webpack_require__(78);
	var codegen_logic_util_1 = __webpack_require__(79);
	var codegen_facade_1 = __webpack_require__(80);
	var constants_1 = __webpack_require__(41);
	var proto_change_detector_1 = __webpack_require__(42);
	/**
	 * The code generator takes a list of proto records and creates a function/class
	 * that "emulates" what the developer would write by hand to implement the same
	 * kind of behaviour.
	 *
	 * This code should be kept in sync with the Dart transformer's
	 * `angular2.transform.template_compiler.change_detector_codegen` library. If you make updates
	 * here, please make equivalent changes there.
	*/
	var IS_CHANGED_LOCAL = "isChanged";
	var CHANGES_LOCAL = "changes";
	var ChangeDetectorJITGenerator = (function () {
	    function ChangeDetectorJITGenerator(definition, changeDetectionUtilVarName, abstractChangeDetectorVarName, changeDetectorStateVarName) {
	        this.changeDetectionUtilVarName = changeDetectionUtilVarName;
	        this.abstractChangeDetectorVarName = abstractChangeDetectorVarName;
	        this.changeDetectorStateVarName = changeDetectorStateVarName;
	        var propertyBindingRecords = proto_change_detector_1.createPropertyRecords(definition);
	        var eventBindingRecords = proto_change_detector_1.createEventRecords(definition);
	        var propertyBindingTargets = definition.bindingRecords.map(function (b) { return b.target; });
	        this.id = definition.id;
	        this.changeDetectionStrategy = definition.strategy;
	        this.genConfig = definition.genConfig;
	        this.records = propertyBindingRecords;
	        this.propertyBindingTargets = propertyBindingTargets;
	        this.eventBindings = eventBindingRecords;
	        this.directiveRecords = definition.directiveRecords;
	        this._names = new codegen_name_util_1.CodegenNameUtil(this.records, this.eventBindings, this.directiveRecords, this.changeDetectionUtilVarName);
	        this._logic =
	            new codegen_logic_util_1.CodegenLogicUtil(this._names, this.changeDetectionUtilVarName, this.changeDetectorStateVarName, this.changeDetectionStrategy);
	        this.typeName = codegen_name_util_1.sanitizeName("ChangeDetector_" + this.id);
	    }
	    ChangeDetectorJITGenerator.prototype.generate = function () {
	        var factorySource = "\n      " + this.generateSource() + "\n      return function() {\n        return new " + this.typeName + "();\n      }\n    ";
	        return new Function(this.abstractChangeDetectorVarName, this.changeDetectionUtilVarName, this.changeDetectorStateVarName, factorySource)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, constants_1.ChangeDetectorState);
	    };
	    ChangeDetectorJITGenerator.prototype.generateSource = function () {
	        return "\n      var " + this.typeName + " = function " + this.typeName + "() {\n        " + this.abstractChangeDetectorVarName + ".call(\n            this, " + JSON.stringify(this.id) + ", " + this.records.length + ",\n            " + this.typeName + ".gen_propertyBindingTargets, " + this.typeName + ".gen_directiveIndices,\n            " + codegen_facade_1.codify(this.changeDetectionStrategy) + ");\n        this.dehydrateDirectives(false);\n      }\n\n      " + this.typeName + ".prototype = Object.create(" + this.abstractChangeDetectorVarName + ".prototype);\n\n      " + this.typeName + ".prototype.detectChangesInRecordsInternal = function(throwOnChange) {\n        " + this._names.genInitLocals() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        " + this._genAllRecords(this.records) + "\n      }\n\n      " + this._maybeGenHandleEventInternal() + "\n\n      " + this._maybeGenAfterContentLifecycleCallbacks() + "\n\n      " + this._maybeGenAfterViewLifecycleCallbacks() + "\n\n      " + this._maybeGenHydrateDirectives() + "\n\n      " + this._maybeGenDehydrateDirectives() + "\n\n      " + this._genPropertyBindingTargets() + "\n\n      " + this._genDirectiveIndices() + "\n    ";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genPropertyBindingTargets = function () {
	        var targets = this._logic.genPropertyBindingTargets(this.propertyBindingTargets, this.genConfig.genDebugInfo);
	        return this.typeName + ".gen_propertyBindingTargets = " + targets + ";";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genDirectiveIndices = function () {
	        var indices = this._logic.genDirectiveIndices(this.directiveRecords);
	        return this.typeName + ".gen_directiveIndices = " + indices + ";";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenHandleEventInternal = function () {
	        var _this = this;
	        if (this.eventBindings.length > 0) {
	            var handlers = this.eventBindings.map(function (eb) { return _this._genEventBinding(eb); }).join("\n");
	            return "\n        " + this.typeName + ".prototype.handleEventInternal = function(eventName, elIndex, locals) {\n          var " + this._names.getPreventDefaultAccesor() + " = false;\n          " + this._names.genInitEventLocals() + "\n          " + handlers + "\n          return " + this._names.getPreventDefaultAccesor() + ";\n        }\n      ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genEventBinding = function (eb) {
	        var _this = this;
	        var codes = [];
	        this._endOfBlockIdxs = [];
	        collection_1.ListWrapper.forEachWithIndex(eb.records, function (r, i) {
	            var code;
	            if (r.isConditionalSkipRecord()) {
	                code = _this._genConditionalSkip(r, _this._names.getEventLocalName(eb, i));
	            }
	            else if (r.isUnconditionalSkipRecord()) {
	                code = _this._genUnconditionalSkip(r);
	            }
	            else {
	                code = _this._genEventBindingEval(eb, r);
	            }
	            code += _this._genEndOfSkipBlock(i);
	            codes.push(code);
	        });
	        return "\n    if (eventName === \"" + eb.eventName + "\" && elIndex === " + eb.elIndex + ") {\n      " + codes.join("\n") + "\n    }";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genEventBindingEval = function (eb, r) {
	        if (r.lastInBinding) {
	            var evalRecord = this._logic.genEventBindingEvalValue(eb, r);
	            var markPath = this._genMarkPathToRootAsCheckOnce(r);
	            var prevDefault = this._genUpdatePreventDefault(eb, r);
	            return evalRecord + "\n" + markPath + "\n" + prevDefault;
	        }
	        else {
	            return this._logic.genEventBindingEvalValue(eb, r);
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genMarkPathToRootAsCheckOnce = function (r) {
	        var br = r.bindingRecord;
	        if (br.isDefaultChangeDetection()) {
	            return "";
	        }
	        else {
	            return this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markPathToRootAsCheckOnce();";
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genUpdatePreventDefault = function (eb, r) {
	        var local = this._names.getEventLocalName(eb, r.selfIndex);
	        return "if (" + local + " === false) { " + this._names.getPreventDefaultAccesor() + " = true};";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenDehydrateDirectives = function () {
	        var destroyPipesCode = this._names.genPipeOnDestroy();
	        var destroyDirectivesCode = this._logic.genDirectivesOnDestroy(this.directiveRecords);
	        var dehydrateFieldsCode = this._names.genDehydrateFields();
	        if (!destroyPipesCode && !destroyDirectivesCode && !dehydrateFieldsCode)
	            return '';
	        return this.typeName + ".prototype.dehydrateDirectives = function(destroyPipes) {\n        if (destroyPipes) {\n          " + destroyPipesCode + "\n          " + destroyDirectivesCode + "\n        }\n        " + dehydrateFieldsCode + "\n    }";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenHydrateDirectives = function () {
	        var hydrateDirectivesCode = this._logic.genHydrateDirectives(this.directiveRecords);
	        var hydrateDetectorsCode = this._logic.genHydrateDetectors(this.directiveRecords);
	        if (!hydrateDirectivesCode && !hydrateDetectorsCode)
	            return '';
	        return this.typeName + ".prototype.hydrateDirectives = function(directives) {\n      " + hydrateDirectivesCode + "\n      " + hydrateDetectorsCode + "\n    }";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenAfterContentLifecycleCallbacks = function () {
	        var notifications = this._logic.genContentLifecycleCallbacks(this.directiveRecords);
	        if (notifications.length > 0) {
	            var directiveNotifications = notifications.join("\n");
	            return "\n        " + this.typeName + ".prototype.afterContentLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenAfterViewLifecycleCallbacks = function () {
	        var notifications = this._logic.genViewLifecycleCallbacks(this.directiveRecords);
	        if (notifications.length > 0) {
	            var directiveNotifications = notifications.join("\n");
	            return "\n        " + this.typeName + ".prototype.afterViewLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genAllRecords = function (rs) {
	        var codes = [];
	        this._endOfBlockIdxs = [];
	        for (var i = 0; i < rs.length; i++) {
	            var code = void 0;
	            var r = rs[i];
	            if (r.isLifeCycleRecord()) {
	                code = this._genDirectiveLifecycle(r);
	            }
	            else if (r.isPipeRecord()) {
	                code = this._genPipeCheck(r);
	            }
	            else if (r.isConditionalSkipRecord()) {
	                code = this._genConditionalSkip(r, this._names.getLocalName(r.contextIndex));
	            }
	            else if (r.isUnconditionalSkipRecord()) {
	                code = this._genUnconditionalSkip(r);
	            }
	            else {
	                code = this._genReferenceCheck(r);
	            }
	            code = "\n        " + this._maybeFirstInBinding(r) + "\n        " + code + "\n        " + this._maybeGenLastInDirective(r) + "\n        " + this._genEndOfSkipBlock(i) + "\n      ";
	            codes.push(code);
	        }
	        return codes.join("\n");
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genConditionalSkip = function (r, condition) {
	        var maybeNegate = r.mode === proto_record_1.RecordType.SkipRecordsIf ? '!' : '';
	        this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
	        return "if (" + maybeNegate + condition + ") {";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genUnconditionalSkip = function (r) {
	        this._endOfBlockIdxs.pop();
	        this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
	        return "} else {";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genEndOfSkipBlock = function (protoIndex) {
	        if (!collection_1.ListWrapper.isEmpty(this._endOfBlockIdxs)) {
	            var endOfBlock = collection_1.ListWrapper.last(this._endOfBlockIdxs);
	            if (protoIndex === endOfBlock) {
	                this._endOfBlockIdxs.pop();
	                return '}';
	            }
	        }
	        return '';
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function (r) {
	        if (r.name === "DoCheck") {
	            return this._genOnCheck(r);
	        }
	        else if (r.name === "OnInit") {
	            return this._genOnInit(r);
	        }
	        else if (r.name === "OnChanges") {
	            return this._genOnChange(r);
	        }
	        else {
	            throw new exceptions_1.BaseException("Unknown lifecycle event '" + r.name + "'");
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genPipeCheck = function (r) {
	        var _this = this;
	        var context = this._names.getLocalName(r.contextIndex);
	        var argString = r.args.map(function (arg) { return _this._names.getLocalName(arg); }).join(", ");
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var pipe = this._names.getPipeName(r.selfIndex);
	        var pipeName = r.name;
	        var init = "\n      if (" + pipe + " === " + this.changeDetectionUtilVarName + ".uninitialized) {\n        " + pipe + " = " + this._names.getPipesAccessorName() + ".get('" + pipeName + "');\n      }\n    ";
	        var read = newValue + " = " + pipe + ".pipe.transform(" + context + ", [" + argString + "]);";
	        var contexOrArgCheck = r.args.map(function (a) { return _this._names.getChangeName(a); });
	        contexOrArgCheck.push(this._names.getChangeName(r.contextIndex));
	        var condition = "!" + pipe + ".pure || (" + contexOrArgCheck.join(" || ") + ")";
	        var check = "\n      " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + newValue + " = " + this.changeDetectionUtilVarName + ".unwrapValue(" + newValue + ")\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
	        var genCode = r.shouldBeChecked() ? "" + read + check : read;
	        if (r.isUsedByOtherRecord()) {
	            return init + " if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
	        }
	        else {
	            return init + " if (" + condition + ") { " + genCode + " }";
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genReferenceCheck = function (r) {
	        var _this = this;
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var read = "\n      " + this._logic.genPropertyBindingEvalValue(r) + "\n    ";
	        var check = "\n      " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
	        var genCode = r.shouldBeChecked() ? "" + read + check : read;
	        if (r.isPureFunction()) {
	            var condition = r.args.map(function (a) { return _this._names.getChangeName(a); }).join(" || ");
	            if (r.isUsedByOtherRecord()) {
	                return "if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
	            }
	            else {
	                return "if (" + condition + ") { " + genCode + " }";
	            }
	        }
	        else {
	            return genCode;
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genChangeMarker = function (r) {
	        return r.argumentToPureFunction ? this._names.getChangeName(r.selfIndex) + " = true" : "";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function (r) {
	        if (!r.lastInBinding)
	            return "";
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var notifyDebug = this.genConfig.logBindingUpdate ? "this.logBindingUpdate(" + newValue + ");" : "";
	        var br = r.bindingRecord;
	        if (br.target.isDirective()) {
	            var directiveProperty = this._names.getDirectiveName(br.directiveRecord.directiveIndex) + "." + br.target.name;
	            return "\n        " + directiveProperty + " = " + newValue + ";\n        " + notifyDebug + "\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
	        }
	        else {
	            return "\n        this.notifyDispatcher(" + newValue + ");\n        " + notifyDebug + "\n      ";
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function (oldValue, newValue) {
	        if (lang_1.assertionsEnabled()) {
	            return "\n        if (throwOnChange && !" + this.changeDetectionUtilVarName + ".devModeEqual(" + oldValue + ", " + newValue + ")) {\n          this.throwOnChangeError(" + oldValue + ", " + newValue + ");\n        }\n        ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genAddToChanges = function (r) {
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        if (!r.bindingRecord.callOnChanges())
	            return "";
	        return CHANGES_LOCAL + " = this.addChange(" + CHANGES_LOCAL + ", " + oldValue + ", " + newValue + ");";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeFirstInBinding = function (r) {
	        var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.records, r.selfIndex - 1);
	        var firstInBinding = lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
	        return firstInBinding && !r.bindingRecord.isDirectiveLifecycle() ?
	            this._names.getPropertyBindingIndex() + " = " + r.propertyBindingIndex + ";" :
	            '';
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function (r) {
	        if (!r.lastInDirective)
	            return "";
	        return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genOnCheck = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngDoCheck();";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genOnInit = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange && " + this._names.getStateName() + " === " + this.changeDetectorStateVarName + ".NeverChecked) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngOnInit();";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genOnChange = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngOnChanges(" + CHANGES_LOCAL + ");";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function (r) {
	        var br = r.bindingRecord;
	        if (!r.lastInDirective || br.isDefaultChangeDetection())
	            return "";
	        var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
	        return retVal;
	    };
	    return ChangeDetectorJITGenerator;
	})();
	exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	// The names of these fields must be kept in sync with abstract_change_detector.ts or change
	// detection will fail.
	var _STATE_ACCESSOR = "state";
	var _CONTEXT_ACCESSOR = "context";
	var _PROP_BINDING_INDEX = "propertyBindingIndex";
	var _DIRECTIVES_ACCESSOR = "directiveIndices";
	var _DISPATCHER_ACCESSOR = "dispatcher";
	var _LOCALS_ACCESSOR = "locals";
	var _MODE_ACCESSOR = "mode";
	var _PIPES_ACCESSOR = "pipes";
	var _PROTOS_ACCESSOR = "protos";
	exports.CONTEXT_ACCESSOR = "context";
	// `context` is always first.
	exports.CONTEXT_INDEX = 0;
	var _FIELD_PREFIX = 'this.';
	var _whiteSpaceRegExp = /\W/g;
	/**
	 * Returns `s` with all non-identifier characters removed.
	 */
	function sanitizeName(s) {
	    return lang_1.StringWrapper.replaceAll(s, _whiteSpaceRegExp, '');
	}
	exports.sanitizeName = sanitizeName;
	/**
	 * Class responsible for providing field and local variable names for change detector classes.
	 * Also provides some convenience functions, for example, declaring variables, destroying pipes,
	 * and dehydrating the detector.
	 */
	var CodegenNameUtil = (function () {
	    function CodegenNameUtil(_records, _eventBindings, _directiveRecords, _utilName) {
	        this._records = _records;
	        this._eventBindings = _eventBindings;
	        this._directiveRecords = _directiveRecords;
	        this._utilName = _utilName;
	        /** @internal */
	        this._sanitizedEventNames = new collection_1.Map();
	        this._sanitizedNames = collection_1.ListWrapper.createFixedSize(this._records.length + 1);
	        this._sanitizedNames[exports.CONTEXT_INDEX] = exports.CONTEXT_ACCESSOR;
	        for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
	            this._sanitizedNames[i + 1] = sanitizeName("" + this._records[i].name + i);
	        }
	        for (var ebIndex = 0; ebIndex < _eventBindings.length; ++ebIndex) {
	            var eb = _eventBindings[ebIndex];
	            var names = [exports.CONTEXT_ACCESSOR];
	            for (var i = 0, iLen = eb.records.length; i < iLen; ++i) {
	                names.push(sanitizeName("" + eb.records[i].name + i + "_" + ebIndex));
	            }
	            this._sanitizedEventNames.set(eb, names);
	        }
	    }
	    /** @internal */
	    CodegenNameUtil.prototype._addFieldPrefix = function (name) { return "" + _FIELD_PREFIX + name; };
	    CodegenNameUtil.prototype.getDispatcherName = function () { return this._addFieldPrefix(_DISPATCHER_ACCESSOR); };
	    CodegenNameUtil.prototype.getPipesAccessorName = function () { return this._addFieldPrefix(_PIPES_ACCESSOR); };
	    CodegenNameUtil.prototype.getProtosName = function () { return this._addFieldPrefix(_PROTOS_ACCESSOR); };
	    CodegenNameUtil.prototype.getDirectivesAccessorName = function () { return this._addFieldPrefix(_DIRECTIVES_ACCESSOR); };
	    CodegenNameUtil.prototype.getLocalsAccessorName = function () { return this._addFieldPrefix(_LOCALS_ACCESSOR); };
	    CodegenNameUtil.prototype.getStateName = function () { return this._addFieldPrefix(_STATE_ACCESSOR); };
	    CodegenNameUtil.prototype.getModeName = function () { return this._addFieldPrefix(_MODE_ACCESSOR); };
	    CodegenNameUtil.prototype.getPropertyBindingIndex = function () { return this._addFieldPrefix(_PROP_BINDING_INDEX); };
	    CodegenNameUtil.prototype.getLocalName = function (idx) { return "l_" + this._sanitizedNames[idx]; };
	    CodegenNameUtil.prototype.getEventLocalName = function (eb, idx) {
	        return "l_" + this._sanitizedEventNames.get(eb)[idx];
	    };
	    CodegenNameUtil.prototype.getChangeName = function (idx) { return "c_" + this._sanitizedNames[idx]; };
	    /**
	     * Generate a statement initializing local variables used when detecting changes.
	     */
	    CodegenNameUtil.prototype.genInitLocals = function () {
	        var declarations = [];
	        var assignments = [];
	        for (var i = 0, iLen = this.getFieldCount(); i < iLen; ++i) {
	            if (i == exports.CONTEXT_INDEX) {
	                declarations.push(this.getLocalName(i) + " = " + this.getFieldName(i));
	            }
	            else {
	                var rec = this._records[i - 1];
	                if (rec.argumentToPureFunction) {
	                    var changeName = this.getChangeName(i);
	                    declarations.push(this.getLocalName(i) + "," + changeName);
	                    assignments.push(changeName);
	                }
	                else {
	                    declarations.push("" + this.getLocalName(i));
	                }
	            }
	        }
	        var assignmentsCode = collection_1.ListWrapper.isEmpty(assignments) ? '' : assignments.join('=') + " = false;";
	        return "var " + declarations.join(',') + ";" + assignmentsCode;
	    };
	    /**
	     * Generate a statement initializing local variables for event handlers.
	     */
	    CodegenNameUtil.prototype.genInitEventLocals = function () {
	        var _this = this;
	        var res = [(this.getLocalName(exports.CONTEXT_INDEX) + " = " + this.getFieldName(exports.CONTEXT_INDEX))];
	        this._sanitizedEventNames.forEach(function (names, eb) {
	            for (var i = 0; i < names.length; ++i) {
	                if (i !== exports.CONTEXT_INDEX) {
	                    res.push("" + _this.getEventLocalName(eb, i));
	                }
	            }
	        });
	        return res.length > 1 ? "var " + res.join(',') + ";" : '';
	    };
	    CodegenNameUtil.prototype.getPreventDefaultAccesor = function () { return "preventDefault"; };
	    CodegenNameUtil.prototype.getFieldCount = function () { return this._sanitizedNames.length; };
	    CodegenNameUtil.prototype.getFieldName = function (idx) { return this._addFieldPrefix(this._sanitizedNames[idx]); };
	    CodegenNameUtil.prototype.getAllFieldNames = function () {
	        var fieldList = [];
	        for (var k = 0, kLen = this.getFieldCount(); k < kLen; ++k) {
	            if (k === 0 || this._records[k - 1].shouldBeChecked()) {
	                fieldList.push(this.getFieldName(k));
	            }
	        }
	        for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
	            var rec = this._records[i];
	            if (rec.isPipeRecord()) {
	                fieldList.push(this.getPipeName(rec.selfIndex));
	            }
	        }
	        for (var j = 0, jLen = this._directiveRecords.length; j < jLen; ++j) {
	            var dRec = this._directiveRecords[j];
	            fieldList.push(this.getDirectiveName(dRec.directiveIndex));
	            if (!dRec.isDefaultChangeDetection()) {
	                fieldList.push(this.getDetectorName(dRec.directiveIndex));
	            }
	        }
	        return fieldList;
	    };
	    /**
	     * Generates statements which clear all fields so that the change detector is dehydrated.
	     */
	    CodegenNameUtil.prototype.genDehydrateFields = function () {
	        var fields = this.getAllFieldNames();
	        collection_1.ListWrapper.removeAt(fields, exports.CONTEXT_INDEX);
	        if (collection_1.ListWrapper.isEmpty(fields))
	            return '';
	        // At least one assignment.
	        fields.push(this._utilName + ".uninitialized;");
	        return fields.join(' = ');
	    };
	    /**
	     * Generates statements destroying all pipe variables.
	     */
	    CodegenNameUtil.prototype.genPipeOnDestroy = function () {
	        var _this = this;
	        return this._records.filter(function (r) { return r.isPipeRecord(); })
	            .map(function (r) { return (_this._utilName + ".callPipeOnDestroy(" + _this.getPipeName(r.selfIndex) + ");"); })
	            .join('\n');
	    };
	    CodegenNameUtil.prototype.getPipeName = function (idx) {
	        return this._addFieldPrefix(this._sanitizedNames[idx] + "_pipe");
	    };
	    CodegenNameUtil.prototype.getDirectiveName = function (d) {
	        return this._addFieldPrefix("directive_" + d.name);
	    };
	    CodegenNameUtil.prototype.getDetectorName = function (d) { return this._addFieldPrefix("detector_" + d.name); };
	    return CodegenNameUtil;
	})();
	exports.CodegenNameUtil = CodegenNameUtil;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var codegen_facade_1 = __webpack_require__(80);
	var proto_record_1 = __webpack_require__(73);
	var constants_1 = __webpack_require__(41);
	var exceptions_1 = __webpack_require__(19);
	/**
	 * Class responsible for providing change detection logic for change detector classes.
	 */
	var CodegenLogicUtil = (function () {
	    function CodegenLogicUtil(_names, _utilName, _changeDetectorStateName, _changeDetection) {
	        this._names = _names;
	        this._utilName = _utilName;
	        this._changeDetectorStateName = _changeDetectorStateName;
	        this._changeDetection = _changeDetection;
	    }
	    /**
	     * Generates a statement which updates the local variable representing `protoRec` with the current
	     * value of the record. Used by property bindings.
	     */
	    CodegenLogicUtil.prototype.genPropertyBindingEvalValue = function (protoRec) {
	        var _this = this;
	        return this._genEvalValue(protoRec, function (idx) { return _this._names.getLocalName(idx); }, this._names.getLocalsAccessorName());
	    };
	    /**
	     * Generates a statement which updates the local variable representing `protoRec` with the current
	     * value of the record. Used by event bindings.
	     */
	    CodegenLogicUtil.prototype.genEventBindingEvalValue = function (eventRecord, protoRec) {
	        var _this = this;
	        return this._genEvalValue(protoRec, function (idx) { return _this._names.getEventLocalName(eventRecord, idx); }, "locals");
	    };
	    CodegenLogicUtil.prototype._genEvalValue = function (protoRec, getLocalName, localsAccessor) {
	        var context = (protoRec.contextIndex == -1) ?
	            this._names.getDirectiveName(protoRec.directiveIndex) :
	            getLocalName(protoRec.contextIndex);
	        var argString = protoRec.args.map(function (arg) { return getLocalName(arg); }).join(", ");
	        var rhs;
	        switch (protoRec.mode) {
	            case proto_record_1.RecordType.Self:
	                rhs = context;
	                break;
	            case proto_record_1.RecordType.Const:
	                rhs = codegen_facade_1.codify(protoRec.funcOrValue);
	                break;
	            case proto_record_1.RecordType.PropertyRead:
	                rhs = this._observe(context + "." + protoRec.name, protoRec);
	                break;
	            case proto_record_1.RecordType.SafeProperty:
	                var read = this._observe(context + "." + protoRec.name, protoRec);
	                rhs =
	                    this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(read, protoRec);
	                break;
	            case proto_record_1.RecordType.PropertyWrite:
	                rhs = context + "." + protoRec.name + " = " + getLocalName(protoRec.args[0]);
	                break;
	            case proto_record_1.RecordType.Local:
	                rhs = this._observe(localsAccessor + ".get(" + codegen_facade_1.rawString(protoRec.name) + ")", protoRec);
	                break;
	            case proto_record_1.RecordType.InvokeMethod:
	                rhs = this._observe(context + "." + protoRec.name + "(" + argString + ")", protoRec);
	                break;
	            case proto_record_1.RecordType.SafeMethodInvoke:
	                var invoke = context + "." + protoRec.name + "(" + argString + ")";
	                rhs =
	                    this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(invoke, protoRec);
	                break;
	            case proto_record_1.RecordType.InvokeClosure:
	                rhs = context + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.PrimitiveOp:
	                rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.CollectionLiteral:
	                rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.Interpolate:
	                rhs = this._genInterpolation(protoRec);
	                break;
	            case proto_record_1.RecordType.KeyedRead:
	                rhs = this._observe(context + "[" + getLocalName(protoRec.args[0]) + "]", protoRec);
	                break;
	            case proto_record_1.RecordType.KeyedWrite:
	                rhs = context + "[" + getLocalName(protoRec.args[0]) + "] = " + getLocalName(protoRec.args[1]);
	                break;
	            case proto_record_1.RecordType.Chain:
	                rhs = "" + getLocalName(protoRec.args[protoRec.args.length - 1]);
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unknown operation " + protoRec.mode);
	        }
	        return getLocalName(protoRec.selfIndex) + " = " + rhs + ";";
	    };
	    /** @internal */
	    CodegenLogicUtil.prototype._observe = function (exp, rec) {
	        // This is an experimental feature. Works only in Dart.
	        if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            return "this.observeValue(" + exp + ", " + rec.selfIndex + ")";
	        }
	        else {
	            return exp;
	        }
	    };
	    CodegenLogicUtil.prototype.genPropertyBindingTargets = function (propertyBindingTargets, genDebugInfo) {
	        var _this = this;
	        var bs = propertyBindingTargets.map(function (b) {
	            if (lang_1.isBlank(b))
	                return "null";
	            var debug = genDebugInfo ? codegen_facade_1.codify(b.debug) : "null";
	            return _this._utilName + ".bindingTarget(" + codegen_facade_1.codify(b.mode) + ", " + b.elementIndex + ", " + codegen_facade_1.codify(b.name) + ", " + codegen_facade_1.codify(b.unit) + ", " + debug + ")";
	        });
	        return "[" + bs.join(", ") + "]";
	    };
	    CodegenLogicUtil.prototype.genDirectiveIndices = function (directiveRecords) {
	        var _this = this;
	        var bs = directiveRecords.map(function (b) {
	            return (_this._utilName + ".directiveIndex(" + b.directiveIndex.elementIndex + ", " + b.directiveIndex.directiveIndex + ")");
	        });
	        return "[" + bs.join(", ") + "]";
	    };
	    /** @internal */
	    CodegenLogicUtil.prototype._genInterpolation = function (protoRec) {
	        var iVals = [];
	        for (var i = 0; i < protoRec.args.length; ++i) {
	            iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
	            iVals.push(this._utilName + ".s(" + this._names.getLocalName(protoRec.args[i]) + ")");
	        }
	        iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
	        return codegen_facade_1.combineGeneratedStrings(iVals);
	    };
	    CodegenLogicUtil.prototype.genHydrateDirectives = function (directiveRecords) {
	        var _this = this;
	        var res = [];
	        var outputCount = 0;
	        for (var i = 0; i < directiveRecords.length; ++i) {
	            var r = directiveRecords[i];
	            var dirVarName = this._names.getDirectiveName(r.directiveIndex);
	            res.push(dirVarName + " = " + this._genReadDirective(i) + ";");
	            if (lang_1.isPresent(r.outputs)) {
	                r.outputs.forEach(function (output) {
	                    var eventHandlerExpr = _this._genEventHandler(r.directiveIndex.elementIndex, output[1]);
	                    var statementStart = "this.outputSubscriptions[" + outputCount++ + "] = " + dirVarName + "." + output[0];
	                    if (lang_1.IS_DART) {
	                        res.push(statementStart + ".listen(" + eventHandlerExpr + ");");
	                    }
	                    else {
	                        res.push(statementStart + ".subscribe({next: " + eventHandlerExpr + "});");
	                    }
	                });
	            }
	        }
	        if (outputCount > 0) {
	            var statementStart = 'this.outputSubscriptions';
	            if (lang_1.IS_DART) {
	                res.unshift(statementStart + " = new List(" + outputCount + ");");
	            }
	            else {
	                res.unshift(statementStart + " = new Array(" + outputCount + ");");
	            }
	        }
	        return res.join("\n");
	    };
	    CodegenLogicUtil.prototype.genDirectivesOnDestroy = function (directiveRecords) {
	        var res = [];
	        for (var i = 0; i < directiveRecords.length; ++i) {
	            var r = directiveRecords[i];
	            if (r.callOnDestroy) {
	                var dirVarName = this._names.getDirectiveName(r.directiveIndex);
	                res.push(dirVarName + ".ngOnDestroy();");
	            }
	        }
	        return res.join("\n");
	    };
	    CodegenLogicUtil.prototype._genEventHandler = function (boundElementIndex, eventName) {
	        if (lang_1.IS_DART) {
	            return "(event) => this.handleEvent('" + eventName + "', " + boundElementIndex + ", event)";
	        }
	        else {
	            return "(function(event) { return this.handleEvent('" + eventName + "', " + boundElementIndex + ", event); }).bind(this)";
	        }
	    };
	    CodegenLogicUtil.prototype._genReadDirective = function (index) {
	        var directiveExpr = "this.getDirectiveFor(directives, " + index + ")";
	        // This is an experimental feature. Works only in Dart.
	        if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            return "this.observeDirective(" + directiveExpr + ", " + index + ")";
	        }
	        else {
	            return directiveExpr;
	        }
	    };
	    CodegenLogicUtil.prototype.genHydrateDetectors = function (directiveRecords) {
	        var res = [];
	        for (var i = 0; i < directiveRecords.length; ++i) {
	            var r = directiveRecords[i];
	            if (!r.isDefaultChangeDetection()) {
	                res.push(this._names.getDetectorName(r.directiveIndex) + " = this.getDetectorFor(directives, " + i + ");");
	            }
	        }
	        return res.join("\n");
	    };
	    CodegenLogicUtil.prototype.genContentLifecycleCallbacks = function (directiveRecords) {
	        var res = [];
	        var eq = lang_1.IS_DART ? '==' : '===';
	        // NOTE(kegluneq): Order is important!
	        for (var i = directiveRecords.length - 1; i >= 0; --i) {
	            var dir = directiveRecords[i];
	            if (dir.callAfterContentInit) {
	                res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterContentInit();");
	            }
	            if (dir.callAfterContentChecked) {
	                res.push(this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterContentChecked();");
	            }
	        }
	        return res;
	    };
	    CodegenLogicUtil.prototype.genViewLifecycleCallbacks = function (directiveRecords) {
	        var res = [];
	        var eq = lang_1.IS_DART ? '==' : '===';
	        // NOTE(kegluneq): Order is important!
	        for (var i = directiveRecords.length - 1; i >= 0; --i) {
	            var dir = directiveRecords[i];
	            if (dir.callAfterViewInit) {
	                res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterViewInit();");
	            }
	            if (dir.callAfterViewChecked) {
	                res.push(this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterViewChecked();");
	            }
	        }
	        return res;
	    };
	    return CodegenLogicUtil;
	})();
	exports.CodegenLogicUtil = CodegenLogicUtil;


/***/ },
/* 80 */
/***/ function(module, exports) {

	'use strict';/**
	 * Converts `funcOrValue` to a string which can be used in generated code.
	 */
	function codify(obj) {
	    return JSON.stringify(obj);
	}
	exports.codify = codify;
	function rawString(str) {
	    return "'" + str + "'";
	}
	exports.rawString = rawString;
	/**
	 * Combine the strings of generated code into a single interpolated string.
	 * Each element of `vals` is expected to be a string literal or a codegen'd
	 * call to a method returning a string.
	 */
	function combineGeneratedStrings(vals) {
	    return vals.join(' + ');
	}
	exports.combineGeneratedStrings = combineGeneratedStrings;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	/**
	 * Defines template and style encapsulation options available for Component's {@link View}.
	 *
	 * See {@link ViewMetadata#encapsulation}.
	 */
	(function (ViewEncapsulation) {
	    /**
	     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	     * Element and pre-processing the style rules provided via
	     * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
	     * attribute to all selectors.
	     *
	     * This is the default option.
	     */
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    /**
	     * Use the native encapsulation mechanism of the renderer.
	     *
	     * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     */
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    /**
	     * Don't provide any template or style encapsulation.
	     */
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
	var ViewEncapsulation = exports.ViewEncapsulation;
	exports.VIEW_ENCAPSULATION_VALUES = [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None];
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	 * within the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 */
	var ViewMetadata = (function () {
	    function ViewMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.directives = directives;
	        this.pipes = pipes;
	        this.encapsulation = encapsulation;
	    }
	    ViewMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ViewMetadata);
	    return ViewMetadata;
	})();
	exports.ViewMetadata = ViewMetadata;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for util
	var decorators_1 = __webpack_require__(14);
	exports.Class = decorators_1.Class;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	exports.enableProdMode = lang_1.enableProdMode;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for Facade
	var lang_1 = __webpack_require__(10);
	exports.Type = lang_1.Type;
	var async_1 = __webpack_require__(53);
	exports.EventEmitter = async_1.EventEmitter;
	var exceptions_1 = __webpack_require__(19);
	exports.WrappedException = exceptions_1.WrappedException;
	var exception_handler_1 = __webpack_require__(20);
	exports.ExceptionHandler = exception_handler_1.ExceptionHandler;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ng_zone_1 = __webpack_require__(86);
	var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var application_tokens_1 = __webpack_require__(87);
	var async_1 = __webpack_require__(53);
	var collection_1 = __webpack_require__(17);
	var testability_1 = __webpack_require__(88);
	var dynamic_component_loader_1 = __webpack_require__(89);
	var exceptions_1 = __webpack_require__(19);
	var console_1 = __webpack_require__(105);
	var profile_1 = __webpack_require__(50);
	var lang_2 = __webpack_require__(10);
	/**
	 * Construct providers specific to an individual root component.
	 */
	function _componentProviders(appComponentType) {
	    return [
	        di_1.provide(application_tokens_1.APP_COMPONENT, { useValue: appComponentType }),
	        di_1.provide(application_tokens_1.APP_COMPONENT_REF_PROMISE, {
	            useFactory: function (dynamicComponentLoader, appRef, injector) {
	                // Save the ComponentRef for disposal later.
	                var ref;
	                // TODO(rado): investigate whether to support providers on root component.
	                return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector, function () { appRef._unloadComponent(ref); })
	                    .then(function (componentRef) {
	                    ref = componentRef;
	                    var testability = injector.getOptional(testability_1.Testability);
	                    if (lang_1.isPresent(testability)) {
	                        injector.get(testability_1.TestabilityRegistry)
	                            .registerApplication(componentRef.location.nativeElement, testability);
	                    }
	                    return componentRef;
	                });
	            },
	            deps: [dynamic_component_loader_1.DynamicComponentLoader, ApplicationRef, di_1.Injector]
	        }),
	        di_1.provide(appComponentType, {
	            useFactory: function (p) { return p.then(function (ref) { return ref.instance; }); },
	            deps: [application_tokens_1.APP_COMPONENT_REF_PROMISE]
	        }),
	    ];
	}
	/**
	 * Create an Angular zone.
	 */
	function createNgZone() {
	    return new ng_zone_1.NgZone({ enableLongStackTrace: lang_1.assertionsEnabled() });
	}
	exports.createNgZone = createNgZone;
	var _platform;
	var _platformProviders;
	/**
	 * Initialize the Angular 'platform' on the page.
	 *
	 * See {@link PlatformRef} for details on the Angular platform.
	 *
	 * It is also possible to specify providers to be made in the new platform. These providers
	 * will be shared between all applications on the page. For example, an abstraction for
	 * the browser cookie jar should be bound at the platform level, because there is only one
	 * cookie jar regardless of how many applications on the page will be accessing it.
	 *
	 * The platform function can be called multiple times as long as the same list of providers
	 * is passed into each call. If the platform function is called with a different set of
	 * provides, Angular will throw an exception.
	 */
	function platform(providers) {
	    lang_2.lockMode();
	    if (lang_1.isPresent(_platform)) {
	        if (collection_1.ListWrapper.equals(_platformProviders, providers)) {
	            return _platform;
	        }
	        else {
	            throw new exceptions_1.BaseException("platform cannot be initialized with different sets of providers.");
	        }
	    }
	    else {
	        return _createPlatform(providers);
	    }
	}
	exports.platform = platform;
	/**
	 * Dispose the existing platform.
	 */
	function disposePlatform() {
	    if (lang_1.isPresent(_platform)) {
	        _platform.dispose();
	        _platform = null;
	    }
	}
	exports.disposePlatform = disposePlatform;
	function _createPlatform(providers) {
	    _platformProviders = providers;
	    var injector = di_1.Injector.resolveAndCreate(providers);
	    _platform = new PlatformRef_(injector, function () {
	        _platform = null;
	        _platformProviders = null;
	    });
	    _runPlatformInitializers(injector);
	    return _platform;
	}
	function _runPlatformInitializers(injector) {
	    var inits = injector.getOptional(application_tokens_1.PLATFORM_INITIALIZER);
	    if (lang_1.isPresent(inits))
	        inits.forEach(function (init) { return init(); });
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
	 * explicitly by calling {@link platform}().
	 */
	var PlatformRef = (function () {
	    function PlatformRef() {
	    }
	    Object.defineProperty(PlatformRef.prototype, "injector", {
	        /**
	         * Retrieve the platform {@link Injector}, which is the parent injector for
	         * every Angular application on the page and provides singleton providers.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return PlatformRef;
	})();
	exports.PlatformRef = PlatformRef;
	var PlatformRef_ = (function (_super) {
	    __extends(PlatformRef_, _super);
	    function PlatformRef_(_injector, _dispose) {
	        _super.call(this);
	        this._injector = _injector;
	        this._dispose = _dispose;
	        /** @internal */
	        this._applications = [];
	        /** @internal */
	        this._disposeListeners = [];
	    }
	    PlatformRef_.prototype.registerDisposeListener = function (dispose) { this._disposeListeners.push(dispose); };
	    Object.defineProperty(PlatformRef_.prototype, "injector", {
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    PlatformRef_.prototype.application = function (providers) {
	        var app = this._initApp(createNgZone(), providers);
	        if (async_1.PromiseWrapper.isPromise(app)) {
	            throw new exceptions_1.BaseException("Cannot use asyncronous app initializers with application. Use asyncApplication instead.");
	        }
	        return app;
	    };
	    PlatformRef_.prototype.asyncApplication = function (bindingFn, additionalProviders) {
	        var _this = this;
	        var zone = createNgZone();
	        var completer = async_1.PromiseWrapper.completer();
	        if (bindingFn === null) {
	            completer.resolve(this._initApp(zone, additionalProviders));
	        }
	        else {
	            zone.run(function () {
	                async_1.PromiseWrapper.then(bindingFn(zone), function (providers) {
	                    if (lang_1.isPresent(additionalProviders)) {
	                        providers = collection_1.ListWrapper.concat(providers, additionalProviders);
	                    }
	                    var promise = _this._initApp(zone, providers);
	                    completer.resolve(promise);
	                });
	            });
	        }
	        return completer.promise;
	    };
	    PlatformRef_.prototype._initApp = function (zone, providers) {
	        var _this = this;
	        var injector;
	        var app;
	        zone.run(function () {
	            providers = collection_1.ListWrapper.concat(providers, [
	                di_1.provide(ng_zone_1.NgZone, { useValue: zone }),
	                di_1.provide(ApplicationRef, { useFactory: function () { return app; }, deps: [] })
	            ]);
	            var exceptionHandler;
	            try {
	                injector = _this.injector.resolveAndCreateChild(providers);
	                exceptionHandler = injector.get(exceptions_1.ExceptionHandler);
	                zone.overrideOnErrorHandler(function (e, s) { return exceptionHandler.call(e, s); });
	            }
	            catch (e) {
	                if (lang_1.isPresent(exceptionHandler)) {
	                    exceptionHandler.call(e, e.stack);
	                }
	                else {
	                    lang_1.print(e.toString());
	                }
	            }
	        });
	        app = new ApplicationRef_(this, zone, injector);
	        this._applications.push(app);
	        var promise = _runAppInitializers(injector);
	        if (promise !== null) {
	            return async_1.PromiseWrapper.then(promise, function (_) { return app; });
	        }
	        else {
	            return app;
	        }
	    };
	    PlatformRef_.prototype.dispose = function () {
	        collection_1.ListWrapper.clone(this._applications).forEach(function (app) { return app.dispose(); });
	        this._disposeListeners.forEach(function (dispose) { return dispose(); });
	        this._dispose();
	    };
	    /** @internal */
	    PlatformRef_.prototype._applicationDisposed = function (app) { collection_1.ListWrapper.remove(this._applications, app); };
	    return PlatformRef_;
	})(PlatformRef);
	exports.PlatformRef_ = PlatformRef_;
	function _runAppInitializers(injector) {
	    var inits = injector.getOptional(application_tokens_1.APP_INITIALIZER);
	    var promises = [];
	    if (lang_1.isPresent(inits)) {
	        inits.forEach(function (init) {
	            var retVal = init();
	            if (async_1.PromiseWrapper.isPromise(retVal)) {
	                promises.push(retVal);
	            }
	        });
	    }
	    if (promises.length > 0) {
	        return async_1.PromiseWrapper.all(promises);
	    }
	    else {
	        return null;
	    }
	}
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * For more about Angular applications, see the documentation for {@link bootstrap}.
	 */
	var ApplicationRef = (function () {
	    function ApplicationRef() {
	    }
	    Object.defineProperty(ApplicationRef.prototype, "injector", {
	        /**
	         * Retrieve the application {@link Injector}.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ApplicationRef.prototype, "zone", {
	        /**
	         * Retrieve the application {@link NgZone}.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	        /**
	         * Get a list of component types registered to this application.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return ApplicationRef;
	})();
	exports.ApplicationRef = ApplicationRef;
	var ApplicationRef_ = (function (_super) {
	    __extends(ApplicationRef_, _super);
	    function ApplicationRef_(_platform, _zone, _injector) {
	        var _this = this;
	        _super.call(this);
	        this._platform = _platform;
	        this._zone = _zone;
	        this._injector = _injector;
	        /** @internal */
	        this._bootstrapListeners = [];
	        /** @internal */
	        this._disposeListeners = [];
	        /** @internal */
	        this._rootComponents = [];
	        /** @internal */
	        this._rootComponentTypes = [];
	        /** @internal */
	        this._changeDetectorRefs = [];
	        /** @internal */
	        this._runningTick = false;
	        /** @internal */
	        this._enforceNoNewChanges = false;
	        if (lang_1.isPresent(this._zone)) {
	            async_1.ObservableWrapper.subscribe(this._zone.onTurnDone, function (_) { _this._zone.run(function () { _this.tick(); }); });
	        }
	        this._enforceNoNewChanges = lang_1.assertionsEnabled();
	    }
	    ApplicationRef_.prototype.registerBootstrapListener = function (listener) {
	        this._bootstrapListeners.push(listener);
	    };
	    ApplicationRef_.prototype.registerDisposeListener = function (dispose) { this._disposeListeners.push(dispose); };
	    ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
	        this._changeDetectorRefs.push(changeDetector);
	    };
	    ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
	        collection_1.ListWrapper.remove(this._changeDetectorRefs, changeDetector);
	    };
	    ApplicationRef_.prototype.bootstrap = function (componentType, providers) {
	        var _this = this;
	        var completer = async_1.PromiseWrapper.completer();
	        this._zone.run(function () {
	            var componentProviders = _componentProviders(componentType);
	            if (lang_1.isPresent(providers)) {
	                componentProviders.push(providers);
	            }
	            var exceptionHandler = _this._injector.get(exceptions_1.ExceptionHandler);
	            _this._rootComponentTypes.push(componentType);
	            try {
	                var injector = _this._injector.resolveAndCreateChild(componentProviders);
	                var compRefToken = injector.get(application_tokens_1.APP_COMPONENT_REF_PROMISE);
	                var tick = function (componentRef) {
	                    _this._loadComponent(componentRef);
	                    completer.resolve(componentRef);
	                };
	                var tickResult = async_1.PromiseWrapper.then(compRefToken, tick);
	                // THIS MUST ONLY RUN IN DART.
	                // This is required to report an error when no components with a matching selector found.
	                // Otherwise the promise will never be completed.
	                // Doing this in JS causes an extra error message to appear.
	                if (lang_1.IS_DART) {
	                    async_1.PromiseWrapper.then(tickResult, function (_) { });
	                }
	                async_1.PromiseWrapper.then(tickResult, null, function (err, stackTrace) { return completer.reject(err, stackTrace); });
	            }
	            catch (e) {
	                exceptionHandler.call(e, e.stack);
	                completer.reject(e, e.stack);
	            }
	        });
	        return completer.promise.then(function (_) {
	            var c = _this._injector.get(console_1.Console);
	            if (lang_1.assertionsEnabled()) {
	                c.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
	            }
	            return _;
	        });
	    };
	    /** @internal */
	    ApplicationRef_.prototype._loadComponent = function (ref) {
	        var appChangeDetector = ref.location.internalElement.parentView.changeDetector;
	        this._changeDetectorRefs.push(appChangeDetector.ref);
	        this.tick();
	        this._rootComponents.push(ref);
	        this._bootstrapListeners.forEach(function (listener) { return listener(ref); });
	    };
	    /** @internal */
	    ApplicationRef_.prototype._unloadComponent = function (ref) {
	        if (!collection_1.ListWrapper.contains(this._rootComponents, ref)) {
	            return;
	        }
	        this.unregisterChangeDetector(ref.location.internalElement.parentView.changeDetector.ref);
	        collection_1.ListWrapper.remove(this._rootComponents, ref);
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "injector", {
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "zone", {
	        get: function () { return this._zone; },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationRef_.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new exceptions_1.BaseException("ApplicationRef.tick is called recursively");
	        }
	        var s = ApplicationRef_._tickScope();
	        try {
	            this._runningTick = true;
	            this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });
	            }
	        }
	        finally {
	            this._runningTick = false;
	            profile_1.wtfLeave(s);
	        }
	    };
	    ApplicationRef_.prototype.dispose = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        collection_1.ListWrapper.clone(this._rootComponents).forEach(function (ref) { return ref.dispose(); });
	        this._disposeListeners.forEach(function (dispose) { return dispose(); });
	        this._platform._applicationDisposed(this);
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	        get: function () { return this._rootComponentTypes; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ApplicationRef_._tickScope = profile_1.wtfCreateScope('ApplicationRef#tick()');
	    return ApplicationRef_;
	})(ApplicationRef);
	exports.ApplicationRef_ = ApplicationRef_;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	var profile_1 = __webpack_require__(50);
	/**
	 * Stores error information; delivered via [NgZone.onError] stream.
	 */
	var NgZoneError = (function () {
	    function NgZoneError(error, stackTrace) {
	        this.error = error;
	        this.stackTrace = stackTrace;
	    }
	    return NgZoneError;
	})();
	exports.NgZoneError = NgZoneError;
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {@link #run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	 * ```
	 * import {Component, View, NgZone} from 'angular2/core';
	 * import {NgIf} from 'angular2/common';
	 *
	 * @Component({
	 *   selector: 'ng-zone-demo'.
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 *   directives: [NgIf]
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *       // reenter the Angular zone and display done
	 *       this._ngZone.run(() => {console.log('Outside Done!') });
	 *     }}));
	 *   }
	 *
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 */
	var NgZone = (function () {
	    /**
	     * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
	     *               enabled in development mode as they significantly impact perf.
	     */
	    function NgZone(_a) {
	        var enableLongStackTrace = _a.enableLongStackTrace;
	        /** @internal */
	        this._runScope = profile_1.wtfCreateScope("NgZone#run()");
	        /** @internal */
	        this._microtaskScope = profile_1.wtfCreateScope("NgZone#microtask()");
	        // Number of microtasks pending from _innerZone (& descendants)
	        /** @internal */
	        this._pendingMicrotasks = 0;
	        // Whether some code has been executed in the _innerZone (& descendants) in the current turn
	        /** @internal */
	        this._hasExecutedCodeInInnerZone = false;
	        // run() call depth in _mountZone. 0 at the end of a macrotask
	        // zone.run(() => {         // top-level call
	        //   zone.run(() => {});    // nested call -> in-turn
	        // });
	        /** @internal */
	        this._nestedRun = 0;
	        /** @internal */
	        this._inVmTurnDone = false;
	        /** @internal */
	        this._pendingTimeouts = [];
	        if (lang_1.global.zone) {
	            this._disabled = false;
	            this._mountZone = lang_1.global.zone;
	            this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
	        }
	        else {
	            this._disabled = true;
	            this._mountZone = null;
	        }
	        this._onTurnStartEvents = new async_1.EventEmitter(false);
	        this._onTurnDoneEvents = new async_1.EventEmitter(false);
	        this._onEventDoneEvents = new async_1.EventEmitter(false);
	        this._onErrorEvents = new async_1.EventEmitter(false);
	    }
	    /**
	     * Sets the zone hook that is called just before a browser task that is handled by Angular
	     * executes.
	     *
	     * The hook is called once per browser task that is handled by Angular.
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onTurnStart` instead.
	     */
	    NgZone.prototype.overrideOnTurnStart = function (onTurnStartHook) {
	        this._onTurnStart = lang_1.normalizeBlank(onTurnStartHook);
	    };
	    Object.defineProperty(NgZone.prototype, "onTurnStart", {
	        /**
	         * Notifies subscribers just before Angular event turn starts.
	         *
	         * Emits an event once per browser task that is handled by Angular.
	         */
	        get: function () { return this._onTurnStartEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgZone.prototype._notifyOnTurnStart = function (parentRun) {
	        var _this = this;
	        parentRun.call(this._innerZone, function () { _this._onTurnStartEvents.emit(null); });
	    };
	    /**
	     * Sets the zone hook that is called immediately after Angular zone is done processing the current
	     * task and any microtasks scheduled from that task.
	     *
	     * This is where we typically do change-detection.
	     *
	     * The hook is called once per browser task that is handled by Angular.
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onTurnDone` instead.
	     */
	    NgZone.prototype.overrideOnTurnDone = function (onTurnDoneHook) {
	        this._onTurnDone = lang_1.normalizeBlank(onTurnDoneHook);
	    };
	    Object.defineProperty(NgZone.prototype, "onTurnDone", {
	        /**
	         * Notifies subscribers immediately after Angular zone is done processing
	         * the current turn and any microtasks scheduled from that turn.
	         *
	         * Used by Angular as a signal to kick off change-detection.
	         */
	        get: function () { return this._onTurnDoneEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgZone.prototype._notifyOnTurnDone = function (parentRun) {
	        var _this = this;
	        parentRun.call(this._innerZone, function () { _this._onTurnDoneEvents.emit(null); });
	    };
	    /**
	     * Sets the zone hook that is called immediately after the `onTurnDone` callback is called and any
	     * microstasks scheduled from within that callback are drained.
	     *
	     * `onEventDoneFn` is executed outside Angular zone, which means that we will no longer attempt to
	     * sync the UI with any model changes that occur within this callback.
	     *
	     * This hook is useful for validating application state (e.g. in a test).
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onEventDone` instead.
	     */
	    NgZone.prototype.overrideOnEventDone = function (onEventDoneFn, opt_waitForAsync) {
	        var _this = this;
	        if (opt_waitForAsync === void 0) { opt_waitForAsync = false; }
	        var normalizedOnEventDone = lang_1.normalizeBlank(onEventDoneFn);
	        if (opt_waitForAsync) {
	            this._onEventDone = function () {
	                if (!_this._pendingTimeouts.length) {
	                    normalizedOnEventDone();
	                }
	            };
	        }
	        else {
	            this._onEventDone = normalizedOnEventDone;
	        }
	    };
	    Object.defineProperty(NgZone.prototype, "onEventDone", {
	        /**
	         * Notifies subscribers immediately after the final `onTurnDone` callback
	         * before ending VM event.
	         *
	         * This event is useful for validating application state (e.g. in a test).
	         */
	        get: function () { return this._onEventDoneEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgZone.prototype._notifyOnEventDone = function () {
	        var _this = this;
	        this.runOutsideAngular(function () { _this._onEventDoneEvents.emit(null); });
	    };
	    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	        /**
	         * Whether there are any outstanding microtasks.
	         */
	        get: function () { return this._pendingMicrotasks > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingTimers", {
	        /**
	         * Whether there are any outstanding timers.
	         */
	        get: function () { return this._pendingTimeouts.length > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingAsyncTasks", {
	        /**
	         * Whether there are any outstanding asynchronous tasks of any kind that are
	         * scheduled to run within Angular zone.
	         *
	         * Useful as a signal of UI stability. For example, when a test reaches a
	         * point when [hasPendingAsyncTasks] is `false` it might be a good time to run
	         * test expectations.
	         */
	        get: function () { return this.hasPendingMicrotasks || this.hasPendingTimers; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the zone hook that is called when an error is thrown in the Angular zone.
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onError` instead.
	     */
	    NgZone.prototype.overrideOnErrorHandler = function (errorHandler) {
	        this._onErrorHandler = lang_1.normalizeBlank(errorHandler);
	    };
	    Object.defineProperty(NgZone.prototype, "onError", {
	        get: function () { return this._onErrorEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     */
	    NgZone.prototype.run = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            var s = this._runScope();
	            try {
	                return this._innerZone.run(fn);
	            }
	            finally {
	                profile_1.wtfLeave(s);
	            }
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            return this._mountZone.run(fn);
	        }
	    };
	    /** @internal */
	    NgZone.prototype._createInnerZone = function (zone, enableLongStackTrace) {
	        var microtaskScope = this._microtaskScope;
	        var ngZone = this;
	        var errorHandling;
	        if (enableLongStackTrace) {
	            errorHandling =
	                collection_1.StringMapWrapper.merge(lang_1.global.Zone.longStackTraceZone, { onError: function (e) { ngZone._notifyOnError(this, e); } });
	        }
	        else {
	            errorHandling = { onError: function (e) { ngZone._notifyOnError(this, e); } };
	        }
	        return zone.fork(errorHandling)
	            .fork({
	            '$run': function (parentRun) {
	                return function () {
	                    try {
	                        ngZone._nestedRun++;
	                        if (!ngZone._hasExecutedCodeInInnerZone) {
	                            ngZone._hasExecutedCodeInInnerZone = true;
	                            ngZone._notifyOnTurnStart(parentRun);
	                            if (ngZone._onTurnStart) {
	                                parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
	                            }
	                        }
	                        return parentRun.apply(this, arguments);
	                    }
	                    finally {
	                        ngZone._nestedRun--;
	                        // If there are no more pending microtasks, we are at the end of a VM turn (or in
	                        // onTurnStart)
	                        // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are
	                        // nested calls
	                        // to run()).
	                        if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 &&
	                            !this._inVmTurnDone) {
	                            if (ngZone._hasExecutedCodeInInnerZone) {
	                                try {
	                                    this._inVmTurnDone = true;
	                                    ngZone._notifyOnTurnDone(parentRun);
	                                    if (ngZone._onTurnDone) {
	                                        parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
	                                    }
	                                }
	                                finally {
	                                    this._inVmTurnDone = false;
	                                    ngZone._hasExecutedCodeInInnerZone = false;
	                                }
	                            }
	                            if (ngZone._pendingMicrotasks === 0) {
	                                ngZone._notifyOnEventDone();
	                                if (lang_1.isPresent(ngZone._onEventDone)) {
	                                    ngZone.runOutsideAngular(ngZone._onEventDone);
	                                }
	                            }
	                        }
	                    }
	                };
	            },
	            '$scheduleMicrotask': function (parentScheduleMicrotask) {
	                return function (fn) {
	                    ngZone._pendingMicrotasks++;
	                    var microtask = function () {
	                        var s = microtaskScope();
	                        try {
	                            fn();
	                        }
	                        finally {
	                            ngZone._pendingMicrotasks--;
	                            profile_1.wtfLeave(s);
	                        }
	                    };
	                    parentScheduleMicrotask.call(this, microtask);
	                };
	            },
	            '$setTimeout': function (parentSetTimeout) {
	                return function (fn, delay) {
	                    var args = [];
	                    for (var _i = 2; _i < arguments.length; _i++) {
	                        args[_i - 2] = arguments[_i];
	                    }
	                    var id;
	                    var cb = function () {
	                        fn();
	                        collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
	                    };
	                    id = parentSetTimeout.call(this, cb, delay, args);
	                    ngZone._pendingTimeouts.push(id);
	                    return id;
	                };
	            },
	            '$clearTimeout': function (parentClearTimeout) {
	                return function (id) {
	                    parentClearTimeout.call(this, id);
	                    collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
	                };
	            },
	            _innerZone: true
	        });
	    };
	    /** @internal */
	    NgZone.prototype._notifyOnError = function (zone, e) {
	        if (lang_1.isPresent(this._onErrorHandler) || async_1.ObservableWrapper.hasSubscribers(this._onErrorEvents)) {
	            var trace = [lang_1.normalizeBlank(e.stack)];
	            while (zone && zone.constructedAtException) {
	                trace.push(zone.constructedAtException.get());
	                zone = zone.parent;
	            }
	            if (async_1.ObservableWrapper.hasSubscribers(this._onErrorEvents)) {
	                async_1.ObservableWrapper.callEmit(this._onErrorEvents, new NgZoneError(e, trace));
	            }
	            if (lang_1.isPresent(this._onErrorHandler)) {
	                this._onErrorHandler(e, trace);
	            }
	        }
	        else {
	            console.log('## _notifyOnError ##');
	            console.log(e.stack);
	            throw e;
	        }
	    };
	    return NgZone;
	})();
	exports.NgZone = NgZone;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	/**
	 *  @internal
	 */
	exports.APP_COMPONENT_REF_PROMISE = lang_1.CONST_EXPR(new di_1.OpaqueToken('Promise<ComponentRef>'));
	/**
	 * An {@link angular2/di/OpaqueToken} representing the application root type in the {@link
	 * Injector}.
	 *
	 * ```
	 * @Component(...)
	 * class MyApp {
	 *   ...
	 * }
	 *
	 * bootstrap(MyApp).then((appRef:ApplicationRef) {
	 *   expect(appRef.injector.get(appComponentTypeToken)).toEqual(MyApp);
	 * });
	 *
	 * ```
	 */
	exports.APP_COMPONENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppComponent'));
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {@link ViewEncapsulation#Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	 * using this token.
	 */
	exports.APP_ID = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppId'));
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 */
	exports.APP_ID_RANDOM_PROVIDER = lang_1.CONST_EXPR(new di_1.Provider(exports.APP_ID, { useFactory: _appIdRandomProviderFactory, deps: [] }));
	function _randomChar() {
	    return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 */
	exports.PLATFORM_INITIALIZER = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Initializer"));
	/**
	 * A function that will be executed when an application is initialized.
	 */
	exports.APP_INITIALIZER = lang_1.CONST_EXPR(new di_1.OpaqueToken("Application Initializer"));
	/**
	 * A token which indicates the root directory of the application
	 */
	exports.PACKAGE_ROOT_URL = lang_1.CONST_EXPR(new di_1.OpaqueToken("Application Packages Root URL"));


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var ng_zone_1 = __webpack_require__(86);
	var async_1 = __webpack_require__(53);
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 */
	var Testability = (function () {
	    function Testability(_ngZone) {
	        /** @internal */
	        this._pendingCount = 0;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * @internal
	         */
	        this._didWork = false;
	        /** @internal */
	        this._callbacks = [];
	        /** @internal */
	        this._isAngularEventPending = false;
	        this._watchAngularEvents(_ngZone);
	    }
	    /** @internal */
	    Testability.prototype._watchAngularEvents = function (_ngZone) {
	        var _this = this;
	        async_1.ObservableWrapper.subscribe(_ngZone.onTurnStart, function (_) {
	            _this._didWork = true;
	            _this._isAngularEventPending = true;
	        });
	        _ngZone.runOutsideAngular(function () {
	            async_1.ObservableWrapper.subscribe(_ngZone.onEventDone, function (_) {
	                if (!_ngZone.hasPendingTimers) {
	                    _this._isAngularEventPending = false;
	                    _this._runCallbacksIfReady();
	                }
	            });
	        });
	    };
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new exceptions_1.BaseException('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    Testability.prototype.isStable = function () { return this._pendingCount == 0 && !this._isAngularEventPending; };
	    /** @internal */
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (!this.isStable()) {
	            this._didWork = true;
	            return; // Not ready
	        }
	        // Schedules the call backs in a new frame so that it is always async.
	        async_1.PromiseWrapper.resolve(null).then(function (_) {
	            while (_this._callbacks.length !== 0) {
	                (_this._callbacks.pop())(_this._didWork);
	            }
	            _this._didWork = false;
	        });
	    };
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        this._runCallbacksIfReady();
	    };
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    // This only accounts for ngZone, and not pending counts. Use `whenStable` to
	    // check for stability.
	    Testability.prototype.isAngularEventPending = function () { return this._isAngularEventPending; };
	    Testability.prototype.findBindings = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [ng_zone_1.NgZone])
	    ], Testability);
	    return Testability;
	})();
	exports.Testability = Testability;
	/**
	 * A global registry of {@link Testability} instances for specific elements.
	 */
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        /** @internal */
	        this._applications = new collection_1.Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return collection_1.MapWrapper.values(this._applications); };
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    TestabilityRegistry = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], TestabilityRegistry);
	    return TestabilityRegistry;
	})();
	exports.TestabilityRegistry = TestabilityRegistry;
	var _NoopGetTestability = (function () {
	    function _NoopGetTestability() {
	    }
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    _NoopGetTestability = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], _NoopGetTestability);
	    return _NoopGetTestability;
	})();
	/**
	 * Set the {@link GetTestability} implementation used by the Angular testing framework.
	 */
	function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	exports.setTestabilityGetter = setTestabilityGetter;
	var _testabilityGetter = lang_1.CONST_EXPR(new _NoopGetTestability());


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var compiler_1 = __webpack_require__(90);
	var lang_1 = __webpack_require__(10);
	var view_manager_1 = __webpack_require__(104);
	/**
	 * Represents an instance of a Component created via {@link DynamicComponentLoader}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {@link #dispose}
	 * method.
	 */
	var ComponentRef = (function () {
	    function ComponentRef() {
	    }
	    Object.defineProperty(ComponentRef.prototype, "hostView", {
	        /**
	         * The {@link ViewRef} of the Host View of this Component instance.
	         */
	        get: function () {
	            return this.location.internalElement.parentView.ref;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef.prototype, "hostComponent", {
	        /**
	         * @internal
	         *
	         * The instance of the component.
	         *
	         * TODO(i): this api should be removed
	         */
	        get: function () { return this.instance; },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentRef;
	})();
	exports.ComponentRef = ComponentRef;
	var ComponentRef_ = (function (_super) {
	    __extends(ComponentRef_, _super);
	    /**
	     * TODO(i): refactor into public/private fields
	     */
	    function ComponentRef_(location, instance, componentType, injector, _dispose) {
	        _super.call(this);
	        this._dispose = _dispose;
	        this.location = location;
	        this.instance = instance;
	        this.componentType = componentType;
	        this.injector = injector;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "hostComponentType", {
	        /**
	         * @internal
	         *
	         * Returns the type of this Component instance.
	         *
	         * TODO(i): this api should be removed
	         */
	        get: function () { return this.componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentRef_.prototype.dispose = function () { this._dispose(); };
	    return ComponentRef_;
	})(ComponentRef);
	exports.ComponentRef_ = ComponentRef_;
	/**
	 * Service for instantiating a Component and attaching it to a View at a specified location.
	 */
	var DynamicComponentLoader = (function () {
	    function DynamicComponentLoader() {
	    }
	    return DynamicComponentLoader;
	})();
	exports.DynamicComponentLoader = DynamicComponentLoader;
	var DynamicComponentLoader_ = (function (_super) {
	    __extends(DynamicComponentLoader_, _super);
	    function DynamicComponentLoader_(_compiler, _viewManager) {
	        _super.call(this);
	        this._compiler = _compiler;
	        this._viewManager = _viewManager;
	    }
	    DynamicComponentLoader_.prototype.loadAsRoot = function (type, overrideSelector, injector, onDispose, projectableNodes) {
	        var _this = this;
	        return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector, projectableNodes);
	            var newLocation = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                if (lang_1.isPresent(onDispose)) {
	                    onDispose();
	                }
	                _this._viewManager.destroyRootHostView(hostViewRef);
	            };
	            return new ComponentRef_(newLocation, component, type, injector, dispose);
	        });
	    };
	    DynamicComponentLoader_.prototype.loadIntoLocation = function (type, hostLocation, anchorName, providers, projectableNodes) {
	        if (providers === void 0) { providers = null; }
	        if (projectableNodes === void 0) { projectableNodes = null; }
	        return this.loadNextToLocation(type, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), providers, projectableNodes);
	    };
	    DynamicComponentLoader_.prototype.loadNextToLocation = function (type, location, providers, projectableNodes) {
	        var _this = this;
	        if (providers === void 0) { providers = null; }
	        if (projectableNodes === void 0) { projectableNodes = null; }
	        return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
	            var viewContainer = _this._viewManager.getViewContainer(location);
	            var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, providers, projectableNodes);
	            var newLocation = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                var index = viewContainer.indexOf(hostViewRef);
	                if (!hostViewRef.destroyed && index !== -1) {
	                    viewContainer.remove(index);
	                }
	            };
	            return new ComponentRef_(newLocation, component, type, null, dispose);
	        });
	    };
	    DynamicComponentLoader_ = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])
	    ], DynamicComponentLoader_);
	    return DynamicComponentLoader_;
	})(DynamicComponentLoader);
	exports.DynamicComponentLoader_ = DynamicComponentLoader_;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var async_1 = __webpack_require__(53);
	var reflection_1 = __webpack_require__(21);
	var view_1 = __webpack_require__(91);
	var view_ref_1 = __webpack_require__(100);
	/**
	 * Low-level service for compiling {@link Component}s into {@link ProtoViewRef ProtoViews}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Most applications should instead use higher-level {@link DynamicComponentLoader} service, which
	 * both compiles and instantiates a Component.
	 */
	var Compiler = (function () {
	    function Compiler() {
	    }
	    return Compiler;
	})();
	exports.Compiler = Compiler;
	function isHostViewFactory(type) {
	    return type instanceof view_1.HostViewFactory;
	}
	var Compiler_ = (function (_super) {
	    __extends(Compiler_, _super);
	    function Compiler_() {
	        _super.apply(this, arguments);
	    }
	    Compiler_.prototype.compileInHost = function (componentType) {
	        var metadatas = reflection_1.reflector.annotations(componentType);
	        var hostViewFactory = metadatas.find(isHostViewFactory);
	        if (lang_1.isBlank(hostViewFactory)) {
	            throw new exceptions_1.BaseException("No precompiled component " + lang_1.stringify(componentType) + " found");
	        }
	        return async_1.PromiseWrapper.resolve(new view_ref_1.HostViewFactoryRef_(hostViewFactory));
	    };
	    Compiler_.prototype.clearCache = function () { };
	    Compiler_ = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Compiler_);
	    return Compiler_;
	})(Compiler);
	exports.Compiler_ = Compiler_;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(17);
	var change_detection_1 = __webpack_require__(30);
	var interfaces_1 = __webpack_require__(40);
	var element_1 = __webpack_require__(92);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var api_1 = __webpack_require__(96);
	var view_ref_1 = __webpack_require__(100);
	var pipes_1 = __webpack_require__(101);
	var util_1 = __webpack_require__(103);
	var interfaces_2 = __webpack_require__(40);
	exports.DebugContext = interfaces_2.DebugContext;
	var pipes_2 = __webpack_require__(101);
	var view_type_1 = __webpack_require__(93);
	var REFLECT_PREFIX = 'ng-reflect-';
	var EMPTY_CONTEXT = lang_1.CONST_EXPR(new Object());
	/**
	 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	 *
	 */
	var AppView = (function () {
	    function AppView(proto, renderer, viewManager, projectableNodes, containerAppElement, imperativelyCreatedProviders, rootInjector, changeDetector) {
	        this.proto = proto;
	        this.renderer = renderer;
	        this.viewManager = viewManager;
	        this.projectableNodes = projectableNodes;
	        this.containerAppElement = containerAppElement;
	        this.changeDetector = changeDetector;
	        /**
	         * The context against which data-binding expressions in this view are evaluated against.
	         * This is always a component instance.
	         */
	        this.context = null;
	        this.destroyed = false;
	        this.ref = new view_ref_1.ViewRef_(this);
	        var injectorWithHostBoundary = element_1.AppElement.getViewParentInjector(this.proto.type, containerAppElement, imperativelyCreatedProviders, rootInjector);
	        this.parentInjector = injectorWithHostBoundary.injector;
	        this.hostInjectorBoundary = injectorWithHostBoundary.hostInjectorBoundary;
	        var pipes;
	        var context;
	        switch (proto.type) {
	            case view_type_1.ViewType.COMPONENT:
	                pipes = new pipes_2.Pipes(proto.protoPipes, containerAppElement.getInjector());
	                context = containerAppElement.getComponent();
	                break;
	            case view_type_1.ViewType.EMBEDDED:
	                pipes = containerAppElement.parentView.pipes;
	                context = containerAppElement.parentView.context;
	                break;
	            case view_type_1.ViewType.HOST:
	                pipes = null;
	                context = EMPTY_CONTEXT;
	                break;
	        }
	        this.pipes = pipes;
	        this.context = context;
	    }
	    AppView.prototype.init = function (rootNodesOrAppElements, allNodes, disposables, appElements) {
	        this.rootNodesOrAppElements = rootNodesOrAppElements;
	        this.allNodes = allNodes;
	        this.disposables = disposables;
	        this.appElements = appElements;
	        var localsMap = new collection_1.Map();
	        collection_1.StringMapWrapper.forEach(this.proto.templateVariableBindings, function (templateName, _) { localsMap.set(templateName, null); });
	        for (var i = 0; i < appElements.length; i++) {
	            var appEl = appElements[i];
	            var providerTokens = [];
	            if (lang_1.isPresent(appEl.proto.protoInjector)) {
	                for (var j = 0; j < appEl.proto.protoInjector.numberOfProviders; j++) {
	                    providerTokens.push(appEl.proto.protoInjector.getProviderAtIndex(j).key.token);
	                }
	            }
	            collection_1.StringMapWrapper.forEach(appEl.proto.directiveVariableBindings, function (directiveIndex, name) {
	                if (lang_1.isBlank(directiveIndex)) {
	                    localsMap.set(name, appEl.nativeElement);
	                }
	                else {
	                    localsMap.set(name, appEl.getDirectiveAtIndex(directiveIndex));
	                }
	            });
	            this.renderer.setElementDebugInfo(appEl.nativeElement, new api_1.RenderDebugInfo(appEl.getInjector(), appEl.getComponent(), providerTokens, localsMap));
	        }
	        var parentLocals = null;
	        if (this.proto.type !== view_type_1.ViewType.COMPONENT) {
	            parentLocals =
	                lang_1.isPresent(this.containerAppElement) ? this.containerAppElement.parentView.locals : null;
	        }
	        if (this.proto.type === view_type_1.ViewType.COMPONENT) {
	            // Note: the render nodes have been attached to their host element
	            // in the ViewFactory already.
	            this.containerAppElement.attachComponentView(this);
	            this.containerAppElement.parentView.changeDetector.addViewChild(this.changeDetector);
	        }
	        this.locals = new change_detection_1.Locals(parentLocals, localsMap);
	        this.changeDetector.hydrate(this.context, this.locals, this, this.pipes);
	        this.viewManager.onViewCreated(this);
	    };
	    AppView.prototype.destroy = function () {
	        if (this.destroyed) {
	            throw new exceptions_1.BaseException('This view has already been destroyed!');
	        }
	        this.changeDetector.destroyRecursive();
	    };
	    AppView.prototype.notifyOnDestroy = function () {
	        this.destroyed = true;
	        var hostElement = this.proto.type === view_type_1.ViewType.COMPONENT ? this.containerAppElement.nativeElement : null;
	        this.renderer.destroyView(hostElement, this.allNodes);
	        for (var i = 0; i < this.disposables.length; i++) {
	            this.disposables[i]();
	        }
	        this.viewManager.onViewDestroyed(this);
	    };
	    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	        get: function () { return this.changeDetector.ref; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AppView.prototype, "flatRootNodes", {
	        get: function () { return flattenNestedViewRenderNodes(this.rootNodesOrAppElements); },
	        enumerable: true,
	        configurable: true
	    });
	    AppView.prototype.hasLocal = function (contextName) {
	        return collection_1.StringMapWrapper.contains(this.proto.templateVariableBindings, contextName);
	    };
	    AppView.prototype.setLocal = function (contextName, value) {
	        if (!this.hasLocal(contextName)) {
	            return;
	        }
	        var templateName = this.proto.templateVariableBindings[contextName];
	        this.locals.set(templateName, value);
	    };
	    // dispatch to element injector or text nodes based on context
	    AppView.prototype.notifyOnBinding = function (b, currentValue) {
	        if (b.isTextNode()) {
	            this.renderer.setText(this.allNodes[b.elementIndex], currentValue);
	        }
	        else {
	            var nativeElement = this.appElements[b.elementIndex].nativeElement;
	            if (b.isElementProperty()) {
	                this.renderer.setElementProperty(nativeElement, b.name, currentValue);
	            }
	            else if (b.isElementAttribute()) {
	                this.renderer.setElementAttribute(nativeElement, b.name, lang_1.isPresent(currentValue) ? "" + currentValue : null);
	            }
	            else if (b.isElementClass()) {
	                this.renderer.setElementClass(nativeElement, b.name, currentValue);
	            }
	            else if (b.isElementStyle()) {
	                var unit = lang_1.isPresent(b.unit) ? b.unit : '';
	                this.renderer.setElementStyle(nativeElement, b.name, lang_1.isPresent(currentValue) ? "" + currentValue + unit : null);
	            }
	            else {
	                throw new exceptions_1.BaseException('Unsupported directive record');
	            }
	        }
	    };
	    AppView.prototype.logBindingUpdate = function (b, value) {
	        if (b.isDirective() || b.isElementProperty()) {
	            var nativeElement = this.appElements[b.elementIndex].nativeElement;
	            this.renderer.setBindingDebugInfo(nativeElement, "" + REFLECT_PREFIX + util_1.camelCaseToDashCase(b.name), "" + value);
	        }
	    };
	    AppView.prototype.notifyAfterContentChecked = function () {
	        var count = this.appElements.length;
	        for (var i = count - 1; i >= 0; i--) {
	            this.appElements[i].ngAfterContentChecked();
	        }
	    };
	    AppView.prototype.notifyAfterViewChecked = function () {
	        var count = this.appElements.length;
	        for (var i = count - 1; i >= 0; i--) {
	            this.appElements[i].ngAfterViewChecked();
	        }
	    };
	    AppView.prototype.getDebugContext = function (appElement, elementIndex, directiveIndex) {
	        try {
	            if (lang_1.isBlank(appElement) && elementIndex < this.appElements.length) {
	                appElement = this.appElements[elementIndex];
	            }
	            var container = this.containerAppElement;
	            var element = lang_1.isPresent(appElement) ? appElement.nativeElement : null;
	            var componentElement = lang_1.isPresent(container) ? container.nativeElement : null;
	            var directive = lang_1.isPresent(directiveIndex) ? appElement.getDirectiveAtIndex(directiveIndex) : null;
	            var injector = lang_1.isPresent(appElement) ? appElement.getInjector() : null;
	            return new interfaces_1.DebugContext(element, componentElement, directive, this.context, _localsToStringMap(this.locals), injector);
	        }
	        catch (e) {
	            // TODO: vsavkin log the exception once we have a good way to log errors and warnings
	            // if an error happens during getting the debug context, we return null.
	            return null;
	        }
	    };
	    AppView.prototype.getDirectiveFor = function (directive) {
	        return this.appElements[directive.elementIndex].getDirectiveAtIndex(directive.directiveIndex);
	    };
	    AppView.prototype.getDetectorFor = function (directive) {
	        var componentView = this.appElements[directive.elementIndex].componentView;
	        return lang_1.isPresent(componentView) ? componentView.changeDetector : null;
	    };
	    /**
	     * Triggers the event handlers for the element and the directives.
	     *
	     * This method is intended to be called from directive EventEmitters.
	     *
	     * @param {string} eventName
	     * @param {*} eventObj
	     * @param {number} boundElementIndex
	     * @return false if preventDefault must be applied to the DOM event
	     */
	    AppView.prototype.triggerEventHandlers = function (eventName, eventObj, boundElementIndex) {
	        return this.changeDetector.handleEvent(eventName, boundElementIndex, eventObj);
	    };
	    return AppView;
	})();
	exports.AppView = AppView;
	function _localsToStringMap(locals) {
	    var res = {};
	    var c = locals;
	    while (lang_1.isPresent(c)) {
	        res = collection_1.StringMapWrapper.merge(res, collection_1.MapWrapper.toStringMap(c.current));
	        c = c.parent;
	    }
	    return res;
	}
	/**
	 *
	 */
	var AppProtoView = (function () {
	    function AppProtoView(type, protoPipes, templateVariableBindings) {
	        this.type = type;
	        this.protoPipes = protoPipes;
	        this.templateVariableBindings = templateVariableBindings;
	    }
	    AppProtoView.create = function (metadataCache, type, pipes, templateVariableBindings) {
	        var protoPipes = null;
	        if (lang_1.isPresent(pipes) && pipes.length > 0) {
	            var boundPipes = collection_1.ListWrapper.createFixedSize(pipes.length);
	            for (var i = 0; i < pipes.length; i++) {
	                boundPipes[i] = metadataCache.getResolvedPipeMetadata(pipes[i]);
	            }
	            protoPipes = pipes_1.ProtoPipes.fromProviders(boundPipes);
	        }
	        return new AppProtoView(type, protoPipes, templateVariableBindings);
	    };
	    return AppProtoView;
	})();
	exports.AppProtoView = AppProtoView;
	var HostViewFactory = (function () {
	    function HostViewFactory(selector, viewFactory) {
	        this.selector = selector;
	        this.viewFactory = viewFactory;
	    }
	    HostViewFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Function])
	    ], HostViewFactory);
	    return HostViewFactory;
	})();
	exports.HostViewFactory = HostViewFactory;
	function flattenNestedViewRenderNodes(nodes) {
	    return _flattenNestedViewRenderNodes(nodes, []);
	}
	exports.flattenNestedViewRenderNodes = flattenNestedViewRenderNodes;
	function _flattenNestedViewRenderNodes(nodes, renderNodes) {
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (node instanceof element_1.AppElement) {
	            var appEl = node;
	            renderNodes.push(appEl.nativeElement);
	            if (lang_1.isPresent(appEl.nestedViews)) {
	                for (var k = 0; k < appEl.nestedViews.length; k++) {
	                    _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
	                }
	            }
	        }
	        else {
	            renderNodes.push(node);
	        }
	    }
	    return renderNodes;
	}
	function checkSlotCount(componentName, expectedSlotCount, projectableNodes) {
	    var givenSlotCount = lang_1.isPresent(projectableNodes) ? projectableNodes.length : 0;
	    if (givenSlotCount < expectedSlotCount) {
	        throw new exceptions_1.BaseException(("The component " + componentName + " has " + expectedSlotCount + " <ng-content> elements,") +
	            (" but only " + givenSlotCount + " slots were provided."));
	    }
	}
	exports.checkSlotCount = checkSlotCount;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var di_1 = __webpack_require__(11);
	var provider_1 = __webpack_require__(18);
	var injector_1 = __webpack_require__(16);
	var provider_2 = __webpack_require__(18);
	var di_2 = __webpack_require__(9);
	var view_type_1 = __webpack_require__(93);
	var element_ref_1 = __webpack_require__(94);
	var view_container_ref_1 = __webpack_require__(95);
	var element_ref_2 = __webpack_require__(94);
	var api_1 = __webpack_require__(96);
	var template_ref_1 = __webpack_require__(97);
	var directives_1 = __webpack_require__(28);
	var change_detection_1 = __webpack_require__(30);
	var query_list_1 = __webpack_require__(98);
	var reflection_1 = __webpack_require__(21);
	var pipe_provider_1 = __webpack_require__(99);
	var view_container_ref_2 = __webpack_require__(95);
	var _staticKeys;
	var StaticKeys = (function () {
	    function StaticKeys() {
	        this.templateRefId = di_1.Key.get(template_ref_1.TemplateRef).id;
	        this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
	        this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
	        this.elementRefId = di_1.Key.get(element_ref_2.ElementRef).id;
	        this.rendererId = di_1.Key.get(api_1.Renderer).id;
	    }
	    StaticKeys.instance = function () {
	        if (lang_1.isBlank(_staticKeys))
	            _staticKeys = new StaticKeys();
	        return _staticKeys;
	    };
	    return StaticKeys;
	})();
	exports.StaticKeys = StaticKeys;
	var DirectiveDependency = (function (_super) {
	    __extends(DirectiveDependency, _super);
	    function DirectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties, attributeName, queryDecorator) {
	        _super.call(this, key, optional, lowerBoundVisibility, upperBoundVisibility, properties);
	        this.attributeName = attributeName;
	        this.queryDecorator = queryDecorator;
	        this._verify();
	    }
	    /** @internal */
	    DirectiveDependency.prototype._verify = function () {
	        var count = 0;
	        if (lang_1.isPresent(this.queryDecorator))
	            count++;
	        if (lang_1.isPresent(this.attributeName))
	            count++;
	        if (count > 1)
	            throw new exceptions_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
	    };
	    DirectiveDependency.createFrom = function (d) {
	        return new DirectiveDependency(d.key, d.optional, d.lowerBoundVisibility, d.upperBoundVisibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
	    };
	    /** @internal */
	    DirectiveDependency._attributeName = function (properties) {
	        var p = properties.find(function (p) { return p instanceof di_2.AttributeMetadata; });
	        return lang_1.isPresent(p) ? p.attributeName : null;
	    };
	    /** @internal */
	    DirectiveDependency._query = function (properties) {
	        return properties.find(function (p) { return p instanceof di_2.QueryMetadata; });
	    };
	    return DirectiveDependency;
	})(di_1.Dependency);
	exports.DirectiveDependency = DirectiveDependency;
	var DirectiveProvider = (function (_super) {
	    __extends(DirectiveProvider, _super);
	    function DirectiveProvider(key, factory, deps, isComponent, providers, viewProviders, queries) {
	        _super.call(this, key, [new provider_2.ResolvedFactory(factory, deps)], false);
	        this.isComponent = isComponent;
	        this.providers = providers;
	        this.viewProviders = viewProviders;
	        this.queries = queries;
	    }
	    Object.defineProperty(DirectiveProvider.prototype, "displayName", {
	        get: function () { return this.key.displayName; },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveProvider.createFromType = function (type, meta) {
	        var provider = new di_1.Provider(type, { useClass: type });
	        if (lang_1.isBlank(meta)) {
	            meta = new directives_1.DirectiveMetadata();
	        }
	        var rb = provider_2.resolveProvider(provider);
	        var rf = rb.resolvedFactories[0];
	        var deps = rf.dependencies.map(DirectiveDependency.createFrom);
	        var isComponent = meta instanceof directives_1.ComponentMetadata;
	        var resolvedProviders = lang_1.isPresent(meta.providers) ? di_1.Injector.resolve(meta.providers) : null;
	        var resolvedViewProviders = meta instanceof directives_1.ComponentMetadata && lang_1.isPresent(meta.viewProviders) ?
	            di_1.Injector.resolve(meta.viewProviders) :
	            null;
	        var queries = [];
	        if (lang_1.isPresent(meta.queries)) {
	            collection_1.StringMapWrapper.forEach(meta.queries, function (meta, fieldName) {
	                var setter = reflection_1.reflector.setter(fieldName);
	                queries.push(new QueryMetadataWithSetter(setter, meta));
	            });
	        }
	        // queries passed into the constructor.
	        // TODO: remove this after constructor queries are no longer supported
	        deps.forEach(function (d) {
	            if (lang_1.isPresent(d.queryDecorator)) {
	                queries.push(new QueryMetadataWithSetter(null, d.queryDecorator));
	            }
	        });
	        return new DirectiveProvider(rb.key, rf.factory, deps, isComponent, resolvedProviders, resolvedViewProviders, queries);
	    };
	    return DirectiveProvider;
	})(provider_2.ResolvedProvider_);
	exports.DirectiveProvider = DirectiveProvider;
	var QueryMetadataWithSetter = (function () {
	    function QueryMetadataWithSetter(setter, metadata) {
	        this.setter = setter;
	        this.metadata = metadata;
	    }
	    return QueryMetadataWithSetter;
	})();
	exports.QueryMetadataWithSetter = QueryMetadataWithSetter;
	function setProvidersVisibility(providers, visibility, result) {
	    for (var i = 0; i < providers.length; i++) {
	        result.set(providers[i].key.id, visibility);
	    }
	}
	var AppProtoElement = (function () {
	    function AppProtoElement(firstProviderIsComponent, index, attributes, pwvs, protoQueryRefs, directiveVariableBindings) {
	        this.firstProviderIsComponent = firstProviderIsComponent;
	        this.index = index;
	        this.attributes = attributes;
	        this.protoQueryRefs = protoQueryRefs;
	        this.directiveVariableBindings = directiveVariableBindings;
	        var length = pwvs.length;
	        if (length > 0) {
	            this.protoInjector = new injector_1.ProtoInjector(pwvs);
	        }
	        else {
	            this.protoInjector = null;
	            this.protoQueryRefs = [];
	        }
	    }
	    AppProtoElement.create = function (metadataCache, index, attributes, directiveTypes, directiveVariableBindings) {
	        var componentDirProvider = null;
	        var mergedProvidersMap = new Map();
	        var providerVisibilityMap = new Map();
	        var providers = collection_1.ListWrapper.createGrowableSize(directiveTypes.length);
	        var protoQueryRefs = [];
	        for (var i = 0; i < directiveTypes.length; i++) {
	            var dirProvider = metadataCache.getResolvedDirectiveMetadata(directiveTypes[i]);
	            providers[i] = new injector_1.ProviderWithVisibility(dirProvider, dirProvider.isComponent ? injector_1.Visibility.PublicAndPrivate : injector_1.Visibility.Public);
	            if (dirProvider.isComponent) {
	                componentDirProvider = dirProvider;
	            }
	            else {
	                if (lang_1.isPresent(dirProvider.providers)) {
	                    provider_1.mergeResolvedProviders(dirProvider.providers, mergedProvidersMap);
	                    setProvidersVisibility(dirProvider.providers, injector_1.Visibility.Public, providerVisibilityMap);
	                }
	            }
	            if (lang_1.isPresent(dirProvider.viewProviders)) {
	                provider_1.mergeResolvedProviders(dirProvider.viewProviders, mergedProvidersMap);
	                setProvidersVisibility(dirProvider.viewProviders, injector_1.Visibility.Private, providerVisibilityMap);
	            }
	            for (var queryIdx = 0; queryIdx < dirProvider.queries.length; queryIdx++) {
	                var q = dirProvider.queries[queryIdx];
	                protoQueryRefs.push(new ProtoQueryRef(i, q.setter, q.metadata));
	            }
	        }
	        if (lang_1.isPresent(componentDirProvider) && lang_1.isPresent(componentDirProvider.providers)) {
	            // directive providers need to be prioritized over component providers
	            provider_1.mergeResolvedProviders(componentDirProvider.providers, mergedProvidersMap);
	            setProvidersVisibility(componentDirProvider.providers, injector_1.Visibility.Public, providerVisibilityMap);
	        }
	        mergedProvidersMap.forEach(function (provider, _) {
	            providers.push(new injector_1.ProviderWithVisibility(provider, providerVisibilityMap.get(provider.key.id)));
	        });
	        return new AppProtoElement(lang_1.isPresent(componentDirProvider), index, attributes, providers, protoQueryRefs, directiveVariableBindings);
	    };
	    AppProtoElement.prototype.getProviderAtIndex = function (index) { return this.protoInjector.getProviderAtIndex(index); };
	    return AppProtoElement;
	})();
	exports.AppProtoElement = AppProtoElement;
	var _Context = (function () {
	    function _Context(element, componentElement, injector) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.injector = injector;
	    }
	    return _Context;
	})();
	var InjectorWithHostBoundary = (function () {
	    function InjectorWithHostBoundary(injector, hostInjectorBoundary) {
	        this.injector = injector;
	        this.hostInjectorBoundary = hostInjectorBoundary;
	    }
	    return InjectorWithHostBoundary;
	})();
	exports.InjectorWithHostBoundary = InjectorWithHostBoundary;
	var AppElement = (function () {
	    function AppElement(proto, parentView, parent, nativeElement, embeddedViewFactory) {
	        var _this = this;
	        this.proto = proto;
	        this.parentView = parentView;
	        this.parent = parent;
	        this.nativeElement = nativeElement;
	        this.embeddedViewFactory = embeddedViewFactory;
	        this.nestedViews = null;
	        this.componentView = null;
	        this.ref = new element_ref_1.ElementRef_(this);
	        var parentInjector = lang_1.isPresent(parent) ? parent._injector : parentView.parentInjector;
	        if (lang_1.isPresent(this.proto.protoInjector)) {
	            var isBoundary;
	            if (lang_1.isPresent(parent) && lang_1.isPresent(parent.proto.protoInjector)) {
	                isBoundary = false;
	            }
	            else {
	                isBoundary = parentView.hostInjectorBoundary;
	            }
	            this._queryStrategy = this._buildQueryStrategy();
	            this._injector = new di_1.Injector(this.proto.protoInjector, parentInjector, isBoundary, this, function () { return _this._debugContext(); });
	            // we couple ourselves to the injector strategy to avoid polymorphic calls
	            var injectorStrategy = this._injector.internalStrategy;
	            this._strategy = injectorStrategy instanceof injector_1.InjectorInlineStrategy ?
	                new ElementDirectiveInlineStrategy(injectorStrategy, this) :
	                new ElementDirectiveDynamicStrategy(injectorStrategy, this);
	            this._strategy.init();
	        }
	        else {
	            this._queryStrategy = null;
	            this._injector = parentInjector;
	            this._strategy = null;
	        }
	    }
	    AppElement.getViewParentInjector = function (parentViewType, containerAppElement, imperativelyCreatedProviders, rootInjector) {
	        var parentInjector;
	        var hostInjectorBoundary;
	        switch (parentViewType) {
	            case view_type_1.ViewType.COMPONENT:
	                parentInjector = containerAppElement._injector;
	                hostInjectorBoundary = true;
	                break;
	            case view_type_1.ViewType.EMBEDDED:
	                parentInjector = lang_1.isPresent(containerAppElement.proto.protoInjector) ?
	                    containerAppElement._injector.parent :
	                    containerAppElement._injector;
	                hostInjectorBoundary = containerAppElement._injector.hostBoundary;
	                break;
	            case view_type_1.ViewType.HOST:
	                if (lang_1.isPresent(containerAppElement)) {
	                    // host view is attached to a container
	                    parentInjector = lang_1.isPresent(containerAppElement.proto.protoInjector) ?
	                        containerAppElement._injector.parent :
	                        containerAppElement._injector;
	                    if (lang_1.isPresent(imperativelyCreatedProviders)) {
	                        var imperativeProvidersWithVisibility = imperativelyCreatedProviders.map(function (p) { return new injector_1.ProviderWithVisibility(p, injector_1.Visibility.Public); });
	                        // The imperative injector is similar to having an element between
	                        // the dynamic-loaded component and its parent => no boundary between
	                        // the component and imperativelyCreatedInjector.
	                        parentInjector = new di_1.Injector(new injector_1.ProtoInjector(imperativeProvidersWithVisibility), parentInjector, true, null, null);
	                        hostInjectorBoundary = false;
	                    }
	                    else {
	                        hostInjectorBoundary = containerAppElement._injector.hostBoundary;
	                    }
	                }
	                else {
	                    // bootstrap
	                    parentInjector = rootInjector;
	                    hostInjectorBoundary = true;
	                }
	                break;
	        }
	        return new InjectorWithHostBoundary(parentInjector, hostInjectorBoundary);
	    };
	    AppElement.prototype.attachComponentView = function (componentView) { this.componentView = componentView; };
	    AppElement.prototype._debugContext = function () {
	        var c = this.parentView.getDebugContext(this, null, null);
	        return lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.injector) : null;
	    };
	    AppElement.prototype.hasVariableBinding = function (name) {
	        var vb = this.proto.directiveVariableBindings;
	        return lang_1.isPresent(vb) && collection_1.StringMapWrapper.contains(vb, name);
	    };
	    AppElement.prototype.getVariableBinding = function (name) {
	        var index = this.proto.directiveVariableBindings[name];
	        return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
	    };
	    AppElement.prototype.get = function (token) { return this._injector.get(token); };
	    AppElement.prototype.hasDirective = function (type) { return lang_1.isPresent(this._injector.getOptional(type)); };
	    AppElement.prototype.getComponent = function () { return lang_1.isPresent(this._strategy) ? this._strategy.getComponent() : null; };
	    AppElement.prototype.getInjector = function () { return this._injector; };
	    AppElement.prototype.getElementRef = function () { return this.ref; };
	    AppElement.prototype.getViewContainerRef = function () { return new view_container_ref_2.ViewContainerRef_(this); };
	    AppElement.prototype.getTemplateRef = function () {
	        if (lang_1.isPresent(this.embeddedViewFactory)) {
	            return new template_ref_1.TemplateRef_(this.ref);
	        }
	        return null;
	    };
	    AppElement.prototype.getDependency = function (injector, provider, dep) {
	        if (provider instanceof DirectiveProvider) {
	            var dirDep = dep;
	            if (lang_1.isPresent(dirDep.attributeName))
	                return this._buildAttribute(dirDep);
	            if (lang_1.isPresent(dirDep.queryDecorator))
	                return this._queryStrategy.findQuery(dirDep.queryDecorator).list;
	            if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
	                // We provide the component's view change detector to components and
	                // the surrounding component's change detector to directives.
	                if (this.proto.firstProviderIsComponent) {
	                    // Note: The component view is not yet created when
	                    // this method is called!
	                    return new _ComponentViewChangeDetectorRef(this);
	                }
	                else {
	                    return this.parentView.changeDetector.ref;
	                }
	            }
	            if (dirDep.key.id === StaticKeys.instance().elementRefId) {
	                return this.getElementRef();
	            }
	            if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
	                return this.getViewContainerRef();
	            }
	            if (dirDep.key.id === StaticKeys.instance().templateRefId) {
	                var tr = this.getTemplateRef();
	                if (lang_1.isBlank(tr) && !dirDep.optional) {
	                    throw new di_1.NoProviderError(null, dirDep.key);
	                }
	                return tr;
	            }
	            if (dirDep.key.id === StaticKeys.instance().rendererId) {
	                return this.parentView.renderer;
	            }
	        }
	        else if (provider instanceof pipe_provider_1.PipeProvider) {
	            if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
	                // We provide the component's view change detector to components and
	                // the surrounding component's change detector to directives.
	                if (this.proto.firstProviderIsComponent) {
	                    // Note: The component view is not yet created when
	                    // this method is called!
	                    return new _ComponentViewChangeDetectorRef(this);
	                }
	                else {
	                    return this.parentView.changeDetector;
	                }
	            }
	        }
	        return injector_1.UNDEFINED;
	    };
	    AppElement.prototype._buildAttribute = function (dep) {
	        var attributes = this.proto.attributes;
	        if (lang_1.isPresent(attributes) && collection_1.StringMapWrapper.contains(attributes, dep.attributeName)) {
	            return attributes[dep.attributeName];
	        }
	        else {
	            return null;
	        }
	    };
	    AppElement.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var templateRef = this.getTemplateRef();
	        if (query.selector === template_ref_1.TemplateRef && lang_1.isPresent(templateRef)) {
	            list.push(templateRef);
	        }
	        if (this._strategy != null) {
	            this._strategy.addDirectivesMatchingQuery(query, list);
	        }
	    };
	    AppElement.prototype._buildQueryStrategy = function () {
	        if (this.proto.protoQueryRefs.length === 0) {
	            return _emptyQueryStrategy;
	        }
	        else if (this.proto.protoQueryRefs.length <=
	            InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES) {
	            return new InlineQueryStrategy(this);
	        }
	        else {
	            return new DynamicQueryStrategy(this);
	        }
	    };
	    AppElement.prototype.getDirectiveAtIndex = function (index) { return this._injector.getAt(index); };
	    AppElement.prototype.ngAfterViewChecked = function () {
	        if (lang_1.isPresent(this._queryStrategy))
	            this._queryStrategy.updateViewQueries();
	    };
	    AppElement.prototype.ngAfterContentChecked = function () {
	        if (lang_1.isPresent(this._queryStrategy))
	            this._queryStrategy.updateContentQueries();
	    };
	    AppElement.prototype.traverseAndSetQueriesAsDirty = function () {
	        var inj = this;
	        while (lang_1.isPresent(inj)) {
	            inj._setQueriesAsDirty();
	            if (lang_1.isBlank(inj.parent) && inj.parentView.proto.type === view_type_1.ViewType.EMBEDDED) {
	                inj = inj.parentView.containerAppElement;
	            }
	            else {
	                inj = inj.parent;
	            }
	        }
	    };
	    AppElement.prototype._setQueriesAsDirty = function () {
	        if (lang_1.isPresent(this._queryStrategy)) {
	            this._queryStrategy.setContentQueriesAsDirty();
	        }
	        if (this.parentView.proto.type === view_type_1.ViewType.COMPONENT) {
	            this.parentView.containerAppElement._queryStrategy.setViewQueriesAsDirty();
	        }
	    };
	    return AppElement;
	})();
	exports.AppElement = AppElement;
	var _EmptyQueryStrategy = (function () {
	    function _EmptyQueryStrategy() {
	    }
	    _EmptyQueryStrategy.prototype.setContentQueriesAsDirty = function () { };
	    _EmptyQueryStrategy.prototype.setViewQueriesAsDirty = function () { };
	    _EmptyQueryStrategy.prototype.updateContentQueries = function () { };
	    _EmptyQueryStrategy.prototype.updateViewQueries = function () { };
	    _EmptyQueryStrategy.prototype.findQuery = function (query) {
	        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    return _EmptyQueryStrategy;
	})();
	var _emptyQueryStrategy = new _EmptyQueryStrategy();
	var InlineQueryStrategy = (function () {
	    function InlineQueryStrategy(ei) {
	        var protoRefs = ei.proto.protoQueryRefs;
	        if (protoRefs.length > 0)
	            this.query0 = new QueryRef(protoRefs[0], ei);
	        if (protoRefs.length > 1)
	            this.query1 = new QueryRef(protoRefs[1], ei);
	        if (protoRefs.length > 2)
	            this.query2 = new QueryRef(protoRefs[2], ei);
	    }
	    InlineQueryStrategy.prototype.setContentQueriesAsDirty = function () {
	        if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery)
	            this.query0.dirty = true;
	        if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery)
	            this.query1.dirty = true;
	        if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery)
	            this.query2.dirty = true;
	    };
	    InlineQueryStrategy.prototype.setViewQueriesAsDirty = function () {
	        if (lang_1.isPresent(this.query0) && this.query0.isViewQuery)
	            this.query0.dirty = true;
	        if (lang_1.isPresent(this.query1) && this.query1.isViewQuery)
	            this.query1.dirty = true;
	        if (lang_1.isPresent(this.query2) && this.query2.isViewQuery)
	            this.query2.dirty = true;
	    };
	    InlineQueryStrategy.prototype.updateContentQueries = function () {
	        if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery) {
	            this.query0.update();
	        }
	        if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery) {
	            this.query1.update();
	        }
	        if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery) {
	            this.query2.update();
	        }
	    };
	    InlineQueryStrategy.prototype.updateViewQueries = function () {
	        if (lang_1.isPresent(this.query0) && this.query0.isViewQuery) {
	            this.query0.update();
	        }
	        if (lang_1.isPresent(this.query1) && this.query1.isViewQuery) {
	            this.query1.update();
	        }
	        if (lang_1.isPresent(this.query2) && this.query2.isViewQuery) {
	            this.query2.update();
	        }
	    };
	    InlineQueryStrategy.prototype.findQuery = function (query) {
	        if (lang_1.isPresent(this.query0) && this.query0.protoQueryRef.query === query) {
	            return this.query0;
	        }
	        if (lang_1.isPresent(this.query1) && this.query1.protoQueryRef.query === query) {
	            return this.query1;
	        }
	        if (lang_1.isPresent(this.query2) && this.query2.protoQueryRef.query === query) {
	            return this.query2;
	        }
	        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES = 3;
	    return InlineQueryStrategy;
	})();
	var DynamicQueryStrategy = (function () {
	    function DynamicQueryStrategy(ei) {
	        this.queries = ei.proto.protoQueryRefs.map(function (p) { return new QueryRef(p, ei); });
	    }
	    DynamicQueryStrategy.prototype.setContentQueriesAsDirty = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (!q.isViewQuery)
	                q.dirty = true;
	        }
	    };
	    DynamicQueryStrategy.prototype.setViewQueriesAsDirty = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (q.isViewQuery)
	                q.dirty = true;
	        }
	    };
	    DynamicQueryStrategy.prototype.updateContentQueries = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (!q.isViewQuery) {
	                q.update();
	            }
	        }
	    };
	    DynamicQueryStrategy.prototype.updateViewQueries = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (q.isViewQuery) {
	                q.update();
	            }
	        }
	    };
	    DynamicQueryStrategy.prototype.findQuery = function (query) {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (q.protoQueryRef.query === query) {
	                return q;
	            }
	        }
	        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    return DynamicQueryStrategy;
	})();
	/**
	 * Strategy used by the `ElementInjector` when the number of providers is 10 or less.
	 * In such a case, inlining fields is beneficial for performances.
	 */
	var ElementDirectiveInlineStrategy = (function () {
	    function ElementDirectiveInlineStrategy(injectorStrategy, _ei) {
	        this.injectorStrategy = injectorStrategy;
	        this._ei = _ei;
	    }
	    ElementDirectiveInlineStrategy.prototype.init = function () {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        i.resetConstructionCounter();
	        if (p.provider0 instanceof DirectiveProvider && lang_1.isPresent(p.keyId0) && i.obj0 === injector_1.UNDEFINED)
	            i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
	        if (p.provider1 instanceof DirectiveProvider && lang_1.isPresent(p.keyId1) && i.obj1 === injector_1.UNDEFINED)
	            i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
	        if (p.provider2 instanceof DirectiveProvider && lang_1.isPresent(p.keyId2) && i.obj2 === injector_1.UNDEFINED)
	            i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
	        if (p.provider3 instanceof DirectiveProvider && lang_1.isPresent(p.keyId3) && i.obj3 === injector_1.UNDEFINED)
	            i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
	        if (p.provider4 instanceof DirectiveProvider && lang_1.isPresent(p.keyId4) && i.obj4 === injector_1.UNDEFINED)
	            i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
	        if (p.provider5 instanceof DirectiveProvider && lang_1.isPresent(p.keyId5) && i.obj5 === injector_1.UNDEFINED)
	            i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
	        if (p.provider6 instanceof DirectiveProvider && lang_1.isPresent(p.keyId6) && i.obj6 === injector_1.UNDEFINED)
	            i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
	        if (p.provider7 instanceof DirectiveProvider && lang_1.isPresent(p.keyId7) && i.obj7 === injector_1.UNDEFINED)
	            i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
	        if (p.provider8 instanceof DirectiveProvider && lang_1.isPresent(p.keyId8) && i.obj8 === injector_1.UNDEFINED)
	            i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
	        if (p.provider9 instanceof DirectiveProvider && lang_1.isPresent(p.keyId9) && i.obj9 === injector_1.UNDEFINED)
	            i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
	    };
	    ElementDirectiveInlineStrategy.prototype.getComponent = function () { return this.injectorStrategy.obj0; };
	    ElementDirectiveInlineStrategy.prototype.isComponentKey = function (key) {
	        return this._ei.proto.firstProviderIsComponent && lang_1.isPresent(key) &&
	            key.id === this.injectorStrategy.protoStrategy.keyId0;
	    };
	    ElementDirectiveInlineStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        if (lang_1.isPresent(p.provider0) && p.provider0.key.token === query.selector) {
	            if (i.obj0 === injector_1.UNDEFINED)
	                i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
	            list.push(i.obj0);
	        }
	        if (lang_1.isPresent(p.provider1) && p.provider1.key.token === query.selector) {
	            if (i.obj1 === injector_1.UNDEFINED)
	                i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
	            list.push(i.obj1);
	        }
	        if (lang_1.isPresent(p.provider2) && p.provider2.key.token === query.selector) {
	            if (i.obj2 === injector_1.UNDEFINED)
	                i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
	            list.push(i.obj2);
	        }
	        if (lang_1.isPresent(p.provider3) && p.provider3.key.token === query.selector) {
	            if (i.obj3 === injector_1.UNDEFINED)
	                i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
	            list.push(i.obj3);
	        }
	        if (lang_1.isPresent(p.provider4) && p.provider4.key.token === query.selector) {
	            if (i.obj4 === injector_1.UNDEFINED)
	                i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
	            list.push(i.obj4);
	        }
	        if (lang_1.isPresent(p.provider5) && p.provider5.key.token === query.selector) {
	            if (i.obj5 === injector_1.UNDEFINED)
	                i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
	            list.push(i.obj5);
	        }
	        if (lang_1.isPresent(p.provider6) && p.provider6.key.token === query.selector) {
	            if (i.obj6 === injector_1.UNDEFINED)
	                i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
	            list.push(i.obj6);
	        }
	        if (lang_1.isPresent(p.provider7) && p.provider7.key.token === query.selector) {
	            if (i.obj7 === injector_1.UNDEFINED)
	                i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
	            list.push(i.obj7);
	        }
	        if (lang_1.isPresent(p.provider8) && p.provider8.key.token === query.selector) {
	            if (i.obj8 === injector_1.UNDEFINED)
	                i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
	            list.push(i.obj8);
	        }
	        if (lang_1.isPresent(p.provider9) && p.provider9.key.token === query.selector) {
	            if (i.obj9 === injector_1.UNDEFINED)
	                i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
	            list.push(i.obj9);
	        }
	    };
	    return ElementDirectiveInlineStrategy;
	})();
	/**
	 * Strategy used by the `ElementInjector` when the number of bindings is 11 or more.
	 * In such a case, there are too many fields to inline (see ElementInjectorInlineStrategy).
	 */
	var ElementDirectiveDynamicStrategy = (function () {
	    function ElementDirectiveDynamicStrategy(injectorStrategy, _ei) {
	        this.injectorStrategy = injectorStrategy;
	        this._ei = _ei;
	    }
	    ElementDirectiveDynamicStrategy.prototype.init = function () {
	        var inj = this.injectorStrategy;
	        var p = inj.protoStrategy;
	        inj.resetConstructionCounter();
	        for (var i = 0; i < p.keyIds.length; i++) {
	            if (p.providers[i] instanceof DirectiveProvider && lang_1.isPresent(p.keyIds[i]) &&
	                inj.objs[i] === injector_1.UNDEFINED) {
	                inj.objs[i] = inj.instantiateProvider(p.providers[i], p.visibilities[i]);
	            }
	        }
	    };
	    ElementDirectiveDynamicStrategy.prototype.getComponent = function () { return this.injectorStrategy.objs[0]; };
	    ElementDirectiveDynamicStrategy.prototype.isComponentKey = function (key) {
	        var p = this.injectorStrategy.protoStrategy;
	        return this._ei.proto.firstProviderIsComponent && lang_1.isPresent(key) && key.id === p.keyIds[0];
	    };
	    ElementDirectiveDynamicStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var ist = this.injectorStrategy;
	        var p = ist.protoStrategy;
	        for (var i = 0; i < p.providers.length; i++) {
	            if (p.providers[i].key.token === query.selector) {
	                if (ist.objs[i] === injector_1.UNDEFINED) {
	                    ist.objs[i] = ist.instantiateProvider(p.providers[i], p.visibilities[i]);
	                }
	                list.push(ist.objs[i]);
	            }
	        }
	    };
	    return ElementDirectiveDynamicStrategy;
	})();
	var ProtoQueryRef = (function () {
	    function ProtoQueryRef(dirIndex, setter, query) {
	        this.dirIndex = dirIndex;
	        this.setter = setter;
	        this.query = query;
	    }
	    Object.defineProperty(ProtoQueryRef.prototype, "usesPropertySyntax", {
	        get: function () { return lang_1.isPresent(this.setter); },
	        enumerable: true,
	        configurable: true
	    });
	    return ProtoQueryRef;
	})();
	exports.ProtoQueryRef = ProtoQueryRef;
	var QueryRef = (function () {
	    function QueryRef(protoQueryRef, originator) {
	        this.protoQueryRef = protoQueryRef;
	        this.originator = originator;
	        this.list = new query_list_1.QueryList();
	        this.dirty = true;
	    }
	    Object.defineProperty(QueryRef.prototype, "isViewQuery", {
	        get: function () { return this.protoQueryRef.query.isViewQuery; },
	        enumerable: true,
	        configurable: true
	    });
	    QueryRef.prototype.update = function () {
	        if (!this.dirty)
	            return;
	        this._update();
	        this.dirty = false;
	        // TODO delete the check once only field queries are supported
	        if (this.protoQueryRef.usesPropertySyntax) {
	            var dir = this.originator.getDirectiveAtIndex(this.protoQueryRef.dirIndex);
	            if (this.protoQueryRef.query.first) {
	                this.protoQueryRef.setter(dir, this.list.length > 0 ? this.list.first : null);
	            }
	            else {
	                this.protoQueryRef.setter(dir, this.list);
	            }
	        }
	        this.list.notifyOnChanges();
	    };
	    QueryRef.prototype._update = function () {
	        var aggregator = [];
	        if (this.protoQueryRef.query.isViewQuery) {
	            // intentionally skipping originator for view queries.
	            var nestedView = this.originator.componentView;
	            if (lang_1.isPresent(nestedView))
	                this._visitView(nestedView, aggregator);
	        }
	        else {
	            this._visit(this.originator, aggregator);
	        }
	        this.list.reset(aggregator);
	    };
	    ;
	    QueryRef.prototype._visit = function (inj, aggregator) {
	        var view = inj.parentView;
	        var startIdx = inj.proto.index;
	        for (var i = startIdx; i < view.appElements.length; i++) {
	            var curInj = view.appElements[i];
	            // The first injector after inj, that is outside the subtree rooted at
	            // inj has to have a null parent or a parent that is an ancestor of inj.
	            if (i > startIdx && (lang_1.isBlank(curInj.parent) || curInj.parent.proto.index < startIdx)) {
	                break;
	            }
	            if (!this.protoQueryRef.query.descendants &&
	                !(curInj.parent == this.originator || curInj == this.originator))
	                continue;
	            // We visit the view container(VC) views right after the injector that contains
	            // the VC. Theoretically, that might not be the right order if there are
	            // child injectors of said injector. Not clear whether if such case can
	            // even be constructed with the current apis.
	            this._visitInjector(curInj, aggregator);
	            this._visitViewContainerViews(curInj.nestedViews, aggregator);
	        }
	    };
	    QueryRef.prototype._visitInjector = function (inj, aggregator) {
	        if (this.protoQueryRef.query.isVarBindingQuery) {
	            this._aggregateVariableBinding(inj, aggregator);
	        }
	        else {
	            this._aggregateDirective(inj, aggregator);
	        }
	    };
	    QueryRef.prototype._visitViewContainerViews = function (views, aggregator) {
	        if (lang_1.isPresent(views)) {
	            for (var j = 0; j < views.length; j++) {
	                this._visitView(views[j], aggregator);
	            }
	        }
	    };
	    QueryRef.prototype._visitView = function (view, aggregator) {
	        for (var i = 0; i < view.appElements.length; i++) {
	            var inj = view.appElements[i];
	            this._visitInjector(inj, aggregator);
	            this._visitViewContainerViews(inj.nestedViews, aggregator);
	        }
	    };
	    QueryRef.prototype._aggregateVariableBinding = function (inj, aggregator) {
	        var vb = this.protoQueryRef.query.varBindings;
	        for (var i = 0; i < vb.length; ++i) {
	            if (inj.hasVariableBinding(vb[i])) {
	                aggregator.push(inj.getVariableBinding(vb[i]));
	            }
	        }
	    };
	    QueryRef.prototype._aggregateDirective = function (inj, aggregator) {
	        inj.addDirectivesMatchingQuery(this.protoQueryRef.query, aggregator);
	    };
	    return QueryRef;
	})();
	exports.QueryRef = QueryRef;
	var _ComponentViewChangeDetectorRef = (function (_super) {
	    __extends(_ComponentViewChangeDetectorRef, _super);
	    function _ComponentViewChangeDetectorRef(_appElement) {
	        _super.call(this);
	        this._appElement = _appElement;
	    }
	    _ComponentViewChangeDetectorRef.prototype.markForCheck = function () { this._appElement.componentView.changeDetector.ref.markForCheck(); };
	    _ComponentViewChangeDetectorRef.prototype.detach = function () { this._appElement.componentView.changeDetector.ref.detach(); };
	    _ComponentViewChangeDetectorRef.prototype.detectChanges = function () { this._appElement.componentView.changeDetector.ref.detectChanges(); };
	    _ComponentViewChangeDetectorRef.prototype.checkNoChanges = function () { this._appElement.componentView.changeDetector.ref.checkNoChanges(); };
	    _ComponentViewChangeDetectorRef.prototype.reattach = function () { this._appElement.componentView.changeDetector.ref.reattach(); };
	    return _ComponentViewChangeDetectorRef;
	})(change_detection_1.ChangeDetectorRef);


/***/ },
/* 93 */
/***/ function(module, exports) {

	'use strict';(function (ViewType) {
	    // A view that contains the host element with bound component directive.
	    // Contains a COMPONENT view
	    ViewType[ViewType["HOST"] = 0] = "HOST";
	    // The view of the component
	    // Can contain 0 to n EMBEDDED views
	    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
	    // A view that is embedded into another View via a <template> element
	    // inside of a COMPONENT view
	    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
	})(exports.ViewType || (exports.ViewType = {}));
	var ViewType = exports.ViewType;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var exceptions_1 = __webpack_require__(19);
	/**
	 * Represents a location in a View that has an injection, change-detection and render context
	 * associated with it.
	 *
	 * An `ElementRef` is created for each element in the Template that contains a Directive, Component
	 * or data-binding.
	 *
	 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	 * element.
	 */
	var ElementRef = (function () {
	    function ElementRef() {
	    }
	    Object.defineProperty(ElementRef.prototype, "nativeElement", {
	        /**
	         * The underlying native element or `null` if direct access to native elements is not supported
	         * (e.g. when the application runs in a web worker).
	         *
	         * <div class="callout is-critical">
	         *   <header>Use with caution</header>
	         *   <p>
	         *    Use this API as the last resort when direct access to DOM is needed. Use templating and
	         *    data-binding provided by Angular instead. Alternatively you take a look at {@link Renderer}
	         *    which provides API that can safely be used even when direct access to native elements is not
	         *    supported.
	         *   </p>
	         *   <p>
	         *    Relying on direct DOM access creates tight coupling between your application and rendering
	         *    layers which will make it impossible to separate the two and deploy your application into a
	         *    web worker.
	         *   </p>
	         * </div>
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return ElementRef;
	})();
	exports.ElementRef = ElementRef;
	var ElementRef_ = (function () {
	    function ElementRef_(_appElement) {
	        this._appElement = _appElement;
	    }
	    Object.defineProperty(ElementRef_.prototype, "internalElement", {
	        get: function () { return this._appElement; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ElementRef_.prototype, "nativeElement", {
	        get: function () { return this._appElement.nativeElement; },
	        enumerable: true,
	        configurable: true
	    });
	    return ElementRef_;
	})();
	exports.ElementRef_ = ElementRef_;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var exceptions_1 = __webpack_require__(19);
	var lang_1 = __webpack_require__(10);
	/**
	 * Represents a container where one or more Views can be attached.
	 *
	 * The container can contain two kinds of Views. Host Views, created by instantiating a
	 * {@link Component} via {@link #createHostView}, and Embedded Views, created by instantiating an
	 * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
	 *
	 * The location of the View Container within the containing View is specified by the Anchor
	 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	 * have a single View Container.
	 *
	 * Root elements of Views attached to this container become siblings of the Anchor Element in
	 * the Rendered View.
	 *
	 * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
	 * with `ViewContainerRef` on the Element, or you obtain it via
	 * {@link AppViewManager#getViewContainer}.
	 *
	 * <!-- TODO(i): we are also considering ElementRef#viewContainer api -->
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef() {
	    }
	    Object.defineProperty(ViewContainerRef.prototype, "element", {
	        /**
	         * Anchor element that specifies the location of this container in the containing View.
	         * <!-- TODO: rename to anchorElement -->
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Destroys all Views in this container.
	     */
	    ViewContainerRef.prototype.clear = function () {
	        for (var i = this.length - 1; i >= 0; i--) {
	            this.remove(i);
	        }
	    };
	    Object.defineProperty(ViewContainerRef.prototype, "length", {
	        /**
	         * Returns the number of Views currently attached to this container.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return ViewContainerRef;
	})();
	exports.ViewContainerRef = ViewContainerRef;
	var ViewContainerRef_ = (function (_super) {
	    __extends(ViewContainerRef_, _super);
	    function ViewContainerRef_(_element) {
	        _super.call(this);
	        this._element = _element;
	    }
	    ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        get: function () {
	            var views = this._element.nestedViews;
	            return lang_1.isPresent(views) ? views.length : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "element", {
	        get: function () { return this._element.ref; },
	        enumerable: true,
	        configurable: true
	    });
	    // TODO(rado): profile and decide whether bounds checks should be added
	    // to the methods below.
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length;
	        var vm = this._element.parentView.viewManager;
	        return vm.createEmbeddedViewInContainer(this._element.ref, index, templateRef);
	    };
	    ViewContainerRef_.prototype.createHostView = function (hostViewFactoryRef, index, dynamicallyCreatedProviders, projectableNodes) {
	        if (index === void 0) { index = -1; }
	        if (dynamicallyCreatedProviders === void 0) { dynamicallyCreatedProviders = null; }
	        if (projectableNodes === void 0) { projectableNodes = null; }
	        if (index == -1)
	            index = this.length;
	        var vm = this._element.parentView.viewManager;
	        return vm.createHostViewInContainer(this._element.ref, index, hostViewFactoryRef, dynamicallyCreatedProviders, projectableNodes);
	    };
	    // TODO(i): refactor insert+remove into move
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length;
	        var vm = this._element.parentView.viewManager;
	        return vm.attachViewInContainer(this._element.ref, index, viewRef);
	    };
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return collection_1.ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
	    };
	    // TODO(i): rename to destroy
	    ViewContainerRef_.prototype.remove = function (index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length - 1;
	        var vm = this._element.parentView.viewManager;
	        return vm.destroyViewInContainer(this._element.ref, index);
	        // view is intentionally not returned to the client.
	    };
	    // TODO(i): refactor insert+remove into move
	    ViewContainerRef_.prototype.detach = function (index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length - 1;
	        var vm = this._element.parentView.viewManager;
	        return vm.detachViewInContainer(this._element.ref, index);
	    };
	    return ViewContainerRef_;
	})(ViewContainerRef);
	exports.ViewContainerRef_ = ViewContainerRef_;


/***/ },
/* 96 */
/***/ function(module, exports) {

	'use strict';var RenderComponentType = (function () {
	    function RenderComponentType(id, encapsulation, styles) {
	        this.id = id;
	        this.encapsulation = encapsulation;
	        this.styles = styles;
	    }
	    return RenderComponentType;
	})();
	exports.RenderComponentType = RenderComponentType;
	var RenderDebugInfo = (function () {
	    function RenderDebugInfo(injector, component, providerTokens, locals) {
	        this.injector = injector;
	        this.component = component;
	        this.providerTokens = providerTokens;
	        this.locals = locals;
	    }
	    return RenderDebugInfo;
	})();
	exports.RenderDebugInfo = RenderDebugInfo;
	var Renderer = (function () {
	    function Renderer() {
	    }
	    return Renderer;
	})();
	exports.Renderer = Renderer;
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
	 * respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	 */
	var RootRenderer = (function () {
	    function RootRenderer() {
	    }
	    return RootRenderer;
	})();
	exports.RootRenderer = RootRenderer;


/***/ },
/* 97 */
/***/ function(module, exports) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Represents an Embedded Template that can be used to instantiate Embedded Views.
	 *
	 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	 * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	 * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	 * `TemplateRef` from a Component or a Directive via {@link Query}.
	 *
	 * To instantiate Embedded Views based on a Template, use
	 * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	 * View Container.
	 */
	var TemplateRef = (function () {
	    function TemplateRef() {
	    }
	    Object.defineProperty(TemplateRef.prototype, "elementRef", {
	        /**
	         * The location in the View where the Embedded View logically belongs to.
	         *
	         * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`
	         * inherit from the contexts of this location.
	         *
	         * Typically new Embedded Views are attached to the View Container of this location, but in
	         * advanced use-cases, the View can be attached to a different container while keeping the
	         * data-binding and injection context from the original location.
	         *
	         */
	        // TODO(i): rename to anchor or location
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef;
	})();
	exports.TemplateRef = TemplateRef;
	var TemplateRef_ = (function (_super) {
	    __extends(TemplateRef_, _super);
	    function TemplateRef_(_elementRef) {
	        _super.call(this);
	        this._elementRef = _elementRef;
	    }
	    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	        get: function () { return this._elementRef; },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef_;
	})(TemplateRef);
	exports.TemplateRef_ = TemplateRef_;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ngFor="#i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	 * ```typescript
	 * @Component({...})
	 * class Container {
	 *   constructor(@Query(Item) items: QueryList<Item>) {
	 *     items.changes.subscribe(_ => console.log(items.length));
	 *   }
	 * }
	 * ```
	 */
	var QueryList = (function () {
	    function QueryList() {
	        this._results = [];
	        this._emitter = new async_1.EventEmitter();
	    }
	    Object.defineProperty(QueryList.prototype, "changes", {
	        get: function () { return this._emitter; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "length", {
	        get: function () { return this._results.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "first", {
	        get: function () { return collection_1.ListWrapper.first(this._results); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "last", {
	        get: function () { return collection_1.ListWrapper.last(this._results); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * returns a new array with the passed in function applied to each element.
	     */
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    /**
	     * returns a filtered array.
	     */
	    QueryList.prototype.filter = function (fn) { return this._results.filter(fn); };
	    /**
	     * returns a reduced value.
	     */
	    QueryList.prototype.reduce = function (fn, init) { return this._results.reduce(fn, init); };
	    /**
	     * converts QueryList into an array
	     */
	    QueryList.prototype.toArray = function () { return collection_1.ListWrapper.clone(this._results); };
	    QueryList.prototype[lang_1.getSymbolIterator()] = function () { return this._results[lang_1.getSymbolIterator()](); };
	    QueryList.prototype.toString = function () { return this._results.toString(); };
	    /**
	     * @internal
	     */
	    QueryList.prototype.reset = function (res) { this._results = res; };
	    /** @internal */
	    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	    return QueryList;
	})();
	exports.QueryList = QueryList;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var provider_1 = __webpack_require__(18);
	var di_1 = __webpack_require__(11);
	var PipeProvider = (function (_super) {
	    __extends(PipeProvider, _super);
	    function PipeProvider(name, pure, key, resolvedFactories, multiBinding) {
	        _super.call(this, key, resolvedFactories, multiBinding);
	        this.name = name;
	        this.pure = pure;
	    }
	    PipeProvider.createFromType = function (type, metadata) {
	        var provider = new di_1.Provider(type, { useClass: type });
	        var rb = provider_1.resolveProvider(provider);
	        return new PipeProvider(metadata.name, metadata.pure, rb.key, rb.resolvedFactories, rb.multiProvider);
	    };
	    return PipeProvider;
	})(provider_1.ResolvedProvider_);
	exports.PipeProvider = PipeProvider;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(19);
	var ViewRef = (function () {
	    function ViewRef() {
	    }
	    Object.defineProperty(ViewRef.prototype, "changeDetectorRef", {
	        /**
	         * @internal
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ViewRef.prototype, "destroyed", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return ViewRef;
	})();
	exports.ViewRef = ViewRef;
	/**
	 * Represents a View containing a single Element that is the Host Element of a {@link Component}
	 * instance.
	 *
	 * A Host View is created for every dynamically created Component that was compiled on its own (as
	 * opposed to as a part of another Component's Template) via {@link Compiler#compileInHost} or one
	 * of the higher-level APIs: {@link AppViewManager#createRootHostView},
	 * {@link AppViewManager#createHostViewInContainer}, {@link ViewContainerRef#createHostView}.
	 */
	var HostViewRef = (function (_super) {
	    __extends(HostViewRef, _super);
	    function HostViewRef() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(HostViewRef.prototype, "rootNodes", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return HostViewRef;
	})(ViewRef);
	exports.HostViewRef = HostViewRef;
	/**
	 * Represents an Angular View.
	 *
	 * <!-- TODO: move the next two paragraphs to the dev guide -->
	 * A View is a fundamental building block of the application UI. It is the smallest grouping of
	 * Elements which are created and destroyed together.
	 *
	 * Properties of elements in a View can change, but the structure (number and order) of elements in
	 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	 * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
	 * <!-- /TODO -->
	 *
	 * ### Example
	 *
	 * Given this template...
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ngFor="var item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * ... we have two {@link ProtoViewRef}s:
	 *
	 * Outer {@link ProtoViewRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <template ngFor var-item [ngForOf]="items"></template>
	 * </ul>
	 * ```
	 *
	 * Inner {@link ProtoViewRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
	 *
	 * The outer/inner {@link ProtoViewRef}s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <template view-container-ref></template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 */
	var EmbeddedViewRef = (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return EmbeddedViewRef;
	})(ViewRef);
	exports.EmbeddedViewRef = EmbeddedViewRef;
	var ViewRef_ = (function () {
	    function ViewRef_(_view) {
	        this._view = _view;
	        this._view = _view;
	    }
	    Object.defineProperty(ViewRef_.prototype, "internalView", {
	        get: function () { return this._view; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "changeDetectorRef", {
	        /**
	         * Return `ChangeDetectorRef`
	         */
	        get: function () { return this._view.changeDetector.ref; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	        get: function () { return this._view.flatRootNodes; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef_.prototype.setLocal = function (variableName, value) { this._view.setLocal(variableName, value); };
	    ViewRef_.prototype.hasLocal = function (variableName) { return this._view.hasLocal(variableName); };
	    Object.defineProperty(ViewRef_.prototype, "destroyed", {
	        get: function () { return this._view.destroyed; },
	        enumerable: true,
	        configurable: true
	    });
	    return ViewRef_;
	})();
	exports.ViewRef_ = ViewRef_;
	var HostViewFactoryRef = (function () {
	    function HostViewFactoryRef() {
	    }
	    return HostViewFactoryRef;
	})();
	exports.HostViewFactoryRef = HostViewFactoryRef;
	var HostViewFactoryRef_ = (function () {
	    function HostViewFactoryRef_(_hostViewFactory) {
	        this._hostViewFactory = _hostViewFactory;
	    }
	    Object.defineProperty(HostViewFactoryRef_.prototype, "internalHostViewFactory", {
	        get: function () { return this._hostViewFactory; },
	        enumerable: true,
	        configurable: true
	    });
	    return HostViewFactoryRef_;
	})();
	exports.HostViewFactoryRef_ = HostViewFactoryRef_;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var cd = __webpack_require__(102);
	var ProtoPipes = (function () {
	    function ProtoPipes(
	        /**
	        * Map of {@link PipeMetadata} names to {@link PipeMetadata} implementations.
	        */
	        config) {
	        this.config = config;
	        this.config = config;
	    }
	    ProtoPipes.fromProviders = function (providers) {
	        var config = {};
	        providers.forEach(function (b) { return config[b.name] = b; });
	        return new ProtoPipes(config);
	    };
	    ProtoPipes.prototype.get = function (name) {
	        var provider = this.config[name];
	        if (lang_1.isBlank(provider))
	            throw new exceptions_1.BaseException("Cannot find pipe '" + name + "'.");
	        return provider;
	    };
	    return ProtoPipes;
	})();
	exports.ProtoPipes = ProtoPipes;
	var Pipes = (function () {
	    function Pipes(proto, injector) {
	        this.proto = proto;
	        this.injector = injector;
	        /** @internal */
	        this._config = {};
	    }
	    Pipes.prototype.get = function (name) {
	        var cached = collection_1.StringMapWrapper.get(this._config, name);
	        if (lang_1.isPresent(cached))
	            return cached;
	        var p = this.proto.get(name);
	        var transform = this.injector.instantiateResolved(p);
	        var res = new cd.SelectedPipe(transform, p.pure);
	        if (p.pure) {
	            collection_1.StringMapWrapper.set(this._config, name, res);
	        }
	        return res;
	    };
	    return Pipes;
	})();
	exports.Pipes = Pipes;


/***/ },
/* 102 */
/***/ function(module, exports) {

	'use strict';var SelectedPipe = (function () {
	    function SelectedPipe(pipe, pure) {
	        this.pipe = pipe;
	        this.pure = pure;
	    }
	    return SelectedPipe;
	})();
	exports.SelectedPipe = SelectedPipe;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var exceptions_1 = __webpack_require__(19);
	var view_1 = __webpack_require__(91);
	var element_1 = __webpack_require__(92);
	var api_1 = __webpack_require__(96);
	var profile_1 = __webpack_require__(50);
	var application_tokens_1 = __webpack_require__(87);
	var view_type_1 = __webpack_require__(93);
	/**
	 * Service exposing low level API for creating, moving and destroying Views.
	 *
	 * Most applications should use higher-level abstractions like {@link DynamicComponentLoader} and
	 * {@link ViewContainerRef} instead.
	 */
	var AppViewManager = (function () {
	    function AppViewManager() {
	    }
	    return AppViewManager;
	})();
	exports.AppViewManager = AppViewManager;
	var AppViewManager_ = (function (_super) {
	    __extends(AppViewManager_, _super);
	    function AppViewManager_(_renderer, _appId) {
	        _super.call(this);
	        this._renderer = _renderer;
	        this._appId = _appId;
	        this._nextCompTypeId = 0;
	        /** @internal */
	        this._createRootHostViewScope = profile_1.wtfCreateScope('AppViewManager#createRootHostView()');
	        /** @internal */
	        this._destroyRootHostViewScope = profile_1.wtfCreateScope('AppViewManager#destroyRootHostView()');
	        /** @internal */
	        this._createEmbeddedViewInContainerScope = profile_1.wtfCreateScope('AppViewManager#createEmbeddedViewInContainer()');
	        /** @internal */
	        this._createHostViewInContainerScope = profile_1.wtfCreateScope('AppViewManager#createHostViewInContainer()');
	        /** @internal */
	        this._destroyViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#destroyViewInContainer()');
	        /** @internal */
	        this._attachViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#attachViewInContainer()');
	        /** @internal */
	        this._detachViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#detachViewInContainer()');
	    }
	    AppViewManager_.prototype.getViewContainer = function (location) {
	        return location.internalElement.getViewContainerRef();
	    };
	    AppViewManager_.prototype.getHostElement = function (hostViewRef) {
	        var hostView = hostViewRef.internalView;
	        if (hostView.proto.type !== view_type_1.ViewType.HOST) {
	            throw new exceptions_1.BaseException('This operation is only allowed on host views');
	        }
	        return hostView.appElements[0].ref;
	    };
	    AppViewManager_.prototype.getNamedElementInComponentView = function (hostLocation, variableName) {
	        var appEl = hostLocation.internalElement;
	        var componentView = appEl.componentView;
	        if (lang_1.isBlank(componentView)) {
	            throw new exceptions_1.BaseException("There is no component directive at element " + hostLocation);
	        }
	        for (var i = 0; i < componentView.appElements.length; i++) {
	            var compAppEl = componentView.appElements[i];
	            if (collection_1.StringMapWrapper.contains(compAppEl.proto.directiveVariableBindings, variableName)) {
	                return compAppEl.ref;
	            }
	        }
	        throw new exceptions_1.BaseException("Could not find variable " + variableName);
	    };
	    AppViewManager_.prototype.getComponent = function (hostLocation) {
	        return hostLocation.internalElement.getComponent();
	    };
	    AppViewManager_.prototype.createRootHostView = function (hostViewFactoryRef, overrideSelector, injector, projectableNodes) {
	        if (projectableNodes === void 0) { projectableNodes = null; }
	        var s = this._createRootHostViewScope();
	        var hostViewFactory = hostViewFactoryRef.internalHostViewFactory;
	        var selector = lang_1.isPresent(overrideSelector) ? overrideSelector : hostViewFactory.selector;
	        var view = hostViewFactory.viewFactory(this._renderer, this, null, projectableNodes, selector, null, injector);
	        return profile_1.wtfLeave(s, view.ref);
	    };
	    AppViewManager_.prototype.destroyRootHostView = function (hostViewRef) {
	        var s = this._destroyRootHostViewScope();
	        var hostView = hostViewRef.internalView;
	        hostView.renderer.detachView(view_1.flattenNestedViewRenderNodes(hostView.rootNodesOrAppElements));
	        hostView.destroy();
	        profile_1.wtfLeave(s);
	    };
	    AppViewManager_.prototype.createEmbeddedViewInContainer = function (viewContainerLocation, index, templateRef) {
	        var s = this._createEmbeddedViewInContainerScope();
	        var contextEl = templateRef.elementRef.internalElement;
	        var view = contextEl.embeddedViewFactory(contextEl.parentView.renderer, this, contextEl, contextEl.parentView.projectableNodes, null, null, null);
	        this._attachViewToContainer(view, viewContainerLocation.internalElement, index);
	        return profile_1.wtfLeave(s, view.ref);
	    };
	    AppViewManager_.prototype.createHostViewInContainer = function (viewContainerLocation, index, hostViewFactoryRef, dynamicallyCreatedProviders, projectableNodes) {
	        var s = this._createHostViewInContainerScope();
	        // TODO(tbosch): This should be specifiable via an additional argument!
	        var viewContainerLocation_ = viewContainerLocation;
	        var contextEl = viewContainerLocation_.internalElement;
	        var hostViewFactory = hostViewFactoryRef.internalHostViewFactory;
	        var view = hostViewFactory.viewFactory(contextEl.parentView.renderer, contextEl.parentView.viewManager, contextEl, projectableNodes, null, dynamicallyCreatedProviders, null);
	        this._attachViewToContainer(view, viewContainerLocation_.internalElement, index);
	        return profile_1.wtfLeave(s, view.ref);
	    };
	    AppViewManager_.prototype.destroyViewInContainer = function (viewContainerLocation, index) {
	        var s = this._destroyViewInContainerScope();
	        var view = this._detachViewInContainer(viewContainerLocation.internalElement, index);
	        view.destroy();
	        profile_1.wtfLeave(s);
	    };
	    // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
	    AppViewManager_.prototype.attachViewInContainer = function (viewContainerLocation, index, viewRef) {
	        var viewRef_ = viewRef;
	        var s = this._attachViewInContainerScope();
	        this._attachViewToContainer(viewRef_.internalView, viewContainerLocation.internalElement, index);
	        return profile_1.wtfLeave(s, viewRef_);
	    };
	    // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
	    AppViewManager_.prototype.detachViewInContainer = function (viewContainerLocation, index) {
	        var s = this._detachViewInContainerScope();
	        var view = this._detachViewInContainer(viewContainerLocation.internalElement, index);
	        return profile_1.wtfLeave(s, view.ref);
	    };
	    /** @internal */
	    AppViewManager_.prototype.onViewCreated = function (view) { };
	    /** @internal */
	    AppViewManager_.prototype.onViewDestroyed = function (view) { };
	    /** @internal */
	    AppViewManager_.prototype.createRenderComponentType = function (encapsulation, styles) {
	        return new api_1.RenderComponentType(this._appId + "-" + this._nextCompTypeId++, encapsulation, styles);
	    };
	    AppViewManager_.prototype._attachViewToContainer = function (view, vcAppElement, viewIndex) {
	        if (view.proto.type === view_type_1.ViewType.COMPONENT) {
	            throw new exceptions_1.BaseException("Component views can't be moved!");
	        }
	        var nestedViews = vcAppElement.nestedViews;
	        if (nestedViews == null) {
	            nestedViews = [];
	            vcAppElement.nestedViews = nestedViews;
	        }
	        collection_1.ListWrapper.insert(nestedViews, viewIndex, view);
	        var refNode;
	        if (viewIndex > 0) {
	            var prevView = nestedViews[viewIndex - 1];
	            refNode = prevView.rootNodesOrAppElements.length > 0 ?
	                prevView.rootNodesOrAppElements[prevView.rootNodesOrAppElements.length - 1] :
	                null;
	        }
	        else {
	            refNode = vcAppElement.nativeElement;
	        }
	        if (lang_1.isPresent(refNode)) {
	            var refRenderNode;
	            if (refNode instanceof element_1.AppElement) {
	                refRenderNode = refNode.nativeElement;
	            }
	            else {
	                refRenderNode = refNode;
	            }
	            view.renderer.attachViewAfter(refRenderNode, view_1.flattenNestedViewRenderNodes(view.rootNodesOrAppElements));
	        }
	        // TODO: This is only needed when a view is destroyed,
	        // not when it is detached for reordering with ng-for...
	        vcAppElement.parentView.changeDetector.addContentChild(view.changeDetector);
	        vcAppElement.traverseAndSetQueriesAsDirty();
	    };
	    AppViewManager_.prototype._detachViewInContainer = function (vcAppElement, viewIndex) {
	        var view = collection_1.ListWrapper.removeAt(vcAppElement.nestedViews, viewIndex);
	        if (view.proto.type === view_type_1.ViewType.COMPONENT) {
	            throw new exceptions_1.BaseException("Component views can't be moved!");
	        }
	        vcAppElement.traverseAndSetQueriesAsDirty();
	        view.renderer.detachView(view_1.flattenNestedViewRenderNodes(view.rootNodesOrAppElements));
	        // TODO: This is only needed when a view is destroyed,
	        // not when it is detached for reordering with ng-for...
	        view.changeDetector.remove();
	        return view;
	    };
	    AppViewManager_ = __decorate([
	        di_1.Injectable(),
	        __param(1, di_1.Inject(application_tokens_1.APP_ID)), 
	        __metadata('design:paramtypes', [api_1.RootRenderer, String])
	    ], AppViewManager_);
	    return AppViewManager_;
	})(AppViewManager);
	exports.AppViewManager_ = AppViewManager_;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var Console = (function () {
	    function Console() {
	    }
	    Console.prototype.log = function (message) { lang_1.print(message); };
	    Console = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Console);
	    return Console;
	})();
	exports.Console = Console;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for Zone
	var ng_zone_1 = __webpack_require__(86);
	exports.NgZone = ng_zone_1.NgZone;
	exports.NgZoneError = ng_zone_1.NgZoneError;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for render
	var api_1 = __webpack_require__(96);
	exports.RootRenderer = api_1.RootRenderer;
	exports.Renderer = api_1.Renderer;
	exports.RenderComponentType = api_1.RenderComponentType;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for compiler
	var directive_resolver_1 = __webpack_require__(109);
	exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
	var view_resolver_1 = __webpack_require__(110);
	exports.ViewResolver = view_resolver_1.ViewResolver;
	var compiler_1 = __webpack_require__(90);
	exports.Compiler = compiler_1.Compiler;
	var view_manager_1 = __webpack_require__(104);
	exports.AppViewManager = view_manager_1.AppViewManager;
	var query_list_1 = __webpack_require__(98);
	exports.QueryList = query_list_1.QueryList;
	var dynamic_component_loader_1 = __webpack_require__(89);
	exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
	var element_ref_1 = __webpack_require__(94);
	exports.ElementRef = element_ref_1.ElementRef;
	var template_ref_1 = __webpack_require__(97);
	exports.TemplateRef = template_ref_1.TemplateRef;
	var view_ref_1 = __webpack_require__(100);
	exports.EmbeddedViewRef = view_ref_1.EmbeddedViewRef;
	exports.HostViewRef = view_ref_1.HostViewRef;
	exports.ViewRef = view_ref_1.ViewRef;
	exports.HostViewFactoryRef = view_ref_1.HostViewFactoryRef;
	var view_container_ref_1 = __webpack_require__(95);
	exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
	var dynamic_component_loader_2 = __webpack_require__(89);
	exports.ComponentRef = dynamic_component_loader_2.ComponentRef;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var metadata_1 = __webpack_require__(8);
	var reflection_1 = __webpack_require__(21);
	function _isDirectiveMetadata(type) {
	    return type instanceof metadata_1.DirectiveMetadata;
	}
	/*
	 * Resolve a `Type` for {@link DirectiveMetadata}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var DirectiveResolver = (function () {
	    function DirectiveResolver() {
	    }
	    /**
	     * Return {@link DirectiveMetadata} for a given `Type`.
	     */
	    DirectiveResolver.prototype.resolve = function (type) {
	        var typeMetadata = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(typeMetadata)) {
	            var metadata = typeMetadata.find(_isDirectiveMetadata);
	            if (lang_1.isPresent(metadata)) {
	                var propertyMetadata = reflection_1.reflector.propMetadata(type);
	                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	            }
	        }
	        throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
	    };
	    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	        var inputs = [];
	        var outputs = [];
	        var host = {};
	        var queries = {};
	        collection_1.StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
	            metadata.forEach(function (a) {
	                if (a instanceof metadata_1.InputMetadata) {
	                    if (lang_1.isPresent(a.bindingPropertyName)) {
	                        inputs.push(propName + ": " + a.bindingPropertyName);
	                    }
	                    else {
	                        inputs.push(propName);
	                    }
	                }
	                if (a instanceof metadata_1.OutputMetadata) {
	                    if (lang_1.isPresent(a.bindingPropertyName)) {
	                        outputs.push(propName + ": " + a.bindingPropertyName);
	                    }
	                    else {
	                        outputs.push(propName);
	                    }
	                }
	                if (a instanceof metadata_1.HostBindingMetadata) {
	                    if (lang_1.isPresent(a.hostPropertyName)) {
	                        host[("[" + a.hostPropertyName + "]")] = propName;
	                    }
	                    else {
	                        host[("[" + propName + "]")] = propName;
	                    }
	                }
	                if (a instanceof metadata_1.HostListenerMetadata) {
	                    var args = lang_1.isPresent(a.args) ? a.args.join(', ') : '';
	                    host[("(" + a.eventName + ")")] = propName + "(" + args + ")";
	                }
	                if (a instanceof metadata_1.ContentChildrenMetadata) {
	                    queries[propName] = a;
	                }
	                if (a instanceof metadata_1.ViewChildrenMetadata) {
	                    queries[propName] = a;
	                }
	                if (a instanceof metadata_1.ContentChildMetadata) {
	                    queries[propName] = a;
	                }
	                if (a instanceof metadata_1.ViewChildMetadata) {
	                    queries[propName] = a;
	                }
	            });
	        });
	        return this._merge(dm, inputs, outputs, host, queries, directiveType);
	    };
	    DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries, directiveType) {
	        var mergedInputs = lang_1.isPresent(dm.inputs) ? collection_1.ListWrapper.concat(dm.inputs, inputs) : inputs;
	        var mergedOutputs;
	        if (lang_1.isPresent(dm.outputs)) {
	            dm.outputs.forEach(function (propName) {
	                if (collection_1.ListWrapper.contains(outputs, propName)) {
	                    throw new exceptions_1.BaseException("Output event '" + propName + "' defined multiple times in '" + lang_1.stringify(directiveType) + "'");
	                }
	            });
	            mergedOutputs = collection_1.ListWrapper.concat(dm.outputs, outputs);
	        }
	        else {
	            mergedOutputs = outputs;
	        }
	        var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
	        var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
	        if (dm instanceof metadata_1.ComponentMetadata) {
	            return new metadata_1.ComponentMetadata({
	                selector: dm.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: dm.exportAs,
	                moduleId: dm.moduleId,
	                queries: mergedQueries,
	                changeDetection: dm.changeDetection,
	                providers: dm.providers,
	                viewProviders: dm.viewProviders
	            });
	        }
	        else {
	            return new metadata_1.DirectiveMetadata({
	                selector: dm.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: dm.exportAs,
	                queries: mergedQueries,
	                providers: dm.providers
	            });
	        }
	    };
	    DirectiveResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DirectiveResolver);
	    return DirectiveResolver;
	})();
	exports.DirectiveResolver = DirectiveResolver;
	exports.CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver();


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var view_1 = __webpack_require__(81);
	var directives_1 = __webpack_require__(28);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var reflection_1 = __webpack_require__(21);
	/**
	 * Resolves types to {@link ViewMetadata}.
	 */
	var ViewResolver = (function () {
	    function ViewResolver() {
	        /** @internal */
	        this._cache = new collection_1.Map();
	    }
	    ViewResolver.prototype.resolve = function (component) {
	        var view = this._cache.get(component);
	        if (lang_1.isBlank(view)) {
	            view = this._resolve(component);
	            this._cache.set(component, view);
	        }
	        return view;
	    };
	    /** @internal */
	    ViewResolver.prototype._resolve = function (component) {
	        var compMeta;
	        var viewMeta;
	        reflection_1.reflector.annotations(component).forEach(function (m) {
	            if (m instanceof view_1.ViewMetadata) {
	                viewMeta = m;
	            }
	            if (m instanceof directives_1.ComponentMetadata) {
	                compMeta = m;
	            }
	        });
	        if (lang_1.isPresent(compMeta)) {
	            if (lang_1.isBlank(compMeta.template) && lang_1.isBlank(compMeta.templateUrl) && lang_1.isBlank(viewMeta)) {
	                throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' must have either 'template', 'templateUrl', or '@View' set.");
	            }
	            else if (lang_1.isPresent(compMeta.template) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("template", component);
	            }
	            else if (lang_1.isPresent(compMeta.templateUrl) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("templateUrl", component);
	            }
	            else if (lang_1.isPresent(compMeta.directives) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("directives", component);
	            }
	            else if (lang_1.isPresent(compMeta.pipes) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("pipes", component);
	            }
	            else if (lang_1.isPresent(compMeta.encapsulation) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("encapsulation", component);
	            }
	            else if (lang_1.isPresent(compMeta.styles) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("styles", component);
	            }
	            else if (lang_1.isPresent(compMeta.styleUrls) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("styleUrls", component);
	            }
	            else if (lang_1.isPresent(viewMeta)) {
	                return viewMeta;
	            }
	            else {
	                return new view_1.ViewMetadata({
	                    templateUrl: compMeta.templateUrl,
	                    template: compMeta.template,
	                    directives: compMeta.directives,
	                    pipes: compMeta.pipes,
	                    encapsulation: compMeta.encapsulation,
	                    styles: compMeta.styles,
	                    styleUrls: compMeta.styleUrls
	                });
	            }
	        }
	        else {
	            if (lang_1.isBlank(viewMeta)) {
	                throw new exceptions_1.BaseException("No View decorator found on component '" + lang_1.stringify(component) + "'");
	            }
	            else {
	                return viewMeta;
	            }
	        }
	        return null;
	    };
	    /** @internal */
	    ViewResolver.prototype._throwMixingViewAndComponent = function (propertyName, component) {
	        throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' cannot have both '" + propertyName + "' and '@View' set at the same time\"");
	    };
	    ViewResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ViewResolver);
	    return ViewResolver;
	})();
	exports.ViewResolver = ViewResolver;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var EventListener = (function () {
	    function EventListener(name, callback) {
	        this.name = name;
	        this.callback = callback;
	    }
	    ;
	    return EventListener;
	})();
	exports.EventListener = EventListener;
	var DebugNode = (function () {
	    function DebugNode(nativeNode, parent) {
	        this.nativeNode = nativeNode;
	        if (lang_1.isPresent(parent) && parent instanceof DebugElement) {
	            parent.addChild(this);
	        }
	        else {
	            this.parent = null;
	        }
	        this.listeners = [];
	        this.providerTokens = [];
	    }
	    DebugNode.prototype.setDebugInfo = function (info) {
	        this.injector = info.injector;
	        this.providerTokens = info.providerTokens;
	        this.locals = info.locals;
	        this.componentInstance = info.component;
	    };
	    DebugNode.prototype.inject = function (token) { return this.injector.get(token); };
	    DebugNode.prototype.getLocal = function (name) { return this.locals.get(name); };
	    return DebugNode;
	})();
	exports.DebugNode = DebugNode;
	var DebugElement = (function (_super) {
	    __extends(DebugElement, _super);
	    function DebugElement(nativeNode, parent) {
	        _super.call(this, nativeNode, parent);
	        this.properties = new Map();
	        this.attributes = new Map();
	        this.childNodes = [];
	        this.nativeElement = nativeNode;
	    }
	    DebugElement.prototype.addChild = function (child) {
	        if (lang_1.isPresent(child)) {
	            this.childNodes.push(child);
	            child.parent = this;
	        }
	    };
	    DebugElement.prototype.removeChild = function (child) {
	        var childIndex = this.childNodes.indexOf(child);
	        if (childIndex !== -1) {
	            child.parent = null;
	            this.childNodes.splice(childIndex, 1);
	        }
	    };
	    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	        var siblingIndex = this.childNodes.indexOf(child);
	        if (siblingIndex !== -1) {
	            var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
	            var nextChildren = this.childNodes.slice(siblingIndex + 1);
	            this.childNodes =
	                collection_1.ListWrapper.concat(collection_1.ListWrapper.concat(previousChildren, newChildren), nextChildren);
	            for (var i = 0; i < newChildren.length; ++i) {
	                var newChild = newChildren[i];
	                if (lang_1.isPresent(newChild.parent)) {
	                    newChild.parent.removeChild(newChild);
	                }
	                newChild.parent = this;
	            }
	        }
	    };
	    DebugElement.prototype.query = function (predicate) {
	        var results = this.queryAll(predicate);
	        return results.length > 0 ? results[0] : null;
	    };
	    DebugElement.prototype.queryAll = function (predicate) {
	        var matches = [];
	        _queryElementChildren(this, predicate, matches);
	        return matches;
	    };
	    DebugElement.prototype.queryAllNodes = function (predicate) {
	        var matches = [];
	        _queryNodeChildren(this, predicate, matches);
	        return matches;
	    };
	    Object.defineProperty(DebugElement.prototype, "children", {
	        get: function () {
	            var children = [];
	            this.childNodes.forEach(function (node) {
	                if (node instanceof DebugElement) {
	                    children.push(node);
	                }
	            });
	            return children;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this.listeners.forEach(function (listener) {
	            if (listener.name == eventName) {
	                listener.callback(eventObj);
	            }
	        });
	    };
	    return DebugElement;
	})(DebugNode);
	exports.DebugElement = DebugElement;
	function asNativeElements(debugEls) {
	    return debugEls.map(function (el) { return el.nativeElement; });
	}
	exports.asNativeElements = asNativeElements;
	function _queryElementChildren(element, predicate, matches) {
	    element.childNodes.forEach(function (node) {
	        if (node instanceof DebugElement) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            _queryElementChildren(node, predicate, matches);
	        }
	    });
	}
	function _queryNodeChildren(parentNode, predicate, matches) {
	    if (parentNode instanceof DebugElement) {
	        parentNode.childNodes.forEach(function (node) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            if (node instanceof DebugElement) {
	                _queryNodeChildren(node, predicate, matches);
	            }
	        });
	    }
	}
	// Need to keep the nodes in a global Map so that multiple angular apps are supported.
	var _nativeNodeToDebugNode = new Map();
	function getDebugNode(nativeNode) {
	    return _nativeNodeToDebugNode.get(nativeNode);
	}
	exports.getDebugNode = getDebugNode;
	function getAllDebugNodes() {
	    return collection_1.MapWrapper.values(_nativeNodeToDebugNode);
	}
	exports.getAllDebugNodes = getAllDebugNodes;
	function indexDebugNode(node) {
	    _nativeNodeToDebugNode.set(node.nativeNode, node);
	}
	exports.indexDebugNode = indexDebugNode;
	function removeDebugNodeFromIndex(node) {
	    _nativeNodeToDebugNode.delete(node.nativeNode);
	}
	exports.removeDebugNodeFromIndex = removeDebugNodeFromIndex;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	/**
	 * A token that can be provided when bootstraping an application to make an array of directives
	 * available in every component of the application.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {PLATFORM_DIRECTIVES} from 'angular2/core';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   template: `
	 *     <!-- can use other directive even though the component does not list it in `directives` -->
	 *     <other-directive></other-directive>
	 *   `
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 *
	 * bootstrap(MyComponent, [provide(PLATFORM_DIRECTIVES, {useValue: [OtherDirective], multi:true})]);
	 * ```
	 */
	exports.PLATFORM_DIRECTIVES = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Directives"));
	/**
	 * A token that can be provided when bootstraping an application to make an array of pipes
	 * available in every component of the application.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {PLATFORM_PIPES} from 'angular2/core';
	 * import {OtherPipe} from './myPipe';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   template: `
	 *     {{123 | other-pipe}}
	 *   `
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 *
	 * bootstrap(MyComponent, [provide(PLATFORM_PIPES, {useValue: [OtherPipe], multi:true})]);
	 * ```
	 */
	exports.PLATFORM_PIPES = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Pipes"));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var console_1 = __webpack_require__(105);
	var reflection_1 = __webpack_require__(21);
	var testability_1 = __webpack_require__(88);
	function _reflector() {
	    return reflection_1.reflector;
	}
	/**
	 * A default set of providers which should be included in any Angular platform.
	 */
	exports.PLATFORM_COMMON_PROVIDERS = lang_1.CONST_EXPR([new di_1.Provider(reflection_1.Reflector, { useFactory: _reflector, deps: [] }), testability_1.TestabilityRegistry, console_1.Console]);


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var application_tokens_1 = __webpack_require__(87);
	var change_detection_1 = __webpack_require__(30);
	var resolved_metadata_cache_1 = __webpack_require__(115);
	var view_manager_1 = __webpack_require__(104);
	var view_manager_2 = __webpack_require__(104);
	var view_resolver_1 = __webpack_require__(110);
	var directive_resolver_1 = __webpack_require__(109);
	var pipe_resolver_1 = __webpack_require__(116);
	var compiler_1 = __webpack_require__(90);
	var compiler_2 = __webpack_require__(90);
	var dynamic_component_loader_1 = __webpack_require__(89);
	var dynamic_component_loader_2 = __webpack_require__(89);
	/**
	 * A default set of providers which should be included in any Angular
	 * application, regardless of the platform it runs onto.
	 */
	exports.APPLICATION_COMMON_PROVIDERS = lang_1.CONST_EXPR([
	    new di_1.Provider(compiler_1.Compiler, { useClass: compiler_2.Compiler_ }),
	    application_tokens_1.APP_ID_RANDOM_PROVIDER,
	    resolved_metadata_cache_1.ResolvedMetadataCache,
	    new di_1.Provider(view_manager_1.AppViewManager, { useClass: view_manager_2.AppViewManager_ }),
	    view_resolver_1.ViewResolver,
	    new di_1.Provider(change_detection_1.IterableDiffers, { useValue: change_detection_1.defaultIterableDiffers }),
	    new di_1.Provider(change_detection_1.KeyValueDiffers, { useValue: change_detection_1.defaultKeyValueDiffers }),
	    directive_resolver_1.DirectiveResolver,
	    pipe_resolver_1.PipeResolver,
	    new di_1.Provider(dynamic_component_loader_1.DynamicComponentLoader, { useClass: dynamic_component_loader_2.DynamicComponentLoader_ })
	]);


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var element_1 = __webpack_require__(92);
	var directive_resolver_1 = __webpack_require__(109);
	var pipe_provider_1 = __webpack_require__(99);
	var pipe_resolver_1 = __webpack_require__(116);
	var ResolvedMetadataCache = (function () {
	    function ResolvedMetadataCache(_directiveResolver, _pipeResolver) {
	        this._directiveResolver = _directiveResolver;
	        this._pipeResolver = _pipeResolver;
	        this._directiveCache = new Map();
	        this._pipeCache = new Map();
	    }
	    ResolvedMetadataCache.prototype.getResolvedDirectiveMetadata = function (type) {
	        var result = this._directiveCache.get(type);
	        if (lang_1.isBlank(result)) {
	            result = element_1.DirectiveProvider.createFromType(type, this._directiveResolver.resolve(type));
	            this._directiveCache.set(type, result);
	        }
	        return result;
	    };
	    ResolvedMetadataCache.prototype.getResolvedPipeMetadata = function (type) {
	        var result = this._pipeCache.get(type);
	        if (lang_1.isBlank(result)) {
	            result = pipe_provider_1.PipeProvider.createFromType(type, this._pipeResolver.resolve(type));
	            this._pipeCache.set(type, result);
	        }
	        return result;
	    };
	    ResolvedMetadataCache = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver])
	    ], ResolvedMetadataCache);
	    return ResolvedMetadataCache;
	})();
	exports.ResolvedMetadataCache = ResolvedMetadataCache;
	exports.CODEGEN_RESOLVED_METADATA_CACHE = new ResolvedMetadataCache(directive_resolver_1.CODEGEN_DIRECTIVE_RESOLVER, pipe_resolver_1.CODEGEN_PIPE_RESOLVER);


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var metadata_1 = __webpack_require__(8);
	var reflection_1 = __webpack_require__(21);
	function _isPipeMetadata(type) {
	    return type instanceof metadata_1.PipeMetadata;
	}
	/**
	 * Resolve a `Type` for {@link PipeMetadata}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var PipeResolver = (function () {
	    function PipeResolver() {
	    }
	    /**
	     * Return {@link PipeMetadata} for a given `Type`.
	     */
	    PipeResolver.prototype.resolve = function (type) {
	        var metas = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(metas)) {
	            var annotation = metas.find(_isPipeMetadata);
	            if (lang_1.isPresent(annotation)) {
	                return annotation;
	            }
	        }
	        throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
	    };
	    PipeResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], PipeResolver);
	    return PipeResolver;
	})();
	exports.PipeResolver = PipeResolver;
	exports.CODEGEN_PIPE_RESOLVER = new PipeResolver();


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Maps application URLs into application states, to support deep-linking and navigation.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var router_1 = __webpack_require__(118);
	exports.Router = router_1.Router;
	var router_outlet_1 = __webpack_require__(134);
	exports.RouterOutlet = router_outlet_1.RouterOutlet;
	var router_link_1 = __webpack_require__(136);
	exports.RouterLink = router_link_1.RouterLink;
	var instruction_1 = __webpack_require__(122);
	exports.RouteParams = instruction_1.RouteParams;
	exports.RouteData = instruction_1.RouteData;
	var platform_location_1 = __webpack_require__(137);
	exports.PlatformLocation = platform_location_1.PlatformLocation;
	var route_registry_1 = __webpack_require__(119);
	exports.RouteRegistry = route_registry_1.RouteRegistry;
	exports.ROUTER_PRIMARY_COMPONENT = route_registry_1.ROUTER_PRIMARY_COMPONENT;
	var location_strategy_1 = __webpack_require__(131);
	exports.LocationStrategy = location_strategy_1.LocationStrategy;
	exports.APP_BASE_HREF = location_strategy_1.APP_BASE_HREF;
	var hash_location_strategy_1 = __webpack_require__(138);
	exports.HashLocationStrategy = hash_location_strategy_1.HashLocationStrategy;
	var path_location_strategy_1 = __webpack_require__(139);
	exports.PathLocationStrategy = path_location_strategy_1.PathLocationStrategy;
	var location_1 = __webpack_require__(130);
	exports.Location = location_1.Location;
	__export(__webpack_require__(129));
	__export(__webpack_require__(140));
	var lifecycle_annotations_1 = __webpack_require__(135);
	exports.CanActivate = lifecycle_annotations_1.CanActivate;
	var instruction_2 = __webpack_require__(122);
	exports.Instruction = instruction_2.Instruction;
	exports.ComponentInstruction = instruction_2.ComponentInstruction;
	var core_1 = __webpack_require__(7);
	exports.OpaqueToken = core_1.OpaqueToken;
	var router_providers_common_1 = __webpack_require__(141);
	exports.ROUTER_PROVIDERS_COMMON = router_providers_common_1.ROUTER_PROVIDERS_COMMON;
	var router_providers_1 = __webpack_require__(142);
	exports.ROUTER_PROVIDERS = router_providers_1.ROUTER_PROVIDERS;
	exports.ROUTER_BINDINGS = router_providers_1.ROUTER_BINDINGS;
	var router_outlet_2 = __webpack_require__(134);
	var router_link_2 = __webpack_require__(136);
	var lang_1 = __webpack_require__(10);
	/**
	 * A list of directives. To use the router directives like {@link RouterOutlet} and
	 * {@link RouterLink}, add this to your `directives` array in the {@link View} decorator of your
	 * component.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *    // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	exports.ROUTER_DIRECTIVES = lang_1.CONST_EXPR([router_outlet_2.RouterOutlet, router_link_2.RouterLink]);


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var async_1 = __webpack_require__(53);
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var core_1 = __webpack_require__(7);
	var route_registry_1 = __webpack_require__(119);
	var location_1 = __webpack_require__(130);
	var route_lifecycle_reflector_1 = __webpack_require__(132);
	var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
	var _resolveToFalse = async_1.PromiseWrapper.resolve(false);
	/**
	 * The `Router` is responsible for mapping URLs to components.
	 *
	 * You can see the state of the router by inspecting the read-only field `router.navigating`.
	 * This may be useful for showing a spinner, for instance.
	 *
	 * ## Concepts
	 *
	 * Routers and component instances have a 1:1 correspondence.
	 *
	 * The router holds reference to a number of {@link RouterOutlet}.
	 * An outlet is a placeholder that the router dynamically fills in depending on the current URL.
	 *
	 * When the router navigates from a URL, it must first recognize it and serialize it into an
	 * `Instruction`.
	 * The router uses the `RouteRegistry` to get an `Instruction`.
	 */
	var Router = (function () {
	    function Router(registry, parent, hostComponent) {
	        this.registry = registry;
	        this.parent = parent;
	        this.hostComponent = hostComponent;
	        this.navigating = false;
	        this._currentInstruction = null;
	        this._currentNavigation = _resolveToTrue;
	        this._outlet = null;
	        this._auxRouters = new collection_1.Map();
	        this._subject = new async_1.EventEmitter();
	    }
	    /**
	     * Constructs a child router. You probably don't need to use this unless you're writing a reusable
	     * component.
	     */
	    Router.prototype.childRouter = function (hostComponent) {
	        return this._childRouter = new ChildRouter(this, hostComponent);
	    };
	    /**
	     * Constructs a child router. You probably don't need to use this unless you're writing a reusable
	     * component.
	     */
	    Router.prototype.auxRouter = function (hostComponent) { return new ChildRouter(this, hostComponent); };
	    /**
	     * Register an outlet to be notified of primary route changes.
	     *
	     * You probably don't need to use this unless you're writing a reusable component.
	     */
	    Router.prototype.registerPrimaryOutlet = function (outlet) {
	        if (lang_1.isPresent(outlet.name)) {
	            throw new exceptions_1.BaseException("registerPrimaryOutlet expects to be called with an unnamed outlet.");
	        }
	        this._outlet = outlet;
	        if (lang_1.isPresent(this._currentInstruction)) {
	            return this.commit(this._currentInstruction, false);
	        }
	        return _resolveToTrue;
	    };
	    /**
	     * Register an outlet to notified of auxiliary route changes.
	     *
	     * You probably don't need to use this unless you're writing a reusable component.
	     */
	    Router.prototype.registerAuxOutlet = function (outlet) {
	        var outletName = outlet.name;
	        if (lang_1.isBlank(outletName)) {
	            throw new exceptions_1.BaseException("registerAuxOutlet expects to be called with an outlet with a name.");
	        }
	        var router = this.auxRouter(this.hostComponent);
	        this._auxRouters.set(outletName, router);
	        router._outlet = outlet;
	        var auxInstruction;
	        if (lang_1.isPresent(this._currentInstruction) &&
	            lang_1.isPresent(auxInstruction = this._currentInstruction.auxInstruction[outletName])) {
	            return router.commit(auxInstruction);
	        }
	        return _resolveToTrue;
	    };
	    /**
	     * Given an instruction, returns `true` if the instruction is currently active,
	     * otherwise `false`.
	     */
	    Router.prototype.isRouteActive = function (instruction) {
	        var router = this;
	        while (lang_1.isPresent(router.parent) && lang_1.isPresent(instruction.child)) {
	            router = router.parent;
	            instruction = instruction.child;
	        }
	        return lang_1.isPresent(this._currentInstruction) &&
	            this._currentInstruction.component == instruction.component;
	    };
	    /**
	     * Dynamically update the routing configuration and trigger a navigation.
	     *
	     * ### Usage
	     *
	     * ```
	     * router.config([
	     *   { 'path': '/', 'component': IndexComp },
	     *   { 'path': '/user/:id', 'component': UserComp },
	     * ]);
	     * ```
	     */
	    Router.prototype.config = function (definitions) {
	        var _this = this;
	        definitions.forEach(function (routeDefinition) { _this.registry.config(_this.hostComponent, routeDefinition); });
	        return this.renavigate();
	    };
	    /**
	     * Navigate based on the provided Route Link DSL. It's preferred to navigate with this method
	     * over `navigateByUrl`.
	     *
	     * ### Usage
	     *
	     * This method takes an array representing the Route Link DSL:
	     * ```
	     * ['./MyCmp', {param: 3}]
	     * ```
	     * See the {@link RouterLink} directive for more.
	     */
	    Router.prototype.navigate = function (linkParams) {
	        var instruction = this.generate(linkParams);
	        return this.navigateByInstruction(instruction, false);
	    };
	    /**
	     * Navigate to a URL. Returns a promise that resolves when navigation is complete.
	     * It's preferred to navigate with `navigate` instead of this method, since URLs are more brittle.
	     *
	     * If the given URL begins with a `/`, router will navigate absolutely.
	     * If the given URL does not begin with `/`, the router will navigate relative to this component.
	     */
	    Router.prototype.navigateByUrl = function (url, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        return this._currentNavigation = this._currentNavigation.then(function (_) {
	            _this.lastNavigationAttempt = url;
	            _this._startNavigating();
	            return _this._afterPromiseFinishNavigating(_this.recognize(url).then(function (instruction) {
	                if (lang_1.isBlank(instruction)) {
	                    return false;
	                }
	                return _this._navigate(instruction, _skipLocationChange);
	            }));
	        });
	    };
	    /**
	     * Navigate via the provided instruction. Returns a promise that resolves when navigation is
	     * complete.
	     */
	    Router.prototype.navigateByInstruction = function (instruction, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        if (lang_1.isBlank(instruction)) {
	            return _resolveToFalse;
	        }
	        return this._currentNavigation = this._currentNavigation.then(function (_) {
	            _this._startNavigating();
	            return _this._afterPromiseFinishNavigating(_this._navigate(instruction, _skipLocationChange));
	        });
	    };
	    /** @internal */
	    Router.prototype._navigate = function (instruction, _skipLocationChange) {
	        var _this = this;
	        return this._settleInstruction(instruction)
	            .then(function (_) { return _this._routerCanReuse(instruction); })
	            .then(function (_) { return _this._canActivate(instruction); })
	            .then(function (result) {
	            if (!result) {
	                return false;
	            }
	            return _this._routerCanDeactivate(instruction)
	                .then(function (result) {
	                if (result) {
	                    return _this.commit(instruction, _skipLocationChange)
	                        .then(function (_) {
	                        _this._emitNavigationFinish(instruction.toRootUrl());
	                        return true;
	                    });
	                }
	            });
	        });
	    };
	    /** @internal */
	    Router.prototype._settleInstruction = function (instruction) {
	        var _this = this;
	        return instruction.resolveComponent().then(function (_) {
	            var unsettledInstructions = [];
	            if (lang_1.isPresent(instruction.component)) {
	                instruction.component.reuse = false;
	            }
	            if (lang_1.isPresent(instruction.child)) {
	                unsettledInstructions.push(_this._settleInstruction(instruction.child));
	            }
	            collection_1.StringMapWrapper.forEach(instruction.auxInstruction, function (instruction, _) {
	                unsettledInstructions.push(_this._settleInstruction(instruction));
	            });
	            return async_1.PromiseWrapper.all(unsettledInstructions);
	        });
	    };
	    Router.prototype._emitNavigationFinish = function (url) { async_1.ObservableWrapper.callEmit(this._subject, url); };
	    Router.prototype._afterPromiseFinishNavigating = function (promise) {
	        var _this = this;
	        return async_1.PromiseWrapper.catchError(promise.then(function (_) { return _this._finishNavigating(); }), function (err) {
	            _this._finishNavigating();
	            throw err;
	        });
	    };
	    /*
	     * Recursively set reuse flags
	     */
	    /** @internal */
	    Router.prototype._routerCanReuse = function (instruction) {
	        var _this = this;
	        if (lang_1.isBlank(this._outlet)) {
	            return _resolveToFalse;
	        }
	        if (lang_1.isBlank(instruction.component)) {
	            return _resolveToTrue;
	        }
	        return this._outlet.routerCanReuse(instruction.component)
	            .then(function (result) {
	            instruction.component.reuse = result;
	            if (result && lang_1.isPresent(_this._childRouter) && lang_1.isPresent(instruction.child)) {
	                return _this._childRouter._routerCanReuse(instruction.child);
	            }
	        });
	    };
	    Router.prototype._canActivate = function (nextInstruction) {
	        return canActivateOne(nextInstruction, this._currentInstruction);
	    };
	    Router.prototype._routerCanDeactivate = function (instruction) {
	        var _this = this;
	        if (lang_1.isBlank(this._outlet)) {
	            return _resolveToTrue;
	        }
	        var next;
	        var childInstruction = null;
	        var reuse = false;
	        var componentInstruction = null;
	        if (lang_1.isPresent(instruction)) {
	            childInstruction = instruction.child;
	            componentInstruction = instruction.component;
	            reuse = lang_1.isBlank(instruction.component) || instruction.component.reuse;
	        }
	        if (reuse) {
	            next = _resolveToTrue;
	        }
	        else {
	            next = this._outlet.routerCanDeactivate(componentInstruction);
	        }
	        // TODO: aux route lifecycle hooks
	        return next.then(function (result) {
	            if (result == false) {
	                return false;
	            }
	            if (lang_1.isPresent(_this._childRouter)) {
	                return _this._childRouter._routerCanDeactivate(childInstruction);
	            }
	            return true;
	        });
	    };
	    /**
	     * Updates this router and all descendant routers according to the given instruction
	     */
	    Router.prototype.commit = function (instruction, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        this._currentInstruction = instruction;
	        var next = _resolveToTrue;
	        if (lang_1.isPresent(this._outlet) && lang_1.isPresent(instruction.component)) {
	            var componentInstruction = instruction.component;
	            if (componentInstruction.reuse) {
	                next = this._outlet.reuse(componentInstruction);
	            }
	            else {
	                next =
	                    this.deactivate(instruction).then(function (_) { return _this._outlet.activate(componentInstruction); });
	            }
	            if (lang_1.isPresent(instruction.child)) {
	                next = next.then(function (_) {
	                    if (lang_1.isPresent(_this._childRouter)) {
	                        return _this._childRouter.commit(instruction.child);
	                    }
	                });
	            }
	        }
	        var promises = [];
	        this._auxRouters.forEach(function (router, name) {
	            if (lang_1.isPresent(instruction.auxInstruction[name])) {
	                promises.push(router.commit(instruction.auxInstruction[name]));
	            }
	        });
	        return next.then(function (_) { return async_1.PromiseWrapper.all(promises); });
	    };
	    /** @internal */
	    Router.prototype._startNavigating = function () { this.navigating = true; };
	    /** @internal */
	    Router.prototype._finishNavigating = function () { this.navigating = false; };
	    /**
	     * Subscribe to URL updates from the router
	     */
	    Router.prototype.subscribe = function (onNext) {
	        return async_1.ObservableWrapper.subscribe(this._subject, onNext);
	    };
	    /**
	     * Removes the contents of this router's outlet and all descendant outlets
	     */
	    Router.prototype.deactivate = function (instruction) {
	        var _this = this;
	        var childInstruction = null;
	        var componentInstruction = null;
	        if (lang_1.isPresent(instruction)) {
	            childInstruction = instruction.child;
	            componentInstruction = instruction.component;
	        }
	        var next = _resolveToTrue;
	        if (lang_1.isPresent(this._childRouter)) {
	            next = this._childRouter.deactivate(childInstruction);
	        }
	        if (lang_1.isPresent(this._outlet)) {
	            next = next.then(function (_) { return _this._outlet.deactivate(componentInstruction); });
	        }
	        // TODO: handle aux routes
	        return next;
	    };
	    /**
	     * Given a URL, returns an instruction representing the component graph
	     */
	    Router.prototype.recognize = function (url) {
	        var ancestorComponents = this._getAncestorInstructions();
	        return this.registry.recognize(url, ancestorComponents);
	    };
	    Router.prototype._getAncestorInstructions = function () {
	        var ancestorInstructions = [this._currentInstruction];
	        var ancestorRouter = this;
	        while (lang_1.isPresent(ancestorRouter = ancestorRouter.parent)) {
	            ancestorInstructions.unshift(ancestorRouter._currentInstruction);
	        }
	        return ancestorInstructions;
	    };
	    /**
	     * Navigates to either the last URL successfully navigated to, or the last URL requested if the
	     * router has yet to successfully navigate.
	     */
	    Router.prototype.renavigate = function () {
	        if (lang_1.isBlank(this.lastNavigationAttempt)) {
	            return this._currentNavigation;
	        }
	        return this.navigateByUrl(this.lastNavigationAttempt);
	    };
	    /**
	     * Generate an `Instruction` based on the provided Route Link DSL.
	     */
	    Router.prototype.generate = function (linkParams) {
	        var ancestorInstructions = this._getAncestorInstructions();
	        return this.registry.generate(linkParams, ancestorInstructions);
	    };
	    return Router;
	})();
	exports.Router = Router;
	var RootRouter = (function (_super) {
	    __extends(RootRouter, _super);
	    function RootRouter(registry, location, primaryComponent) {
	        var _this = this;
	        _super.call(this, registry, null, primaryComponent);
	        this._location = location;
	        this._locationSub = this._location.subscribe(function (change) {
	            // we call recognize ourselves
	            _this.recognize(change['url'])
	                .then(function (instruction) {
	                _this.navigateByInstruction(instruction, lang_1.isPresent(change['pop']))
	                    .then(function (_) {
	                    // this is a popstate event; no need to change the URL
	                    if (lang_1.isPresent(change['pop']) && change['type'] != 'hashchange') {
	                        return;
	                    }
	                    var emitPath = instruction.toUrlPath();
	                    var emitQuery = instruction.toUrlQuery();
	                    if (emitPath.length > 0 && emitPath[0] != '/') {
	                        emitPath = '/' + emitPath;
	                    }
	                    // Because we've opted to use All hashchange events occur outside Angular.
	                    // However, apps that are migrating might have hash links that operate outside
	                    // angular to which routing must respond.
	                    // To support these cases where we respond to hashchanges and redirect as a
	                    // result, we need to replace the top item on the stack.
	                    if (change['type'] == 'hashchange') {
	                        if (instruction.toRootUrl() != _this._location.path()) {
	                            _this._location.replaceState(emitPath, emitQuery);
	                        }
	                    }
	                    else {
	                        _this._location.go(emitPath, emitQuery);
	                    }
	                });
	            });
	        });
	        this.registry.configFromComponent(primaryComponent);
	        this.navigateByUrl(location.path());
	    }
	    RootRouter.prototype.commit = function (instruction, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        var emitPath = instruction.toUrlPath();
	        var emitQuery = instruction.toUrlQuery();
	        if (emitPath.length > 0 && emitPath[0] != '/') {
	            emitPath = '/' + emitPath;
	        }
	        var promise = _super.prototype.commit.call(this, instruction);
	        if (!_skipLocationChange) {
	            promise = promise.then(function (_) { _this._location.go(emitPath, emitQuery); });
	        }
	        return promise;
	    };
	    RootRouter.prototype.dispose = function () {
	        if (lang_1.isPresent(this._locationSub)) {
	            async_1.ObservableWrapper.dispose(this._locationSub);
	            this._locationSub = null;
	        }
	    };
	    RootRouter = __decorate([
	        core_1.Injectable(),
	        __param(2, core_1.Inject(route_registry_1.ROUTER_PRIMARY_COMPONENT)), 
	        __metadata('design:paramtypes', [route_registry_1.RouteRegistry, location_1.Location, lang_1.Type])
	    ], RootRouter);
	    return RootRouter;
	})(Router);
	exports.RootRouter = RootRouter;
	var ChildRouter = (function (_super) {
	    __extends(ChildRouter, _super);
	    function ChildRouter(parent, hostComponent) {
	        _super.call(this, parent.registry, parent, hostComponent);
	        this.parent = parent;
	    }
	    ChildRouter.prototype.navigateByUrl = function (url, _skipLocationChange) {
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        // Delegate navigation to the root router
	        return this.parent.navigateByUrl(url, _skipLocationChange);
	    };
	    ChildRouter.prototype.navigateByInstruction = function (instruction, _skipLocationChange) {
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        // Delegate navigation to the root router
	        return this.parent.navigateByInstruction(instruction, _skipLocationChange);
	    };
	    return ChildRouter;
	})(Router);
	function canActivateOne(nextInstruction, prevInstruction) {
	    var next = _resolveToTrue;
	    if (lang_1.isBlank(nextInstruction.component)) {
	        return next;
	    }
	    if (lang_1.isPresent(nextInstruction.child)) {
	        next = canActivateOne(nextInstruction.child, lang_1.isPresent(prevInstruction) ? prevInstruction.child : null);
	    }
	    return next.then(function (result) {
	        if (result == false) {
	            return false;
	        }
	        if (nextInstruction.component.reuse) {
	            return true;
	        }
	        var hook = route_lifecycle_reflector_1.getCanActivateHook(nextInstruction.component.componentType);
	        if (lang_1.isPresent(hook)) {
	            return hook(nextInstruction.component, lang_1.isPresent(prevInstruction) ? prevInstruction.component : null);
	        }
	        return true;
	    });
	}


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var collection_1 = __webpack_require__(17);
	var async_1 = __webpack_require__(53);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var reflection_1 = __webpack_require__(21);
	var core_1 = __webpack_require__(7);
	var route_config_impl_1 = __webpack_require__(120);
	var route_recognizer_1 = __webpack_require__(121);
	var component_recognizer_1 = __webpack_require__(125);
	var instruction_1 = __webpack_require__(122);
	var route_config_nomalizer_1 = __webpack_require__(128);
	var url_parser_1 = __webpack_require__(124);
	var _resolveToNull = async_1.PromiseWrapper.resolve(null);
	/**
	 * Token used to bind the component with the top-level {@link RouteConfig}s for the
	 * application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	exports.ROUTER_PRIMARY_COMPONENT = lang_1.CONST_EXPR(new core_1.OpaqueToken('RouterPrimaryComponent'));
	/**
	 * The RouteRegistry holds route configurations for each component in an Angular app.
	 * It is responsible for creating Instructions from URLs, and generating URLs based on route and
	 * parameters.
	 */
	var RouteRegistry = (function () {
	    function RouteRegistry(_rootComponent) {
	        this._rootComponent = _rootComponent;
	        this._rules = new collection_1.Map();
	    }
	    /**
	     * Given a component and a configuration object, add the route to this registry
	     */
	    RouteRegistry.prototype.config = function (parentComponent, config) {
	        config = route_config_nomalizer_1.normalizeRouteConfig(config, this);
	        // this is here because Dart type guard reasons
	        if (config instanceof route_config_impl_1.Route) {
	            route_config_nomalizer_1.assertComponentExists(config.component, config.path);
	        }
	        else if (config instanceof route_config_impl_1.AuxRoute) {
	            route_config_nomalizer_1.assertComponentExists(config.component, config.path);
	        }
	        var recognizer = this._rules.get(parentComponent);
	        if (lang_1.isBlank(recognizer)) {
	            recognizer = new component_recognizer_1.ComponentRecognizer();
	            this._rules.set(parentComponent, recognizer);
	        }
	        var terminal = recognizer.config(config);
	        if (config instanceof route_config_impl_1.Route) {
	            if (terminal) {
	                assertTerminalComponent(config.component, config.path);
	            }
	            else {
	                this.configFromComponent(config.component);
	            }
	        }
	    };
	    /**
	     * Reads the annotations of a component and configures the registry based on them
	     */
	    RouteRegistry.prototype.configFromComponent = function (component) {
	        var _this = this;
	        if (!lang_1.isType(component)) {
	            return;
	        }
	        // Don't read the annotations from a type more than once –
	        // this prevents an infinite loop if a component routes recursively.
	        if (this._rules.has(component)) {
	            return;
	        }
	        var annotations = reflection_1.reflector.annotations(component);
	        if (lang_1.isPresent(annotations)) {
	            for (var i = 0; i < annotations.length; i++) {
	                var annotation = annotations[i];
	                if (annotation instanceof route_config_impl_1.RouteConfig) {
	                    var routeCfgs = annotation.configs;
	                    routeCfgs.forEach(function (config) { return _this.config(component, config); });
	                }
	            }
	        }
	    };
	    /**
	     * Given a URL and a parent component, return the most specific instruction for navigating
	     * the application into the state specified by the url
	     */
	    RouteRegistry.prototype.recognize = function (url, ancestorInstructions) {
	        var parsedUrl = url_parser_1.parser.parse(url);
	        return this._recognize(parsedUrl, []);
	    };
	    /**
	     * Recognizes all parent-child routes, but creates unresolved auxiliary routes
	     */
	    RouteRegistry.prototype._recognize = function (parsedUrl, ancestorInstructions, _aux) {
	        var _this = this;
	        if (_aux === void 0) { _aux = false; }
	        var parentInstruction = collection_1.ListWrapper.last(ancestorInstructions);
	        var parentComponent = lang_1.isPresent(parentInstruction) ? parentInstruction.component.componentType :
	            this._rootComponent;
	        var componentRecognizer = this._rules.get(parentComponent);
	        if (lang_1.isBlank(componentRecognizer)) {
	            return _resolveToNull;
	        }
	        // Matches some beginning part of the given URL
	        var possibleMatches = _aux ? componentRecognizer.recognizeAuxiliary(parsedUrl) :
	            componentRecognizer.recognize(parsedUrl);
	        var matchPromises = possibleMatches.map(function (candidate) { return candidate.then(function (candidate) {
	            if (candidate instanceof route_recognizer_1.PathMatch) {
	                var auxParentInstructions = ancestorInstructions.length > 0 ? [collection_1.ListWrapper.last(ancestorInstructions)] : [];
	                var auxInstructions = _this._auxRoutesToUnresolved(candidate.remainingAux, auxParentInstructions);
	                var instruction = new instruction_1.ResolvedInstruction(candidate.instruction, null, auxInstructions);
	                if (lang_1.isBlank(candidate.instruction) || candidate.instruction.terminal) {
	                    return instruction;
	                }
	                var newAncestorComponents = ancestorInstructions.concat([instruction]);
	                return _this._recognize(candidate.remaining, newAncestorComponents)
	                    .then(function (childInstruction) {
	                    if (lang_1.isBlank(childInstruction)) {
	                        return null;
	                    }
	                    // redirect instructions are already absolute
	                    if (childInstruction instanceof instruction_1.RedirectInstruction) {
	                        return childInstruction;
	                    }
	                    instruction.child = childInstruction;
	                    return instruction;
	                });
	            }
	            if (candidate instanceof route_recognizer_1.RedirectMatch) {
	                var instruction = _this.generate(candidate.redirectTo, ancestorInstructions.concat([null]));
	                return new instruction_1.RedirectInstruction(instruction.component, instruction.child, instruction.auxInstruction, candidate.specificity);
	            }
	        }); });
	        if ((lang_1.isBlank(parsedUrl) || parsedUrl.path == '') && possibleMatches.length == 0) {
	            return async_1.PromiseWrapper.resolve(this.generateDefault(parentComponent));
	        }
	        return async_1.PromiseWrapper.all(matchPromises).then(mostSpecific);
	    };
	    RouteRegistry.prototype._auxRoutesToUnresolved = function (auxRoutes, parentInstructions) {
	        var _this = this;
	        var unresolvedAuxInstructions = {};
	        auxRoutes.forEach(function (auxUrl) {
	            unresolvedAuxInstructions[auxUrl.path] = new instruction_1.UnresolvedInstruction(function () { return _this._recognize(auxUrl, parentInstructions, true); });
	        });
	        return unresolvedAuxInstructions;
	    };
	    /**
	     * Given a normalized list with component names and params like: `['user', {id: 3 }]`
	     * generates a url with a leading slash relative to the provided `parentComponent`.
	     *
	     * If the optional param `_aux` is `true`, then we generate starting at an auxiliary
	     * route boundary.
	     */
	    RouteRegistry.prototype.generate = function (linkParams, ancestorInstructions, _aux) {
	        if (_aux === void 0) { _aux = false; }
	        var params = splitAndFlattenLinkParams(linkParams);
	        var prevInstruction;
	        // The first segment should be either '.' (generate from parent) or '' (generate from root).
	        // When we normalize above, we strip all the slashes, './' becomes '.' and '/' becomes ''.
	        if (collection_1.ListWrapper.first(params) == '') {
	            params.shift();
	            prevInstruction = collection_1.ListWrapper.first(ancestorInstructions);
	            ancestorInstructions = [];
	        }
	        else {
	            prevInstruction = ancestorInstructions.length > 0 ? ancestorInstructions.pop() : null;
	            if (collection_1.ListWrapper.first(params) == '.') {
	                params.shift();
	            }
	            else if (collection_1.ListWrapper.first(params) == '..') {
	                while (collection_1.ListWrapper.first(params) == '..') {
	                    if (ancestorInstructions.length <= 0) {
	                        throw new exceptions_1.BaseException("Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" has too many \"../\" segments.");
	                    }
	                    prevInstruction = ancestorInstructions.pop();
	                    params = collection_1.ListWrapper.slice(params, 1);
	                }
	            }
	            else {
	                // we must only peak at the link param, and not consume it
	                var routeName = collection_1.ListWrapper.first(params);
	                var parentComponentType = this._rootComponent;
	                var grandparentComponentType = null;
	                if (ancestorInstructions.length > 1) {
	                    var parentComponentInstruction = ancestorInstructions[ancestorInstructions.length - 1];
	                    var grandComponentInstruction = ancestorInstructions[ancestorInstructions.length - 2];
	                    parentComponentType = parentComponentInstruction.component.componentType;
	                    grandparentComponentType = grandComponentInstruction.component.componentType;
	                }
	                else if (ancestorInstructions.length == 1) {
	                    parentComponentType = ancestorInstructions[0].component.componentType;
	                    grandparentComponentType = this._rootComponent;
	                }
	                // For a link with no leading `./`, `/`, or `../`, we look for a sibling and child.
	                // If both exist, we throw. Otherwise, we prefer whichever exists.
	                var childRouteExists = this.hasRoute(routeName, parentComponentType);
	                var parentRouteExists = lang_1.isPresent(grandparentComponentType) &&
	                    this.hasRoute(routeName, grandparentComponentType);
	                if (parentRouteExists && childRouteExists) {
	                    var msg = "Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" is ambiguous, use \"./\" or \"../\" to disambiguate.";
	                    throw new exceptions_1.BaseException(msg);
	                }
	                if (parentRouteExists) {
	                    prevInstruction = ancestorInstructions.pop();
	                }
	            }
	        }
	        if (params[params.length - 1] == '') {
	            params.pop();
	        }
	        if (params.length > 0 && params[0] == '') {
	            params.shift();
	        }
	        if (params.length < 1) {
	            var msg = "Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" must include a route name.";
	            throw new exceptions_1.BaseException(msg);
	        }
	        var generatedInstruction = this._generate(params, ancestorInstructions, prevInstruction, _aux, linkParams);
	        // we don't clone the first (root) element
	        for (var i = ancestorInstructions.length - 1; i >= 0; i--) {
	            var ancestorInstruction = ancestorInstructions[i];
	            if (lang_1.isBlank(ancestorInstruction)) {
	                break;
	            }
	            generatedInstruction = ancestorInstruction.replaceChild(generatedInstruction);
	        }
	        return generatedInstruction;
	    };
	    /*
	     * Internal helper that does not make any assertions about the beginning of the link DSL.
	     * `ancestorInstructions` are parents that will be cloned.
	     * `prevInstruction` is the existing instruction that would be replaced, but which might have
	     * aux routes that need to be cloned.
	     */
	    RouteRegistry.prototype._generate = function (linkParams, ancestorInstructions, prevInstruction, _aux, _originalLink) {
	        var _this = this;
	        if (_aux === void 0) { _aux = false; }
	        var parentComponentType = this._rootComponent;
	        var componentInstruction = null;
	        var auxInstructions = {};
	        var parentInstruction = collection_1.ListWrapper.last(ancestorInstructions);
	        if (lang_1.isPresent(parentInstruction) && lang_1.isPresent(parentInstruction.component)) {
	            parentComponentType = parentInstruction.component.componentType;
	        }
	        if (linkParams.length == 0) {
	            var defaultInstruction = this.generateDefault(parentComponentType);
	            if (lang_1.isBlank(defaultInstruction)) {
	                throw new exceptions_1.BaseException("Link \"" + collection_1.ListWrapper.toJSON(_originalLink) + "\" does not resolve to a terminal instruction.");
	            }
	            return defaultInstruction;
	        }
	        // for non-aux routes, we want to reuse the predecessor's existing primary and aux routes
	        // and only override routes for which the given link DSL provides
	        if (lang_1.isPresent(prevInstruction) && !_aux) {
	            auxInstructions = collection_1.StringMapWrapper.merge(prevInstruction.auxInstruction, auxInstructions);
	            componentInstruction = prevInstruction.component;
	        }
	        var componentRecognizer = this._rules.get(parentComponentType);
	        if (lang_1.isBlank(componentRecognizer)) {
	            throw new exceptions_1.BaseException("Component \"" + lang_1.getTypeNameForDebugging(parentComponentType) + "\" has no route config.");
	        }
	        var linkParamIndex = 0;
	        var routeParams = {};
	        // first, recognize the primary route if one is provided
	        if (linkParamIndex < linkParams.length && lang_1.isString(linkParams[linkParamIndex])) {
	            var routeName = linkParams[linkParamIndex];
	            if (routeName == '' || routeName == '.' || routeName == '..') {
	                throw new exceptions_1.BaseException("\"" + routeName + "/\" is only allowed at the beginning of a link DSL.");
	            }
	            linkParamIndex += 1;
	            if (linkParamIndex < linkParams.length) {
	                var linkParam = linkParams[linkParamIndex];
	                if (lang_1.isStringMap(linkParam) && !lang_1.isArray(linkParam)) {
	                    routeParams = linkParam;
	                    linkParamIndex += 1;
	                }
	            }
	            var routeRecognizer = (_aux ? componentRecognizer.auxNames : componentRecognizer.names).get(routeName);
	            if (lang_1.isBlank(routeRecognizer)) {
	                throw new exceptions_1.BaseException("Component \"" + lang_1.getTypeNameForDebugging(parentComponentType) + "\" has no route named \"" + routeName + "\".");
	            }
	            // Create an "unresolved instruction" for async routes
	            // we'll figure out the rest of the route when we resolve the instruction and
	            // perform a navigation
	            if (lang_1.isBlank(routeRecognizer.handler.componentType)) {
	                var compInstruction = routeRecognizer.generateComponentPathValues(routeParams);
	                return new instruction_1.UnresolvedInstruction(function () {
	                    return routeRecognizer.handler.resolveComponentType().then(function (_) {
	                        return _this._generate(linkParams, ancestorInstructions, prevInstruction, _aux, _originalLink);
	                    });
	                }, compInstruction['urlPath'], compInstruction['urlParams']);
	            }
	            componentInstruction = _aux ? componentRecognizer.generateAuxiliary(routeName, routeParams) :
	                componentRecognizer.generate(routeName, routeParams);
	        }
	        // Next, recognize auxiliary instructions.
	        // If we have an ancestor instruction, we preserve whatever aux routes are active from it.
	        while (linkParamIndex < linkParams.length && lang_1.isArray(linkParams[linkParamIndex])) {
	            var auxParentInstruction = [parentInstruction];
	            var auxInstruction = this._generate(linkParams[linkParamIndex], auxParentInstruction, null, true, _originalLink);
	            // TODO: this will not work for aux routes with parameters or multiple segments
	            auxInstructions[auxInstruction.component.urlPath] = auxInstruction;
	            linkParamIndex += 1;
	        }
	        var instruction = new instruction_1.ResolvedInstruction(componentInstruction, null, auxInstructions);
	        // If the component is sync, we can generate resolved child route instructions
	        // If not, we'll resolve the instructions at navigation time
	        if (lang_1.isPresent(componentInstruction) && lang_1.isPresent(componentInstruction.componentType)) {
	            var childInstruction = null;
	            if (componentInstruction.terminal) {
	                if (linkParamIndex >= linkParams.length) {
	                }
	            }
	            else {
	                var childAncestorComponents = ancestorInstructions.concat([instruction]);
	                var remainingLinkParams = linkParams.slice(linkParamIndex);
	                childInstruction = this._generate(remainingLinkParams, childAncestorComponents, null, false, _originalLink);
	            }
	            instruction.child = childInstruction;
	        }
	        return instruction;
	    };
	    RouteRegistry.prototype.hasRoute = function (name, parentComponent) {
	        var componentRecognizer = this._rules.get(parentComponent);
	        if (lang_1.isBlank(componentRecognizer)) {
	            return false;
	        }
	        return componentRecognizer.hasRoute(name);
	    };
	    RouteRegistry.prototype.generateDefault = function (componentCursor) {
	        var _this = this;
	        if (lang_1.isBlank(componentCursor)) {
	            return null;
	        }
	        var componentRecognizer = this._rules.get(componentCursor);
	        if (lang_1.isBlank(componentRecognizer) || lang_1.isBlank(componentRecognizer.defaultRoute)) {
	            return null;
	        }
	        var defaultChild = null;
	        if (lang_1.isPresent(componentRecognizer.defaultRoute.handler.componentType)) {
	            var componentInstruction = componentRecognizer.defaultRoute.generate({});
	            if (!componentRecognizer.defaultRoute.terminal) {
	                defaultChild = this.generateDefault(componentRecognizer.defaultRoute.handler.componentType);
	            }
	            return new instruction_1.DefaultInstruction(componentInstruction, defaultChild);
	        }
	        return new instruction_1.UnresolvedInstruction(function () {
	            return componentRecognizer.defaultRoute.handler.resolveComponentType().then(function (_) { return _this.generateDefault(componentCursor); });
	        });
	    };
	    RouteRegistry = __decorate([
	        core_1.Injectable(),
	        __param(0, core_1.Inject(exports.ROUTER_PRIMARY_COMPONENT)), 
	        __metadata('design:paramtypes', [lang_1.Type])
	    ], RouteRegistry);
	    return RouteRegistry;
	})();
	exports.RouteRegistry = RouteRegistry;
	/*
	 * Given: ['/a/b', {c: 2}]
	 * Returns: ['', 'a', 'b', {c: 2}]
	 */
	function splitAndFlattenLinkParams(linkParams) {
	    return linkParams.reduce(function (accumulation, item) {
	        if (lang_1.isString(item)) {
	            var strItem = item;
	            return accumulation.concat(strItem.split('/'));
	        }
	        accumulation.push(item);
	        return accumulation;
	    }, []);
	}
	/*
	 * Given a list of instructions, returns the most specific instruction
	 */
	function mostSpecific(instructions) {
	    instructions = instructions.filter(function (instruction) { return lang_1.isPresent(instruction); });
	    if (instructions.length == 0) {
	        return null;
	    }
	    if (instructions.length == 1) {
	        return instructions[0];
	    }
	    var first = instructions[0];
	    var rest = instructions.slice(1);
	    return rest.reduce(function (instruction, contender) {
	        if (compareSpecificityStrings(contender.specificity, instruction.specificity) == -1) {
	            return contender;
	        }
	        return instruction;
	    }, first);
	}
	/*
	 * Expects strings to be in the form of "[0-2]+"
	 * Returns -1 if string A should be sorted above string B, 1 if it should be sorted after,
	 * or 0 if they are the same.
	 */
	function compareSpecificityStrings(a, b) {
	    var l = lang_1.Math.min(a.length, b.length);
	    for (var i = 0; i < l; i += 1) {
	        var ai = lang_1.StringWrapper.charCodeAt(a, i);
	        var bi = lang_1.StringWrapper.charCodeAt(b, i);
	        var difference = bi - ai;
	        if (difference != 0) {
	            return difference;
	        }
	    }
	    return a.length - b.length;
	}
	function assertTerminalComponent(component, path) {
	    if (!lang_1.isType(component)) {
	        return;
	    }
	    var annotations = reflection_1.reflector.annotations(component);
	    if (lang_1.isPresent(annotations)) {
	        for (var i = 0; i < annotations.length; i++) {
	            var annotation = annotations[i];
	            if (annotation instanceof route_config_impl_1.RouteConfig) {
	                throw new exceptions_1.BaseException("Child routes are not allowed for \"" + path + "\". Use \"...\" on the parent's route path.");
	            }
	        }
	    }
	}


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	/**
	 * The `RouteConfig` decorator defines routes for a given component.
	 *
	 * It takes an array of {@link RouteDefinition}s.
	 */
	var RouteConfig = (function () {
	    function RouteConfig(configs) {
	        this.configs = configs;
	    }
	    RouteConfig = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array])
	    ], RouteConfig);
	    return RouteConfig;
	})();
	exports.RouteConfig = RouteConfig;
	/**
	 * `Route` is a type of {@link RouteDefinition} used to route a path to a component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `component` a component type.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 * - `useAsDefault` is a boolean value. If `true`, the child route will be navigated to if no child
	 * route is specified during the navigation.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, Route} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new Route({path: '/home', component: HomeCmp, name: 'HomeCmp' })
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var Route = (function () {
	    function Route(_a) {
	        var path = _a.path, component = _a.component, name = _a.name, data = _a.data, useAsDefault = _a.useAsDefault;
	        // added next three properties to work around https://github.com/Microsoft/TypeScript/issues/4107
	        this.aux = null;
	        this.loader = null;
	        this.redirectTo = null;
	        this.path = path;
	        this.component = component;
	        this.name = name;
	        this.data = data;
	        this.useAsDefault = useAsDefault;
	    }
	    Route = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Route);
	    return Route;
	})();
	exports.Route = Route;
	/**
	 * `AuxRoute` is a type of {@link RouteDefinition} used to define an auxiliary route.
	 *
	 * It takes an object with the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `component` a component type.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, AuxRoute} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new AuxRoute({path: '/home', component: HomeCmp})
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var AuxRoute = (function () {
	    function AuxRoute(_a) {
	        var path = _a.path, component = _a.component, name = _a.name;
	        this.data = null;
	        // added next three properties to work around https://github.com/Microsoft/TypeScript/issues/4107
	        this.aux = null;
	        this.loader = null;
	        this.redirectTo = null;
	        this.useAsDefault = false;
	        this.path = path;
	        this.component = component;
	        this.name = name;
	    }
	    AuxRoute = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], AuxRoute);
	    return AuxRoute;
	})();
	exports.AuxRoute = AuxRoute;
	/**
	 * `AsyncRoute` is a type of {@link RouteDefinition} used to route a path to an asynchronously
	 * loaded component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `loader` is a function that returns a promise that resolves to a component.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 * - `useAsDefault` is a boolean value. If `true`, the child route will be navigated to if no child
	 * route is specified during the navigation.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, AsyncRoute} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new AsyncRoute({path: '/home', loader: () => Promise.resolve(MyLoadedCmp), name:
	 * 'MyLoadedCmp'})
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var AsyncRoute = (function () {
	    function AsyncRoute(_a) {
	        var path = _a.path, loader = _a.loader, name = _a.name, data = _a.data, useAsDefault = _a.useAsDefault;
	        this.aux = null;
	        this.path = path;
	        this.loader = loader;
	        this.name = name;
	        this.data = data;
	        this.useAsDefault = useAsDefault;
	    }
	    AsyncRoute = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], AsyncRoute);
	    return AsyncRoute;
	})();
	exports.AsyncRoute = AsyncRoute;
	/**
	 * `Redirect` is a type of {@link RouteDefinition} used to route a path to a canonical route.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `redirectTo` is an array representing the link DSL.
	 *
	 * Note that redirects **do not** affect how links are generated. For that, see the `useAsDefault`
	 * option.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, Route, Redirect} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new Redirect({path: '/', redirectTo: ['/Home'] }),
	 *   new Route({path: '/home', component: HomeCmp, name: 'Home'})
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var Redirect = (function () {
	    function Redirect(_a) {
	        var path = _a.path, redirectTo = _a.redirectTo;
	        this.name = null;
	        // added next three properties to work around https://github.com/Microsoft/TypeScript/issues/4107
	        this.loader = null;
	        this.data = null;
	        this.aux = null;
	        this.useAsDefault = false;
	        this.path = path;
	        this.redirectTo = redirectTo;
	    }
	    Redirect = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Redirect);
	    return Redirect;
	})();
	exports.Redirect = Redirect;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var promise_1 = __webpack_require__(54);
	var collection_1 = __webpack_require__(17);
	var instruction_1 = __webpack_require__(122);
	var path_recognizer_1 = __webpack_require__(123);
	var RouteMatch = (function () {
	    function RouteMatch() {
	    }
	    return RouteMatch;
	})();
	exports.RouteMatch = RouteMatch;
	var PathMatch = (function (_super) {
	    __extends(PathMatch, _super);
	    function PathMatch(instruction, remaining, remainingAux) {
	        _super.call(this);
	        this.instruction = instruction;
	        this.remaining = remaining;
	        this.remainingAux = remainingAux;
	    }
	    return PathMatch;
	})(RouteMatch);
	exports.PathMatch = PathMatch;
	var RedirectMatch = (function (_super) {
	    __extends(RedirectMatch, _super);
	    function RedirectMatch(redirectTo, specificity) {
	        _super.call(this);
	        this.redirectTo = redirectTo;
	        this.specificity = specificity;
	    }
	    return RedirectMatch;
	})(RouteMatch);
	exports.RedirectMatch = RedirectMatch;
	var RedirectRecognizer = (function () {
	    function RedirectRecognizer(path, redirectTo) {
	        this.path = path;
	        this.redirectTo = redirectTo;
	        this._pathRecognizer = new path_recognizer_1.PathRecognizer(path);
	        this.hash = this._pathRecognizer.hash;
	    }
	    /**
	     * Returns `null` or a `ParsedUrl` representing the new path to match
	     */
	    RedirectRecognizer.prototype.recognize = function (beginningSegment) {
	        var match = null;
	        if (lang_1.isPresent(this._pathRecognizer.recognize(beginningSegment))) {
	            match = new RedirectMatch(this.redirectTo, this._pathRecognizer.specificity);
	        }
	        return promise_1.PromiseWrapper.resolve(match);
	    };
	    RedirectRecognizer.prototype.generate = function (params) {
	        throw new exceptions_1.BaseException("Tried to generate a redirect.");
	    };
	    return RedirectRecognizer;
	})();
	exports.RedirectRecognizer = RedirectRecognizer;
	// represents something like '/foo/:bar'
	var RouteRecognizer = (function () {
	    // TODO: cache component instruction instances by params and by ParsedUrl instance
	    function RouteRecognizer(path, handler) {
	        this.path = path;
	        this.handler = handler;
	        this.terminal = true;
	        this._cache = new collection_1.Map();
	        this._pathRecognizer = new path_recognizer_1.PathRecognizer(path);
	        this.specificity = this._pathRecognizer.specificity;
	        this.hash = this._pathRecognizer.hash;
	        this.terminal = this._pathRecognizer.terminal;
	    }
	    RouteRecognizer.prototype.recognize = function (beginningSegment) {
	        var _this = this;
	        var res = this._pathRecognizer.recognize(beginningSegment);
	        if (lang_1.isBlank(res)) {
	            return null;
	        }
	        return this.handler.resolveComponentType().then(function (_) {
	            var componentInstruction = _this._getInstruction(res['urlPath'], res['urlParams'], res['allParams']);
	            return new PathMatch(componentInstruction, res['nextSegment'], res['auxiliary']);
	        });
	    };
	    RouteRecognizer.prototype.generate = function (params) {
	        var generated = this._pathRecognizer.generate(params);
	        var urlPath = generated['urlPath'];
	        var urlParams = generated['urlParams'];
	        return this._getInstruction(urlPath, urlParams, params);
	    };
	    RouteRecognizer.prototype.generateComponentPathValues = function (params) {
	        return this._pathRecognizer.generate(params);
	    };
	    RouteRecognizer.prototype._getInstruction = function (urlPath, urlParams, params) {
	        if (lang_1.isBlank(this.handler.componentType)) {
	            throw new exceptions_1.BaseException("Tried to get instruction before the type was loaded.");
	        }
	        var hashKey = urlPath + '?' + urlParams.join('?');
	        if (this._cache.has(hashKey)) {
	            return this._cache.get(hashKey);
	        }
	        var instruction = new instruction_1.ComponentInstruction(urlPath, urlParams, this.handler.data, this.handler.componentType, this.terminal, this.specificity, params);
	        this._cache.set(hashKey, instruction);
	        return instruction;
	    };
	    return RouteRecognizer;
	})();
	exports.RouteRecognizer = RouteRecognizer;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	/**
	 * `RouteParams` is an immutable map of parameters for the given route
	 * based on the url matcher and optional parameters for that route.
	 *
	 * You can inject `RouteParams` into the constructor of a component to use it.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig, RouteParams} from
	 * 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {path: '/user/:id', component: UserCmp, name: 'UserCmp'},
	 * ])
	 * class AppCmp {}
	 *
	 * @Component({ template: 'user: {{id}}' })
	 * class UserCmp {
	 *   id: string;
	 *   constructor(params: RouteParams) {
	 *     this.id = params.get('id');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
	var RouteParams = (function () {
	    function RouteParams(params) {
	        this.params = params;
	    }
	    RouteParams.prototype.get = function (param) { return lang_1.normalizeBlank(collection_1.StringMapWrapper.get(this.params, param)); };
	    return RouteParams;
	})();
	exports.RouteParams = RouteParams;
	/**
	 * `RouteData` is an immutable map of additional data you can configure in your {@link Route}.
	 *
	 * You can inject `RouteData` into the constructor of a component to use it.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig, RouteData} from
	 * 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {path: '/user/:id', component: UserCmp, name: 'UserCmp', data: {isAdmin: true}},
	 * ])
	 * class AppCmp {}
	 *
	 * @Component({...})
	 * @View({ template: 'user: {{isAdmin}}' })
	 * class UserCmp {
	 *   string: isAdmin;
	 *   constructor(data: RouteData) {
	 *     this.isAdmin = data.get('isAdmin');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
	var RouteData = (function () {
	    function RouteData(data) {
	        if (data === void 0) { data = lang_1.CONST_EXPR({}); }
	        this.data = data;
	    }
	    RouteData.prototype.get = function (key) { return lang_1.normalizeBlank(collection_1.StringMapWrapper.get(this.data, key)); };
	    return RouteData;
	})();
	exports.RouteData = RouteData;
	exports.BLANK_ROUTE_DATA = new RouteData();
	/**
	 * `Instruction` is a tree of {@link ComponentInstruction}s with all the information needed
	 * to transition each component in the app to a given route, including all auxiliary routes.
	 *
	 * `Instruction`s can be created using {@link Router#generate}, and can be used to
	 * perform route changes with {@link Router#navigateByInstruction}.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(router: Router) {
	 *     var instruction = router.generate(['/MyRoute']);
	 *     router.navigateByInstruction(instruction);
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
	var Instruction = (function () {
	    function Instruction(component, child, auxInstruction) {
	        this.component = component;
	        this.child = child;
	        this.auxInstruction = auxInstruction;
	    }
	    Object.defineProperty(Instruction.prototype, "urlPath", {
	        get: function () { return lang_1.isPresent(this.component) ? this.component.urlPath : ''; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Instruction.prototype, "urlParams", {
	        get: function () { return lang_1.isPresent(this.component) ? this.component.urlParams : []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Instruction.prototype, "specificity", {
	        get: function () {
	            var total = '';
	            if (lang_1.isPresent(this.component)) {
	                total += this.component.specificity;
	            }
	            if (lang_1.isPresent(this.child)) {
	                total += this.child.specificity;
	            }
	            return total;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * converts the instruction into a URL string
	     */
	    Instruction.prototype.toRootUrl = function () { return this.toUrlPath() + this.toUrlQuery(); };
	    /** @internal */
	    Instruction.prototype._toNonRootUrl = function () {
	        return this._stringifyPathMatrixAuxPrefixed() +
	            (lang_1.isPresent(this.child) ? this.child._toNonRootUrl() : '');
	    };
	    Instruction.prototype.toUrlQuery = function () { return this.urlParams.length > 0 ? ('?' + this.urlParams.join('&')) : ''; };
	    /**
	     * Returns a new instruction that shares the state of the existing instruction, but with
	     * the given child {@link Instruction} replacing the existing child.
	     */
	    Instruction.prototype.replaceChild = function (child) {
	        return new ResolvedInstruction(this.component, child, this.auxInstruction);
	    };
	    /**
	     * If the final URL for the instruction is ``
	     */
	    Instruction.prototype.toUrlPath = function () {
	        return this.urlPath + this._stringifyAux() +
	            (lang_1.isPresent(this.child) ? this.child._toNonRootUrl() : '');
	    };
	    // default instructions override these
	    Instruction.prototype.toLinkUrl = function () {
	        return this.urlPath + this._stringifyAux() +
	            (lang_1.isPresent(this.child) ? this.child._toLinkUrl() : '');
	    };
	    // this is the non-root version (called recursively)
	    /** @internal */
	    Instruction.prototype._toLinkUrl = function () {
	        return this._stringifyPathMatrixAuxPrefixed() +
	            (lang_1.isPresent(this.child) ? this.child._toLinkUrl() : '');
	    };
	    /** @internal */
	    Instruction.prototype._stringifyPathMatrixAuxPrefixed = function () {
	        var primary = this._stringifyPathMatrixAux();
	        if (primary.length > 0) {
	            primary = '/' + primary;
	        }
	        return primary;
	    };
	    /** @internal */
	    Instruction.prototype._stringifyMatrixParams = function () {
	        return this.urlParams.length > 0 ? (';' + this.urlParams.join(';')) : '';
	    };
	    /** @internal */
	    Instruction.prototype._stringifyPathMatrixAux = function () {
	        if (lang_1.isBlank(this.component)) {
	            return '';
	        }
	        return this.urlPath + this._stringifyMatrixParams() + this._stringifyAux();
	    };
	    /** @internal */
	    Instruction.prototype._stringifyAux = function () {
	        var routes = [];
	        collection_1.StringMapWrapper.forEach(this.auxInstruction, function (auxInstruction, _) {
	            routes.push(auxInstruction._stringifyPathMatrixAux());
	        });
	        if (routes.length > 0) {
	            return '(' + routes.join('//') + ')';
	        }
	        return '';
	    };
	    return Instruction;
	})();
	exports.Instruction = Instruction;
	/**
	 * a resolved instruction has an outlet instruction for itself, but maybe not for...
	 */
	var ResolvedInstruction = (function (_super) {
	    __extends(ResolvedInstruction, _super);
	    function ResolvedInstruction(component, child, auxInstruction) {
	        _super.call(this, component, child, auxInstruction);
	    }
	    ResolvedInstruction.prototype.resolveComponent = function () {
	        return async_1.PromiseWrapper.resolve(this.component);
	    };
	    return ResolvedInstruction;
	})(Instruction);
	exports.ResolvedInstruction = ResolvedInstruction;
	/**
	 * Represents a resolved default route
	 */
	var DefaultInstruction = (function (_super) {
	    __extends(DefaultInstruction, _super);
	    function DefaultInstruction(component, child) {
	        _super.call(this, component, child, {});
	    }
	    DefaultInstruction.prototype.resolveComponent = function () {
	        return async_1.PromiseWrapper.resolve(this.component);
	    };
	    DefaultInstruction.prototype.toLinkUrl = function () { return ''; };
	    /** @internal */
	    DefaultInstruction.prototype._toLinkUrl = function () { return ''; };
	    return DefaultInstruction;
	})(Instruction);
	exports.DefaultInstruction = DefaultInstruction;
	/**
	 * Represents a component that may need to do some redirection or lazy loading at a later time.
	 */
	var UnresolvedInstruction = (function (_super) {
	    __extends(UnresolvedInstruction, _super);
	    function UnresolvedInstruction(_resolver, _urlPath, _urlParams) {
	        if (_urlPath === void 0) { _urlPath = ''; }
	        if (_urlParams === void 0) { _urlParams = lang_1.CONST_EXPR([]); }
	        _super.call(this, null, null, {});
	        this._resolver = _resolver;
	        this._urlPath = _urlPath;
	        this._urlParams = _urlParams;
	    }
	    Object.defineProperty(UnresolvedInstruction.prototype, "urlPath", {
	        get: function () {
	            if (lang_1.isPresent(this.component)) {
	                return this.component.urlPath;
	            }
	            if (lang_1.isPresent(this._urlPath)) {
	                return this._urlPath;
	            }
	            return '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(UnresolvedInstruction.prototype, "urlParams", {
	        get: function () {
	            if (lang_1.isPresent(this.component)) {
	                return this.component.urlParams;
	            }
	            if (lang_1.isPresent(this._urlParams)) {
	                return this._urlParams;
	            }
	            return [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    UnresolvedInstruction.prototype.resolveComponent = function () {
	        var _this = this;
	        if (lang_1.isPresent(this.component)) {
	            return async_1.PromiseWrapper.resolve(this.component);
	        }
	        return this._resolver().then(function (resolution) {
	            _this.child = resolution.child;
	            return _this.component = resolution.component;
	        });
	    };
	    return UnresolvedInstruction;
	})(Instruction);
	exports.UnresolvedInstruction = UnresolvedInstruction;
	var RedirectInstruction = (function (_super) {
	    __extends(RedirectInstruction, _super);
	    function RedirectInstruction(component, child, auxInstruction, _specificity) {
	        _super.call(this, component, child, auxInstruction);
	        this._specificity = _specificity;
	    }
	    Object.defineProperty(RedirectInstruction.prototype, "specificity", {
	        get: function () { return this._specificity; },
	        enumerable: true,
	        configurable: true
	    });
	    return RedirectInstruction;
	})(ResolvedInstruction);
	exports.RedirectInstruction = RedirectInstruction;
	/**
	 * A `ComponentInstruction` represents the route state for a single component. An `Instruction` is
	 * composed of a tree of these `ComponentInstruction`s.
	 *
	 * `ComponentInstructions` is a public API. Instances of `ComponentInstruction` are passed
	 * to route lifecycle hooks, like {@link CanActivate}.
	 *
	 * `ComponentInstruction`s are [hash consed](https://en.wikipedia.org/wiki/Hash_consing). You should
	 * never construct one yourself with "new." Instead, rely on {@link Router/RouteRecognizer} to
	 * construct `ComponentInstruction`s.
	 *
	 * You should not modify this object. It should be treated as immutable.
	 */
	var ComponentInstruction = (function () {
	    function ComponentInstruction(urlPath, urlParams, data, componentType, terminal, specificity, params) {
	        if (params === void 0) { params = null; }
	        this.urlPath = urlPath;
	        this.urlParams = urlParams;
	        this.componentType = componentType;
	        this.terminal = terminal;
	        this.specificity = specificity;
	        this.params = params;
	        this.reuse = false;
	        this.routeData = lang_1.isPresent(data) ? data : exports.BLANK_ROUTE_DATA;
	    }
	    return ComponentInstruction;
	})();
	exports.ComponentInstruction = ComponentInstruction;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var url_parser_1 = __webpack_require__(124);
	var TouchMap = (function () {
	    function TouchMap(map) {
	        var _this = this;
	        this.map = {};
	        this.keys = {};
	        if (lang_1.isPresent(map)) {
	            collection_1.StringMapWrapper.forEach(map, function (value, key) {
	                _this.map[key] = lang_1.isPresent(value) ? value.toString() : null;
	                _this.keys[key] = true;
	            });
	        }
	    }
	    TouchMap.prototype.get = function (key) {
	        collection_1.StringMapWrapper.delete(this.keys, key);
	        return this.map[key];
	    };
	    TouchMap.prototype.getUnused = function () {
	        var _this = this;
	        var unused = {};
	        var keys = collection_1.StringMapWrapper.keys(this.keys);
	        keys.forEach(function (key) { return unused[key] = collection_1.StringMapWrapper.get(_this.map, key); });
	        return unused;
	    };
	    return TouchMap;
	})();
	function normalizeString(obj) {
	    if (lang_1.isBlank(obj)) {
	        return null;
	    }
	    else {
	        return obj.toString();
	    }
	}
	var ContinuationSegment = (function () {
	    function ContinuationSegment() {
	        this.name = '';
	    }
	    ContinuationSegment.prototype.generate = function (params) { return ''; };
	    ContinuationSegment.prototype.match = function (path) { return true; };
	    return ContinuationSegment;
	})();
	var StaticSegment = (function () {
	    function StaticSegment(path) {
	        this.path = path;
	        this.name = '';
	    }
	    StaticSegment.prototype.match = function (path) { return path == this.path; };
	    StaticSegment.prototype.generate = function (params) { return this.path; };
	    return StaticSegment;
	})();
	var DynamicSegment = (function () {
	    function DynamicSegment(name) {
	        this.name = name;
	    }
	    DynamicSegment.prototype.match = function (path) { return path.length > 0; };
	    DynamicSegment.prototype.generate = function (params) {
	        if (!collection_1.StringMapWrapper.contains(params.map, this.name)) {
	            throw new exceptions_1.BaseException("Route generator for '" + this.name + "' was not included in parameters passed.");
	        }
	        return normalizeString(params.get(this.name));
	    };
	    return DynamicSegment;
	})();
	var StarSegment = (function () {
	    function StarSegment(name) {
	        this.name = name;
	    }
	    StarSegment.prototype.match = function (path) { return true; };
	    StarSegment.prototype.generate = function (params) { return normalizeString(params.get(this.name)); };
	    return StarSegment;
	})();
	var paramMatcher = /^:([^\/]+)$/g;
	var wildcardMatcher = /^\*([^\/]+)$/g;
	function parsePathString(route) {
	    // normalize route as not starting with a "/". Recognition will
	    // also normalize.
	    if (route.startsWith("/")) {
	        route = route.substring(1);
	    }
	    var segments = splitBySlash(route);
	    var results = [];
	    var specificity = '';
	    // a single slash (or "empty segment" is as specific as a static segment
	    if (segments.length == 0) {
	        specificity += '2';
	    }
	    // The "specificity" of a path is used to determine which route is used when multiple routes match
	    // a URL. Static segments (like "/foo") are the most specific, followed by dynamic segments (like
	    // "/:id"). Star segments add no specificity. Segments at the start of the path are more specific
	    // than proceeding ones.
	    //
	    // The code below uses place values to combine the different types of segments into a single
	    // string that we can sort later. Each static segment is marked as a specificity of "2," each
	    // dynamic segment is worth "1" specificity, and stars are worth "0" specificity.
	    var limit = segments.length - 1;
	    for (var i = 0; i <= limit; i++) {
	        var segment = segments[i], match;
	        if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(paramMatcher, segment))) {
	            results.push(new DynamicSegment(match[1]));
	            specificity += '1';
	        }
	        else if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(wildcardMatcher, segment))) {
	            results.push(new StarSegment(match[1]));
	            specificity += '0';
	        }
	        else if (segment == '...') {
	            if (i < limit) {
	                throw new exceptions_1.BaseException("Unexpected \"...\" before the end of the path for \"" + route + "\".");
	            }
	            results.push(new ContinuationSegment());
	        }
	        else {
	            results.push(new StaticSegment(segment));
	            specificity += '2';
	        }
	    }
	    return { 'segments': results, 'specificity': specificity };
	}
	// this function is used to determine whether a route config path like `/foo/:id` collides with
	// `/foo/:name`
	function pathDslHash(segments) {
	    return segments.map(function (segment) {
	        if (segment instanceof StarSegment) {
	            return '*';
	        }
	        else if (segment instanceof ContinuationSegment) {
	            return '...';
	        }
	        else if (segment instanceof DynamicSegment) {
	            return ':';
	        }
	        else if (segment instanceof StaticSegment) {
	            return segment.path;
	        }
	    })
	        .join('/');
	}
	function splitBySlash(url) {
	    return url.split('/');
	}
	var RESERVED_CHARS = lang_1.RegExpWrapper.create('//|\\(|\\)|;|\\?|=');
	function assertPath(path) {
	    if (lang_1.StringWrapper.contains(path, '#')) {
	        throw new exceptions_1.BaseException("Path \"" + path + "\" should not include \"#\". Use \"HashLocationStrategy\" instead.");
	    }
	    var illegalCharacter = lang_1.RegExpWrapper.firstMatch(RESERVED_CHARS, path);
	    if (lang_1.isPresent(illegalCharacter)) {
	        throw new exceptions_1.BaseException("Path \"" + path + "\" contains \"" + illegalCharacter[0] + "\" which is not allowed in a route config.");
	    }
	}
	/**
	 * Parses a URL string using a given matcher DSL, and generates URLs from param maps
	 */
	var PathRecognizer = (function () {
	    function PathRecognizer(path) {
	        this.path = path;
	        this.terminal = true;
	        assertPath(path);
	        var parsed = parsePathString(path);
	        this._segments = parsed['segments'];
	        this.specificity = parsed['specificity'];
	        this.hash = pathDslHash(this._segments);
	        var lastSegment = this._segments[this._segments.length - 1];
	        this.terminal = !(lastSegment instanceof ContinuationSegment);
	    }
	    PathRecognizer.prototype.recognize = function (beginningSegment) {
	        var nextSegment = beginningSegment;
	        var currentSegment;
	        var positionalParams = {};
	        var captured = [];
	        for (var i = 0; i < this._segments.length; i += 1) {
	            var segment = this._segments[i];
	            currentSegment = nextSegment;
	            if (segment instanceof ContinuationSegment) {
	                break;
	            }
	            if (lang_1.isPresent(currentSegment)) {
	                // the star segment consumes all of the remaining URL, including matrix params
	                if (segment instanceof StarSegment) {
	                    positionalParams[segment.name] = currentSegment.toString();
	                    captured.push(currentSegment.toString());
	                    nextSegment = null;
	                    break;
	                }
	                captured.push(currentSegment.path);
	                if (segment instanceof DynamicSegment) {
	                    positionalParams[segment.name] = currentSegment.path;
	                }
	                else if (!segment.match(currentSegment.path)) {
	                    return null;
	                }
	                nextSegment = currentSegment.child;
	            }
	            else if (!segment.match('')) {
	                return null;
	            }
	        }
	        if (this.terminal && lang_1.isPresent(nextSegment)) {
	            return null;
	        }
	        var urlPath = captured.join('/');
	        var auxiliary;
	        var urlParams;
	        var allParams;
	        if (lang_1.isPresent(currentSegment)) {
	            // If this is the root component, read query params. Otherwise, read matrix params.
	            var paramsSegment = beginningSegment instanceof url_parser_1.RootUrl ? beginningSegment : currentSegment;
	            allParams = lang_1.isPresent(paramsSegment.params) ?
	                collection_1.StringMapWrapper.merge(paramsSegment.params, positionalParams) :
	                positionalParams;
	            urlParams = url_parser_1.serializeParams(paramsSegment.params);
	            auxiliary = currentSegment.auxiliary;
	        }
	        else {
	            allParams = positionalParams;
	            auxiliary = [];
	            urlParams = [];
	        }
	        return { urlPath: urlPath, urlParams: urlParams, allParams: allParams, auxiliary: auxiliary, nextSegment: nextSegment };
	    };
	    PathRecognizer.prototype.generate = function (params) {
	        var paramTokens = new TouchMap(params);
	        var path = [];
	        for (var i = 0; i < this._segments.length; i++) {
	            var segment = this._segments[i];
	            if (!(segment instanceof ContinuationSegment)) {
	                path.push(segment.generate(paramTokens));
	            }
	        }
	        var urlPath = path.join('/');
	        var nonPositionalParams = paramTokens.getUnused();
	        var urlParams = url_parser_1.serializeParams(nonPositionalParams);
	        return { urlPath: urlPath, urlParams: urlParams };
	    };
	    return PathRecognizer;
	})();
	exports.PathRecognizer = PathRecognizer;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	/**
	 * This class represents a parsed URL
	 */
	var Url = (function () {
	    function Url(path, child, auxiliary, params) {
	        if (child === void 0) { child = null; }
	        if (auxiliary === void 0) { auxiliary = lang_1.CONST_EXPR([]); }
	        if (params === void 0) { params = null; }
	        this.path = path;
	        this.child = child;
	        this.auxiliary = auxiliary;
	        this.params = params;
	    }
	    Url.prototype.toString = function () {
	        return this.path + this._matrixParamsToString() + this._auxToString() + this._childString();
	    };
	    Url.prototype.segmentToString = function () { return this.path + this._matrixParamsToString(); };
	    /** @internal */
	    Url.prototype._auxToString = function () {
	        return this.auxiliary.length > 0 ?
	            ('(' + this.auxiliary.map(function (sibling) { return sibling.toString(); }).join('//') + ')') :
	            '';
	    };
	    Url.prototype._matrixParamsToString = function () {
	        if (lang_1.isBlank(this.params)) {
	            return '';
	        }
	        return ';' + serializeParams(this.params).join(';');
	    };
	    /** @internal */
	    Url.prototype._childString = function () { return lang_1.isPresent(this.child) ? ('/' + this.child.toString()) : ''; };
	    return Url;
	})();
	exports.Url = Url;
	var RootUrl = (function (_super) {
	    __extends(RootUrl, _super);
	    function RootUrl(path, child, auxiliary, params) {
	        if (child === void 0) { child = null; }
	        if (auxiliary === void 0) { auxiliary = lang_1.CONST_EXPR([]); }
	        if (params === void 0) { params = null; }
	        _super.call(this, path, child, auxiliary, params);
	    }
	    RootUrl.prototype.toString = function () {
	        return this.path + this._auxToString() + this._childString() + this._queryParamsToString();
	    };
	    RootUrl.prototype.segmentToString = function () { return this.path + this._queryParamsToString(); };
	    RootUrl.prototype._queryParamsToString = function () {
	        if (lang_1.isBlank(this.params)) {
	            return '';
	        }
	        return '?' + serializeParams(this.params).join('&');
	    };
	    return RootUrl;
	})(Url);
	exports.RootUrl = RootUrl;
	function pathSegmentsToUrl(pathSegments) {
	    var url = new Url(pathSegments[pathSegments.length - 1]);
	    for (var i = pathSegments.length - 2; i >= 0; i -= 1) {
	        url = new Url(pathSegments[i], url);
	    }
	    return url;
	}
	exports.pathSegmentsToUrl = pathSegmentsToUrl;
	var SEGMENT_RE = lang_1.RegExpWrapper.create('^[^\\/\\(\\)\\?;=&#]+');
	function matchUrlSegment(str) {
	    var match = lang_1.RegExpWrapper.firstMatch(SEGMENT_RE, str);
	    return lang_1.isPresent(match) ? match[0] : '';
	}
	var UrlParser = (function () {
	    function UrlParser() {
	    }
	    UrlParser.prototype.peekStartsWith = function (str) { return this._remaining.startsWith(str); };
	    UrlParser.prototype.capture = function (str) {
	        if (!this._remaining.startsWith(str)) {
	            throw new exceptions_1.BaseException("Expected \"" + str + "\".");
	        }
	        this._remaining = this._remaining.substring(str.length);
	    };
	    UrlParser.prototype.parse = function (url) {
	        this._remaining = url;
	        if (url == '' || url == '/') {
	            return new Url('');
	        }
	        return this.parseRoot();
	    };
	    // segment + (aux segments) + (query params)
	    UrlParser.prototype.parseRoot = function () {
	        if (this.peekStartsWith('/')) {
	            this.capture('/');
	        }
	        var path = matchUrlSegment(this._remaining);
	        this.capture(path);
	        var aux = [];
	        if (this.peekStartsWith('(')) {
	            aux = this.parseAuxiliaryRoutes();
	        }
	        if (this.peekStartsWith(';')) {
	            // TODO: should these params just be dropped?
	            this.parseMatrixParams();
	        }
	        var child = null;
	        if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
	            this.capture('/');
	            child = this.parseSegment();
	        }
	        var queryParams = null;
	        if (this.peekStartsWith('?')) {
	            queryParams = this.parseQueryParams();
	        }
	        return new RootUrl(path, child, aux, queryParams);
	    };
	    // segment + (matrix params) + (aux segments)
	    UrlParser.prototype.parseSegment = function () {
	        if (this._remaining.length == 0) {
	            return null;
	        }
	        if (this.peekStartsWith('/')) {
	            this.capture('/');
	        }
	        var path = matchUrlSegment(this._remaining);
	        this.capture(path);
	        var matrixParams = null;
	        if (this.peekStartsWith(';')) {
	            matrixParams = this.parseMatrixParams();
	        }
	        var aux = [];
	        if (this.peekStartsWith('(')) {
	            aux = this.parseAuxiliaryRoutes();
	        }
	        var child = null;
	        if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
	            this.capture('/');
	            child = this.parseSegment();
	        }
	        return new Url(path, child, aux, matrixParams);
	    };
	    UrlParser.prototype.parseQueryParams = function () {
	        var params = {};
	        this.capture('?');
	        this.parseParam(params);
	        while (this._remaining.length > 0 && this.peekStartsWith('&')) {
	            this.capture('&');
	            this.parseParam(params);
	        }
	        return params;
	    };
	    UrlParser.prototype.parseMatrixParams = function () {
	        var params = {};
	        while (this._remaining.length > 0 && this.peekStartsWith(';')) {
	            this.capture(';');
	            this.parseParam(params);
	        }
	        return params;
	    };
	    UrlParser.prototype.parseParam = function (params) {
	        var key = matchUrlSegment(this._remaining);
	        if (lang_1.isBlank(key)) {
	            return;
	        }
	        this.capture(key);
	        var value = true;
	        if (this.peekStartsWith('=')) {
	            this.capture('=');
	            var valueMatch = matchUrlSegment(this._remaining);
	            if (lang_1.isPresent(valueMatch)) {
	                value = valueMatch;
	                this.capture(value);
	            }
	        }
	        params[key] = value;
	    };
	    UrlParser.prototype.parseAuxiliaryRoutes = function () {
	        var routes = [];
	        this.capture('(');
	        while (!this.peekStartsWith(')') && this._remaining.length > 0) {
	            routes.push(this.parseSegment());
	            if (this.peekStartsWith('//')) {
	                this.capture('//');
	            }
	        }
	        this.capture(')');
	        return routes;
	    };
	    return UrlParser;
	})();
	exports.UrlParser = UrlParser;
	exports.parser = new UrlParser();
	function serializeParams(paramMap) {
	    var params = [];
	    if (lang_1.isPresent(paramMap)) {
	        collection_1.StringMapWrapper.forEach(paramMap, function (value, key) {
	            if (value === true) {
	                params.push(key);
	            }
	            else {
	                params.push(key + '=' + value);
	            }
	        });
	    }
	    return params;
	}
	exports.serializeParams = serializeParams;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var async_1 = __webpack_require__(53);
	var route_recognizer_1 = __webpack_require__(121);
	var route_config_impl_1 = __webpack_require__(120);
	var async_route_handler_1 = __webpack_require__(126);
	var sync_route_handler_1 = __webpack_require__(127);
	/**
	 * `ComponentRecognizer` is responsible for recognizing routes for a single component.
	 * It is consumed by `RouteRegistry`, which knows how to recognize an entire hierarchy of
	 * components.
	 */
	var ComponentRecognizer = (function () {
	    function ComponentRecognizer() {
	        this.names = new collection_1.Map();
	        // map from name to recognizer
	        this.auxNames = new collection_1.Map();
	        // map from starting path to recognizer
	        this.auxRoutes = new collection_1.Map();
	        // TODO: optimize this into a trie
	        this.matchers = [];
	        this.defaultRoute = null;
	    }
	    /**
	     * returns whether or not the config is terminal
	     */
	    ComponentRecognizer.prototype.config = function (config) {
	        var handler;
	        if (lang_1.isPresent(config.name) && config.name[0].toUpperCase() != config.name[0]) {
	            var suggestedName = config.name[0].toUpperCase() + config.name.substring(1);
	            throw new exceptions_1.BaseException("Route \"" + config.path + "\" with name \"" + config.name + "\" does not begin with an uppercase letter. Route names should be CamelCase like \"" + suggestedName + "\".");
	        }
	        if (config instanceof route_config_impl_1.AuxRoute) {
	            handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
	            var path = config.path.startsWith('/') ? config.path.substring(1) : config.path;
	            var recognizer = new route_recognizer_1.RouteRecognizer(config.path, handler);
	            this.auxRoutes.set(path, recognizer);
	            if (lang_1.isPresent(config.name)) {
	                this.auxNames.set(config.name, recognizer);
	            }
	            return recognizer.terminal;
	        }
	        var useAsDefault = false;
	        if (config instanceof route_config_impl_1.Redirect) {
	            var redirector = new route_recognizer_1.RedirectRecognizer(config.path, config.redirectTo);
	            this._assertNoHashCollision(redirector.hash, config.path);
	            this.matchers.push(redirector);
	            return true;
	        }
	        if (config instanceof route_config_impl_1.Route) {
	            handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
	            useAsDefault = lang_1.isPresent(config.useAsDefault) && config.useAsDefault;
	        }
	        else if (config instanceof route_config_impl_1.AsyncRoute) {
	            handler = new async_route_handler_1.AsyncRouteHandler(config.loader, config.data);
	            useAsDefault = lang_1.isPresent(config.useAsDefault) && config.useAsDefault;
	        }
	        var recognizer = new route_recognizer_1.RouteRecognizer(config.path, handler);
	        this._assertNoHashCollision(recognizer.hash, config.path);
	        if (useAsDefault) {
	            if (lang_1.isPresent(this.defaultRoute)) {
	                throw new exceptions_1.BaseException("Only one route can be default");
	            }
	            this.defaultRoute = recognizer;
	        }
	        this.matchers.push(recognizer);
	        if (lang_1.isPresent(config.name)) {
	            this.names.set(config.name, recognizer);
	        }
	        return recognizer.terminal;
	    };
	    ComponentRecognizer.prototype._assertNoHashCollision = function (hash, path) {
	        this.matchers.forEach(function (matcher) {
	            if (hash == matcher.hash) {
	                throw new exceptions_1.BaseException("Configuration '" + path + "' conflicts with existing route '" + matcher.path + "'");
	            }
	        });
	    };
	    /**
	     * Given a URL, returns a list of `RouteMatch`es, which are partial recognitions for some route.
	     */
	    ComponentRecognizer.prototype.recognize = function (urlParse) {
	        var solutions = [];
	        this.matchers.forEach(function (routeRecognizer) {
	            var pathMatch = routeRecognizer.recognize(urlParse);
	            if (lang_1.isPresent(pathMatch)) {
	                solutions.push(pathMatch);
	            }
	        });
	        // handle cases where we are routing just to an aux route
	        if (solutions.length == 0 && lang_1.isPresent(urlParse) && urlParse.auxiliary.length > 0) {
	            return [async_1.PromiseWrapper.resolve(new route_recognizer_1.PathMatch(null, null, urlParse.auxiliary))];
	        }
	        return solutions;
	    };
	    ComponentRecognizer.prototype.recognizeAuxiliary = function (urlParse) {
	        var routeRecognizer = this.auxRoutes.get(urlParse.path);
	        if (lang_1.isPresent(routeRecognizer)) {
	            return [routeRecognizer.recognize(urlParse)];
	        }
	        return [async_1.PromiseWrapper.resolve(null)];
	    };
	    ComponentRecognizer.prototype.hasRoute = function (name) { return this.names.has(name); };
	    ComponentRecognizer.prototype.componentLoaded = function (name) {
	        return this.hasRoute(name) && lang_1.isPresent(this.names.get(name).handler.componentType);
	    };
	    ComponentRecognizer.prototype.loadComponent = function (name) {
	        return this.names.get(name).handler.resolveComponentType();
	    };
	    ComponentRecognizer.prototype.generate = function (name, params) {
	        var pathRecognizer = this.names.get(name);
	        if (lang_1.isBlank(pathRecognizer)) {
	            return null;
	        }
	        return pathRecognizer.generate(params);
	    };
	    ComponentRecognizer.prototype.generateAuxiliary = function (name, params) {
	        var pathRecognizer = this.auxNames.get(name);
	        if (lang_1.isBlank(pathRecognizer)) {
	            return null;
	        }
	        return pathRecognizer.generate(params);
	    };
	    return ComponentRecognizer;
	})();
	exports.ComponentRecognizer = ComponentRecognizer;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var instruction_1 = __webpack_require__(122);
	var AsyncRouteHandler = (function () {
	    function AsyncRouteHandler(_loader, data) {
	        if (data === void 0) { data = null; }
	        this._loader = _loader;
	        /** @internal */
	        this._resolvedComponent = null;
	        this.data = lang_1.isPresent(data) ? new instruction_1.RouteData(data) : instruction_1.BLANK_ROUTE_DATA;
	    }
	    AsyncRouteHandler.prototype.resolveComponentType = function () {
	        var _this = this;
	        if (lang_1.isPresent(this._resolvedComponent)) {
	            return this._resolvedComponent;
	        }
	        return this._resolvedComponent = this._loader().then(function (componentType) {
	            _this.componentType = componentType;
	            return componentType;
	        });
	    };
	    return AsyncRouteHandler;
	})();
	exports.AsyncRouteHandler = AsyncRouteHandler;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var async_1 = __webpack_require__(53);
	var lang_1 = __webpack_require__(10);
	var instruction_1 = __webpack_require__(122);
	var SyncRouteHandler = (function () {
	    function SyncRouteHandler(componentType, data) {
	        this.componentType = componentType;
	        /** @internal */
	        this._resolvedComponent = null;
	        this._resolvedComponent = async_1.PromiseWrapper.resolve(componentType);
	        this.data = lang_1.isPresent(data) ? new instruction_1.RouteData(data) : instruction_1.BLANK_ROUTE_DATA;
	    }
	    SyncRouteHandler.prototype.resolveComponentType = function () { return this._resolvedComponent; };
	    return SyncRouteHandler;
	})();
	exports.SyncRouteHandler = SyncRouteHandler;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var route_config_decorator_1 = __webpack_require__(129);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	/**
	 * Given a JS Object that represents a route config, returns a corresponding Route, AsyncRoute,
	 * AuxRoute or Redirect object.
	 *
	 * Also wraps an AsyncRoute's loader function to add the loaded component's route config to the
	 * `RouteRegistry`.
	 */
	function normalizeRouteConfig(config, registry) {
	    if (config instanceof route_config_decorator_1.AsyncRoute) {
	        var wrappedLoader = wrapLoaderToReconfigureRegistry(config.loader, registry);
	        return new route_config_decorator_1.AsyncRoute({
	            path: config.path,
	            loader: wrappedLoader,
	            name: config.name,
	            data: config.data,
	            useAsDefault: config.useAsDefault
	        });
	    }
	    if (config instanceof route_config_decorator_1.Route || config instanceof route_config_decorator_1.Redirect || config instanceof route_config_decorator_1.AuxRoute) {
	        return config;
	    }
	    if ((+!!config.component) + (+!!config.redirectTo) + (+!!config.loader) != 1) {
	        throw new exceptions_1.BaseException("Route config should contain exactly one \"component\", \"loader\", or \"redirectTo\" property.");
	    }
	    if (config.as && config.name) {
	        throw new exceptions_1.BaseException("Route config should contain exactly one \"as\" or \"name\" property.");
	    }
	    if (config.as) {
	        config.name = config.as;
	    }
	    if (config.loader) {
	        var wrappedLoader = wrapLoaderToReconfigureRegistry(config.loader, registry);
	        return new route_config_decorator_1.AsyncRoute({
	            path: config.path,
	            loader: wrappedLoader,
	            name: config.name,
	            data: config.data,
	            useAsDefault: config.useAsDefault
	        });
	    }
	    if (config.aux) {
	        return new route_config_decorator_1.AuxRoute({ path: config.aux, component: config.component, name: config.name });
	    }
	    if (config.component) {
	        if (typeof config.component == 'object') {
	            var componentDefinitionObject = config.component;
	            if (componentDefinitionObject.type == 'constructor') {
	                return new route_config_decorator_1.Route({
	                    path: config.path,
	                    component: componentDefinitionObject.constructor,
	                    name: config.name,
	                    data: config.data,
	                    useAsDefault: config.useAsDefault
	                });
	            }
	            else if (componentDefinitionObject.type == 'loader') {
	                return new route_config_decorator_1.AsyncRoute({
	                    path: config.path,
	                    loader: componentDefinitionObject.loader,
	                    name: config.name,
	                    data: config.data,
	                    useAsDefault: config.useAsDefault
	                });
	            }
	            else {
	                throw new exceptions_1.BaseException("Invalid component type \"" + componentDefinitionObject.type + "\". Valid types are \"constructor\" and \"loader\".");
	            }
	        }
	        return new route_config_decorator_1.Route(config);
	    }
	    if (config.redirectTo) {
	        return new route_config_decorator_1.Redirect({ path: config.path, redirectTo: config.redirectTo });
	    }
	    return config;
	}
	exports.normalizeRouteConfig = normalizeRouteConfig;
	function wrapLoaderToReconfigureRegistry(loader, registry) {
	    return function () {
	        return loader().then(function (componentType) {
	            registry.configFromComponent(componentType);
	            return componentType;
	        });
	    };
	}
	function assertComponentExists(component, path) {
	    if (!lang_1.isType(component)) {
	        throw new exceptions_1.BaseException("Component for route \"" + path + "\" is not defined, or is not a class.");
	    }
	}
	exports.assertComponentExists = assertComponentExists;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var route_config_impl_1 = __webpack_require__(120);
	var decorators_1 = __webpack_require__(14);
	var route_config_impl_2 = __webpack_require__(120);
	exports.Route = route_config_impl_2.Route;
	exports.Redirect = route_config_impl_2.Redirect;
	exports.AuxRoute = route_config_impl_2.AuxRoute;
	exports.AsyncRoute = route_config_impl_2.AsyncRoute;
	// Copied from RouteConfig in route_config_impl.
	/**
	 * The `RouteConfig` decorator defines routes for a given component.
	 *
	 * It takes an array of {@link RouteDefinition}s.
	 */
	exports.RouteConfig = decorators_1.makeDecorator(route_config_impl_1.RouteConfig);


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var location_strategy_1 = __webpack_require__(131);
	var async_1 = __webpack_require__(53);
	var core_1 = __webpack_require__(7);
	/**
	 * `Location` is a service that applications can use to interact with a browser's URL.
	 * Depending on which {@link LocationStrategy} is used, `Location` will either persist
	 * to the URL's path or the URL's hash segment.
	 *
	 * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
	 * `Location` only if you need to interact with or create normalized URLs outside of
	 * routing.
	 *
	 * `Location` is responsible for normalizing the URL against the application's base href.
	 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	 * trailing slash:
	 * - `/my/app/user/123` is normalized
	 * - `my/app/user/123` **is not** normalized
	 * - `/my/app/user/123/` **is not** normalized
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig,
	 *   Location
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(location: Location) {
	 *     location.go('/foo');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	var Location = (function () {
	    function Location(platformStrategy) {
	        var _this = this;
	        this.platformStrategy = platformStrategy;
	        /** @internal */
	        this._subject = new async_1.EventEmitter();
	        var browserBaseHref = this.platformStrategy.getBaseHref();
	        this._baseHref = stripTrailingSlash(stripIndexHtml(browserBaseHref));
	        this.platformStrategy.onPopState(function (ev) {
	            async_1.ObservableWrapper.callEmit(_this._subject, { 'url': _this.path(), 'pop': true, 'type': ev.type });
	        });
	    }
	    /**
	     * Returns the normalized URL path.
	     */
	    Location.prototype.path = function () { return this.normalize(this.platformStrategy.path()); };
	    /**
	     * Given a string representing a URL, returns the normalized URL path without leading or
	     * trailing slashes
	     */
	    Location.prototype.normalize = function (url) {
	        return stripTrailingSlash(_stripBaseHref(this._baseHref, stripIndexHtml(url)));
	    };
	    /**
	     * Given a string representing a URL, returns the platform-specific external URL path.
	     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	     */
	    Location.prototype.prepareExternalUrl = function (url) {
	        if (url.length > 0 && !url.startsWith('/')) {
	            url = '/' + url;
	        }
	        return this.platformStrategy.prepareExternalUrl(url);
	    };
	    // TODO: rename this method to pushState
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and pushes a
	     * new item onto the platform's history.
	     */
	    Location.prototype.go = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this.platformStrategy.pushState(null, '', path, query);
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and replaces
	     * the top item on the platform's history stack.
	     */
	    Location.prototype.replaceState = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this.platformStrategy.replaceState(null, '', path, query);
	    };
	    /**
	     * Navigates forward in the platform's history.
	     */
	    Location.prototype.forward = function () { this.platformStrategy.forward(); };
	    /**
	     * Navigates back in the platform's history.
	     */
	    Location.prototype.back = function () { this.platformStrategy.back(); };
	    /**
	     * Subscribe to the platform's `popState` events.
	     */
	    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	        if (onThrow === void 0) { onThrow = null; }
	        if (onReturn === void 0) { onReturn = null; }
	        return async_1.ObservableWrapper.subscribe(this._subject, onNext, onThrow, onReturn);
	    };
	    Location = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [location_strategy_1.LocationStrategy])
	    ], Location);
	    return Location;
	})();
	exports.Location = Location;
	function _stripBaseHref(baseHref, url) {
	    if (baseHref.length > 0 && url.startsWith(baseHref)) {
	        return url.substring(baseHref.length);
	    }
	    return url;
	}
	function stripIndexHtml(url) {
	    if (/\/index.html$/g.test(url)) {
	        // '/index.html'.length == 11
	        return url.substring(0, url.length - 11);
	    }
	    return url;
	}
	function stripTrailingSlash(url) {
	    if (/\/$/g.test(url)) {
	        url = url.substring(0, url.length - 1);
	    }
	    return url;
	}


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	/**
	 * `LocationStrategy` is responsible for representing and reading route state
	 * from the browser's URL. Angular provides two strategies:
	 * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).
	 *
	 * This is used under the hood of the {@link Location} service.
	 *
	 * Applications should use the {@link Router} or {@link Location} services to
	 * interact with application route state.
	 *
	 * For instance, {@link HashLocationStrategy} produces URLs like
	 * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
	 * `http://example.com/foo` as an equivalent URL.
	 *
	 * See these two classes for more.
	 */
	var LocationStrategy = (function () {
	    function LocationStrategy() {
	    }
	    return LocationStrategy;
	})();
	exports.LocationStrategy = LocationStrategy;
	/**
	 * The `APP_BASE_HREF` token represents the base href to be used with the
	 * {@link PathLocationStrategy}.
	 *
	 * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	 * representing the URL prefix that should be preserved when generating and recognizing
	 * URLs.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [
	 *   ROUTER_PROVIDERS,
	 *   provide(APP_BASE_HREF, {useValue: '/my/app'})
	 * ]);
	 * ```
	 */
	exports.APP_BASE_HREF = lang_1.CONST_EXPR(new core_1.OpaqueToken('appBaseHref'));
	function normalizeQueryParams(params) {
	    return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
	}
	exports.normalizeQueryParams = normalizeQueryParams;
	function joinWithSlash(start, end) {
	    if (start.length == 0) {
	        return end;
	    }
	    if (end.length == 0) {
	        return start;
	    }
	    var slashes = 0;
	    if (start.endsWith('/')) {
	        slashes++;
	    }
	    if (end.startsWith('/')) {
	        slashes++;
	    }
	    if (slashes == 2) {
	        return start + end.substring(1);
	    }
	    if (slashes == 1) {
	        return start + end;
	    }
	    return start + '/' + end;
	}
	exports.joinWithSlash = joinWithSlash;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var lifecycle_annotations_impl_1 = __webpack_require__(133);
	var reflection_1 = __webpack_require__(21);
	function hasLifecycleHook(e, type) {
	    if (!(type instanceof lang_1.Type))
	        return false;
	    return e.name in type.prototype;
	}
	exports.hasLifecycleHook = hasLifecycleHook;
	function getCanActivateHook(type) {
	    var annotations = reflection_1.reflector.annotations(type);
	    for (var i = 0; i < annotations.length; i += 1) {
	        var annotation = annotations[i];
	        if (annotation instanceof lifecycle_annotations_impl_1.CanActivate) {
	            return annotation.fn;
	        }
	    }
	    return null;
	}
	exports.getCanActivateHook = getCanActivateHook;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var RouteLifecycleHook = (function () {
	    function RouteLifecycleHook(name) {
	        this.name = name;
	    }
	    RouteLifecycleHook = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], RouteLifecycleHook);
	    return RouteLifecycleHook;
	})();
	exports.RouteLifecycleHook = RouteLifecycleHook;
	var CanActivate = (function () {
	    function CanActivate(fn) {
	        this.fn = fn;
	    }
	    CanActivate = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Function])
	    ], CanActivate);
	    return CanActivate;
	})();
	exports.CanActivate = CanActivate;
	exports.routerCanReuse = lang_1.CONST_EXPR(new RouteLifecycleHook("routerCanReuse"));
	exports.routerCanDeactivate = lang_1.CONST_EXPR(new RouteLifecycleHook("routerCanDeactivate"));
	exports.routerOnActivate = lang_1.CONST_EXPR(new RouteLifecycleHook("routerOnActivate"));
	exports.routerOnReuse = lang_1.CONST_EXPR(new RouteLifecycleHook("routerOnReuse"));
	exports.routerOnDeactivate = lang_1.CONST_EXPR(new RouteLifecycleHook("routerOnDeactivate"));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var async_1 = __webpack_require__(53);
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var core_1 = __webpack_require__(7);
	var routerMod = __webpack_require__(118);
	var instruction_1 = __webpack_require__(122);
	var hookMod = __webpack_require__(135);
	var route_lifecycle_reflector_1 = __webpack_require__(132);
	var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
	/**
	 * A router outlet is a placeholder that Angular dynamically fills based on the application's route.
	 *
	 * ## Use
	 *
	 * ```
	 * <router-outlet></router-outlet>
	 * ```
	 */
	var RouterOutlet = (function () {
	    function RouterOutlet(_elementRef, _loader, _parentRouter, nameAttr) {
	        this._elementRef = _elementRef;
	        this._loader = _loader;
	        this._parentRouter = _parentRouter;
	        this.name = null;
	        this._componentRef = null;
	        this._currentInstruction = null;
	        if (lang_1.isPresent(nameAttr)) {
	            this.name = nameAttr;
	            this._parentRouter.registerAuxOutlet(this);
	        }
	        else {
	            this._parentRouter.registerPrimaryOutlet(this);
	        }
	    }
	    /**
	     * Called by the Router to instantiate a new component during the commit phase of a navigation.
	     * This method in turn is responsible for calling the `routerOnActivate` hook of its child.
	     */
	    RouterOutlet.prototype.activate = function (nextInstruction) {
	        var _this = this;
	        var previousInstruction = this._currentInstruction;
	        this._currentInstruction = nextInstruction;
	        var componentType = nextInstruction.componentType;
	        var childRouter = this._parentRouter.childRouter(componentType);
	        var providers = core_1.Injector.resolve([
	            core_1.provide(instruction_1.RouteData, { useValue: nextInstruction.routeData }),
	            core_1.provide(instruction_1.RouteParams, { useValue: new instruction_1.RouteParams(nextInstruction.params) }),
	            core_1.provide(routerMod.Router, { useValue: childRouter })
	        ]);
	        return this._loader.loadNextToLocation(componentType, this._elementRef, providers)
	            .then(function (componentRef) {
	            _this._componentRef = componentRef;
	            if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnActivate, componentType)) {
	                return _this._componentRef.instance
	                    .routerOnActivate(nextInstruction, previousInstruction);
	            }
	        });
	    };
	    /**
	     * Called by the {@link Router} during the commit phase of a navigation when an outlet
	     * reuses a component between different routes.
	     * This method in turn is responsible for calling the `routerOnReuse` hook of its child.
	     */
	    RouterOutlet.prototype.reuse = function (nextInstruction) {
	        var previousInstruction = this._currentInstruction;
	        this._currentInstruction = nextInstruction;
	        if (lang_1.isBlank(this._componentRef)) {
	            throw new exceptions_1.BaseException("Cannot reuse an outlet that does not contain a component.");
	        }
	        return async_1.PromiseWrapper.resolve(route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnReuse, this._currentInstruction.componentType) ?
	            this._componentRef.instance
	                .routerOnReuse(nextInstruction, previousInstruction) :
	            true);
	    };
	    /**
	     * Called by the {@link Router} when an outlet disposes of a component's contents.
	     * This method in turn is responsible for calling the `routerOnDeactivate` hook of its child.
	     */
	    RouterOutlet.prototype.deactivate = function (nextInstruction) {
	        var _this = this;
	        var next = _resolveToTrue;
	        if (lang_1.isPresent(this._componentRef) && lang_1.isPresent(this._currentInstruction) &&
	            route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnDeactivate, this._currentInstruction.componentType)) {
	            next = async_1.PromiseWrapper.resolve(this._componentRef.instance
	                .routerOnDeactivate(nextInstruction, this._currentInstruction));
	        }
	        return next.then(function (_) {
	            if (lang_1.isPresent(_this._componentRef)) {
	                _this._componentRef.dispose();
	                _this._componentRef = null;
	            }
	        });
	    };
	    /**
	     * Called by the {@link Router} during recognition phase of a navigation.
	     *
	     * If this resolves to `false`, the given navigation is cancelled.
	     *
	     * This method delegates to the child component's `routerCanDeactivate` hook if it exists,
	     * and otherwise resolves to true.
	     */
	    RouterOutlet.prototype.routerCanDeactivate = function (nextInstruction) {
	        if (lang_1.isBlank(this._currentInstruction)) {
	            return _resolveToTrue;
	        }
	        if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerCanDeactivate, this._currentInstruction.componentType)) {
	            return async_1.PromiseWrapper.resolve(this._componentRef.instance
	                .routerCanDeactivate(nextInstruction, this._currentInstruction));
	        }
	        return _resolveToTrue;
	    };
	    /**
	     * Called by the {@link Router} during recognition phase of a navigation.
	     *
	     * If the new child component has a different Type than the existing child component,
	     * this will resolve to `false`. You can't reuse an old component when the new component
	     * is of a different Type.
	     *
	     * Otherwise, this method delegates to the child component's `routerCanReuse` hook if it exists,
	     * or resolves to true if the hook is not present.
	     */
	    RouterOutlet.prototype.routerCanReuse = function (nextInstruction) {
	        var result;
	        if (lang_1.isBlank(this._currentInstruction) ||
	            this._currentInstruction.componentType != nextInstruction.componentType) {
	            result = false;
	        }
	        else if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerCanReuse, this._currentInstruction.componentType)) {
	            result = this._componentRef.instance
	                .routerCanReuse(nextInstruction, this._currentInstruction);
	        }
	        else {
	            result = nextInstruction == this._currentInstruction ||
	                (lang_1.isPresent(nextInstruction.params) && lang_1.isPresent(this._currentInstruction.params) &&
	                    collection_1.StringMapWrapper.equals(nextInstruction.params, this._currentInstruction.params));
	        }
	        return async_1.PromiseWrapper.resolve(result);
	    };
	    RouterOutlet = __decorate([
	        core_1.Directive({ selector: 'router-outlet' }),
	        __param(3, core_1.Attribute('name')), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.DynamicComponentLoader, routerMod.Router, String])
	    ], RouterOutlet);
	    return RouterOutlet;
	})();
	exports.RouterOutlet = RouterOutlet;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var decorators_1 = __webpack_require__(14);
	var lifecycle_annotations_impl_1 = __webpack_require__(133);
	var lifecycle_annotations_impl_2 = __webpack_require__(133);
	exports.routerCanReuse = lifecycle_annotations_impl_2.routerCanReuse;
	exports.routerCanDeactivate = lifecycle_annotations_impl_2.routerCanDeactivate;
	exports.routerOnActivate = lifecycle_annotations_impl_2.routerOnActivate;
	exports.routerOnReuse = lifecycle_annotations_impl_2.routerOnReuse;
	exports.routerOnDeactivate = lifecycle_annotations_impl_2.routerOnDeactivate;
	/**
	 * Defines route lifecycle hook `CanActivate`, which is called by the router to determine
	 * if a component can be instantiated as part of a navigation.
	 *
	 * <aside class="is-right">
	 * Note that unlike other lifecycle hooks, this one uses an annotation rather than an interface.
	 * This is because the `CanActivate` function is called before the component is instantiated.
	 * </aside>
	 *
	 * The `CanActivate` hook is called with two {@link ComponentInstruction}s as parameters, the first
	 * representing the current route being navigated to, and the second parameter representing the
	 * previous route or `null`.
	 *
	 * ```typescript
	 * @CanActivate((next, prev) => boolean | Promise<boolean>)
	 * ```
	 *
	 * If `CanActivate` returns or resolves to `false`, the navigation is cancelled.
	 * If `CanActivate` throws or rejects, the navigation is also cancelled.
	 * If `CanActivate` returns or resolves to `true`, navigation continues, the component is
	 * instantiated, and the {@link OnActivate} hook of that component is called if implemented.
	 *
	 * ### Example
	 *
	 * {@example router/ts/can_activate/can_activate_example.ts region='canActivate' }
	 */
	exports.CanActivate = decorators_1.makeDecorator(lifecycle_annotations_impl_1.CanActivate);


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var router_1 = __webpack_require__(118);
	var location_1 = __webpack_require__(130);
	/**
	 * The RouterLink directive lets you link to specific parts of your app.
	 *
	 * Consider the following route configuration:

	 * ```
	 * @RouteConfig([
	 *   { path: '/user', component: UserCmp, as: 'User' }
	 * ]);
	 * class MyComp {}
	 * ```
	 *
	 * When linking to this `User` route, you can write:
	 *
	 * ```
	 * <a [routerLink]="['./User']">link to user component</a>
	 * ```
	 *
	 * RouterLink expects the value to be an array of route names, followed by the params
	 * for that level of routing. For instance `['/Team', {teamId: 1}, 'User', {userId: 2}]`
	 * means that we want to generate a link for the `Team` route with params `{teamId: 1}`,
	 * and with a child route `User` with params `{userId: 2}`.
	 *
	 * The first route name should be prepended with `/`, `./`, or `../`.
	 * If the route begins with `/`, the router will look up the route from the root of the app.
	 * If the route begins with `./`, the router will instead look in the current component's
	 * children for the route. And if the route begins with `../`, the router will look at the
	 * current component's parent.
	 */
	var RouterLink = (function () {
	    function RouterLink(_router, _location) {
	        var _this = this;
	        this._router = _router;
	        this._location = _location;
	        // we need to update the link whenever a route changes to account for aux routes
	        this._router.subscribe(function (_) { return _this._updateLink(); });
	    }
	    // because auxiliary links take existing primary and auxiliary routes into account,
	    // we need to update the link whenever params or other routes change.
	    RouterLink.prototype._updateLink = function () {
	        this._navigationInstruction = this._router.generate(this._routeParams);
	        var navigationHref = this._navigationInstruction.toLinkUrl();
	        this.visibleHref = this._location.prepareExternalUrl(navigationHref);
	    };
	    Object.defineProperty(RouterLink.prototype, "isRouteActive", {
	        get: function () { return this._router.isRouteActive(this._navigationInstruction); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RouterLink.prototype, "routeParams", {
	        set: function (changes) {
	            this._routeParams = changes;
	            this._updateLink();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterLink.prototype.onClick = function () {
	        // If no target, or if target is _self, prevent default browser behavior
	        if (!lang_1.isString(this.target) || this.target == '_self') {
	            this._router.navigateByInstruction(this._navigationInstruction);
	            return false;
	        }
	        return true;
	    };
	    RouterLink = __decorate([
	        core_1.Directive({
	            selector: '[routerLink]',
	            inputs: ['routeParams: routerLink', 'target: target'],
	            host: {
	                '(click)': 'onClick()',
	                '[attr.href]': 'visibleHref',
	                '[class.router-link-active]': 'isRouteActive'
	            }
	        }), 
	        __metadata('design:paramtypes', [router_1.Router, location_1.Location])
	    ], RouterLink);
	    return RouterLink;
	})();
	exports.RouterLink = RouterLink;


/***/ },
/* 137 */
/***/ function(module, exports) {

	'use strict';/**
	 * This class should not be used directly by an application developer. Instead, use
	 * {@link Location}.
	 *
	 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	 * agnostic.
	 * This means that we can have different implementation of `PlatformLocation` for the different
	 * platforms
	 * that angular supports. For example, the default `PlatformLocation` is {@link
	 * BrowserPlatformLocation},
	 * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
	 *
	 * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
	 * when
	 * they need to interact with the DOM apis like pushState, popState, etc...
	 *
	 * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
	 * by
	 * the {@link Router} in order to navigate between routes. Since all interactions between {@link
	 * Router} /
	 * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	 * class
	 * they are all platform independent.
	 */
	var PlatformLocation = (function () {
	    function PlatformLocation() {
	    }
	    return PlatformLocation;
	})();
	exports.PlatformLocation = PlatformLocation;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var location_strategy_1 = __webpack_require__(131);
	var lang_1 = __webpack_require__(10);
	var platform_location_1 = __webpack_require__(137);
	/**
	 * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
	 * {@link Location} service to represent its state in the
	 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	 * of the browser's URL.
	 *
	 * For instance, if you call `location.go('/foo')`, the browser's URL will become
	 * `example.com#/foo`.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, provide} from 'angular2/core';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig,
	 *   Location,
	 *   LocationStrategy,
	 *   HashLocationStrategy
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(location: Location) {
	 *     location.go('/foo');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, [
	 *   ROUTER_PROVIDERS,
	 *   provide(LocationStrategy, {useClass: HashLocationStrategy})
	 * ]);
	 * ```
	 */
	var HashLocationStrategy = (function (_super) {
	    __extends(HashLocationStrategy, _super);
	    function HashLocationStrategy(_platformLocation, _baseHref) {
	        _super.call(this);
	        this._platformLocation = _platformLocation;
	        this._baseHref = '';
	        if (lang_1.isPresent(_baseHref)) {
	            this._baseHref = _baseHref;
	        }
	    }
	    HashLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    HashLocationStrategy.prototype.path = function () {
	        // the hash value is always prefixed with a `#`
	        // and if it is empty then it will stay empty
	        var path = this._platformLocation.hash;
	        // Dart will complain if a call to substring is
	        // executed with a position value that extends the
	        // length of string.
	        return (path.length > 0 ? path.substring(1) : path) +
	            location_strategy_1.normalizeQueryParams(this._platformLocation.search);
	    };
	    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        var url = location_strategy_1.joinWithSlash(this._baseHref, internal);
	        return url.length > 0 ? ('#' + url) : url;
	    };
	    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	        var url = this.prepareExternalUrl(path + location_strategy_1.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.pushState(state, title, url);
	    };
	    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	        var url = this.prepareExternalUrl(path + location_strategy_1.normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.replaceState(state, title, url);
	    };
	    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    HashLocationStrategy = __decorate([
	        core_1.Injectable(),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Inject(location_strategy_1.APP_BASE_HREF)), 
	        __metadata('design:paramtypes', [platform_location_1.PlatformLocation, String])
	    ], HashLocationStrategy);
	    return HashLocationStrategy;
	})(location_strategy_1.LocationStrategy);
	exports.HashLocationStrategy = HashLocationStrategy;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var location_strategy_1 = __webpack_require__(131);
	var platform_location_1 = __webpack_require__(137);
	/**
	 * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
	 * {@link Location} service to represent its state in the
	 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	 * browser's URL.
	 *
	 * `PathLocationStrategy` is the default binding for {@link LocationStrategy}
	 * provided in {@link ROUTER_PROVIDERS}.
	 *
	 * If you're using `PathLocationStrategy`, you must provide a provider for
	 * {@link APP_BASE_HREF} to a string representing the URL prefix that should
	 * be preserved when generating and recognizing URLs.
	 *
	 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, provide} from 'angular2/core';
	 * import {
	 *   APP_BASE_HREF
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig,
	 *   Location
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(location: Location) {
	 *     location.go('/foo');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, [
	 *   ROUTER_PROVIDERS, // includes binding to PathLocationStrategy
	 *   provide(APP_BASE_HREF, {useValue: '/my/app'})
	 * ]);
	 * ```
	 */
	var PathLocationStrategy = (function (_super) {
	    __extends(PathLocationStrategy, _super);
	    function PathLocationStrategy(_platformLocation, href) {
	        _super.call(this);
	        this._platformLocation = _platformLocation;
	        if (lang_1.isBlank(href)) {
	            href = this._platformLocation.getBaseHrefFromDOM();
	        }
	        if (lang_1.isBlank(href)) {
	            throw new exceptions_1.BaseException("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	        }
	        this._baseHref = href;
	    }
	    PathLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) { return location_strategy_1.joinWithSlash(this._baseHref, internal); };
	    PathLocationStrategy.prototype.path = function () {
	        return this._platformLocation.pathname + location_strategy_1.normalizeQueryParams(this._platformLocation.search);
	    };
	    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	        var externalUrl = this.prepareExternalUrl(url + location_strategy_1.normalizeQueryParams(queryParams));
	        this._platformLocation.pushState(state, title, externalUrl);
	    };
	    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	        var externalUrl = this.prepareExternalUrl(url + location_strategy_1.normalizeQueryParams(queryParams));
	        this._platformLocation.replaceState(state, title, externalUrl);
	    };
	    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	    PathLocationStrategy = __decorate([
	        core_1.Injectable(),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Inject(location_strategy_1.APP_BASE_HREF)), 
	        __metadata('design:paramtypes', [platform_location_1.PlatformLocation, String])
	    ], PathLocationStrategy);
	    return PathLocationStrategy;
	})(location_strategy_1.LocationStrategy);
	exports.PathLocationStrategy = PathLocationStrategy;


/***/ },
/* 140 */
/***/ function(module, exports) {

	'use strict';//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVfZGVmaW5pdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFuZ3VsYXIyL3NyYy9yb3V0ZXIvcm91dGVfZGVmaW5pdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDT05TVCwgVHlwZX0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9sYW5nJztcblxuLyoqXG4gKiBgUm91dGVEZWZpbml0aW9uYCBkZWZpbmVzIGEgcm91dGUgd2l0aGluIGEge0BsaW5rIFJvdXRlQ29uZmlnfSBkZWNvcmF0b3IuXG4gKlxuICogU3VwcG9ydGVkIGtleXM6XG4gKiAtIGBwYXRoYCBvciBgYXV4YCAocmVxdWlyZXMgZXhhY3RseSBvbmUgb2YgdGhlc2UpXG4gKiAtIGBjb21wb25lbnRgLCBgbG9hZGVyYCwgIGByZWRpcmVjdFRvYCAocmVxdWlyZXMgZXhhY3RseSBvbmUgb2YgdGhlc2UpXG4gKiAtIGBuYW1lYCBvciBgYXNgIChvcHRpb25hbCkgKHJlcXVpcmVzIGV4YWN0bHkgb25lIG9mIHRoZXNlKVxuICogLSBgZGF0YWAgKG9wdGlvbmFsKVxuICpcbiAqIFNlZSBhbHNvIHtAbGluayBSb3V0ZX0sIHtAbGluayBBc3luY1JvdXRlfSwge0BsaW5rIEF1eFJvdXRlfSwgYW5kIHtAbGluayBSZWRpcmVjdH0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVEZWZpbml0aW9uIHtcbiAgcGF0aD86IHN0cmluZztcbiAgYXV4Pzogc3RyaW5nO1xuICBjb21wb25lbnQ/OiBUeXBlIHwgQ29tcG9uZW50RGVmaW5pdGlvbjtcbiAgbG9hZGVyPzogRnVuY3Rpb247XG4gIHJlZGlyZWN0VG8/OiBhbnlbXTtcbiAgYXM/OiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGRhdGE/OiBhbnk7XG4gIHVzZUFzRGVmYXVsdD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBlaXRoZXIgYSBjb21wb25lbnQgdHlwZSAoYHR5cGVgIGlzIGBjb21wb25lbnRgKSBvciBhIGxvYWRlciBmdW5jdGlvblxuICogKGB0eXBlYCBpcyBgbG9hZGVyYCkuXG4gKlxuICogU2VlIGFsc28ge0BsaW5rIFJvdXRlRGVmaW5pdGlvbn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50RGVmaW5pdGlvbiB7XG4gIHR5cGU6IHN0cmluZztcbiAgbG9hZGVyPzogRnVuY3Rpb247XG4gIGNvbXBvbmVudD86IFR5cGU7XG59XG4iXX0=

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var location_strategy_1 = __webpack_require__(131);
	var path_location_strategy_1 = __webpack_require__(139);
	var router_1 = __webpack_require__(118);
	var route_registry_1 = __webpack_require__(119);
	var location_1 = __webpack_require__(130);
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	var exceptions_1 = __webpack_require__(19);
	/**
	 * The Platform agnostic ROUTER PROVIDERS
	 */
	exports.ROUTER_PROVIDERS_COMMON = lang_1.CONST_EXPR([
	    route_registry_1.RouteRegistry,
	    lang_1.CONST_EXPR(new core_1.Provider(location_strategy_1.LocationStrategy, { useClass: path_location_strategy_1.PathLocationStrategy })),
	    location_1.Location,
	    lang_1.CONST_EXPR(new core_1.Provider(router_1.Router, {
	        useFactory: routerFactory,
	        deps: lang_1.CONST_EXPR([route_registry_1.RouteRegistry, location_1.Location, route_registry_1.ROUTER_PRIMARY_COMPONENT, core_1.ApplicationRef])
	    })),
	    lang_1.CONST_EXPR(new core_1.Provider(route_registry_1.ROUTER_PRIMARY_COMPONENT, { useFactory: routerPrimaryComponentFactory, deps: lang_1.CONST_EXPR([core_1.ApplicationRef]) }))
	]);
	function routerFactory(registry, location, primaryComponent, appRef) {
	    var rootRouter = new router_1.RootRouter(registry, location, primaryComponent);
	    appRef.registerDisposeListener(function () { return rootRouter.dispose(); });
	    return rootRouter;
	}
	function routerPrimaryComponentFactory(app) {
	    if (app.componentTypes.length == 0) {
	        throw new exceptions_1.BaseException("Bootstrap at least one component before injecting Router.");
	    }
	    return app.componentTypes[0];
	}


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// import {ROUTER_PROVIDERS_COMMON} from './router_providers_common';
	var router_1 = __webpack_require__(117);
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var browser_platform_location_1 = __webpack_require__(143);
	var platform_location_1 = __webpack_require__(137);
	/**
	 * A list of {@link Provider}s. To use the router, you must add this to your application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	exports.ROUTER_PROVIDERS = lang_1.CONST_EXPR([
	    router_1.ROUTER_PROVIDERS_COMMON,
	    lang_1.CONST_EXPR(new core_1.Provider(platform_location_1.PlatformLocation, { useClass: browser_platform_location_1.BrowserPlatformLocation })),
	]);
	/**
	 * Use {@link ROUTER_PROVIDERS} instead.
	 *
	 * @deprecated
	 */
	exports.ROUTER_BINDINGS = exports.ROUTER_PROVIDERS;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var platform_location_1 = __webpack_require__(137);
	var dom_adapter_1 = __webpack_require__(144);
	/**
	 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	 * This class should not be used directly by an application developer. Instead, use
	 * {@link Location}.
	 */
	var BrowserPlatformLocation = (function (_super) {
	    __extends(BrowserPlatformLocation, _super);
	    function BrowserPlatformLocation() {
	        _super.call(this);
	        this._init();
	    }
	    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
	    /** @internal */
	    BrowserPlatformLocation.prototype._init = function () {
	        this._location = dom_adapter_1.DOM.getLocation();
	        this._history = dom_adapter_1.DOM.getHistory();
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	        /** @internal */
	        get: function () { return this._location; },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return dom_adapter_1.DOM.getBaseHref(); };
	    BrowserPlatformLocation.prototype.onPopState = function (fn) {
	        dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	    };
	    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	        dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	        get: function () { return this._location.pathname; },
	        set: function (newPath) { this._location.pathname = newPath; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	        get: function () { return this._location.search; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	        get: function () { return this._location.hash; },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	        this._history.pushState(state, title, url);
	    };
	    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	        this._history.replaceState(state, title, url);
	    };
	    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	    BrowserPlatformLocation = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserPlatformLocation);
	    return BrowserPlatformLocation;
	})(platform_location_1.PlatformLocation);
	exports.BrowserPlatformLocation = BrowserPlatformLocation;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	exports.DOM = null;
	function setRootDomAdapter(adapter) {
	    if (lang_1.isBlank(exports.DOM)) {
	        exports.DOM = adapter;
	    }
	}
	exports.setRootDomAdapter = setRootDomAdapter;
	/* tslint:disable:requireParameterType */
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	    }
	    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         */
	        get: function () { return this._attrToPropMap; },
	        set: function (value) { this._attrToPropMap = value; },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    ;
	    return DomAdapter;
	})();
	exports.DomAdapter = DomAdapter;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * The http module provides services to perform http requests. To get started, see the {@link Http}
	 * class.
	 */
	var core_1 = __webpack_require__(7);
	var http_1 = __webpack_require__(146);
	var xhr_backend_1 = __webpack_require__(154);
	var jsonp_backend_1 = __webpack_require__(158);
	var browser_xhr_1 = __webpack_require__(157);
	var browser_jsonp_1 = __webpack_require__(159);
	var base_request_options_1 = __webpack_require__(152);
	var base_response_options_1 = __webpack_require__(156);
	var static_request_1 = __webpack_require__(148);
	exports.Request = static_request_1.Request;
	var static_response_1 = __webpack_require__(155);
	exports.Response = static_response_1.Response;
	var interfaces_1 = __webpack_require__(147);
	exports.Connection = interfaces_1.Connection;
	exports.ConnectionBackend = interfaces_1.ConnectionBackend;
	var browser_xhr_2 = __webpack_require__(157);
	exports.BrowserXhr = browser_xhr_2.BrowserXhr;
	var base_request_options_2 = __webpack_require__(152);
	exports.BaseRequestOptions = base_request_options_2.BaseRequestOptions;
	exports.RequestOptions = base_request_options_2.RequestOptions;
	var base_response_options_2 = __webpack_require__(156);
	exports.BaseResponseOptions = base_response_options_2.BaseResponseOptions;
	exports.ResponseOptions = base_response_options_2.ResponseOptions;
	var xhr_backend_2 = __webpack_require__(154);
	exports.XHRBackend = xhr_backend_2.XHRBackend;
	exports.XHRConnection = xhr_backend_2.XHRConnection;
	var jsonp_backend_2 = __webpack_require__(158);
	exports.JSONPBackend = jsonp_backend_2.JSONPBackend;
	exports.JSONPConnection = jsonp_backend_2.JSONPConnection;
	var http_2 = __webpack_require__(146);
	exports.Http = http_2.Http;
	exports.Jsonp = http_2.Jsonp;
	var headers_1 = __webpack_require__(149);
	exports.Headers = headers_1.Headers;
	var enums_1 = __webpack_require__(151);
	exports.ResponseType = enums_1.ResponseType;
	exports.ReadyState = enums_1.ReadyState;
	exports.RequestMethod = enums_1.RequestMethod;
	var url_search_params_1 = __webpack_require__(153);
	exports.URLSearchParams = url_search_params_1.URLSearchParams;
	/**
	 * Provides a basic set of injectables to use the {@link Http} service in any application.
	 *
	 * The `HTTP_PROVIDERS` should be included either in a component's injector,
	 * or in the root injector when bootstrapping an application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {NgFor} from 'angular2/common';
	 * import {HTTP_PROVIDERS, Http} from 'angular2/http';
	 *
	 * @Component({
	 *   selector: 'app',
	 *   providers: [HTTP_PROVIDERS],
	 *   template: `
	 *     <div>
	 *       <h1>People</h1>
	 *       <ul>
	 *         <li *ngFor="#person of people">
	 *           {{person.name}}
	 *         </li>
	 *       </ul>
	 *     </div>
	 *   `,
	 *   directives: [NgFor]
	 * })
	 * export class App {
	 *   people: Object[];
	 *   constructor(http:Http) {
	 *     http.get('people.json').subscribe(res => {
	 *       this.people = res.json();
	 *     });
	 *   }
	 *   active:boolean = false;
	 *   toggleActiveState() {
	 *     this.active = !this.active;
	 *   }
	 * }
	 *
	 * bootstrap(App)
	 *   .catch(err => console.error(err));
	 * ```
	 *
	 * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.
	 * However, other providers required by `Http` are included,
	 * which may be beneficial to override in certain cases.
	 *
	 * The providers included in `HTTP_PROVIDERS` include:
	 *  * {@link Http}
	 *  * {@link XHRBackend}
	 *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances
	 *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
	 *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
	 *
	 * There may be cases where it makes sense to extend the base request options,
	 * such as to add a search string to be appended to all URLs.
	 * To accomplish this, a new provider for {@link RequestOptions} should
	 * be added in the same injector as `HTTP_PROVIDERS`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))
	 *
	 * ```
	 * import {provide} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
	 *   .catch(err => console.error(err));
	 * ```
	 *
	 * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}
	 * provider should be bound to {@link MockBackend}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))
	 *
	 * ```
	 * import {provide} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {HTTP_PROVIDERS, Http, Response, XHRBackend} from 'angular2/http';
	 * import {MockBackend} from 'angular2/http/testing';
	 *
	 * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   HTTP_PROVIDERS,
	 *   MockBackend,
	 *   provide(XHRBackend, {useExisting: MockBackend})
	 * ]);
	 * var http = injector.get(Http);
	 * var backend = injector.get(MockBackend);
	 *
	 * // Listen for any new requests
	 * backend.connections.observer({
	 *   next: connection => {
	 *     var response = new Response({body: people});
	 *     setTimeout(() => {
	 *       // Send a response to the request
	 *       connection.mockRespond(response);
	 *     });
	 *   }
	 * });
	 *
	 * http.get('people.json').observer({
	 *   next: res => {
	 *     // Response came from mock backend
	 *     console.log('first person', res.json()[0].name);
	 *   }
	 * });
	 * ```
	 */
	exports.HTTP_PROVIDERS = [
	    // TODO(pascal): use factory type annotations once supported in DI
	    // issue: https://github.com/angular/angular/issues/3183
	    core_1.provide(http_1.Http, {
	        useFactory: function (xhrBackend, requestOptions) {
	            return new http_1.Http(xhrBackend, requestOptions);
	        },
	        deps: [xhr_backend_1.XHRBackend, base_request_options_1.RequestOptions]
	    }),
	    browser_xhr_1.BrowserXhr,
	    core_1.provide(base_request_options_1.RequestOptions, { useClass: base_request_options_1.BaseRequestOptions }),
	    core_1.provide(base_response_options_1.ResponseOptions, { useClass: base_response_options_1.BaseResponseOptions }),
	    xhr_backend_1.XHRBackend
	];
	/**
	 * See {@link HTTP_PROVIDERS} instead.
	 *
	 * @deprecated
	 */
	exports.HTTP_BINDINGS = exports.HTTP_PROVIDERS;
	/**
	 * Provides a basic set of providers to use the {@link Jsonp} service in any application.
	 *
	 * The `JSONP_PROVIDERS` should be included either in a component's injector,
	 * or in the root injector when bootstrapping an application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {NgFor} from 'angular2/common';
	 * import {JSONP_PROVIDERS, Jsonp} from 'angular2/http';
	 *
	 * @Component({
	 *   selector: 'app',
	 *   providers: [JSONP_PROVIDERS],
	 *   template: `
	 *     <div>
	 *       <h1>People</h1>
	 *       <ul>
	 *         <li *ngFor="#person of people">
	 *           {{person.name}}
	 *         </li>
	 *       </ul>
	 *     </div>
	 *   `,
	 *   directives: [NgFor]
	 * })
	 * export class App {
	 *   people: Array<Object>;
	 *   constructor(jsonp:Jsonp) {
	 *     jsonp.request('people.json').subscribe(res => {
	 *       this.people = res.json();
	 *     })
	 *   }
	 * }
	 * ```
	 *
	 * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.
	 * However, other providers required by `Jsonp` are included,
	 * which may be beneficial to override in certain cases.
	 *
	 * The providers included in `JSONP_PROVIDERS` include:
	 *  * {@link Jsonp}
	 *  * {@link JSONPBackend}
	 *  * `BrowserJsonp` - Private factory
	 *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
	 *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
	 *
	 * There may be cases where it makes sense to extend the base request options,
	 * such as to add a search string to be appended to all URLs.
	 * To accomplish this, a new provider for {@link RequestOptions} should
	 * be added in the same injector as `JSONP_PROVIDERS`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))
	 *
	 * ```
	 * import {provide} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [JSONP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
	 *   .catch(err => console.error(err));
	 * ```
	 *
	 * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}
	 * provider should be bound to {@link MockBackend}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))
	 *
	 * ```
	 * import {provide, Injector} from 'angular2/core';
	 * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from 'angular2/http';
	 * import {MockBackend} from 'angular2/http/testing';
	 *
	 * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
	 * var injector = Injector.resolveAndCreate([
	 *   JSONP_PROVIDERS,
	 *   MockBackend,
	 *   provide(JSONPBackend, {useExisting: MockBackend})
	 * ]);
	 * var jsonp = injector.get(Jsonp);
	 * var backend = injector.get(MockBackend);
	 *
	 * // Listen for any new requests
	 * backend.connections.observer({
	 *   next: connection => {
	 *     var response = new Response({body: people});
	 *     setTimeout(() => {
	 *       // Send a response to the request
	 *       connection.mockRespond(response);
	 *     });
	 *   }
	 * });

	 * jsonp.get('people.json').observer({
	 *   next: res => {
	 *     // Response came from mock backend
	 *     console.log('first person', res.json()[0].name);
	 *   }
	 * });
	 * ```
	 */
	exports.JSONP_PROVIDERS = [
	    // TODO(pascal): use factory type annotations once supported in DI
	    // issue: https://github.com/angular/angular/issues/3183
	    core_1.provide(http_1.Jsonp, {
	        useFactory: function (jsonpBackend, requestOptions) {
	            return new http_1.Jsonp(jsonpBackend, requestOptions);
	        },
	        deps: [jsonp_backend_1.JSONPBackend, base_request_options_1.RequestOptions]
	    }),
	    browser_jsonp_1.BrowserJsonp,
	    core_1.provide(base_request_options_1.RequestOptions, { useClass: base_request_options_1.BaseRequestOptions }),
	    core_1.provide(base_response_options_1.ResponseOptions, { useClass: base_response_options_1.BaseResponseOptions }),
	    core_1.provide(jsonp_backend_1.JSONPBackend, { useClass: jsonp_backend_1.JSONPBackend_ })
	];
	/**
	 * See {@link JSONP_PROVIDERS} instead.
	 *
	 * @deprecated
	 */
	exports.JSON_BINDINGS = exports.JSONP_PROVIDERS;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var core_1 = __webpack_require__(7);
	var interfaces_1 = __webpack_require__(147);
	var static_request_1 = __webpack_require__(148);
	var base_request_options_1 = __webpack_require__(152);
	var enums_1 = __webpack_require__(151);
	function httpRequest(backend, request) {
	    return backend.createConnection(request).response;
	}
	function mergeOptions(defaultOpts, providedOpts, method, url) {
	    var newOptions = defaultOpts;
	    if (lang_1.isPresent(providedOpts)) {
	        // Hack so Dart can used named parameters
	        return newOptions.merge(new base_request_options_1.RequestOptions({
	            method: providedOpts.method || method,
	            url: providedOpts.url || url,
	            search: providedOpts.search,
	            headers: providedOpts.headers,
	            body: providedOpts.body
	        }));
	    }
	    if (lang_1.isPresent(method)) {
	        return newOptions.merge(new base_request_options_1.RequestOptions({ method: method, url: url }));
	    }
	    else {
	        return newOptions.merge(new base_request_options_1.RequestOptions({ url: url }));
	    }
	}
	/**
	 * Performs http requests using `XMLHttpRequest` as the default backend.
	 *
	 * `Http` is available as an injectable class, with methods to perform http requests. Calling
	 * `request` returns an `Observable` which will emit a single {@link Response} when a
	 * response is received.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {Http, HTTP_PROVIDERS} from 'angular2/http';
	 * @Component({
	 *   selector: 'http-app',
	 *   viewProviders: [HTTP_PROVIDERS],
	 *   templateUrl: 'people.html'
	 * })
	 * class PeopleComponent {
	 *   constructor(http: Http) {
	 *     http.get('people.json')
	 *       // Call map on the response observable to get the parsed people object
	 *       .map(res => res.json())
	 *       // Subscribe to the observable to get the parsed people object and attach it to the
	 *       // component
	 *       .subscribe(people => this.people = people);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * ### Example
	 *
	 * ```
	 * http.get('people.json').observer({next: (value) => this.people = value});
	 * ```
	 *
	 * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
	 * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
	 * the {@link XHRBackend} provider, as in the following example:
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {BaseRequestOptions, Http} from 'angular2/http';
	 * import {MockBackend} from 'angular2/http/testing';
	 * var injector = Injector.resolveAndCreate([
	 *   BaseRequestOptions,
	 *   MockBackend,
	 *   provide(Http, {useFactory:
	 *       function(backend, defaultOptions) {
	 *         return new Http(backend, defaultOptions);
	 *       },
	 *       deps: [MockBackend, BaseRequestOptions]})
	 * ]);
	 * var http = injector.get(Http);
	 * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
	 * ```
	 *
	 **/
	var Http = (function () {
	    function Http(_backend, _defaultOptions) {
	        this._backend = _backend;
	        this._defaultOptions = _defaultOptions;
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {@link BaseRequestOptions} before performing the request.
	     */
	    Http.prototype.request = function (url, options) {
	        var responseObservable;
	        if (lang_1.isString(url)) {
	            responseObservable = httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Get, url)));
	        }
	        else if (url instanceof static_request_1.Request) {
	            responseObservable = httpRequest(this._backend, url);
	        }
	        else {
	            throw exceptions_1.makeTypeError('First argument must be a url string or Request instance.');
	        }
	        return responseObservable;
	    };
	    /**
	     * Performs a request with `get` http method.
	     */
	    Http.prototype.get = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Get, url)));
	    };
	    /**
	     * Performs a request with `post` http method.
	     */
	    Http.prototype.post = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethod.Post, url)));
	    };
	    /**
	     * Performs a request with `put` http method.
	     */
	    Http.prototype.put = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethod.Put, url)));
	    };
	    /**
	     * Performs a request with `delete` http method.
	     */
	    Http.prototype.delete = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Delete, url)));
	    };
	    /**
	     * Performs a request with `patch` http method.
	     */
	    Http.prototype.patch = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethod.Patch, url)));
	    };
	    /**
	     * Performs a request with `head` http method.
	     */
	    Http.prototype.head = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Head, url)));
	    };
	    Http = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [interfaces_1.ConnectionBackend, base_request_options_1.RequestOptions])
	    ], Http);
	    return Http;
	})();
	exports.Http = Http;
	var Jsonp = (function (_super) {
	    __extends(Jsonp, _super);
	    function Jsonp(backend, defaultOptions) {
	        _super.call(this, backend, defaultOptions);
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {@link BaseRequestOptions} before performing the request.
	     */
	    Jsonp.prototype.request = function (url, options) {
	        var responseObservable;
	        if (lang_1.isString(url)) {
	            url =
	                new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Get, url));
	        }
	        if (url instanceof static_request_1.Request) {
	            if (url.method !== enums_1.RequestMethod.Get) {
	                exceptions_1.makeTypeError('JSONP requests must use GET request method.');
	            }
	            responseObservable = httpRequest(this._backend, url);
	        }
	        else {
	            throw exceptions_1.makeTypeError('First argument must be a url string or Request instance.');
	        }
	        return responseObservable;
	    };
	    Jsonp = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [interfaces_1.ConnectionBackend, base_request_options_1.RequestOptions])
	    ], Jsonp);
	    return Jsonp;
	})(Http);
	exports.Jsonp = Jsonp;


/***/ },
/* 147 */
/***/ function(module, exports) {

	'use strict';/**
	 * Abstract class from which real backends are derived.
	 *
	 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
	 * {@link Request}.
	 */
	var ConnectionBackend = (function () {
	    function ConnectionBackend() {
	    }
	    return ConnectionBackend;
	})();
	exports.ConnectionBackend = ConnectionBackend;
	/**
	 * Abstract class from which real connections are derived.
	 */
	var Connection = (function () {
	    function Connection() {
	    }
	    return Connection;
	})();
	exports.Connection = Connection;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var headers_1 = __webpack_require__(149);
	var http_utils_1 = __webpack_require__(150);
	var lang_1 = __webpack_require__(10);
	// TODO(jeffbcross): properly implement body accessors
	/**
	 * Creates `Request` instances from provided values.
	 *
	 * The Request's interface is inspired by the Request constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#request-class),
	 * but is considered a static value whose body can be accessed many times. There are other
	 * differences in the implementation, but this is the most significant.
	 *
	 * `Request` instances are typically created by higher-level classes, like {@link Http} and
	 * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
	 * One such example is when creating services that wrap higher-level services, like {@link Http},
	 * where it may be useful to generate a `Request` with arbitrary headers and search params.
	 *
	 * ```typescript
	 * import {Injectable, Injector} from 'angular2/core';
	 * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from 'angular2/http';
	 *
	 * @Injectable()
	 * class AutoAuthenticator {
	 *   constructor(public http:Http) {}
	 *   request(url:string) {
	 *     return this.http.request(new Request({
	 *       method: RequestMethod.Get,
	 *       url: url,
	 *       search: 'password=123'
	 *     }));
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
	 * var authenticator = injector.get(AutoAuthenticator);
	 * authenticator.request('people.json').subscribe(res => {
	 *   //URL should have included '?password=123'
	 *   console.log('people', res.json());
	 * });
	 * ```
	 */
	var Request = (function () {
	    function Request(requestOptions) {
	        // TODO: assert that url is present
	        var url = requestOptions.url;
	        this.url = requestOptions.url;
	        if (lang_1.isPresent(requestOptions.search)) {
	            var search = requestOptions.search.toString();
	            if (search.length > 0) {
	                var prefix = '?';
	                if (lang_1.StringWrapper.contains(this.url, '?')) {
	                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
	                }
	                // TODO: just delete search-query-looking string in url?
	                this.url = url + prefix + search;
	            }
	        }
	        this._body = requestOptions.body;
	        this.method = http_utils_1.normalizeMethodName(requestOptions.method);
	        // TODO(jeffbcross): implement behavior
	        // Defaults to 'omit', consistent with browser
	        // TODO(jeffbcross): implement behavior
	        this.headers = new headers_1.Headers(requestOptions.headers);
	    }
	    /**
	     * Returns the request's body as string, assuming that body exists. If body is undefined, return
	     * empty
	     * string.
	     */
	    Request.prototype.text = function () { return lang_1.isPresent(this._body) ? this._body.toString() : ''; };
	    return Request;
	})();
	exports.Request = Request;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	/**
	 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
	 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
	 *
	 * The only known difference between this `Headers` implementation and the spec is the
	 * lack of an `entries` method.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))
	 *
	 * ```
	 * import {Headers} from 'angular2/http';
	 *
	 * var firstHeaders = new Headers();
	 * firstHeaders.append('Content-Type', 'image/jpeg');
	 * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
	 *
	 * // Create headers from Plain Old JavaScript Object
	 * var secondHeaders = new Headers({
	 *   'X-My-Custom-Header': 'Angular'
	 * });
	 * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
	 *
	 * var thirdHeaders = new Headers(secondHeaders);
	 * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
	 * ```
	 */
	var Headers = (function () {
	    function Headers(headers) {
	        var _this = this;
	        if (headers instanceof Headers) {
	            this._headersMap = headers._headersMap;
	            return;
	        }
	        this._headersMap = new collection_1.Map();
	        if (lang_1.isBlank(headers)) {
	            return;
	        }
	        // headers instanceof StringMap
	        collection_1.StringMapWrapper.forEach(headers, function (v, k) {
	            _this._headersMap.set(k, collection_1.isListLikeIterable(v) ? v : [v]);
	        });
	    }
	    /**
	     * Returns a new Headers instance from the given DOMString of Response Headers
	     */
	    Headers.fromResponseHeaderString = function (headersString) {
	        return headersString.trim()
	            .split('\n')
	            .map(function (val) { return val.split(':'); })
	            .map(function (_a) {
	            var key = _a[0], parts = _a.slice(1);
	            return ([key.trim(), parts.join(':').trim()]);
	        })
	            .reduce(function (headers, _a) {
	            var key = _a[0], value = _a[1];
	            return !headers.set(key, value) && headers;
	        }, new Headers());
	    };
	    /**
	     * Appends a header to existing list of header values for a given header name.
	     */
	    Headers.prototype.append = function (name, value) {
	        var mapName = this._headersMap.get(name);
	        var list = collection_1.isListLikeIterable(mapName) ? mapName : [];
	        list.push(value);
	        this._headersMap.set(name, list);
	    };
	    /**
	     * Deletes all header values for the given name.
	     */
	    Headers.prototype.delete = function (name) { this._headersMap.delete(name); };
	    Headers.prototype.forEach = function (fn) {
	        this._headersMap.forEach(fn);
	    };
	    /**
	     * Returns first header that matches given name.
	     */
	    Headers.prototype.get = function (header) { return collection_1.ListWrapper.first(this._headersMap.get(header)); };
	    /**
	     * Check for existence of header by given name.
	     */
	    Headers.prototype.has = function (header) { return this._headersMap.has(header); };
	    /**
	     * Provides names of set headers
	     */
	    Headers.prototype.keys = function () { return collection_1.MapWrapper.keys(this._headersMap); };
	    /**
	     * Sets or overrides header value for given name.
	     */
	    Headers.prototype.set = function (header, value) {
	        var list = [];
	        if (collection_1.isListLikeIterable(value)) {
	            var pushValue = value.join(',');
	            list.push(pushValue);
	        }
	        else {
	            list.push(value);
	        }
	        this._headersMap.set(header, list);
	    };
	    /**
	     * Returns values of all headers.
	     */
	    Headers.prototype.values = function () { return collection_1.MapWrapper.values(this._headersMap); };
	    /**
	     * Returns string of all headers.
	     */
	    Headers.prototype.toJSON = function () {
	        var serializableHeaders = {};
	        this._headersMap.forEach(function (values, name) {
	            var list = [];
	            collection_1.iterateListLike(values, function (val) { return list = collection_1.ListWrapper.concat(list, val.split(',')); });
	            serializableHeaders[name] = list;
	        });
	        return serializableHeaders;
	    };
	    /**
	     * Returns list of header values for a given name.
	     */
	    Headers.prototype.getAll = function (header) {
	        var headers = this._headersMap.get(header);
	        return collection_1.isListLikeIterable(headers) ? headers : [];
	    };
	    /**
	     * This method is not implemented.
	     */
	    Headers.prototype.entries = function () { throw new exceptions_1.BaseException('"entries" method is not implemented on Headers class'); };
	    return Headers;
	})();
	exports.Headers = Headers;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var enums_1 = __webpack_require__(151);
	var exceptions_1 = __webpack_require__(19);
	function normalizeMethodName(method) {
	    if (lang_1.isString(method)) {
	        var originalMethod = method;
	        method = method
	            .replace(/(\w)(\w*)/g, function (g0, g1, g2) {
	            return g1.toUpperCase() + g2.toLowerCase();
	        });
	        method = enums_1.RequestMethod[method];
	        if (typeof method !== 'number')
	            throw exceptions_1.makeTypeError("Invalid request method. The method \"" + originalMethod + "\" is not supported.");
	    }
	    return method;
	}
	exports.normalizeMethodName = normalizeMethodName;
	exports.isSuccess = function (status) { return (status >= 200 && status < 300); };
	function getResponseURL(xhr) {
	    if ('responseURL' in xhr) {
	        return xhr.responseURL;
	    }
	    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	        return xhr.getResponseHeader('X-Request-URL');
	    }
	    return;
	}
	exports.getResponseURL = getResponseURL;
	var lang_2 = __webpack_require__(10);
	exports.isJsObject = lang_2.isJsObject;


/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';/**
	 * Supported http methods.
	 */
	(function (RequestMethod) {
	    RequestMethod[RequestMethod["Get"] = 0] = "Get";
	    RequestMethod[RequestMethod["Post"] = 1] = "Post";
	    RequestMethod[RequestMethod["Put"] = 2] = "Put";
	    RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
	    RequestMethod[RequestMethod["Options"] = 4] = "Options";
	    RequestMethod[RequestMethod["Head"] = 5] = "Head";
	    RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
	})(exports.RequestMethod || (exports.RequestMethod = {}));
	var RequestMethod = exports.RequestMethod;
	/**
	 * All possible states in which a connection can be, based on
	 * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
	 * additional "CANCELLED" state.
	 */
	(function (ReadyState) {
	    ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
	    ReadyState[ReadyState["Open"] = 1] = "Open";
	    ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
	    ReadyState[ReadyState["Loading"] = 3] = "Loading";
	    ReadyState[ReadyState["Done"] = 4] = "Done";
	    ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
	})(exports.ReadyState || (exports.ReadyState = {}));
	var ReadyState = exports.ReadyState;
	/**
	 * Acceptable response types to be associated with a {@link Response}, based on
	 * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
	 */
	(function (ResponseType) {
	    ResponseType[ResponseType["Basic"] = 0] = "Basic";
	    ResponseType[ResponseType["Cors"] = 1] = "Cors";
	    ResponseType[ResponseType["Default"] = 2] = "Default";
	    ResponseType[ResponseType["Error"] = 3] = "Error";
	    ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
	})(exports.ResponseType || (exports.ResponseType = {}));
	var ResponseType = exports.ResponseType;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var headers_1 = __webpack_require__(149);
	var enums_1 = __webpack_require__(151);
	var core_1 = __webpack_require__(7);
	var url_search_params_1 = __webpack_require__(153);
	var http_utils_1 = __webpack_require__(150);
	/**
	 * Creates a request options object to be optionally provided when instantiating a
	 * {@link Request}.
	 *
	 * This class is based on the `RequestInit` description in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#requestinit).
	 *
	 * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
	 * class, which sub-classes `RequestOptions`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
	 *
	 * ```typescript
	 * import {RequestOptions, Request, RequestMethod} from 'angular2/http';
	 *
	 * var options = new RequestOptions({
	 *   method: RequestMethod.Post,
	 *   url: 'https://google.com'
	 * });
	 * var req = new Request(options);
	 * console.log('req.method:', RequestMethod[req.method]); // Post
	 * console.log('options.url:', options.url); // https://google.com
	 * ```
	 */
	var RequestOptions = (function () {
	    function RequestOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search;
	        this.method = lang_1.isPresent(method) ? http_utils_1.normalizeMethodName(method) : null;
	        this.headers = lang_1.isPresent(headers) ? headers : null;
	        this.body = lang_1.isPresent(body) ? body : null;
	        this.url = lang_1.isPresent(url) ? url : null;
	        this.search = lang_1.isPresent(search) ? (lang_1.isString(search) ? new url_search_params_1.URLSearchParams((search)) :
	            (search)) :
	            null;
	    }
	    /**
	     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
	     * existing values. This method will not change the values of the instance on which it is being
	     * called.
	     *
	     * Note that `headers` and `search` will override existing values completely if present in
	     * the `options` object. If these values should be merged, it should be done prior to calling
	     * `merge` on the `RequestOptions` instance.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
	     *
	     * ```typescript
	     * import {RequestOptions, Request, RequestMethod} from 'angular2/http';
	     *
	     * var options = new RequestOptions({
	     *   method: RequestMethod.Post
	     * });
	     * var req = new Request(options.merge({
	     *   url: 'https://google.com'
	     * }));
	     * console.log('req.method:', RequestMethod[req.method]); // Post
	     * console.log('options.url:', options.url); // null
	     * console.log('req.url:', req.url); // https://google.com
	     * ```
	     */
	    RequestOptions.prototype.merge = function (options) {
	        return new RequestOptions({
	            method: lang_1.isPresent(options) && lang_1.isPresent(options.method) ? options.method : this.method,
	            headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
	            body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
	            url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url,
	            search: lang_1.isPresent(options) && lang_1.isPresent(options.search) ?
	                (lang_1.isString(options.search) ? new url_search_params_1.URLSearchParams((options.search)) :
	                    (options.search).clone()) :
	                this.search
	        });
	    };
	    return RequestOptions;
	})();
	exports.RequestOptions = RequestOptions;
	/**
	 * Subclass of {@link RequestOptions}, with default values.
	 *
	 * Default values:
	 *  * method: {@link RequestMethod RequestMethod.Get}
	 *  * headers: empty {@link Headers} object
	 *
	 * This class could be extended and bound to the {@link RequestOptions} class
	 * when configuring an {@link Injector}, in order to override the default options
	 * used by {@link Http} to create and send {@link Request Requests}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
	 *
	 * ```typescript
	 * import {provide} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from 'angular2/http';
	 * import {App} from './myapp';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})]);
	 * ```
	 *
	 * The options could also be extended when manually creating a {@link Request}
	 * object.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
	 *
	 * ```
	 * import {BaseRequestOptions, Request, RequestMethod} from 'angular2/http';
	 *
	 * var options = new BaseRequestOptions();
	 * var req = new Request(options.merge({
	 *   method: RequestMethod.Post,
	 *   url: 'https://google.com'
	 * }));
	 * console.log('req.method:', RequestMethod[req.method]); // Post
	 * console.log('options.url:', options.url); // null
	 * console.log('req.url:', req.url); // https://google.com
	 * ```
	 */
	var BaseRequestOptions = (function (_super) {
	    __extends(BaseRequestOptions, _super);
	    function BaseRequestOptions() {
	        _super.call(this, { method: enums_1.RequestMethod.Get, headers: new headers_1.Headers() });
	    }
	    BaseRequestOptions = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BaseRequestOptions);
	    return BaseRequestOptions;
	})(RequestOptions);
	exports.BaseRequestOptions = BaseRequestOptions;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	function paramParser(rawParams) {
	    if (rawParams === void 0) { rawParams = ''; }
	    var map = new collection_1.Map();
	    if (rawParams.length > 0) {
	        var params = rawParams.split('&');
	        params.forEach(function (param) {
	            var split = param.split('=');
	            var key = split[0];
	            var val = split[1];
	            var list = lang_1.isPresent(map.get(key)) ? map.get(key) : [];
	            list.push(val);
	            map.set(key, list);
	        });
	    }
	    return map;
	}
	/**
	 * Map-like representation of url search parameters, based on
	 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
	 * with several extensions for merging URLSearchParams objects:
	 *   - setAll()
	 *   - appendAll()
	 *   - replaceAll()
	 */
	var URLSearchParams = (function () {
	    function URLSearchParams(rawParams) {
	        if (rawParams === void 0) { rawParams = ''; }
	        this.rawParams = rawParams;
	        this.paramsMap = paramParser(rawParams);
	    }
	    URLSearchParams.prototype.clone = function () {
	        var clone = new URLSearchParams();
	        clone.appendAll(this);
	        return clone;
	    };
	    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
	    URLSearchParams.prototype.get = function (param) {
	        var storedParam = this.paramsMap.get(param);
	        if (collection_1.isListLikeIterable(storedParam)) {
	            return collection_1.ListWrapper.first(storedParam);
	        }
	        else {
	            return null;
	        }
	    };
	    URLSearchParams.prototype.getAll = function (param) {
	        var mapParam = this.paramsMap.get(param);
	        return lang_1.isPresent(mapParam) ? mapParam : [];
	    };
	    URLSearchParams.prototype.set = function (param, val) {
	        var mapParam = this.paramsMap.get(param);
	        var list = lang_1.isPresent(mapParam) ? mapParam : [];
	        collection_1.ListWrapper.clear(list);
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    // A merge operation
	    // For each name-values pair in `searchParams`, perform `set(name, values[0])`
	    //
	    // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4], c=[8], b=[7]"
	    //
	    // TODO(@caitp): document this better
	    URLSearchParams.prototype.setAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var mapParam = _this.paramsMap.get(param);
	            var list = lang_1.isPresent(mapParam) ? mapParam : [];
	            collection_1.ListWrapper.clear(list);
	            list.push(value[0]);
	            _this.paramsMap.set(param, list);
	        });
	    };
	    URLSearchParams.prototype.append = function (param, val) {
	        var mapParam = this.paramsMap.get(param);
	        var list = lang_1.isPresent(mapParam) ? mapParam : [];
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    // A merge operation
	    // For each name-values pair in `searchParams`, perform `append(name, value)`
	    // for each value in `values`.
	    //
	    // E.g: "a=[1,2], c=[8]" + "a=[3,4], b=[7]" = "a=[1,2,3,4], c=[8], b=[7]"
	    //
	    // TODO(@caitp): document this better
	    URLSearchParams.prototype.appendAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var mapParam = _this.paramsMap.get(param);
	            var list = lang_1.isPresent(mapParam) ? mapParam : [];
	            for (var i = 0; i < value.length; ++i) {
	                list.push(value[i]);
	            }
	            _this.paramsMap.set(param, list);
	        });
	    };
	    // A merge operation
	    // For each name-values pair in `searchParams`, perform `delete(name)`,
	    // followed by `set(name, values)`
	    //
	    // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4,5,6], c=[8], b=[7]"
	    //
	    // TODO(@caitp): document this better
	    URLSearchParams.prototype.replaceAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var mapParam = _this.paramsMap.get(param);
	            var list = lang_1.isPresent(mapParam) ? mapParam : [];
	            collection_1.ListWrapper.clear(list);
	            for (var i = 0; i < value.length; ++i) {
	                list.push(value[i]);
	            }
	            _this.paramsMap.set(param, list);
	        });
	    };
	    URLSearchParams.prototype.toString = function () {
	        var paramsList = [];
	        this.paramsMap.forEach(function (values, k) { values.forEach(function (v) { return paramsList.push(k + '=' + v); }); });
	        return paramsList.join('&');
	    };
	    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
	    return URLSearchParams;
	})();
	exports.URLSearchParams = URLSearchParams;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var enums_1 = __webpack_require__(151);
	var static_response_1 = __webpack_require__(155);
	var headers_1 = __webpack_require__(149);
	var base_response_options_1 = __webpack_require__(156);
	var core_1 = __webpack_require__(7);
	var browser_xhr_1 = __webpack_require__(157);
	var lang_1 = __webpack_require__(10);
	var Observable_1 = __webpack_require__(56);
	var http_utils_1 = __webpack_require__(150);
	/**
	* Creates connections using `XMLHttpRequest`. Given a fully-qualified
	* request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
	* request.
	*
	* This class would typically not be created or interacted with directly inside applications, though
	* the {@link MockConnection} may be interacted with in tests.
	*/
	var XHRConnection = (function () {
	    function XHRConnection(req, browserXHR, baseResponseOptions) {
	        var _this = this;
	        this.request = req;
	        this.response = new Observable_1.Observable(function (responseObserver) {
	            var _xhr = browserXHR.build();
	            _xhr.open(enums_1.RequestMethod[req.method].toUpperCase(), req.url);
	            // load event handler
	            var onLoad = function () {
	                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                // response/responseType properties were introduced in XHR Level2 spec (supported by
	                // IE10)
	                var body = lang_1.isPresent(_xhr.response) ? _xhr.response : _xhr.responseText;
	                var headers = headers_1.Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
	                var url = http_utils_1.getResponseURL(_xhr);
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = _xhr.status === 1223 ? 204 : _xhr.status;
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = body ? 200 : 0;
	                }
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: body, status: status, headers: headers, url: url });
	                if (lang_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                var response = new static_response_1.Response(responseOptions);
	                if (http_utils_1.isSuccess(status)) {
	                    responseObserver.next(response);
	                    // TODO(gdi2290): defer complete if array buffer until done
	                    responseObserver.complete();
	                    return;
	                }
	                responseObserver.error(response);
	            };
	            // error event handler
	            var onError = function (err) {
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: err, type: enums_1.ResponseType.Error });
	                if (lang_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new static_response_1.Response(responseOptions));
	            };
	            if (lang_1.isPresent(req.headers)) {
	                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
	            }
	            _xhr.addEventListener('load', onLoad);
	            _xhr.addEventListener('error', onError);
	            _xhr.send(_this.request.text());
	            return function () {
	                _xhr.removeEventListener('load', onLoad);
	                _xhr.removeEventListener('error', onError);
	                _xhr.abort();
	            };
	        });
	    }
	    return XHRConnection;
	})();
	exports.XHRConnection = XHRConnection;
	/**
	 * Creates {@link XHRConnection} instances.
	 *
	 * This class would typically not be used by end users, but could be
	 * overridden if a different backend implementation should be used,
	 * such as in a node backend.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from 'angular2/http';
	 * @Component({
	 *   viewProviders: [
	 *     HTTP_PROVIDERS,
	 *     provide(Http, {useFactory: (backend, options) => {
	 *       return new Http(backend, options);
	 *     }, deps: [MyNodeBackend, BaseRequestOptions]})]
	 * })
	 * class MyComponent {
	 *   constructor(http:Http) {
	 *     http.request('people.json').subscribe(res => this.people = res.json());
	 *   }
	 * }
	 * ```
	 *
	 **/
	var XHRBackend = (function () {
	    function XHRBackend(_browserXHR, _baseResponseOptions) {
	        this._browserXHR = _browserXHR;
	        this._baseResponseOptions = _baseResponseOptions;
	    }
	    XHRBackend.prototype.createConnection = function (request) {
	        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
	    };
	    XHRBackend = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_xhr_1.BrowserXhr, base_response_options_1.ResponseOptions])
	    ], XHRBackend);
	    return XHRBackend;
	})();
	exports.XHRBackend = XHRBackend;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var http_utils_1 = __webpack_require__(150);
	/**
	 * Creates `Response` instances from provided values.
	 *
	 * Though this object isn't
	 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
	 * add data to a view.
	 *
	 * ### Example
	 *
	 * ```
	 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
	 * ```
	 *
	 * The Response's interface is inspired by the Response constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
	 * can be accessed many times. There are other differences in the implementation, but this is the
	 * most significant.
	 */
	var Response = (function () {
	    function Response(responseOptions) {
	        this._body = responseOptions.body;
	        this.status = responseOptions.status;
	        this.statusText = responseOptions.statusText;
	        this.headers = responseOptions.headers;
	        this.type = responseOptions.type;
	        this.url = responseOptions.url;
	    }
	    /**
	     * Not yet implemented
	     */
	    // TODO: Blob return type
	    Response.prototype.blob = function () { throw new exceptions_1.BaseException('"blob()" method not implemented on Response superclass'); };
	    /**
	     * Attempts to return body as parsed `JSON` object, or raises an exception.
	     */
	    Response.prototype.json = function () {
	        var jsonResponse;
	        if (http_utils_1.isJsObject(this._body)) {
	            jsonResponse = this._body;
	        }
	        else if (lang_1.isString(this._body)) {
	            jsonResponse = lang_1.Json.parse(this._body);
	        }
	        return jsonResponse;
	    };
	    /**
	     * Returns the body as a string, presuming `toString()` can be called on the response body.
	     */
	    Response.prototype.text = function () { return this._body.toString(); };
	    /**
	     * Not yet implemented
	     */
	    // TODO: ArrayBuffer return type
	    Response.prototype.arrayBuffer = function () {
	        throw new exceptions_1.BaseException('"arrayBuffer()" method not implemented on Response superclass');
	    };
	    return Response;
	})();
	exports.Response = Response;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var headers_1 = __webpack_require__(149);
	var enums_1 = __webpack_require__(151);
	/**
	 * Creates a response options object to be optionally provided when instantiating a
	 * {@link Response}.
	 *
	 * This class is based on the `ResponseInit` description in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#responseinit).
	 *
	 * All values are null by default. Typical defaults can be found in the
	 * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
	 *
	 * This class may be used in tests to build {@link Response Responses} for
	 * mock responses (see {@link MockBackend}).
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
	 *
	 * ```typescript
	 * import {ResponseOptions, Response} from 'angular2/http';
	 *
	 * var options = new ResponseOptions({
	 *   body: '{"name":"Jeff"}'
	 * });
	 * var res = new Response(options);
	 *
	 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	 * ```
	 */
	var ResponseOptions = (function () {
	    function ResponseOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
	        this.body = lang_1.isPresent(body) ? body : null;
	        this.status = lang_1.isPresent(status) ? status : null;
	        this.headers = lang_1.isPresent(headers) ? headers : null;
	        this.statusText = lang_1.isPresent(statusText) ? statusText : null;
	        this.type = lang_1.isPresent(type) ? type : null;
	        this.url = lang_1.isPresent(url) ? url : null;
	    }
	    /**
	     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
	     * override
	     * existing values. This method will not change the values of the instance on which it is being
	     * called.
	     *
	     * This may be useful when sharing a base `ResponseOptions` object inside tests,
	     * where certain properties may change from test to test.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
	     *
	     * ```typescript
	     * import {ResponseOptions, Response} from 'angular2/http';
	     *
	     * var options = new ResponseOptions({
	     *   body: {name: 'Jeff'}
	     * });
	     * var res = new Response(options.merge({
	     *   url: 'https://google.com'
	     * }));
	     * console.log('options.url:', options.url); // null
	     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	     * console.log('res.url:', res.url); // https://google.com
	     * ```
	     */
	    ResponseOptions.prototype.merge = function (options) {
	        return new ResponseOptions({
	            body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
	            status: lang_1.isPresent(options) && lang_1.isPresent(options.status) ? options.status : this.status,
	            headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
	            statusText: lang_1.isPresent(options) && lang_1.isPresent(options.statusText) ? options.statusText :
	                this.statusText,
	            type: lang_1.isPresent(options) && lang_1.isPresent(options.type) ? options.type : this.type,
	            url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url,
	        });
	    };
	    return ResponseOptions;
	})();
	exports.ResponseOptions = ResponseOptions;
	/**
	 * Subclass of {@link ResponseOptions}, with default values.
	 *
	 * Default values:
	 *  * status: 200
	 *  * headers: empty {@link Headers} object
	 *
	 * This class could be extended and bound to the {@link ResponseOptions} class
	 * when configuring an {@link Injector}, in order to override the default options
	 * used by {@link Http} to create {@link Response Responses}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
	 *
	 * ```typescript
	 * import {provide} from 'angular2/core';
	 * import {bootstrap} from 'angular2/platform/browser';
	 * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
	 * 'angular2/http';
	 * import {App} from './myapp';
	 *
	 * class MyOptions extends BaseResponseOptions {
	 *   headers:Headers = new Headers({network: 'github'});
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, provide(ResponseOptions, {useClass: MyOptions})]);
	 * ```
	 *
	 * The options could also be extended when manually creating a {@link Response}
	 * object.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
	 *
	 * ```
	 * import {BaseResponseOptions, Response} from 'angular2/http';
	 *
	 * var options = new BaseResponseOptions();
	 * var res = new Response(options.merge({
	 *   body: 'Angular2',
	 *   headers: new Headers({framework: 'angular'})
	 * }));
	 * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
	 * console.log('res.text():', res.text()); // Angular2;
	 * ```
	 */
	var BaseResponseOptions = (function (_super) {
	    __extends(BaseResponseOptions, _super);
	    function BaseResponseOptions() {
	        _super.call(this, { status: 200, statusText: 'Ok', type: enums_1.ResponseType.Default, headers: new headers_1.Headers() });
	    }
	    BaseResponseOptions = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BaseResponseOptions);
	    return BaseResponseOptions;
	})(ResponseOptions);
	exports.BaseResponseOptions = BaseResponseOptions;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	/**
	 * A backend for http that uses the `XMLHttpRequest` browser API.
	 *
	 * Take care not to evaluate this in non-browser contexts.
	 */
	var BrowserXhr = (function () {
	    function BrowserXhr() {
	    }
	    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };
	    BrowserXhr = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserXhr);
	    return BrowserXhr;
	})();
	exports.BrowserXhr = BrowserXhr;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var interfaces_1 = __webpack_require__(147);
	var enums_1 = __webpack_require__(151);
	var static_response_1 = __webpack_require__(155);
	var base_response_options_1 = __webpack_require__(156);
	var core_1 = __webpack_require__(7);
	var browser_jsonp_1 = __webpack_require__(159);
	var exceptions_1 = __webpack_require__(19);
	var lang_1 = __webpack_require__(10);
	var Observable_1 = __webpack_require__(56);
	var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
	var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
	/**
	 * Abstract base class for an in-flight JSONP request.
	 */
	var JSONPConnection = (function () {
	    function JSONPConnection() {
	    }
	    return JSONPConnection;
	})();
	exports.JSONPConnection = JSONPConnection;
	var JSONPConnection_ = (function (_super) {
	    __extends(JSONPConnection_, _super);
	    function JSONPConnection_(req, _dom, baseResponseOptions) {
	        var _this = this;
	        _super.call(this);
	        this._dom = _dom;
	        this.baseResponseOptions = baseResponseOptions;
	        this._finished = false;
	        if (req.method !== enums_1.RequestMethod.Get) {
	            throw exceptions_1.makeTypeError(JSONP_ERR_WRONG_METHOD);
	        }
	        this.request = req;
	        this.response = new Observable_1.Observable(function (responseObserver) {
	            _this.readyState = enums_1.ReadyState.Loading;
	            var id = _this._id = _dom.nextRequestID();
	            _dom.exposeConnection(id, _this);
	            // Workaround Dart
	            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
	            var callback = _dom.requestCallback(_this._id);
	            var url = req.url;
	            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
	                url = lang_1.StringWrapper.replace(url, '=JSONP_CALLBACK&', "=" + callback + "&");
	            }
	            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
	                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
	            }
	            var script = _this._script = _dom.build(url);
	            var onLoad = function (event) {
	                if (_this.readyState === enums_1.ReadyState.Cancelled)
	                    return;
	                _this.readyState = enums_1.ReadyState.Done;
	                _dom.cleanup(script);
	                if (!_this._finished) {
	                    var responseOptions_1 = new base_response_options_1.ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: enums_1.ResponseType.Error, url: url });
	                    if (lang_1.isPresent(baseResponseOptions)) {
	                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
	                    }
	                    responseObserver.error(new static_response_1.Response(responseOptions_1));
	                    return;
	                }
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: _this._responseData, url: url });
	                if (lang_1.isPresent(_this.baseResponseOptions)) {
	                    responseOptions = _this.baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.next(new static_response_1.Response(responseOptions));
	                responseObserver.complete();
	            };
	            var onError = function (error) {
	                if (_this.readyState === enums_1.ReadyState.Cancelled)
	                    return;
	                _this.readyState = enums_1.ReadyState.Done;
	                _dom.cleanup(script);
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: error.message, type: enums_1.ResponseType.Error });
	                if (lang_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new static_response_1.Response(responseOptions));
	            };
	            script.addEventListener('load', onLoad);
	            script.addEventListener('error', onError);
	            _dom.send(script);
	            return function () {
	                _this.readyState = enums_1.ReadyState.Cancelled;
	                script.removeEventListener('load', onLoad);
	                script.removeEventListener('error', onError);
	                if (lang_1.isPresent(script)) {
	                    _this._dom.cleanup(script);
	                }
	            };
	        });
	    }
	    JSONPConnection_.prototype.finished = function (data) {
	        // Don't leak connections
	        this._finished = true;
	        this._dom.removeConnection(this._id);
	        if (this.readyState === enums_1.ReadyState.Cancelled)
	            return;
	        this._responseData = data;
	    };
	    return JSONPConnection_;
	})(JSONPConnection);
	exports.JSONPConnection_ = JSONPConnection_;
	/**
	 * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.
	 */
	var JSONPBackend = (function (_super) {
	    __extends(JSONPBackend, _super);
	    function JSONPBackend() {
	        _super.apply(this, arguments);
	    }
	    return JSONPBackend;
	})(interfaces_1.ConnectionBackend);
	exports.JSONPBackend = JSONPBackend;
	var JSONPBackend_ = (function (_super) {
	    __extends(JSONPBackend_, _super);
	    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
	        _super.call(this);
	        this._browserJSONP = _browserJSONP;
	        this._baseResponseOptions = _baseResponseOptions;
	    }
	    JSONPBackend_.prototype.createConnection = function (request) {
	        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
	    };
	    JSONPBackend_ = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_jsonp_1.BrowserJsonp, base_response_options_1.ResponseOptions])
	    ], JSONPBackend_);
	    return JSONPBackend_;
	})(JSONPBackend);
	exports.JSONPBackend_ = JSONPBackend_;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var _nextRequestId = 0;
	exports.JSONP_HOME = '__ng_jsonp__';
	var _jsonpConnections = null;
	function _getJsonpConnections() {
	    if (_jsonpConnections === null) {
	        _jsonpConnections = lang_1.global[exports.JSONP_HOME] = {};
	    }
	    return _jsonpConnections;
	}
	// Make sure not to evaluate this in a non-browser environment!
	var BrowserJsonp = (function () {
	    function BrowserJsonp() {
	    }
	    // Construct a <script> element with the specified URL
	    BrowserJsonp.prototype.build = function (url) {
	        var node = document.createElement('script');
	        node.src = url;
	        return node;
	    };
	    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
	    BrowserJsonp.prototype.requestCallback = function (id) { return exports.JSONP_HOME + "." + id + ".finished"; };
	    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
	        var connections = _getJsonpConnections();
	        connections[id] = connection;
	    };
	    BrowserJsonp.prototype.removeConnection = function (id) {
	        var connections = _getJsonpConnections();
	        connections[id] = null;
	    };
	    // Attach the <script> element to the DOM
	    BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };
	    // Remove <script> element from the DOM
	    BrowserJsonp.prototype.cleanup = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild((node));
	        }
	    };
	    BrowserJsonp = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserJsonp);
	    return BrowserJsonp;
	})();
	exports.BrowserJsonp = BrowserJsonp;


/***/ },
/* 160 */
/***/ function(module, exports) {

	var CSS_CLICK_BLOCK = 'click-block-active';
	var DEFAULT_EXPIRE = 330;
	var cbEle, fallbackTimerId;
	var isShowing = false;
	/**
	 * @private
	 */
	var ClickBlock = (function () {
	    function ClickBlock() {
	        this._enabled = false;
	    }
	    ClickBlock.prototype.enable = function () {
	        cbEle = document.createElement('click-block');
	        document.body.appendChild(cbEle);
	        cbEle.addEventListener('touchmove', function (ev) {
	            ev.preventDefault();
	            ev.stopPropagation();
	        });
	        this._enabled = true;
	    };
	    ClickBlock.prototype.show = function (shouldShow, expire) {
	        if (this._enabled) {
	            if (shouldShow) {
	                show(expire);
	            }
	            else {
	                hide();
	            }
	        }
	    };
	    return ClickBlock;
	})();
	exports.ClickBlock = ClickBlock;
	function show(expire) {
	    clearTimeout(fallbackTimerId);
	    fallbackTimerId = setTimeout(hide, expire || DEFAULT_EXPIRE);
	    if (!isShowing) {
	        cbEle.classList.add(CSS_CLICK_BLOCK);
	        isShowing = true;
	    }
	}
	function hide() {
	    clearTimeout(fallbackTimerId);
	    if (isShowing) {
	        cbEle.classList.remove(CSS_CLICK_BLOCK);
	        isShowing = false;
	    }
	}


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @ngdoc service
	* @name Config
	* @module ionic
	* @description
	* Config allows you to set the modes of your components
	*/
	var platform_1 = __webpack_require__(162);
	var util_1 = __webpack_require__(163);
	/**
	 * @name Config
	 * @demo /docs/v2/demos/config/
	 * @description
	 * The Config lets you configure your entire app or specific platforms.
	 * You can set the tab placement, icon mode, animations, and more here.
	 *
	 * ```ts
	 * @App({
	 *   template: `<ion-nav [root]="root"></ion-nav>`
	 *   config: {
	 *     backButtonText: 'Go Back',
	 *     iconMode: 'ios',
	 *     modalEnter: 'modal-slide-in',
	 *     modalLeave: 'modal-slide-out',
	 *     tabbarPlacement: 'bottom',
	 *     pageTransition: 'ios',
	 *   }
	 * })
	 * ```
	 *
	 * To change the mode to always use Material Design (md).
	 *
	 * ```ts
	 * @App({
	 *   template: `<ion-nav [root]="root"></ion-nav>`
	 *   config: {
	 *     mode: 'md'
	 *   }
	 * })
	 * ```
	 *
	 * Config can be overwritten at multiple levels allowing for more configuration. Taking the example from earlier, we can override any setting we want based on a platform.
	 * ```ts
	 * @App({
	 *   template: `<ion-nav [root]="root"></ion-nav>`
	 *   config: {
	 *     tabbarPlacement: 'bottom',
	 *     platforms: {
	 *      ios: {
	 *        tabbarPlacement: 'top',
	 *      }
	 *     }
	 *   }
	 * })
	 * ```
	 *
	 * We could also configure these values at a component level. Take `tabbarPlacement`, we can configure this as a property on our `ion-tabs`.
	 *
	 * ```html
	 * <ion-tabs tabbarPlacement="top">
	 *    <ion-tab tabTitle="Dash" tabIcon="pulse" [root]="tabRoot"></ion-tab>
	 *  </ion-tabs>
	 * ```
	 *
	 * The last way we could configure is through URL query strings. This is useful for testing while in the browser.
	 * Simply add `?ionic<PROPERTYNAME>=<value>` to the url.
	 *
	 * ```bash
	 * http://localhost:8100/?ionicTabbarPlacement=bottom
	 * ```
	 *
	 * Custom values can be added to config, and looked up at a later point in time.
	 *
	 * ``` javascript
	 * config.set('ios', 'favoriteColor', 'green');
	 * // from any page in your app:
	 * config.get('favoriteColor'); // 'green'
	 * ```
	 *
	 *
	 * A config value can come from anywhere and be anything, but there are a default set of values.
	 *
	 *
	 * | Config property            | Default iOS Value      | Default MD Value          |
	 * |----------------------------|------------------------|---------------------------|
	 * | activator                  | highlight              | ripple                    |
	 * | actionSheetEnter           | action-sheet-slide-in  | action-sheet-md-slide-in  |
	 * | actionSheetLeave           | action-sheet-slide-out | action-sheet-md-slide-out |
	 * | alertEnter                 | alert-pop-in           | alert-md-pop-in           |
	 * | alertLeave                 | alert-pop-out          | alert-md-pop-out          |
	 * | backButtonText             | Back                   |                           |
	 * | backButtonIcon             | ion-ios-arrow-back     | ion-md-arrow-back         |
	 * | iconMode                   | ios                    | md                        |
	 * | menuType                   | reveal                 | overlay                   |
	 * | modalEnter                 | modal-slide-in         | modal-md-slide-in         |
	 * | modalLeave                 | modal-slide-out        | modal-md-slide-out        |
	 * | pageTransition             | ios-transition         | md-transition             |
	 * | pageTransitionDelay        | 16                     | 120                       |
	 * | tabbarPlacement            | bottom                 | top                       |
	 * | tabbarHighlight            |                        | top                       |
	 * | tabbarLayout               |                        |                           |
	 * | tabSubPages                |                        | true                      |
	 *
	**/
	var Config = (function () {
	    function Config(config) {
	        this._c = {};
	        this._s = {};
	        this._s = config && util_1.isObject(config) && !util_1.isArray(config) ? config : {};
	    }
	    /**
	     * @name get
	     * @description
	     * Returns a single config value, given a key.
	     *
	     * @param {string} [key] - the key for the config value
	     * @param {any} [fallbackValue] - a fallback value to use when the config value was not found, or is config value is `null`. Fallback value defaults to `null`.
	     */
	    Config.prototype.get = function (key, fallbackValue) {
	        if (fallbackValue === void 0) { fallbackValue = null; }
	        if (!util_1.isDefined(this._c[key])) {
	            if (!util_1.isDefined(key)) {
	                throw 'config key is not defined';
	            }
	            // if the value was already set this will all be skipped
	            // if there was no user config then it'll check each of
	            // the user config's platforms, which already contains
	            // settings from default platform configs
	            var userPlatformValue = undefined;
	            var userDefaultValue = this._s[key];
	            var userPlatformModeValue = undefined;
	            var userDefaultModeValue = undefined;
	            var platformValue = undefined;
	            var platformModeValue = undefined;
	            var configObj = null;
	            if (this.platform) {
	                var queryStringValue = this.platform.query('ionic' + key.toLowerCase());
	                if (util_1.isDefined(queryStringValue)) {
	                    return this._c[key] = (queryStringValue === 'true' ? true : queryStringValue === 'false' ? false : queryStringValue);
	                }
	                // check the platform settings object for this value
	                // loop though each of the active platforms
	                // array of active platforms, which also knows the hierarchy,
	                // with the last one the most important
	                var activePlatformKeys = this.platform.platforms();
	                // loop through all of the active platforms we're on
	                for (var i = 0, l = activePlatformKeys.length; i < l; i++) {
	                    // get user defined platform values
	                    if (this._s.platforms) {
	                        configObj = this._s.platforms[activePlatformKeys[i]];
	                        if (configObj) {
	                            if (util_1.isDefined(configObj[key])) {
	                                userPlatformValue = configObj[key];
	                            }
	                            configObj = Config.getModeConfig(configObj.mode);
	                            if (configObj && util_1.isDefined(configObj[key])) {
	                                userPlatformModeValue = configObj[key];
	                            }
	                        }
	                    }
	                    // get default platform's setting
	                    configObj = platform_1.Platform.get(activePlatformKeys[i]);
	                    if (configObj && configObj.settings) {
	                        if (util_1.isDefined(configObj.settings[key])) {
	                            // found a setting for this platform
	                            platformValue = configObj.settings[key];
	                        }
	                        configObj = Config.getModeConfig(configObj.settings.mode);
	                        if (configObj && util_1.isDefined(configObj[key])) {
	                            // found setting for this platform's mode
	                            platformModeValue = configObj[key];
	                        }
	                    }
	                }
	            }
	            configObj = Config.getModeConfig(this._s.mode);
	            if (configObj && util_1.isDefined(configObj[key])) {
	                userDefaultModeValue = configObj[key];
	            }
	            // cache the value
	            this._c[key] = util_1.isDefined(userPlatformValue) ? userPlatformValue :
	                util_1.isDefined(userDefaultValue) ? userDefaultValue :
	                    util_1.isDefined(userPlatformModeValue) ? userPlatformModeValue :
	                        util_1.isDefined(userDefaultModeValue) ? userDefaultModeValue :
	                            util_1.isDefined(platformValue) ? platformValue :
	                                util_1.isDefined(platformModeValue) ? platformModeValue :
	                                    null;
	        }
	        // return key's value
	        // either it came directly from the user config
	        // or it was from the users platform configs
	        // or it was from the default platform configs
	        // in that order
	        var rtnVal;
	        if (util_1.isFunction(this._c[key])) {
	            rtnVal = this._c[key](this.platform);
	        }
	        else {
	            rtnVal = this._c[key];
	        }
	        return (rtnVal !== null ? rtnVal : fallbackValue);
	    };
	    /**
	     * @name getBoolean
	     * @description
	     * Same as `get()`, however always returns a boolean value.
	     *
	     * @param {string} [key] - the key for the config value
	     */
	    Config.prototype.getBoolean = function (key) {
	        var val = this.get(key);
	        return (val || val === 'true') ? true : false;
	    };
	    /**
	     * @name set
	     * @description
	     * Sets a single config value.
	     *
	     * @param {string} [platform] - The platform (either 'ios' or 'android') that the config value should apply to. Leaving this blank will apply the config value to all platforms.
	     * @param {string} [key] - The key used to look up the value at a later point in time.
	     * @param {string} [value] - The config value being stored.
	     */
	    Config.prototype.set = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var arg0 = args[0];
	        var arg1 = args[1];
	        switch (args.length) {
	            case 2:
	                // set('key', 'value') = set key/value pair
	                // arg1 = value
	                this._s[arg0] = arg1;
	                delete this._c[arg0]; // clear cache
	                break;
	            case 3:
	                // setting('ios', 'key', 'value') = set key/value pair for platform
	                // arg0 = platform
	                // arg1 = key
	                // arg2 = value
	                this._s.platforms = this._s.platforms || {};
	                this._s.platforms[arg0] = this._s.platforms[arg0] || {};
	                this._s.platforms[arg0][arg1] = args[2];
	                delete this._c[arg1]; // clear cache
	                break;
	        }
	        return this;
	    };
	    /**
	     * @private
	     * @name settings()
	     * @description
	     */
	    Config.prototype.settings = function () {
	        var args = arguments;
	        switch (args.length) {
	            case 0:
	                return this._s;
	            case 1:
	                // settings({...})
	                this._s = args[0];
	                this._c = {}; // clear cache
	                break;
	            case 2:
	                // settings('ios', {...})
	                this._s.platforms = this._s.platforms || {};
	                this._s.platforms[args[0]] = args[1];
	                this._c = {}; // clear cache
	                break;
	        }
	        return this;
	    };
	    /**
	     * @private
	     */
	    Config.prototype.setPlatform = function (platform) {
	        this.platform = platform;
	    };
	    /**
	     * @private
	     */
	    Config.setModeConfig = function (mode, config) {
	        modeConfigs[mode] = config;
	    };
	    /**
	     * @private
	     */
	    Config.getModeConfig = function (mode) {
	        return modeConfigs[mode] || null;
	    };
	    return Config;
	})();
	exports.Config = Config;
	var modeConfigs = {};


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var util_1 = __webpack_require__(163);
	var dom_1 = __webpack_require__(164);
	/**
	 * @name Platform
	 * @description
	 * Platform returns the availble information about your current platform.
	 * Platforms in Ionic 2 are much more complex then in V1, returns not just a single platform,
	 * but a hierarchy of information, such as a devices OS, phone vs tablet, or mobile vs browser.
	 * With this information you can completely custimize your app to fit any device and platform.
	 *
	 * @usage
	 * ```ts
	 * import {Platform} from 'ionic-angular';
	 *
	 * @Page({...})
	 * export MyPage {
	 *    constructor(platform: Platform){
	 *      this.platform = platform;
	 *    }
	 * }
	 * ```
	 * @demo /docs/v2/demos/platform/
	 */
	var Platform = (function () {
	    function Platform(platforms) {
	        var _this = this;
	        if (platforms === void 0) { platforms = []; }
	        this._versions = {};
	        this._onResizes = [];
	        this._platforms = platforms;
	        this._readyPromise = new Promise(function (res) { _this._readyResolve = res; });
	    }
	    // Methods
	    // **********************************************
	    /**
	     * @param {string} platformName
	     * @returns {boolean} returns true/false based on platform.
	     * @description
	     * Depending on the platform the user is on, `is(platformName)` will
	     * return `true` or `false`. Note that the same app can return `true`
	     * for more than one platform name. For example, an app running from
	     * an iPad would return `true` for the platform names: `mobile`,
	     * `ios`, `ipad`, and `tablet`. Additionally, if the app was running
	     * from Cordova then `cordova` would be true, and if it was running
	     * from a web browser on the iPad then then `mobileweb` would also
	     * be `true`.
	     *
	     * Possible built-in platform names:
	     *
	     * - `android`
	     * - `cordova`
	     * - `core`
	     * - `ios`
	     * - `ipad`
	     * - `iphone`
	     * - `mobile`
	     * - `mobileweb`
	     * - `phablet`
	     * - `tablet`
	     * - `windows`
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Page({...})
	     * export MyPage {
	     *    constructor(platform: Platform) {
	     *      if (platform.is('ios')) {
	     *        // what ever you need to do
	     *        // if the platform is ios
	     *      }
	     *    }
	     * }
	     * ```
	     */
	    Platform.prototype.is = function (platformName) {
	        return (this._platforms.indexOf(platformName) > -1);
	    };
	    /**
	     * @returns {array} the array of platforms
	     * @description
	     * Depending on what device you are on, `platforms` can return multiple values.
	     * Each possible value is a hierarchy of platforms. For example, on an iPhone,
	     * it would return mobile, ios, and iphone.
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     * export MyPage {
	     *    constructor(platform: Platform) {
	     *      this.platform = platform;
	     *      console.log(this.platform.platforms());
	     *      // This will return an array of all the availble platforms
	     *      // From if your on mobile, to mobile os, and device name
	     *    }
	     * }
	     * ```
	     */
	    Platform.prototype.platforms = function () {
	        // get the array of active platforms, which also knows the hierarchy,
	        // with the last one the most important
	        return this._platforms;
	    };
	    /**
	     * Returns an object containing information about the paltform
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Page({...})
	     * export MyPage {
	     *    constructor(platform: Platform) {
	     *      this.platform = platform;
	     *      console.log(this.platform.versions());
	     *    }
	     * }
	     * ```
	  
	     * @param {string} [platformName] optional platformName
	     * @returns {object} An object with various platform info
	     *
	     */
	    Platform.prototype.versions = function (platformName) {
	        if (arguments.length) {
	            // get a specific platform's version
	            return this._versions[platformName];
	        }
	        // get all the platforms that have a valid parsed version
	        return this._versions;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.version = function () {
	        for (var platformName in this._versions) {
	            if (this._versions[platformName]) {
	                return this._versions[platformName];
	            }
	        }
	        return {};
	    };
	    /**
	     * Returns a promise when the platform is ready and native functionality can be called
	     *
	     * ```
	     * import {Platform} from 'ionic-angular';
	     *
	     * @Page({...})
	     * export MyPage {
	     *    constructor(platform: Platform) {
	     *      this.platform = platform;
	     *      this.platform.ready().then(() => {
	     *        console.log('Platform ready');
	     *        // The platform is now ready, execute any native code you want
	     *       });
	     *    }
	     * }
	     * ```
	     * @returns {promise} Returns a promsie when device ready has fired
	     */
	    Platform.prototype.ready = function () {
	        return this._readyPromise;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.prepareReady = function (config) {
	        var self = this;
	        function resolve() {
	            self._readyResolve(config);
	        }
	        if (this._engineReady) {
	            // the engine provide a ready promise, use this instead
	            this._engineReady(resolve);
	        }
	        else {
	            // there is no custom ready method from the engine
	            // use the default dom ready
	            dom_1.ready(resolve);
	        }
	    };
	    /**
	    * Set the app's language direction, which will update the `dir` attribute
	    * on the app's root `<html>` element. We recommend the app's `index.html`
	    * file already has the correct `dir` attribute value set, such as
	    * `<html dir="ltr">` or `<html dir="rtl">`. This method is useful if the
	    * direction needs to be dynamically changed per user/session.
	    * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
	    * @param {string} dir  Examples: `rtl`, `ltr`
	    */
	    Platform.prototype.setDir = function (dir, updateDocument) {
	        this._dir = (dir || '').toLowerCase();
	        if (updateDocument !== false) {
	            document.documentElement.setAttribute('dir', dir);
	        }
	    };
	    /**
	     * Returns app's language direction.
	     * We recommend the app's `index.html` file already has the correct `dir`
	     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
	     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
	     * @returns {string}
	     */
	    Platform.prototype.dir = function () {
	        return this._dir;
	    };
	    /**
	     * Returns if this app is using right-to-left language direction or not.
	     * We recommend the app's `index.html` file already has the correct `dir`
	     * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
	     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
	     * @returns {boolean}
	     */
	    Platform.prototype.isRTL = function () {
	        return (this._dir === 'rtl');
	    };
	    /**
	    * Set the app's language and optionally the country code, which will update
	    * the `lang` attribute on the app's root `<html>` element.
	    * We recommend the app's `index.html` file already has the correct `lang`
	    * attribute value set, such as `<html lang="en">`. This method is useful if
	    * the language needs to be dynamically changed per user/session.
	    * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
	    * @param {string} language  Examples: `en-US`, `en-GB`, `ar`, `de`, `zh`, `es-MX`
	    */
	    Platform.prototype.setLang = function (language, updateDocument) {
	        this._lang = language;
	        if (updateDocument !== false) {
	            document.documentElement.setAttribute('lang', language);
	        }
	    };
	    /**
	     * Returns app's language and optional country code.
	     * We recommend the app's `index.html` file already has the correct `lang`
	     * attribute value set, such as `<html lang="en">`.
	     * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
	     * @returns {string}
	     */
	    Platform.prototype.lang = function () {
	        return this._lang;
	    };
	    // Methods meant to be overridden by the engine
	    // **********************************************
	    // Provided NOOP methods so they do not error when
	    // called by engines (the browser) doesn't provide them
	    /**
	    * @private
	    */
	    Platform.prototype.on = function () { };
	    /**
	    * @private
	    */
	    Platform.prototype.onHardwareBackButton = function () { };
	    /**
	    * @private
	    */
	    Platform.prototype.registerBackButtonAction = function () { };
	    /**
	    * @private
	    */
	    Platform.prototype.exitApp = function () { };
	    /**
	    * @private
	    */
	    Platform.prototype.fullScreen = function () { };
	    /**
	    * @private
	    */
	    Platform.prototype.showStatusBar = function () { };
	    // Getter/Setter Methods
	    // **********************************************
	    /**
	    * @private
	    */
	    Platform.prototype.setUrl = function (url) {
	        this._url = url;
	        this._qs = util_1.getQuerystring(url);
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.url = function () {
	        return this._url;
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.query = function (key) {
	        return (this._qs || {})[key];
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.setUserAgent = function (userAgent) {
	        this._ua = userAgent;
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.userAgent = function () {
	        return this._ua || '';
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.setNavigatorPlatform = function (navigatorPlatform) {
	        this._bPlt = navigatorPlatform;
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.navigatorPlatform = function () {
	        return this._bPlt || '';
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.width = function () {
	        return dom_1.windowDimensions().width;
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.height = function () {
	        return dom_1.windowDimensions().height;
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.isPortrait = function () {
	        return this.width() < this.height();
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.isLandscape = function () {
	        return !this.isPortrait();
	    };
	    /**
	    * @private
	    */
	    Platform.prototype.windowResize = function () {
	        var self = this;
	        clearTimeout(self._resizeTm);
	        self._resizeTm = setTimeout(function () {
	            dom_1.flushDimensionCache();
	            for (var i = 0; i < self._onResizes.length; i++) {
	                try {
	                    self._onResizes[i]();
	                }
	                catch (e) {
	                    void 0;
	                }
	            }
	        }, 200);
	    };
	    /**
	     * @private
	     * @returns Unregister function
	     */
	    Platform.prototype.onResize = function (cb) {
	        var self = this;
	        self._onResizes.push(cb);
	        return function () {
	            var index = self._onResizes.indexOf(cb);
	            if (index > -1) {
	                self._onResizes.splice(index, 1);
	            }
	        };
	    };
	    // Platform Registry
	    // **********************************************
	    /**
	     * @private
	     */
	    Platform.register = function (platformConfig) {
	        platformRegistry[platformConfig.name] = platformConfig;
	    };
	    /**
	    * @private
	    */
	    Platform.registry = function () {
	        return platformRegistry;
	    };
	    /**
	     * @private
	     */
	    Platform.get = function (platformName) {
	        return platformRegistry[platformName] || {};
	    };
	    /**
	     * @private
	     */
	    Platform.setDefault = function (platformName) {
	        platformDefault = platformName;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.testQuery = function (queryValue, queryTestValue) {
	        var valueSplit = queryValue.toLowerCase().split(';');
	        return valueSplit.indexOf(queryTestValue) > -1;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.testNavigatorPlatform = function (navigatorPlatformExpression) {
	        var rgx = new RegExp(navigatorPlatformExpression, 'i');
	        return rgx.test(this._bPlt);
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.matchUserAgentVersion = function (userAgentExpression) {
	        if (this._ua && userAgentExpression) {
	            var val = this._ua.match(userAgentExpression);
	            if (val) {
	                return {
	                    major: val[1],
	                    minor: val[2]
	                };
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.isPlatformMatch = function (queryStringName, userAgentAtLeastHas, userAgentMustNotHave) {
	        if (userAgentMustNotHave === void 0) { userAgentMustNotHave = []; }
	        var queryValue = this.query('ionicplatform');
	        if (queryValue) {
	            return this.testQuery(queryValue, queryStringName);
	        }
	        userAgentAtLeastHas = userAgentAtLeastHas || [queryStringName];
	        var userAgent = this._ua.toLowerCase();
	        for (var i = 0; i < userAgentAtLeastHas.length; i++) {
	            if (userAgent.indexOf(userAgentAtLeastHas[i]) > -1) {
	                for (var j = 0; j < userAgentMustNotHave.length; j++) {
	                    if (userAgent.indexOf(userAgentMustNotHave[j]) > -1) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.load = function (platformOverride) {
	        var rootPlatformNode = null;
	        var engineNode = null;
	        var self = this;
	        this.platformOverride = platformOverride;
	        // figure out the most specific platform and active engine
	        var tmpPlatform = null;
	        for (var platformName in platformRegistry) {
	            tmpPlatform = this.matchPlatform(platformName);
	            if (tmpPlatform) {
	                // we found a platform match!
	                // check if its more specific than the one we already have
	                if (tmpPlatform.isEngine) {
	                    // because it matched then this should be the active engine
	                    // you cannot have more than one active engine
	                    engineNode = tmpPlatform;
	                }
	                else if (!rootPlatformNode || tmpPlatform.depth > rootPlatformNode.depth) {
	                    // only find the root node for platforms that are not engines
	                    // set this node as the root since we either don't already
	                    // have one, or this one is more specific that the current one
	                    rootPlatformNode = tmpPlatform;
	                }
	            }
	        }
	        if (!rootPlatformNode) {
	            rootPlatformNode = new PlatformNode(platformDefault);
	        }
	        // build a Platform instance filled with the
	        // hierarchy of active platforms and settings
	        if (rootPlatformNode) {
	            // check if we found an engine node (cordova/node-webkit/etc)
	            if (engineNode) {
	                // add the engine to the first in the platform hierarchy
	                // the original rootPlatformNode now becomes a child
	                // of the engineNode, which is not the new root
	                engineNode.child = rootPlatformNode;
	                rootPlatformNode.parent = engineNode;
	                rootPlatformNode = engineNode;
	                // add any events which the engine would provide
	                // for example, Cordova provides its own ready event
	                var engineMethods = engineNode.methods();
	                engineMethods._engineReady = engineMethods.ready;
	                delete engineMethods.ready;
	                util_1.assign(this, engineMethods);
	            }
	            var platformNode = rootPlatformNode;
	            while (platformNode) {
	                insertSuperset(platformNode);
	                platformNode = platformNode.child;
	            }
	            // make sure the root noot is actually the root
	            // incase a node was inserted before the root
	            platformNode = rootPlatformNode.parent;
	            while (platformNode) {
	                rootPlatformNode = platformNode;
	                platformNode = platformNode.parent;
	            }
	            platformNode = rootPlatformNode;
	            while (platformNode) {
	                // set the array of active platforms with
	                // the last one in the array the most important
	                this._platforms.push(platformNode.name());
	                // get the platforms version if a version parser was provided
	                this._versions[platformNode.name()] = platformNode.version(this);
	                // go to the next platform child
	                platformNode = platformNode.child;
	            }
	        }
	        if (this._platforms.indexOf('mobile') > -1 && this._platforms.indexOf('cordova') === -1) {
	            this._platforms.push('mobileweb');
	        }
	    };
	    /**
	     * @private
	     */
	    Platform.prototype.matchPlatform = function (platformName) {
	        // build a PlatformNode and assign config data to it
	        // use it's getRoot method to build up its hierarchy
	        // depending on which platforms match
	        var platformNode = new PlatformNode(platformName);
	        var rootNode = platformNode.getRoot(this);
	        if (rootNode) {
	            rootNode.depth = 0;
	            var childPlatform = rootNode.child;
	            while (childPlatform) {
	                rootNode.depth++;
	                childPlatform = childPlatform.child;
	            }
	        }
	        return rootNode;
	    };
	    return Platform;
	})();
	exports.Platform = Platform;
	function insertSuperset(platformNode) {
	    var supersetPlaformName = platformNode.superset();
	    if (supersetPlaformName) {
	        // add a platform in between two exist platforms
	        // so we can build the correct hierarchy of active platforms
	        var supersetPlatform = new PlatformNode(supersetPlaformName);
	        supersetPlatform.parent = platformNode.parent;
	        supersetPlatform.child = platformNode;
	        if (supersetPlatform.parent) {
	            supersetPlatform.parent.child = supersetPlatform;
	        }
	        platformNode.parent = supersetPlatform;
	    }
	}
	var PlatformNode = (function () {
	    function PlatformNode(platformName) {
	        this.c = Platform.get(platformName);
	        this.isEngine = this.c.isEngine;
	    }
	    PlatformNode.prototype.name = function () {
	        return this.c.name;
	    };
	    PlatformNode.prototype.settings = function () {
	        return this.c.settings || {};
	    };
	    PlatformNode.prototype.superset = function () {
	        return this.c.superset;
	    };
	    PlatformNode.prototype.methods = function () {
	        return this.c.methods || {};
	    };
	    PlatformNode.prototype.isMatch = function (p) {
	        if (p.platformOverride && !this.isEngine) {
	            return (p.platformOverride === this.c.name);
	        }
	        else if (!this.c.isMatch) {
	            return false;
	        }
	        return this.c.isMatch(p);
	    };
	    PlatformNode.prototype.version = function (p) {
	        if (this.c.versionParser) {
	            var v = this.c.versionParser(p);
	            if (v) {
	                var str = v.major + '.' + v.minor;
	                return {
	                    str: str,
	                    num: parseFloat(str),
	                    major: parseInt(v.major, 10),
	                    minor: parseInt(v.minor, 10)
	                };
	            }
	        }
	    };
	    PlatformNode.prototype.getRoot = function (p) {
	        if (this.isMatch(p)) {
	            var parents = this.getSubsetParents(this.name());
	            if (!parents.length) {
	                return this;
	            }
	            var platform = null;
	            var rootPlatform = null;
	            for (var i = 0; i < parents.length; i++) {
	                platform = new PlatformNode(parents[i]);
	                platform.child = this;
	                rootPlatform = platform.getRoot(p);
	                if (rootPlatform) {
	                    this.parent = platform;
	                    return rootPlatform;
	                }
	            }
	        }
	        return null;
	    };
	    PlatformNode.prototype.getSubsetParents = function (subsetPlatformName) {
	        var platformRegistry = Platform.registry();
	        var parentPlatformNames = [];
	        var platform = null;
	        for (var platformName in platformRegistry) {
	            platform = platformRegistry[platformName];
	            if (platform.subsets && platform.subsets.indexOf(subsetPlatformName) > -1) {
	                parentPlatformNames.push(platformName);
	            }
	        }
	        return parentPlatformNames;
	    };
	    return PlatformNode;
	})();
	var platformRegistry = {};
	var platformDefault = null;


/***/ },
/* 163 */
/***/ function(module, exports) {

	/**
	 * Given a min and max, restrict the given number
	 * to the range.
	 * @param min the minimum
	 * @param n the value
	 * @param max the maximum
	 */
	function clamp(min, n, max) {
	    return Math.max(min, Math.min(n, max));
	}
	exports.clamp = clamp;
	/**
	 * The assign() method is used to copy the values of all enumerable own
	 * properties from one or more source objects to a target object. It will
	 * return the target object. When available, this method will use
	 * `Object.assign()` under-the-hood.
	 * @param target  The target object
	 * @param source(s)  The source object
	 */
	function assign() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i - 0] = arguments[_i];
	    }
	    if (typeof Object.assign !== 'function') {
	        // use the old-school shallow extend method
	        return _baseExtend(args[0], [].slice.call(args, 1), false);
	    }
	    // use the built in ES6 Object.assign method
	    return Object.assign.apply(null, args);
	}
	exports.assign = assign;
	/**
	 * Do a deep extend (merge).
	 * @param dst the destination
	 * @param ... the param objects
	 */
	function merge(dst) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    return _baseExtend(dst, [].slice.call(arguments, 1), true);
	}
	exports.merge = merge;
	function _baseExtend(dst, objs, deep) {
	    for (var i = 0, ii = objs.length; i < ii; ++i) {
	        var obj = objs[i];
	        if (!obj || !exports.isObject(obj) && !exports.isFunction(obj))
	            continue;
	        var keys = Object.keys(obj);
	        for (var j = 0, jj = keys.length; j < jj; j++) {
	            var key = keys[j];
	            var src = obj[key];
	            if (deep && exports.isObject(src)) {
	                if (!exports.isObject(dst[key]))
	                    dst[key] = exports.isArray(src) ? [] : {};
	                _baseExtend(dst[key], [src], true);
	            }
	            else {
	                dst[key] = src;
	            }
	        }
	    }
	    return dst;
	}
	function debounce(fn, wait, immediate) {
	    if (immediate === void 0) { immediate = false; }
	    var timeout, args, context, timestamp, result;
	    return function () {
	        context = this;
	        args = arguments;
	        timestamp = Date.now();
	        var later = function () {
	            var last = Date.now() - timestamp;
	            if (last < wait) {
	                timeout = setTimeout(later, wait - last);
	            }
	            else {
	                timeout = null;
	                if (!immediate)
	                    result = fn.apply(context, args);
	            }
	        };
	        var callNow = immediate && !timeout;
	        if (!timeout) {
	            timeout = setTimeout(later, wait);
	        }
	        if (callNow)
	            result = fn.apply(context, args);
	        return result;
	    };
	}
	exports.debounce = debounce;
	/**
	 * Apply default arguments if they don't exist in
	 * the first object.
	 * @param the destination to apply defaults to.
	 */
	function defaults(dest) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    for (var i = arguments.length - 1; i >= 1; i--) {
	        var source = arguments[i] || {};
	        for (var key in source) {
	            if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
	                dest[key] = source[key];
	            }
	        }
	    }
	    return dest;
	}
	exports.defaults = defaults;
	exports.isBoolean = function (val) { return typeof val === 'boolean'; };
	exports.isString = function (val) { return typeof val === 'string'; };
	exports.isNumber = function (val) { return typeof val === 'number'; };
	exports.isFunction = function (val) { return typeof val === 'function'; };
	exports.isDefined = function (val) { return typeof val !== 'undefined'; };
	exports.isUndefined = function (val) { return typeof val === 'undefined'; };
	exports.isPresent = function (val) { return val !== undefined && val !== null; };
	exports.isBlank = function (val) { return val === undefined || val === null; };
	exports.isObject = function (val) { return typeof val === 'object'; };
	exports.isArray = Array.isArray;
	exports.isTrueProperty = function (val) {
	    if (typeof val === 'string') {
	        val = val.toLowerCase().trim();
	        return (val === 'true' || val === 'on' || val === '');
	    }
	    return !!val;
	};
	exports.isCheckedProperty = function (a, b) {
	    if (a === undefined || a === null || a === '') {
	        return (b === undefined || b === null || b === '');
	    }
	    else if (a === true || a === 'true') {
	        return (b === true || b === 'true');
	    }
	    else if (a === false || a === 'false') {
	        return (b === false || b === 'false');
	    }
	    else if (a === 0 || a === '0') {
	        return (b === 0 || b === '0');
	    }
	    // not using strict comparison on purpose
	    return (a == b);
	};
	/**
	 * Convert a string in the format thisIsAString to a slug format this-is-a-string
	 */
	function pascalCaseToDashCase(val) {
	    if (val === void 0) { val = ''; }
	    return val.charAt(0).toLowerCase() + val.substring(1).replace(/[A-Z]/g, function (match) {
	        return '-' + match.toLowerCase();
	    });
	}
	exports.pascalCaseToDashCase = pascalCaseToDashCase;
	var uid = 0;
	function nextUid() {
	    return ++uid;
	}
	exports.nextUid = nextUid;
	exports.array = {
	    find: function (arr, cb) {
	        for (var i = 0, ii = arr.length; i < ii; i++) {
	            if (cb(arr[i], i))
	                return arr[i];
	        }
	    },
	    remove: function (arr, itemOrIndex) {
	        var index = -1;
	        if (exports.isNumber(itemOrIndex)) {
	            index = itemOrIndex;
	        }
	        else {
	            index = arr.indexOf(itemOrIndex);
	        }
	        if (index < 0) {
	            return false;
	        }
	        arr.splice(index, 1);
	        return true;
	    }
	};
	/**
	 * Grab all query strings keys and values.
	 * @param url
	 */
	function getQuerystring(url) {
	    var queryParams = {};
	    if (url) {
	        var startIndex = url.indexOf('?');
	        if (startIndex !== -1) {
	            var queries = url.slice(startIndex + 1).split('&');
	            for (var i = 0; i < queries.length; i++) {
	                if (queries[i].indexOf('=') > 0) {
	                    var split = queries[i].split('=');
	                    if (split.length > 1) {
	                        queryParams[split[0].toLowerCase()] = split[1].split('#')[0];
	                    }
	                }
	            }
	        }
	    }
	    return queryParams;
	}
	exports.getQuerystring = getQuerystring;
	/**
	 * Throttle the given fun, only allowing it to be
	 * called at most every `wait` ms.
	 */
	function throttle(fn, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    options || (options = {});
	    var later = function () {
	        previous = options.leading === false ? 0 : Date.now();
	        timeout = null;
	        result = fn.apply(context, args);
	    };
	    return function () {
	        var now = Date.now();
	        if (!previous && options.leading === false)
	            previous = now;
	        var remaining = wait - (now - previous);
	        context = this;
	        args = arguments;
	        if (remaining <= 0) {
	            clearTimeout(timeout);
	            timeout = null;
	            previous = now;
	            result = fn.apply(context, args);
	        }
	        else if (!timeout && options.trailing !== false) {
	            timeout = setTimeout(later, remaining);
	        }
	        return result;
	    };
	}
	exports.throttle = throttle;


/***/ },
/* 164 */
/***/ function(module, exports) {

	// RequestAnimationFrame Polyfill (Android 4.3 and below)
	/*! @author Paul Irish */
	/*! @source https://gist.github.com/paulirish/1579671 */
	(function () {
	    var rafLastTime = 0;
	    var win = window;
	    if (!win.requestAnimationFrame) {
	        win.requestAnimationFrame = function (callback, element) {
	            var currTime = Date.now();
	            var timeToCall = Math.max(0, 16 - (currTime - rafLastTime));
	            var id = window.setTimeout(function () {
	                callback(currTime + timeToCall);
	            }, timeToCall);
	            rafLastTime = currTime + timeToCall;
	            return id;
	        };
	    }
	    if (!win.cancelAnimationFrame) {
	        win.cancelAnimationFrame = function (id) { clearTimeout(id); };
	    }
	})();
	exports.raf = window.requestAnimationFrame.bind(window);
	exports.cancelRaf = window.cancelAnimationFrame.bind(window);
	function rafFrames(framesToWait, callback) {
	    framesToWait = Math.ceil(framesToWait);
	    if (framesToWait < 2) {
	        exports.raf(callback);
	    }
	    else {
	        setTimeout(function () {
	            exports.raf(callback);
	        }, (framesToWait - 1) * 17);
	    }
	}
	exports.rafFrames = rafFrames;
	exports.CSS = {};
	(function () {
	    // transform
	    var i, keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform',
	        '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];
	    for (i = 0; i < keys.length; i++) {
	        if (document.documentElement.style[keys[i]] !== undefined) {
	            exports.CSS.transform = keys[i];
	            break;
	        }
	    }
	    // transition
	    keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
	    for (i = 0; i < keys.length; i++) {
	        if (document.documentElement.style[keys[i]] !== undefined) {
	            exports.CSS.transition = keys[i];
	            break;
	        }
	    }
	    // The only prefix we care about is webkit for transitions.
	    var isWebkit = exports.CSS.transition.indexOf('webkit') > -1;
	    // transition duration
	    exports.CSS.transitionDuration = (isWebkit ? '-webkit-' : '') + 'transition-duration';
	    // transition timing function
	    exports.CSS.transitionTimingFn = (isWebkit ? '-webkit-' : '') + 'transition-timing-function';
	    // transition delay
	    exports.CSS.transitionDelay = (isWebkit ? '-webkit-' : '') + 'transition-delay';
	    // To be sure transitionend works everywhere, include *both* the webkit and non-webkit events
	    exports.CSS.transitionEnd = (isWebkit ? 'webkitTransitionEnd ' : '') + 'transitionend';
	})();
	function transitionEnd(el, callback) {
	    if (el) {
	        function unregister() {
	            exports.CSS.transitionEnd.split(' ').forEach(function (eventName) {
	                el.removeEventListener(eventName, onEvent);
	            });
	        }
	        function onEvent(ev) {
	            if (el === ev.target) {
	                unregister();
	                callback(ev);
	            }
	        }
	        exports.CSS.transitionEnd.split(' ').forEach(function (eventName) {
	            el.addEventListener(eventName, onEvent);
	        });
	        return unregister;
	    }
	}
	exports.transitionEnd = transitionEnd;
	function ready(callback) {
	    var promise = null;
	    if (!callback) {
	        // a callback wasn't provided, so let's return a promise instead
	        promise = new Promise(function (resolve) { callback = resolve; });
	    }
	    if (document.readyState === 'complete' || document.readyState === 'interactive') {
	        callback();
	    }
	    else {
	        function completed() {
	            document.removeEventListener('DOMContentLoaded', completed, false);
	            window.removeEventListener('load', completed, false);
	            callback();
	        }
	        document.addEventListener('DOMContentLoaded', completed, false);
	        window.addEventListener('load', completed, false);
	    }
	    return promise;
	}
	exports.ready = ready;
	function windowLoad(callback) {
	    var promise = null;
	    if (!callback) {
	        // a callback wasn't provided, so let's return a promise instead
	        promise = new Promise(function (resolve) { callback = resolve; });
	    }
	    if (document.readyState === 'complete') {
	        callback();
	    }
	    else {
	        function completed() {
	            window.removeEventListener('load', completed, false);
	            callback();
	        }
	        window.addEventListener('load', completed, false);
	    }
	    return promise;
	}
	exports.windowLoad = windowLoad;
	function pointerCoord(ev) {
	    // get coordinates for either a mouse click
	    // or a touch depending on the given event
	    var c = { x: 0, y: 0 };
	    if (ev) {
	        var touches = ev.touches && ev.touches.length ? ev.touches : [ev];
	        var e = (ev.changedTouches && ev.changedTouches[0]) || touches[0];
	        if (e) {
	            c.x = e.clientX || e.pageX || 0;
	            c.y = e.clientY || e.pageY || 0;
	        }
	    }
	    return c;
	}
	exports.pointerCoord = pointerCoord;
	function hasPointerMoved(threshold, startCoord, endCoord) {
	    return startCoord && endCoord &&
	        (Math.abs(startCoord.x - endCoord.x) > threshold || Math.abs(startCoord.y - endCoord.y) > threshold);
	}
	exports.hasPointerMoved = hasPointerMoved;
	function isActive(ele) {
	    return !!(ele && (document.activeElement === ele));
	}
	exports.isActive = isActive;
	function hasFocus(ele) {
	    return isActive(ele) && (ele.parentElement.querySelector(':focus') === ele);
	}
	exports.hasFocus = hasFocus;
	function isTextInput(ele) {
	    return !!ele &&
	        (ele.tagName == 'TEXTAREA' ||
	            ele.contentEditable === 'true' ||
	            (ele.tagName == 'INPUT' && !(/^(radio|checkbox|range|file|submit|reset|color|image|button)$/i).test(ele.type)));
	}
	exports.isTextInput = isTextInput;
	function hasFocusedTextInput() {
	    var ele = document.activeElement;
	    if (isTextInput(ele)) {
	        return (ele.parentElement.querySelector(':focus') === ele);
	    }
	    return false;
	}
	exports.hasFocusedTextInput = hasFocusedTextInput;
	var skipInputAttrsReg = /^(value|checked|disabled|type|class|style|id|autofocus|autocomplete|autocorrect)$/i;
	function copyInputAttributes(srcElement, destElement) {
	    // copy attributes from one element to another
	    // however, skip over a few of them as they're already
	    // handled in the angular world
	    var attrs = srcElement.attributes;
	    for (var i = 0; i < attrs.length; i++) {
	        var attr = attrs[i];
	        if (!skipInputAttrsReg.test(attr.name)) {
	            destElement.setAttribute(attr.name, attr.value);
	        }
	    }
	}
	exports.copyInputAttributes = copyInputAttributes;
	var matchesFn;
	var matchesMethods = ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector'];
	matchesMethods.some(function (fn) {
	    if (typeof document.documentElement[fn] === 'function') {
	        matchesFn = fn;
	        return true;
	    }
	});
	function closest(ele, selector, checkSelf) {
	    if (ele && matchesFn) {
	        // traverse parents
	        ele = (checkSelf ? ele : ele.parentElement);
	        while (ele !== null) {
	            if (ele[matchesFn](selector)) {
	                return ele;
	            }
	            ele = ele.parentElement;
	        }
	    }
	    return null;
	}
	exports.closest = closest;
	/**
	 * Get the element offsetWidth and offsetHeight. Values are cached
	 * to reduce DOM reads. Cache is cleared on a window resize.
	 */
	function getDimensions(ele, id) {
	    var dimensions = dimensionCache[id];
	    if (!dimensions) {
	        // make sure we got good values before caching
	        if (ele.offsetWidth && ele.offsetHeight) {
	            dimensions = dimensionCache[id] = {
	                width: ele.offsetWidth,
	                height: ele.offsetHeight,
	                left: ele.offsetLeft,
	                top: ele.offsetTop
	            };
	        }
	        else {
	            // do not cache bad values
	            return { width: 0, height: 0, left: 0, top: 0 };
	        }
	    }
	    return dimensions;
	}
	exports.getDimensions = getDimensions;
	function clearDimensions(id) {
	    delete dimensionCache[id];
	}
	exports.clearDimensions = clearDimensions;
	function windowDimensions() {
	    if (!dimensionCache.win) {
	        // make sure we got good values before caching
	        if (window.innerWidth && window.innerHeight) {
	            dimensionCache.win = {
	                width: window.innerWidth,
	                height: window.innerHeight
	            };
	        }
	        else {
	            // do not cache bad values
	            return { width: 0, height: 0 };
	        }
	    }
	    return dimensionCache.win;
	}
	exports.windowDimensions = windowDimensions;
	function flushDimensionCache() {
	    dimensionCache = {};
	}
	exports.flushDimensionCache = flushDimensionCache;
	var dimensionCache = {};


/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * @name Events
	 * @description
	 * Events is a publish-subscribe style event system for sending and responding to application-level
	 * events across your app.
	 *
	 * @usage
	 * ```ts
	 * // first page (publish an event when a user is created)
	 * function createUser(user) {
	 *   console.log('User created!')
	 *   events.publish('user:created', user);
	 * }
	 *
	 * // second page (listen for the user created event)
	 * events.subscribe('user:created', (user) => {
	 *   console.log('Welcome', user);
	 * });
	 *
	 * ```
	 * @demo /docs/v2/demos/events/
	 */
	var Events = (function () {
	    function Events() {
	        this._channels = [];
	    }
	    /**
	     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
	     *
	     * @param {string} topic the topic to subscribe to
	     * @param {function} handler the event handler
	     */
	    Events.prototype.subscribe = function (topic) {
	        var _this = this;
	        var handlers = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            handlers[_i - 1] = arguments[_i];
	        }
	        if (!this._channels[topic]) {
	            this._channels[topic] = [];
	        }
	        handlers.forEach(function (handler) {
	            _this._channels[topic].push(handler);
	        });
	    };
	    /**
	     * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
	     *
	     * @param {string} topic the topic to unsubscribe from
	     * @param {function} handler the event handler
	     *
	     * @return true if a handler was removed
	     */
	    Events.prototype.unsubscribe = function (topic, handler) {
	        var t = this._channels[topic];
	        if (!t) {
	            // Wasn't found, wasn't removed
	            return false;
	        }
	        if (!handler) {
	            // Remove all handlers for this topic
	            delete this._channels[topic];
	            return true;
	        }
	        // We need to find and remove a specific handler
	        var i = t.indexOf(handler);
	        if (i < 0) {
	            // Wasn't found, wasn't removed
	            return false;
	        }
	        t.splice(i, 1);
	        // If the channel is empty now, remove it from the channel map
	        if (!t.length) {
	            delete this._channels[topic];
	        }
	        return true;
	    };
	    /**
	     * Publish an event to the given topic.
	     *
	     * @param {string} topic the topic to publish to
	     * @param {any} eventData the data to send as the event
	     */
	    Events.prototype.publish = function (topic) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var t = this._channels[topic];
	        if (!t) {
	            return null;
	        }
	        var responses = [];
	        t.forEach(function (handler) {
	            responses.push(handler(args));
	        });
	        return responses;
	    };
	    return Events;
	})();
	exports.Events = Events;


/***/ },
/* 166 */
/***/ function(module, exports) {

	var FeatureDetect = (function () {
	    function FeatureDetect() {
	        this._results = {};
	    }
	    FeatureDetect.prototype.run = function (window, document) {
	        for (var name_1 in featureDetects) {
	            this._results[name_1] = featureDetects[name_1](window, document, document.body);
	        }
	    };
	    FeatureDetect.prototype.has = function (featureName) {
	        return !!this._results[featureName];
	    };
	    FeatureDetect.add = function (name, fn) {
	        featureDetects[name] = fn;
	    };
	    return FeatureDetect;
	})();
	exports.FeatureDetect = FeatureDetect;
	var featureDetects = {};
	// FeatureDetect.add('sticky', function(window, document) {
	//   // css position sticky
	//   let ele = document.createElement('div');
	//   ele.style.cssText = 'position:-webkit-sticky;position:sticky';
	//   return ele.style.position.indexOf('sticky') > -1;
	// });
	FeatureDetect.add('hairlines', function (window, document, body) {
	    /**
	    * Hairline Shim
	    * Add the "hairline" CSS class name to the body tag
	    * if the browser supports subpixels.
	    */
	    var canDo = false;
	    if (window.devicePixelRatio >= 2) {
	        var hairlineEle = document.createElement('div');
	        hairlineEle.style.border = '.5px solid transparent';
	        body.appendChild(hairlineEle);
	        if (hairlineEle.offsetHeight === 1) {
	            body.classList.add('hairlines');
	            canDo = true;
	        }
	        body.removeChild(hairlineEle);
	    }
	    return canDo;
	});


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	/**
	 * @private
	 */
	var Form = (function () {
	    function Form() {
	        this._focused = null;
	        this._ids = -1;
	        this._inputs = [];
	        this.focusCtrl(document);
	    }
	    Form.prototype.register = function (input) {
	        this._inputs.push(input);
	    };
	    Form.prototype.deregister = function (input) {
	        var index = this._inputs.indexOf(input);
	        if (index > -1) {
	            this._inputs.splice(index, 1);
	        }
	        if (input === this._focused) {
	            this._focused = null;
	        }
	    };
	    Form.prototype.focusCtrl = function (document) {
	        // raw DOM fun
	        var focusCtrl = document.createElement('focus-ctrl');
	        focusCtrl.setAttribute('aria-hidden', true);
	        this._blur = document.createElement('button');
	        this._blur.tabIndex = -1;
	        focusCtrl.appendChild(this._blur);
	        document.body.appendChild(focusCtrl);
	    };
	    Form.prototype.focusOut = function () {
	        void 0;
	        var activeElement = document.activeElement;
	        if (activeElement) {
	            activeElement.blur();
	        }
	        this._blur.focus();
	    };
	    Form.prototype.setAsFocused = function (input) {
	        this._focused = input;
	    };
	    /**
	     * Focuses the next input element, if it exists.
	     */
	    Form.prototype.tabFocus = function (currentInput) {
	        var index = this._inputs.indexOf(currentInput);
	        if (index > -1 && (index + 1) < this._inputs.length) {
	            var nextInput = this._inputs[index + 1];
	            if (nextInput !== this._focused) {
	                void 0;
	                return nextInput.initFocus();
	            }
	        }
	        index = this._inputs.indexOf(this._focused);
	        if (index > 0) {
	            var previousInput = this._inputs[index - 1];
	            if (previousInput) {
	                void 0;
	                previousInput.initFocus();
	            }
	        }
	    };
	    Form.prototype.nextId = function () {
	        return ++this._ids;
	    };
	    Form = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Form);
	    return Form;
	})();
	exports.Form = Form;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var browser_1 = __webpack_require__(169);
	var config_1 = __webpack_require__(161);
	var click_block_1 = __webpack_require__(160);
	/**
	 * App utility service.  Allows you to look up components that have been
	 * registered using the [Id directive](../Id/).
	 */
	var IonicApp = (function () {
	    function IonicApp(_config, _clickBlock, _zone) {
	        this._config = _config;
	        this._clickBlock = _clickBlock;
	        this._zone = _zone;
	        this._cmps = {};
	        this._disTime = 0;
	        this._scrollTime = 0;
	        this._title = '';
	        this._titleSrv = new browser_1.Title();
	        this._isProd = false;
	    }
	    /**
	     * Sets the document title.
	     * @param {string} val  Value to set the document title to.
	     */
	    IonicApp.prototype.setTitle = function (val) {
	        if (val !== this._title) {
	            this._title = val;
	            this._titleSrv.setTitle(val);
	        }
	    };
	    /**
	     * Returns if the app has been set to be in be in production mode or not.
	     * Production mode can only be set within the config of `@App`. Defaults
	     * to `false`.
	     * @return {boolean}
	     */
	    IonicApp.prototype.isProd = function () {
	        return this._isProd;
	    };
	    /**
	     * @private
	     */
	    IonicApp.prototype.setProd = function (val) {
	        this._isProd = !!val;
	    };
	    /**
	     * @private
	     * Sets if the app is currently enabled or not, meaning if it's
	     * available to accept new user commands. For example, this is set to `false`
	     * while views transition, a modal slides up, an action-sheet
	     * slides up, etc. After the transition completes it is set back to `true`.
	     * @param {boolean} isEnabled
	     * @param {boolean} fallback  When `isEnabled` is set to `false`, this argument
	     * is used to set the maximum number of milliseconds that app will wait until
	     * it will automatically enable the app again. It's basically a fallback incase
	     * something goes wrong during a transition and the app wasn't re-enabled correctly.
	     */
	    IonicApp.prototype.setEnabled = function (isEnabled, duration) {
	        if (duration === void 0) { duration = 700; }
	        this._disTime = (isEnabled ? 0 : Date.now() + duration);
	        if (duration > 32 || isEnabled) {
	            // only do a click block if the duration is longer than XXms
	            this._clickBlock.show(!isEnabled, duration + 64);
	        }
	    };
	    /**
	     * @private
	     * Boolean if the app is actively enabled or not.
	     * @return {boolean}
	     */
	    IonicApp.prototype.isEnabled = function () {
	        return (this._disTime < Date.now());
	    };
	    /**
	     * @private
	     */
	    IonicApp.prototype.setScrolling = function () {
	        this._scrollTime = Date.now();
	    };
	    /**
	     * Boolean if the app is actively scrolling or not.
	     * @return {boolean}
	     */
	    IonicApp.prototype.isScrolling = function () {
	        return (this._scrollTime + 64 > Date.now());
	    };
	    /**
	     * @private
	     * Register a known component with a key, for easy lookups later.
	     * @param {string} id  The id to use to register the component
	     * @param {object} component  The component to register
	     */
	    IonicApp.prototype.register = function (id, component) {
	        this._cmps[id] = component;
	    };
	    /**
	     * @private
	     * Unregister a known component with a key.
	     * @param {string} id  The id to use to unregister
	     */
	    IonicApp.prototype.unregister = function (id) {
	        delete this._cmps[id];
	    };
	    /**
	     * @private
	     * Get a registered component with the given type (returns the first)
	     * @param {object} cls the type to search for
	     * @return {object} the matching component, or undefined if none was found
	     */
	    IonicApp.prototype.getRegisteredComponent = function (cls) {
	        for (var key in this._cmps) {
	            var component = this._cmps[key];
	            if (component instanceof cls) {
	                return component;
	            }
	        }
	    };
	    /**
	     * Get the component for the given key.
	     */
	    IonicApp.prototype.getComponent = function (id) {
	        // deprecated warning
	        if (/menu/i.test(id)) {
	            void 0;
	        }
	        return this._cmps[id];
	    };
	    IonicApp = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [config_1.Config, click_block_1.ClickBlock, core_1.NgZone])
	    ], IonicApp);
	    return IonicApp;
	})();
	exports.IonicApp = IonicApp;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var angular_entrypoint_1 = __webpack_require__(170);
	exports.AngularEntrypoint = angular_entrypoint_1.AngularEntrypoint;
	var browser_common_1 = __webpack_require__(171);
	exports.BROWSER_PROVIDERS = browser_common_1.BROWSER_PROVIDERS;
	exports.ELEMENT_PROBE_PROVIDERS = browser_common_1.ELEMENT_PROBE_PROVIDERS;
	exports.ELEMENT_PROBE_PROVIDERS_PROD_MODE = browser_common_1.ELEMENT_PROBE_PROVIDERS_PROD_MODE;
	exports.inspectNativeElement = browser_common_1.inspectNativeElement;
	exports.BrowserDomAdapter = browser_common_1.BrowserDomAdapter;
	exports.By = browser_common_1.By;
	exports.Title = browser_common_1.Title;
	exports.DOCUMENT = browser_common_1.DOCUMENT;
	exports.enableDebugTools = browser_common_1.enableDebugTools;
	exports.disableDebugTools = browser_common_1.disableDebugTools;
	var lang_1 = __webpack_require__(10);
	var browser_common_2 = __webpack_require__(171);
	var compiler_1 = __webpack_require__(245);
	var core_1 = __webpack_require__(7);
	var reflection_capabilities_1 = __webpack_require__(23);
	var xhr_impl_1 = __webpack_require__(233);
	var compiler_2 = __webpack_require__(245);
	var di_1 = __webpack_require__(11);
	/**
	 * An array of providers that should be passed into `application()` when bootstrapping a component.
	 */
	exports.BROWSER_APP_PROVIDERS = lang_1.CONST_EXPR([
	    browser_common_2.BROWSER_APP_COMMON_PROVIDERS,
	    compiler_1.COMPILER_PROVIDERS,
	    new di_1.Provider(compiler_2.XHR, { useClass: xhr_impl_1.XHRImpl }),
	]);
	/**
	 * Bootstrapping for Angular applications.
	 *
	 * You instantiate an Angular application by explicitly specifying a component to use
	 * as the root component for your application via the `bootstrap()` method.
	 *
	 * ## Simple Example
	 *
	 * Assuming this `index.html`:
	 *
	 * ```html
	 * <html>
	 *   <!-- load Angular script tags here. -->
	 *   <body>
	 *     <my-app>loading...</my-app>
	 *   </body>
	 * </html>
	 * ```
	 *
	 * An application is bootstrapped inside an existing browser DOM, typically `index.html`.
	 * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is
	 * mainly for security reasons, as well as architectural changes in Angular 2. This means
	 * that `index.html` can safely be processed using server-side technologies such as
	 * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from
	 * Angular 2 component double-curly `{{ syntax }}`.
	 *
	 * We can use this script code:
	 *
	 * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}
	 *
	 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its
	 * argument, Angular performs the following tasks:
	 *
	 *  1. It uses the component's `selector` property to locate the DOM element which needs
	 *     to be upgraded into the angular component.
	 *  2. It creates a new child injector (from the platform injector). Optionally, you can
	 *     also override the injector configuration for an app by invoking `bootstrap` with the
	 *     `componentInjectableBindings` argument.
	 *  3. It creates a new `Zone` and connects it to the angular application's change detection
	 *     domain instance.
	 *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the
	 *     template into it.
	 *  5. It instantiates the specified component.
	 *  6. Finally, Angular performs change detection to apply the initial data providers for the
	 *     application.
	 *
	 *
	 * ## Bootstrapping Multiple Applications
	 *
	 * When working within a browser window, there are many singleton resources: cookies, title,
	 * location, and others. Angular services that represent these resources must likewise be
	 * shared across all Angular applications that occupy the same browser window. For this
	 * reason, Angular creates exactly one global platform object which stores all shared
	 * services, and each angular application injector has the platform injector as its parent.
	 *
	 * Each application has its own private injector as well. When there are multiple
	 * applications on a page, Angular treats each application injector's services as private
	 * to that application.
	 *
	 * ## API
	 *
	 * - `appComponentType`: The root component which should act as the application. This is
	 *   a reference to a `Type` which is annotated with `@Component(...)`.
	 * - `customProviders`: An additional set of providers that can be added to the
	 *   app injector to override default injection behavior.
	 *
	 * Returns a `Promise` of {@link ComponentRef}.
	 */
	function bootstrap(appComponentType, customProviders) {
	    core_1.reflector.reflectionCapabilities = new reflection_capabilities_1.ReflectionCapabilities();
	    var appProviders = lang_1.isPresent(customProviders) ? [exports.BROWSER_APP_PROVIDERS, customProviders] : exports.BROWSER_APP_PROVIDERS;
	    return core_1.platform(browser_common_2.BROWSER_PROVIDERS).application(appProviders).bootstrap(appComponentType);
	}
	exports.bootstrap = bootstrap;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	/**
	 * Marks a function or method as an Angular 2 entrypoint. Only necessary in Dart code.
	 *
	 * The optional `name` parameter will be reflected in logs when the entry point is processed.
	 *
	 * See [the wiki][] for detailed documentation.
	 * [the wiki]: https://github.com/angular/angular/wiki/Angular-2-Dart-Transformer#entry_points
	 *
	 * ## Example
	 *
	 * ```
	 * @AngularEntrypoint("name-for-debug")
	 * void main() {
	 *   bootstrap(MyComponent);
	 * }
	 * ```
	 */
	var AngularEntrypoint = (function () {
	    function AngularEntrypoint(name) {
	        this.name = name;
	    }
	    AngularEntrypoint = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], AngularEntrypoint);
	    return AngularEntrypoint;
	})();
	exports.AngularEntrypoint = AngularEntrypoint;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var testability_1 = __webpack_require__(88);
	var dom_adapter_1 = __webpack_require__(144);
	var dom_events_1 = __webpack_require__(216);
	var key_events_1 = __webpack_require__(218);
	var hammer_gestures_1 = __webpack_require__(219);
	var dom_tokens_1 = __webpack_require__(221);
	var dom_renderer_1 = __webpack_require__(222);
	var shared_styles_host_1 = __webpack_require__(230);
	var shared_styles_host_2 = __webpack_require__(230);
	var browser_details_1 = __webpack_require__(229);
	var animation_builder_1 = __webpack_require__(223);
	var browser_adapter_1 = __webpack_require__(231);
	var testability_2 = __webpack_require__(235);
	var wtf_init_1 = __webpack_require__(236);
	var event_manager_1 = __webpack_require__(217);
	var common_dom_1 = __webpack_require__(237);
	var dom_tokens_2 = __webpack_require__(221);
	exports.DOCUMENT = dom_tokens_2.DOCUMENT;
	var title_1 = __webpack_require__(241);
	exports.Title = title_1.Title;
	var common_dom_2 = __webpack_require__(237);
	exports.ELEMENT_PROBE_PROVIDERS = common_dom_2.ELEMENT_PROBE_PROVIDERS;
	exports.ELEMENT_PROBE_PROVIDERS_PROD_MODE = common_dom_2.ELEMENT_PROBE_PROVIDERS_PROD_MODE;
	exports.inspectNativeElement = common_dom_2.inspectNativeElement;
	exports.By = common_dom_2.By;
	var browser_adapter_2 = __webpack_require__(231);
	exports.BrowserDomAdapter = browser_adapter_2.BrowserDomAdapter;
	var tools_1 = __webpack_require__(242);
	exports.enableDebugTools = tools_1.enableDebugTools;
	exports.disableDebugTools = tools_1.disableDebugTools;
	/**
	 * A set of providers to initialize the Angular platform in a web browser.
	 *
	 * Used automatically by `bootstrap`, or can be passed to {@link platform}.
	 */
	exports.BROWSER_PROVIDERS = lang_1.CONST_EXPR([
	    core_1.PLATFORM_COMMON_PROVIDERS,
	    new di_1.Provider(core_1.PLATFORM_INITIALIZER, { useValue: initDomAdapter, multi: true }),
	]);
	function _exceptionHandler() {
	    // !IS_DART is required because we must rethrow exceptions in JS,
	    // but must not rethrow exceptions in Dart
	    return new core_1.ExceptionHandler(dom_adapter_1.DOM, !lang_1.IS_DART);
	}
	function _document() {
	    return dom_adapter_1.DOM.defaultDoc();
	}
	/**
	 * A set of providers to initialize an Angular application in a web browser.
	 *
	 * Used automatically by `bootstrap`, or can be passed to {@link PlatformRef.application}.
	 */
	exports.BROWSER_APP_COMMON_PROVIDERS = lang_1.CONST_EXPR([
	    core_1.APPLICATION_COMMON_PROVIDERS,
	    common_1.FORM_PROVIDERS,
	    new di_1.Provider(core_1.PLATFORM_PIPES, { useValue: common_1.COMMON_PIPES, multi: true }),
	    new di_1.Provider(core_1.PLATFORM_DIRECTIVES, { useValue: common_1.COMMON_DIRECTIVES, multi: true }),
	    new di_1.Provider(core_1.ExceptionHandler, { useFactory: _exceptionHandler, deps: [] }),
	    new di_1.Provider(dom_tokens_1.DOCUMENT, { useFactory: _document, deps: [] }),
	    new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: dom_events_1.DomEventsPlugin, multi: true }),
	    new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: key_events_1.KeyEventsPlugin, multi: true }),
	    new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }),
	    new di_1.Provider(dom_renderer_1.DomRootRenderer, { useClass: dom_renderer_1.DomRootRenderer_ }),
	    new di_1.Provider(core_1.RootRenderer, { useExisting: dom_renderer_1.DomRootRenderer }),
	    new di_1.Provider(shared_styles_host_2.SharedStylesHost, { useExisting: shared_styles_host_1.DomSharedStylesHost }),
	    shared_styles_host_1.DomSharedStylesHost,
	    testability_1.Testability,
	    browser_details_1.BrowserDetails,
	    animation_builder_1.AnimationBuilder,
	    event_manager_1.EventManager,
	    common_dom_1.ELEMENT_PROBE_PROVIDERS
	]);
	function initDomAdapter() {
	    browser_adapter_1.BrowserDomAdapter.makeCurrent();
	    wtf_init_1.wtfInit();
	    testability_2.BrowserGetTestability.init();
	}
	exports.initDomAdapter = initDomAdapter;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(173));
	__export(__webpack_require__(183));
	__export(__webpack_require__(191));
	__export(__webpack_require__(215));


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module provides a set of common Pipes.
	 */
	var async_pipe_1 = __webpack_require__(174);
	var uppercase_pipe_1 = __webpack_require__(176);
	var lowercase_pipe_1 = __webpack_require__(177);
	var json_pipe_1 = __webpack_require__(178);
	var slice_pipe_1 = __webpack_require__(179);
	var date_pipe_1 = __webpack_require__(180);
	var number_pipe_1 = __webpack_require__(182);
	var lang_1 = __webpack_require__(10);
	var async_pipe_2 = __webpack_require__(174);
	exports.AsyncPipe = async_pipe_2.AsyncPipe;
	var date_pipe_2 = __webpack_require__(180);
	exports.DatePipe = date_pipe_2.DatePipe;
	var json_pipe_2 = __webpack_require__(178);
	exports.JsonPipe = json_pipe_2.JsonPipe;
	var slice_pipe_2 = __webpack_require__(179);
	exports.SlicePipe = slice_pipe_2.SlicePipe;
	var lowercase_pipe_2 = __webpack_require__(177);
	exports.LowerCasePipe = lowercase_pipe_2.LowerCasePipe;
	var number_pipe_2 = __webpack_require__(182);
	exports.NumberPipe = number_pipe_2.NumberPipe;
	exports.DecimalPipe = number_pipe_2.DecimalPipe;
	exports.PercentPipe = number_pipe_2.PercentPipe;
	exports.CurrencyPipe = number_pipe_2.CurrencyPipe;
	var uppercase_pipe_2 = __webpack_require__(176);
	exports.UpperCasePipe = uppercase_pipe_2.UpperCasePipe;
	/**
	 * A collection of Angular core pipes that are likely to be used in each and every
	 * application.
	 *
	 * This collection can be used to quickly enumerate all the built-in pipes in the `pipes`
	 * property of the `@Component` or `@View` decorators.
	 */
	exports.COMMON_PIPES = lang_1.CONST_EXPR([
	    async_pipe_1.AsyncPipe,
	    uppercase_pipe_1.UpperCasePipe,
	    lowercase_pipe_1.LowerCasePipe,
	    json_pipe_1.JsonPipe,
	    slice_pipe_1.SlicePipe,
	    number_pipe_1.DecimalPipe,
	    number_pipe_1.PercentPipe,
	    number_pipe_1.CurrencyPipe,
	    date_pipe_1.DatePipe
	]);


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	var core_1 = __webpack_require__(7);
	var invalid_pipe_argument_exception_1 = __webpack_require__(175);
	var ObservableStrategy = (function () {
	    function ObservableStrategy() {
	    }
	    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function (e) { throw e; });
	    };
	    ObservableStrategy.prototype.dispose = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
	    ObservableStrategy.prototype.onDestroy = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
	    return ObservableStrategy;
	})();
	var PromiseStrategy = (function () {
	    function PromiseStrategy() {
	    }
	    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.then(updateLatestValue);
	    };
	    PromiseStrategy.prototype.dispose = function (subscription) { };
	    PromiseStrategy.prototype.onDestroy = function (subscription) { };
	    return PromiseStrategy;
	})();
	var _promiseStrategy = new PromiseStrategy();
	var _observableStrategy = new ObservableStrategy();
	/**
	 * The `async` pipe subscribes to an Observable or Promise and returns the latest value it has
	 * emitted.
	 * When a new value is emitted, the `async` pipe marks the component to be checked for changes.
	 *
	 * ### Example
	 *
	 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	 * promise.
	 *
	 * {@example core/pipes/ts/async_pipe/async_pipe_example.ts region='AsyncPipe'}
	 *
	 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	 * to the view. Every 500ms, the `time` Observable updates the view with the current time.
	 *
	 * ```typescript
	 * ```
	 */
	var AsyncPipe = (function () {
	    function AsyncPipe(_ref) {
	        /** @internal */
	        this._latestValue = null;
	        /** @internal */
	        this._latestReturnedValue = null;
	        /** @internal */
	        this._subscription = null;
	        /** @internal */
	        this._obj = null;
	        this._strategy = null;
	        this._ref = _ref;
	    }
	    AsyncPipe.prototype.ngOnDestroy = function () {
	        if (lang_1.isPresent(this._subscription)) {
	            this._dispose();
	        }
	    };
	    AsyncPipe.prototype.transform = function (obj, args) {
	        if (lang_1.isBlank(this._obj)) {
	            if (lang_1.isPresent(obj)) {
	                this._subscribe(obj);
	            }
	            this._latestReturnedValue = this._latestValue;
	            return this._latestValue;
	        }
	        if (obj !== this._obj) {
	            this._dispose();
	            return this.transform(obj);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        else {
	            this._latestReturnedValue = this._latestValue;
	            return core_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    /** @internal */
	    AsyncPipe.prototype._subscribe = function (obj) {
	        var _this = this;
	        this._obj = obj;
	        this._strategy = this._selectStrategy(obj);
	        this._subscription =
	            this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	    };
	    /** @internal */
	    AsyncPipe.prototype._selectStrategy = function (obj) {
	        if (lang_1.isPromise(obj)) {
	            return _promiseStrategy;
	        }
	        else if (async_1.ObservableWrapper.isObservable(obj)) {
	            return _observableStrategy;
	        }
	        else {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
	        }
	    };
	    /** @internal */
	    AsyncPipe.prototype._dispose = function () {
	        this._strategy.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	    };
	    /** @internal */
	    AsyncPipe.prototype._updateLatestValue = function (async, value) {
	        if (async === this._obj) {
	            this._latestValue = value;
	            this._ref.markForCheck();
	        }
	    };
	    AsyncPipe = __decorate([
	        core_1.Pipe({ name: 'async', pure: false }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [core_1.ChangeDetectorRef])
	    ], AsyncPipe);
	    return AsyncPipe;
	})();
	exports.AsyncPipe = AsyncPipe;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var InvalidPipeArgumentException = (function (_super) {
	    __extends(InvalidPipeArgumentException, _super);
	    function InvalidPipeArgumentException(type, value) {
	        _super.call(this, "Invalid argument '" + value + "' for pipe '" + lang_1.stringify(type) + "'");
	    }
	    return InvalidPipeArgumentException;
	})(exceptions_1.BaseException);
	exports.InvalidPipeArgumentException = InvalidPipeArgumentException;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	var invalid_pipe_argument_exception_1 = __webpack_require__(175);
	/**
	 * Implements uppercase transforms to text.
	 *
	 * ### Example
	 *
	 * {@example core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example.ts region='LowerUpperPipe'}
	 */
	var UpperCasePipe = (function () {
	    function UpperCasePipe() {
	    }
	    UpperCasePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(value))
	            return value;
	        if (!lang_1.isString(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
	        }
	        return value.toUpperCase();
	    };
	    UpperCasePipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'uppercase' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], UpperCasePipe);
	    return UpperCasePipe;
	})();
	exports.UpperCasePipe = UpperCasePipe;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	var invalid_pipe_argument_exception_1 = __webpack_require__(175);
	/**
	 * Transforms text to lowercase.
	 *
	 * ### Example
	 *
	 * {@example core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example.ts region='LowerUpperPipe'}
	 */
	var LowerCasePipe = (function () {
	    function LowerCasePipe() {
	    }
	    LowerCasePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(value))
	            return value;
	        if (!lang_1.isString(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
	        }
	        return value.toLowerCase();
	    };
	    LowerCasePipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'lowercase' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], LowerCasePipe);
	    return LowerCasePipe;
	})();
	exports.LowerCasePipe = LowerCasePipe;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	/**
	 * Transforms any input value using `JSON.stringify`. Useful for debugging.
	 *
	 * ### Example
	 * {@example core/pipes/ts/json_pipe/json_pipe_example.ts region='JsonPipe'}
	 */
	var JsonPipe = (function () {
	    function JsonPipe() {
	    }
	    JsonPipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        return lang_1.Json.stringify(value);
	    };
	    JsonPipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'json', pure: false }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], JsonPipe);
	    return JsonPipe;
	})();
	exports.JsonPipe = JsonPipe;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var core_1 = __webpack_require__(7);
	var invalid_pipe_argument_exception_1 = __webpack_require__(175);
	/**
	 * Creates a new List or String containing only a subset (slice) of the
	 * elements.
	 *
	 * The starting index of the subset to return is specified by the `start` parameter.
	 *
	 * The ending index of the subset to return is specified by the optional `end` parameter.
	 *
	 * ### Usage
	 *
	 *     expression | slice:start[:end]
	 *
	 * All behavior is based on the expected behavior of the JavaScript API
	 * Array.prototype.slice() and String.prototype.slice()
	 *
	 * Where the input expression is a [List] or [String], and `start` is:
	 *
	 * - **a positive integer**: return the item at _start_ index and all items after
	 * in the list or string expression.
	 * - **a negative integer**: return the item at _start_ index from the end and all items after
	 * in the list or string expression.
	 * - **`|start|` greater than the size of the expression**: return an empty list or string.
	 * - **`|start|` negative greater than the size of the expression**: return entire list or
	 * string expression.
	 *
	 * and where `end` is:
	 *
	 * - **omitted**: return all items until the end of the input
	 * - **a positive integer**: return all items before _end_ index of the list or string
	 * expression.
	 * - **a negative integer**: return all items before _end_ index from the end of the list
	 * or string expression.
	 *
	 * When operating on a [List], the returned list is always a copy even when all
	 * the elements are being returned.
	 *
	 * ## List Example
	 *
	 * This `ngFor` example:
	 *
	 * {@example core/pipes/ts/slice_pipe/slice_pipe_example.ts region='SlicePipe_list'}
	 *
	 * produces the following:
	 *
	 *     <li>b</li>
	 *     <li>c</li>
	 *
	 * ## String Examples
	 *
	 * {@example core/pipes/ts/slice_pipe/slice_pipe_example.ts region='SlicePipe_string'}
	 */
	var SlicePipe = (function () {
	    function SlicePipe() {
	    }
	    SlicePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(args) || args.length == 0) {
	            throw new exceptions_1.BaseException('Slice pipe requires one argument');
	        }
	        if (!this.supports(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(SlicePipe, value);
	        }
	        if (lang_1.isBlank(value))
	            return value;
	        var start = args[0];
	        var end = args.length > 1 ? args[1] : null;
	        if (lang_1.isString(value)) {
	            return lang_1.StringWrapper.slice(value, start, end);
	        }
	        return collection_1.ListWrapper.slice(value, start, end);
	    };
	    SlicePipe.prototype.supports = function (obj) { return lang_1.isString(obj) || lang_1.isArray(obj); };
	    SlicePipe = __decorate([
	        core_1.Pipe({ name: 'slice', pure: false }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], SlicePipe);
	    return SlicePipe;
	})();
	exports.SlicePipe = SlicePipe;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var intl_1 = __webpack_require__(181);
	var core_1 = __webpack_require__(7);
	var collection_1 = __webpack_require__(17);
	var invalid_pipe_argument_exception_1 = __webpack_require__(175);
	// TODO: move to a global configurable location along with other i18n components.
	var defaultLocale = 'en-US';
	/**
	 * Formats a date value to a string based on the requested format.
	 *
	 * WARNINGS:
	 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	 *   Instead users should treat the date as an immutable object and change the reference when the
	 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	 *   which would be an expensive operation).
	 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	 *   browsers.
	 *
	 * ## Usage
	 *
	 *     expression | date[:format]
	 *
	 * where `expression` is a date object or a number (milliseconds since UTC epoch) and
	 * `format` indicates which date/time components to include:
	 *
	 *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |
	 *  |-----------|:------:|--------------|-------------------|-----------|-----------|
	 *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |
	 *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |
	 *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	 *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |
	 *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	 *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |
	 *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|
	 *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |
	 *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |
	 *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |
	 *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |
	 *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |
	 *
	 * In javascript, only the components specified will be respected (not the ordering,
	 * punctuations, ...) and details of the formatting will be dependent on the locale.
	 * On the other hand in Dart version, you can also include quoted text as well as some extra
	 * date/time components such as quarter. For more information see:
	 * https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/intl/intl.DateFormat.
	 *
	 * `format` can also be one of the following predefined formats:
	 *
	 *  - `'medium'`: equivalent to `'yMMMdjms'` (e.g. Sep 3, 2010, 12:05:08 PM for en-US)
	 *  - `'short'`: equivalent to `'yMdjm'` (e.g. 9/3/2010, 12:05 PM for en-US)
	 *  - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. Friday, September 3, 2010 for en-US)
	 *  - `'longDate'`: equivalent to `'yMMMMd'` (e.g. September 3, 2010)
	 *  - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. Sep 3, 2010 for en-US)
	 *  - `'shortDate'`: equivalent to `'yMd'` (e.g. 9/3/2010 for en-US)
	 *  - `'mediumTime'`: equivalent to `'jms'` (e.g. 12:05:08 PM for en-US)
	 *  - `'shortTime'`: equivalent to `'jm'` (e.g. 12:05 PM for en-US)
	 *
	 * Timezone of the formatted text will be the local system timezone of the end-users machine.
	 *
	 * ### Examples
	 *
	 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	 * in the _local_ time and locale is 'en-US':
	 *
	 * ```
	 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	 * ```
	 *
	 * {@example core/pipes/ts/date_pipe/date_pipe_example.ts region='DatePipe'}
	 */
	var DatePipe = (function () {
	    function DatePipe() {
	    }
	    DatePipe.prototype.transform = function (value, args) {
	        if (lang_1.isBlank(value))
	            return null;
	        if (!this.supports(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
	        }
	        var pattern = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'mediumDate';
	        if (lang_1.isNumber(value)) {
	            value = lang_1.DateWrapper.fromMillis(value);
	        }
	        if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
	            pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
	        }
	        return intl_1.DateFormatter.format(value, defaultLocale, pattern);
	    };
	    DatePipe.prototype.supports = function (obj) { return lang_1.isDate(obj) || lang_1.isNumber(obj); };
	    /** @internal */
	    DatePipe._ALIASES = {
	        'medium': 'yMMMdjms',
	        'short': 'yMdjm',
	        'fullDate': 'yMMMMEEEEd',
	        'longDate': 'yMMMMd',
	        'mediumDate': 'yMMMd',
	        'shortDate': 'yMd',
	        'mediumTime': 'jms',
	        'shortTime': 'jm'
	    };
	    DatePipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'date', pure: true }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DatePipe);
	    return DatePipe;
	})();
	exports.DatePipe = DatePipe;


/***/ },
/* 181 */
/***/ function(module, exports) {

	'use strict';(function (NumberFormatStyle) {
	    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
	    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
	    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
	})(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
	var NumberFormatStyle = exports.NumberFormatStyle;
	var NumberFormatter = (function () {
	    function NumberFormatter() {
	    }
	    NumberFormatter.format = function (num, locale, style, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
	        var intlOptions = {
	            minimumIntegerDigits: minimumIntegerDigits,
	            minimumFractionDigits: minimumFractionDigits,
	            maximumFractionDigits: maximumFractionDigits
	        };
	        intlOptions.style = NumberFormatStyle[style].toLowerCase();
	        if (style == NumberFormatStyle.Currency) {
	            intlOptions.currency = currency;
	            intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	        }
	        return new Intl.NumberFormat(locale, intlOptions).format(num);
	    };
	    return NumberFormatter;
	})();
	exports.NumberFormatter = NumberFormatter;
	function digitCondition(len) {
	    return len == 2 ? '2-digit' : 'numeric';
	}
	function nameCondition(len) {
	    return len < 4 ? 'short' : 'long';
	}
	function extractComponents(pattern) {
	    var ret = {};
	    var i = 0, j;
	    while (i < pattern.length) {
	        j = i;
	        while (j < pattern.length && pattern[j] == pattern[i])
	            j++;
	        var len = j - i;
	        switch (pattern[i]) {
	            case 'G':
	                ret.era = nameCondition(len);
	                break;
	            case 'y':
	                ret.year = digitCondition(len);
	                break;
	            case 'M':
	                if (len >= 3)
	                    ret.month = nameCondition(len);
	                else
	                    ret.month = digitCondition(len);
	                break;
	            case 'd':
	                ret.day = digitCondition(len);
	                break;
	            case 'E':
	                ret.weekday = nameCondition(len);
	                break;
	            case 'j':
	                ret.hour = digitCondition(len);
	                break;
	            case 'h':
	                ret.hour = digitCondition(len);
	                ret.hour12 = true;
	                break;
	            case 'H':
	                ret.hour = digitCondition(len);
	                ret.hour12 = false;
	                break;
	            case 'm':
	                ret.minute = digitCondition(len);
	                break;
	            case 's':
	                ret.second = digitCondition(len);
	                break;
	            case 'z':
	                ret.timeZoneName = 'long';
	                break;
	            case 'Z':
	                ret.timeZoneName = 'short';
	                break;
	        }
	        i = j;
	    }
	    return ret;
	}
	var dateFormatterCache = new Map();
	var DateFormatter = (function () {
	    function DateFormatter() {
	    }
	    DateFormatter.format = function (date, locale, pattern) {
	        var key = locale + pattern;
	        if (dateFormatterCache.has(key)) {
	            return dateFormatterCache.get(key).format(date);
	        }
	        var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
	        dateFormatterCache.set(key, formatter);
	        return formatter.format(date);
	    };
	    return DateFormatter;
	})();
	exports.DateFormatter = DateFormatter;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var intl_1 = __webpack_require__(181);
	var core_1 = __webpack_require__(7);
	var collection_1 = __webpack_require__(17);
	var invalid_pipe_argument_exception_1 = __webpack_require__(175);
	var defaultLocale = 'en-US';
	var _re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
	/**
	 * Internal base class for numeric pipes.
	 */
	var NumberPipe = (function () {
	    function NumberPipe() {
	    }
	    /** @internal */
	    NumberPipe._format = function (value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (lang_1.isBlank(value))
	            return null;
	        if (!lang_1.isNumber(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
	        }
	        var minInt = 1, minFraction = 0, maxFraction = 3;
	        if (lang_1.isPresent(digits)) {
	            var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
	            if (lang_1.isBlank(parts)) {
	                throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
	            }
	            if (lang_1.isPresent(parts[1])) {
	                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (lang_1.isPresent(parts[3])) {
	                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (lang_1.isPresent(parts[5])) {
	                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return intl_1.NumberFormatter.format(value, defaultLocale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol
	        });
	    };
	    NumberPipe = __decorate([
	        lang_1.CONST(),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NumberPipe);
	    return NumberPipe;
	})();
	exports.NumberPipe = NumberPipe;
	/**
	 * WARNING: this pipe uses the Internationalization API.
	 * Therefore it is only reliable in Chrome and Opera browsers.
	 *
	 * Formats a number as local text. i.e. group sizing and separator and other locale-specific
	 * configurations are based on the active locale.
	 *
	 * ### Usage
	 *
	 *     expression | number[:digitInfo]
	 *
	 * where `expression` is a number and `digitInfo` has the following format:
	 *
	 *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
	 *
	 * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.
	 * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.
	 * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.
	 *
	 * For more information on the acceptable range for each of these numbers and other
	 * details see your native internationalization library.
	 *
	 * ### Example
	 *
	 * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='NumberPipe'}
	 */
	var DecimalPipe = (function (_super) {
	    __extends(DecimalPipe, _super);
	    function DecimalPipe() {
	        _super.apply(this, arguments);
	    }
	    DecimalPipe.prototype.transform = function (value, args) {
	        var digits = collection_1.ListWrapper.first(args);
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.Decimal, digits);
	    };
	    DecimalPipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'number' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DecimalPipe);
	    return DecimalPipe;
	})(NumberPipe);
	exports.DecimalPipe = DecimalPipe;
	/**
	 * WARNING: this pipe uses the Internationalization API.
	 * Therefore it is only reliable in Chrome and Opera browsers.
	 *
	 * Formats a number as local percent.
	 *
	 * ### Usage
	 *
	 *     expression | percent[:digitInfo]
	 *
	 * For more information about `digitInfo` see {@link DecimalPipe}
	 *
	 * ### Example
	 *
	 * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='PercentPipe'}
	 */
	var PercentPipe = (function (_super) {
	    __extends(PercentPipe, _super);
	    function PercentPipe() {
	        _super.apply(this, arguments);
	    }
	    PercentPipe.prototype.transform = function (value, args) {
	        var digits = collection_1.ListWrapper.first(args);
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.Percent, digits);
	    };
	    PercentPipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'percent' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], PercentPipe);
	    return PercentPipe;
	})(NumberPipe);
	exports.PercentPipe = PercentPipe;
	/**
	 * WARNING: this pipe uses the Internationalization API.
	 * Therefore it is only reliable in Chrome and Opera browsers.
	 *
	 * Formats a number as local currency.
	 *
	 * ### Usage
	 *
	 *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]
	 *
	 * where `currencyCode` is the ISO 4217 currency code, such as "USD" for the US dollar and
	 * "EUR" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency
	 * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value
	 * is `false`.
	 * For more information about `digitInfo` see {@link DecimalPipe}
	 *
	 * ### Example
	 *
	 * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='CurrencyPipe'}
	 */
	var CurrencyPipe = (function (_super) {
	    __extends(CurrencyPipe, _super);
	    function CurrencyPipe() {
	        _super.apply(this, arguments);
	    }
	    CurrencyPipe.prototype.transform = function (value, args) {
	        var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'USD';
	        var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
	        var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	    };
	    CurrencyPipe = __decorate([
	        lang_1.CONST(),
	        core_1.Pipe({ name: 'currency' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], CurrencyPipe);
	    return CurrencyPipe;
	})(NumberPipe);
	exports.CurrencyPipe = CurrencyPipe;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @description
	 * Common directives shipped with Angular.
	 */
	var ng_class_1 = __webpack_require__(184);
	exports.NgClass = ng_class_1.NgClass;
	var ng_for_1 = __webpack_require__(185);
	exports.NgFor = ng_for_1.NgFor;
	var ng_if_1 = __webpack_require__(186);
	exports.NgIf = ng_if_1.NgIf;
	var ng_style_1 = __webpack_require__(187);
	exports.NgStyle = ng_style_1.NgStyle;
	var ng_switch_1 = __webpack_require__(188);
	exports.NgSwitch = ng_switch_1.NgSwitch;
	exports.NgSwitchWhen = ng_switch_1.NgSwitchWhen;
	exports.NgSwitchDefault = ng_switch_1.NgSwitchDefault;
	__export(__webpack_require__(189));
	var core_directives_1 = __webpack_require__(190);
	exports.CORE_DIRECTIVES = core_directives_1.CORE_DIRECTIVES;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	var collection_1 = __webpack_require__(17);
	/**
	 * The `NgClass` directive conditionally adds and removes CSS classes on an HTML element based on
	 * an expression's evaluation result.
	 *
	 * The result of an expression evaluation is interpreted differently depending on type of
	 * the expression evaluation result:
	 * - `string` - all the CSS classes listed in a string (space delimited) are added
	 * - `Array` - all the CSS classes (Array elements) are added
	 * - `Object` - each key corresponds to a CSS class name while values are interpreted as expressions
	 * evaluating to `Boolean`. If a given expression evaluates to `true` a corresponding CSS class
	 * is added - otherwise it is removed.
	 *
	 * While the `NgClass` directive can interpret expressions evaluating to `string`, `Array`
	 * or `Object`, the `Object`-based version is the most often used and has an advantage of keeping
	 * all the CSS class names in a template.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/a4YdtmWywhJ33uqfpPPn?p=preview)):
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {NgClass} from 'angular2/common';
	 *
	 * @Component({
	 *   selector: 'toggle-button',
	 *   inputs: ['isDisabled'],
	 *   template: `
	 *      <div class="button" [ngClass]="{active: isOn, disabled: isDisabled}"
	 *          (click)="toggle(!isOn)">
	 *          Click me!
	 *      </div>`,
	 *   styles: [`
	 *     .button {
	 *       width: 120px;
	 *       border: medium solid black;
	 *     }
	 *
	 *     .active {
	 *       background-color: red;
	 *    }
	 *
	 *     .disabled {
	 *       color: gray;
	 *       border: medium solid gray;
	 *     }
	 *   `]
	 *   directives: [NgClass]
	 * })
	 * class ToggleButton {
	 *   isOn = false;
	 *   isDisabled = false;
	 *
	 *   toggle(newState) {
	 *     if (!this.isDisabled) {
	 *       this.isOn = newState;
	 *     }
	 *   }
	 * }
	 * ```
	 */
	var NgClass = (function () {
	    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	        this._iterableDiffers = _iterableDiffers;
	        this._keyValueDiffers = _keyValueDiffers;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	        this._initialClasses = [];
	    }
	    Object.defineProperty(NgClass.prototype, "initialClasses", {
	        set: function (v) {
	            this._applyInitialClasses(true);
	            this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(' ') : [];
	            this._applyInitialClasses(false);
	            this._applyClasses(this._rawClass, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgClass.prototype, "rawClass", {
	        set: function (v) {
	            this._cleanupClasses(this._rawClass);
	            if (lang_1.isString(v)) {
	                v = v.split(' ');
	            }
	            this._rawClass = v;
	            if (lang_1.isPresent(v)) {
	                if (collection_1.isListLikeIterable(v)) {
	                    this._differ = this._iterableDiffers.find(v).create(null);
	                    this._mode = 'iterable';
	                }
	                else {
	                    this._differ = this._keyValueDiffers.find(v).create(null);
	                    this._mode = 'keyValue';
	                }
	            }
	            else {
	                this._differ = null;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgClass.prototype.ngDoCheck = function () {
	        if (lang_1.isPresent(this._differ)) {
	            var changes = this._differ.diff(this._rawClass);
	            if (lang_1.isPresent(changes)) {
	                if (this._mode == 'iterable') {
	                    this._applyIterableChanges(changes);
	                }
	                else {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        }
	    };
	    NgClass.prototype.ngOnDestroy = function () { this._cleanupClasses(this._rawClass); };
	    NgClass.prototype._cleanupClasses = function (rawClassVal) {
	        this._applyClasses(rawClassVal, true);
	        this._applyInitialClasses(false);
	    };
	    NgClass.prototype._applyKeyValueChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    NgClass.prototype._applyIterableChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { _this._toggleClass(record.item, true); });
	        changes.forEachRemovedItem(function (record) { _this._toggleClass(record.item, false); });
	    };
	    NgClass.prototype._applyInitialClasses = function (isCleanup) {
	        var _this = this;
	        this._initialClasses.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
	    };
	    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	        var _this = this;
	        if (lang_1.isPresent(rawClassVal)) {
	            if (lang_1.isArray(rawClassVal)) {
	                rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
	            }
	            else if (rawClassVal instanceof Set) {
	                rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
	            }
	            else {
	                collection_1.StringMapWrapper.forEach(rawClassVal, function (expVal, className) {
	                    if (expVal)
	                        _this._toggleClass(className, !isCleanup);
	                });
	            }
	        }
	    };
	    NgClass.prototype._toggleClass = function (className, enabled) {
	        className = className.trim();
	        if (className.length > 0) {
	            if (className.indexOf(' ') > -1) {
	                var classes = className.split(/\s+/g);
	                for (var i = 0, len = classes.length; i < len; i++) {
	                    this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
	                }
	            }
	            else {
	                this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
	            }
	        }
	    };
	    NgClass = __decorate([
	        core_1.Directive({ selector: '[ngClass]', inputs: ['rawClass: ngClass', 'initialClasses: class'] }), 
	        __metadata('design:paramtypes', [core_1.IterableDiffers, core_1.KeyValueDiffers, core_1.ElementRef, core_1.Renderer])
	    ], NgClass);
	    return NgClass;
	})();
	exports.NgClass = NgClass;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	/**
	 * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	 * each instantiated template inherits from the outer context with the given loop variable set
	 * to the current item from the iterable.
	 *
	 * # Local Variables
	 *
	 * `NgFor` provides several exported values that can be aliased to local variables:
	 *
	 * * `index` will be set to the current loop iteration for each template context.
	 * * `last` will be set to a boolean value indicating whether the item is the last one in the
	 *   iteration.
	 * * `even` will be set to a boolean value indicating whether this item has an even index.
	 * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	 *
	 * # Change Propagation
	 *
	 * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 * * Otherwise, the DOM element for that item will remain the same.
	 *
	 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	 * those changes in the DOM. This has important implications for animations and any stateful
	 * controls
	 * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	 * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	 * as user input.
	 *
	 * It is possible for the identities of elements in the iterator to change while the data does not.
	 * This can happen, for example, if the iterator produced from an RPC to the server, and that
	 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	 * elements were deleted and all new elements inserted). This is an expensive operation and should
	 * be avoided if possible.
	 *
	 * # Syntax
	 *
	 * - `<li *ngFor="#item of items; #i = index">...</li>`
	 * - `<li template="ngFor #item of items; #i = index">...</li>`
	 * - `<template ngFor #item [ngForOf]="items" #i="index"><li>...</li></template>`
	 *
	 * ### Example
	 *
	 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	 * example.
	 */
	var NgFor = (function () {
	    function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
	        this._viewContainer = _viewContainer;
	        this._templateRef = _templateRef;
	        this._iterableDiffers = _iterableDiffers;
	        this._cdr = _cdr;
	    }
	    Object.defineProperty(NgFor.prototype, "ngForOf", {
	        set: function (value) {
	            this._ngForOf = value;
	            if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
	                this._differ = this._iterableDiffers.find(value).create(this._cdr, this._ngForTrackBy);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	        set: function (value) {
	            if (lang_1.isPresent(value)) {
	                this._templateRef = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
	        set: function (value) { this._ngForTrackBy = value; },
	        enumerable: true,
	        configurable: true
	    });
	    NgFor.prototype.ngDoCheck = function () {
	        if (lang_1.isPresent(this._differ)) {
	            var changes = this._differ.diff(this._ngForOf);
	            if (lang_1.isPresent(changes))
	                this._applyChanges(changes);
	        }
	    };
	    NgFor.prototype._applyChanges = function (changes) {
	        var _this = this;
	        // TODO(rado): check if change detection can produce a change record that is
	        // easier to consume than current.
	        var recordViewTuples = [];
	        changes.forEachRemovedItem(function (removedRecord) {
	            return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
	        });
	        changes.forEachMovedItem(function (movedRecord) {
	            return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
	        });
	        var insertTuples = this._bulkRemove(recordViewTuples);
	        changes.forEachAddedItem(function (addedRecord) {
	            return insertTuples.push(new RecordViewTuple(addedRecord, null));
	        });
	        this._bulkInsert(insertTuples);
	        for (var i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	        for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
	            var viewRef = this._viewContainer.get(i);
	            viewRef.setLocal('last', i === ilen - 1);
	        }
	        changes.forEachIdentityChange(function (record) {
	            var viewRef = _this._viewContainer.get(record.currentIndex);
	            viewRef.setLocal('\$implicit', record.item);
	        });
	    };
	    NgFor.prototype._perViewChange = function (view, record) {
	        view.setLocal('\$implicit', record.item);
	        view.setLocal('index', record.currentIndex);
	        view.setLocal('even', (record.currentIndex % 2 == 0));
	        view.setLocal('odd', (record.currentIndex % 2 == 1));
	    };
	    NgFor.prototype._bulkRemove = function (tuples) {
	        tuples.sort(function (a, b) { return a.record.previousIndex - b.record.previousIndex; });
	        var movedTuples = [];
	        for (var i = tuples.length - 1; i >= 0; i--) {
	            var tuple = tuples[i];
	            // separate moved views from removed views.
	            if (lang_1.isPresent(tuple.record.currentIndex)) {
	                tuple.view = this._viewContainer.detach(tuple.record.previousIndex);
	                movedTuples.push(tuple);
	            }
	            else {
	                this._viewContainer.remove(tuple.record.previousIndex);
	            }
	        }
	        return movedTuples;
	    };
	    NgFor.prototype._bulkInsert = function (tuples) {
	        tuples.sort(function (a, b) { return a.record.currentIndex - b.record.currentIndex; });
	        for (var i = 0; i < tuples.length; i++) {
	            var tuple = tuples[i];
	            if (lang_1.isPresent(tuple.view)) {
	                this._viewContainer.insert(tuple.view, tuple.record.currentIndex);
	            }
	            else {
	                tuple.view =
	                    this._viewContainer.createEmbeddedView(this._templateRef, tuple.record.currentIndex);
	            }
	        }
	        return tuples;
	    };
	    NgFor = __decorate([
	        core_1.Directive({ selector: '[ngFor][ngForOf]', inputs: ['ngForTrackBy', 'ngForOf', 'ngForTemplate'] }), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, core_1.IterableDiffers, core_1.ChangeDetectorRef])
	    ], NgFor);
	    return NgFor;
	})();
	exports.NgFor = NgFor;
	var RecordViewTuple = (function () {
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	})();


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	/**
	 * Removes or recreates a portion of the DOM tree based on an {expression}.
	 *
	 * If the expression assigned to `ngIf` evaluates to a false value then the element
	 * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	 *
	 * ```
	 * <div *ngIf="errorCount > 0" class="error">
	 *   <!-- Error message displayed when the errorCount property on the current context is greater
	 * than 0. -->
	 *   {{errorCount}} errors detected
	 * </div>
	 * ```
	 *
	 * ### Syntax
	 *
	 * - `<div *ngIf="condition">...</div>`
	 * - `<div template="ngIf condition">...</div>`
	 * - `<template [ngIf]="condition"><div>...</div></template>`
	 */
	var NgIf = (function () {
	    function NgIf(_viewContainer, _templateRef) {
	        this._viewContainer = _viewContainer;
	        this._templateRef = _templateRef;
	        this._prevCondition = null;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        set: function (newCondition /* boolean */) {
	            if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
	                this._prevCondition = true;
	                this._viewContainer.createEmbeddedView(this._templateRef);
	            }
	            else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
	                this._prevCondition = false;
	                this._viewContainer.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgIf = __decorate([
	        core_1.Directive({ selector: '[ngIf]', inputs: ['ngIf'] }), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef])
	    ], NgIf);
	    return NgIf;
	})();
	exports.NgIf = NgIf;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	/**
	 * The `NgStyle` directive changes styles based on a result of expression evaluation.
	 *
	 * An expression assigned to the `ngStyle` property must evaluate to an object and the
	 * corresponding element styles are updated based on changes to this object. Style names to update
	 * are taken from the object's keys, and values - from the corresponding object's values.
	 *
	 * ### Syntax
	 *
	 * - `<div [ngStyle]="{'font-style': style}"></div>`
	 * - `<div [ngStyle]="styleExp"></div>` - here the `styleExp` must evaluate to an object
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview)):
	 *
	 * ```
	 * import {Component} from 'angular2/core';
	 * import {NgStyle} from 'angular2/common';
	 *
	 * @Component({
	 *  selector: 'ngStyle-example',
	 *  template: `
	 *    <h1 [ngStyle]="{'font-style': style, 'font-size': size, 'font-weight': weight}">
	 *      Change style of this text!
	 *    </h1>
	 *
	 *    <hr>
	 *
	 *    <label>Italic: <input type="checkbox" (change)="changeStyle($event)"></label>
	 *    <label>Bold: <input type="checkbox" (change)="changeWeight($event)"></label>
	 *    <label>Size: <input type="text" [value]="size" (change)="size = $event.target.value"></label>
	 *  `,
	 *  directives: [NgStyle]
	 * })
	 * export class NgStyleExample {
	 *    style = 'normal';
	 *    weight = 'normal';
	 *    size = '20px';
	 *
	 *    changeStyle($event: any) {
	 *      this.style = $event.target.checked ? 'italic' : 'normal';
	 *    }
	 *
	 *    changeWeight($event: any) {
	 *      this.weight = $event.target.checked ? 'bold' : 'normal';
	 *    }
	 * }
	 * ```
	 *
	 * In this example the `font-style`, `font-size` and `font-weight` styles will be updated
	 * based on the `style` property's value changes.
	 */
	var NgStyle = (function () {
	    function NgStyle(_differs, _ngEl, _renderer) {
	        this._differs = _differs;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(NgStyle.prototype, "rawStyle", {
	        set: function (v) {
	            this._rawStyle = v;
	            if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
	                this._differ = this._differs.find(this._rawStyle).create(null);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgStyle.prototype.ngDoCheck = function () {
	        if (lang_1.isPresent(this._differ)) {
	            var changes = this._differ.diff(this._rawStyle);
	            if (lang_1.isPresent(changes)) {
	                this._applyChanges(changes);
	            }
	        }
	    };
	    NgStyle.prototype._applyChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) { _this._setStyle(record.key, null); });
	    };
	    NgStyle.prototype._setStyle = function (name, val) {
	        this._renderer.setElementStyle(this._ngEl.nativeElement, name, val);
	    };
	    NgStyle = __decorate([
	        core_1.Directive({ selector: '[ngStyle]', inputs: ['rawStyle: ngStyle'] }), 
	        __metadata('design:paramtypes', [core_1.KeyValueDiffers, core_1.ElementRef, core_1.Renderer])
	    ], NgStyle);
	    return NgStyle;
	})();
	exports.NgStyle = NgStyle;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var _WHEN_DEFAULT = lang_1.CONST_EXPR(new Object());
	/** @internal */
	var SwitchView = (function () {
	    function SwitchView(_viewContainerRef, _templateRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._templateRef = _templateRef;
	    }
	    SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };
	    SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
	    return SwitchView;
	})();
	exports.SwitchView = SwitchView;
	/**
	 * Adds or removes DOM sub-trees when their match expressions match the switch expression.
	 *
	 * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
	 * preserved at the location as specified in the template.
	 *
	 * `NgSwitch` simply inserts nested elements based on which match expression matches the value
	 * obtained from the evaluated switch expression. In other words, you define a container element
	 * (where you place the directive with a switch expression on the
	 * **`[ngSwitch]="..."` attribute**), define any inner elements inside of the directive and
	 * place a `[ngSwitchWhen]` attribute per element.
	 *
	 * The `ngSwitchWhen` property is used to inform `NgSwitch` which element to display when the
	 * expression is evaluated. If a matching expression is not found via a `ngSwitchWhen` property
	 * then an element with the `ngSwitchDefault` attribute is displayed.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/DQMTII95CbuqWrl3lYAs?p=preview))
	 *
	 * ```typescript
	 * @Component({selector: 'app'})
	 * @View({
	 *   template: `
	 *     <p>Value = {{value}}</p>
	 *     <button (click)="inc()">Increment</button>
	 *
	 *     <div [ngSwitch]="value">
	 *       <p *ngSwitchWhen="'init'">increment to start</p>
	 *       <p *ngSwitchWhen="0">0, increment again</p>
	 *       <p *ngSwitchWhen="1">1, increment again</p>
	 *       <p *ngSwitchWhen="2">2, stop incrementing</p>
	 *       <p *ngSwitchDefault>&gt; 2, STOP!</p>
	 *     </div>
	 *
	 *     <!-- alternate syntax -->
	 *
	 *     <p [ngSwitch]="value">
	 *       <template ngSwitchWhen="init">increment to start</template>
	 *       <template [ngSwitchWhen]="0">0, increment again</template>
	 *       <template [ngSwitchWhen]="1">1, increment again</template>
	 *       <template [ngSwitchWhen]="2">2, stop incrementing</template>
	 *       <template ngSwitchDefault>&gt; 2, STOP!</template>
	 *     </p>
	 *   `,
	 *   directives: [NgSwitch, NgSwitchWhen, NgSwitchDefault]
	 * })
	 * export class App {
	 *   value = 'init';
	 *
	 *   inc() {
	 *     this.value = this.value === 'init' ? 0 : this.value + 1;
	 *   }
	 * }
	 *
	 * bootstrap(App).catch(err => console.error(err));
	 * ```
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._useDefault = false;
	        this._valueViews = new collection_1.Map();
	        this._activeViews = [];
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        set: function (value) {
	            // Empty the currently active ViewContainers
	            this._emptyAllActiveViews();
	            // Add the ViewContainers matching the value (with a fallback to default)
	            this._useDefault = false;
	            var views = this._valueViews.get(value);
	            if (lang_1.isBlank(views)) {
	                this._useDefault = true;
	                views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
	            }
	            this._activateViews(views);
	            this._switchValue = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
	        this._deregisterView(oldWhen, view);
	        this._registerView(newWhen, view);
	        if (oldWhen === this._switchValue) {
	            view.destroy();
	            collection_1.ListWrapper.remove(this._activeViews, view);
	        }
	        else if (newWhen === this._switchValue) {
	            if (this._useDefault) {
	                this._useDefault = false;
	                this._emptyAllActiveViews();
	            }
	            view.create();
	            this._activeViews.push(view);
	        }
	        // Switch to default when there is no more active ViewContainers
	        if (this._activeViews.length === 0 && !this._useDefault) {
	            this._useDefault = true;
	            this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
	        }
	    };
	    /** @internal */
	    NgSwitch.prototype._emptyAllActiveViews = function () {
	        var activeContainers = this._activeViews;
	        for (var i = 0; i < activeContainers.length; i++) {
	            activeContainers[i].destroy();
	        }
	        this._activeViews = [];
	    };
	    /** @internal */
	    NgSwitch.prototype._activateViews = function (views) {
	        // TODO(vicb): assert(this._activeViews.length === 0);
	        if (lang_1.isPresent(views)) {
	            for (var i = 0; i < views.length; i++) {
	                views[i].create();
	            }
	            this._activeViews = views;
	        }
	    };
	    /** @internal */
	    NgSwitch.prototype._registerView = function (value, view) {
	        var views = this._valueViews.get(value);
	        if (lang_1.isBlank(views)) {
	            views = [];
	            this._valueViews.set(value, views);
	        }
	        views.push(view);
	    };
	    /** @internal */
	    NgSwitch.prototype._deregisterView = function (value, view) {
	        // `_WHEN_DEFAULT` is used a marker for non-registered whens
	        if (value === _WHEN_DEFAULT)
	            return;
	        var views = this._valueViews.get(value);
	        if (views.length == 1) {
	            this._valueViews.delete(value);
	        }
	        else {
	            collection_1.ListWrapper.remove(views, view);
	        }
	    };
	    NgSwitch = __decorate([
	        core_1.Directive({ selector: '[ngSwitch]', inputs: ['ngSwitch'] }), 
	        __metadata('design:paramtypes', [])
	    ], NgSwitch);
	    return NgSwitch;
	})();
	exports.NgSwitch = NgSwitch;
	/**
	 * Insert the sub-tree when the `ngSwitchWhen` expression evaluates to the same value as the
	 * enclosing switch expression.
	 *
	 * If multiple match expression match the switch expression value, all of them are displayed.
	 *
	 * See {@link NgSwitch} for more details and example.
	 */
	var NgSwitchWhen = (function () {
	    function NgSwitchWhen(viewContainer, templateRef, ngSwitch) {
	        // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value
	        /** @internal */
	        this._value = _WHEN_DEFAULT;
	        this._switch = ngSwitch;
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
	        set: function (value) {
	            this._switch._onWhenValueChanged(this._value, value, this._view);
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitchWhen = __decorate([
	        core_1.Directive({ selector: '[ngSwitchWhen]', inputs: ['ngSwitchWhen'] }),
	        __param(2, core_1.Host()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch])
	    ], NgSwitchWhen);
	    return NgSwitchWhen;
	})();
	exports.NgSwitchWhen = NgSwitchWhen;
	/**
	 * Default case statements are displayed when no match expression matches the switch expression
	 * value.
	 *
	 * See {@link NgSwitch} for more details and example.
	 */
	var NgSwitchDefault = (function () {
	    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
	        sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
	    }
	    NgSwitchDefault = __decorate([
	        core_1.Directive({ selector: '[ngSwitchDefault]' }),
	        __param(2, core_1.Host()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch])
	    ], NgSwitchDefault);
	    return NgSwitchDefault;
	})();
	exports.NgSwitchDefault = NgSwitchDefault;


/***/ },
/* 189 */
/***/ function(module, exports) {

	'use strict';// TS does not have Observables


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var ng_class_1 = __webpack_require__(184);
	var ng_for_1 = __webpack_require__(185);
	var ng_if_1 = __webpack_require__(186);
	var ng_style_1 = __webpack_require__(187);
	var ng_switch_1 = __webpack_require__(188);
	/**
	 * A collection of Angular core directives that are likely to be used in each and every Angular
	 * application.
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `directives`
	 * property of the `@View` annotation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview))
	 *
	 * Instead of writing:
	 *
	 * ```typescript
	 * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/common';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could import all the core directives at once:
	 *
	 * ```typescript
	 * import {CORE_DIRECTIVES} from 'angular2/common';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [CORE_DIRECTIVES, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 */
	exports.CORE_DIRECTIVES = lang_1.CONST_EXPR([ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_style_1.NgStyle, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module is used for handling user input, by defining and building a {@link ControlGroup} that
	 * consists of
	 * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
	 * to read information
	 * from the form DOM elements.
	 *
	 * This module is not included in the `angular2` module; you must import the forms module
	 * explicitly.
	 *
	 */
	var model_1 = __webpack_require__(192);
	exports.AbstractControl = model_1.AbstractControl;
	exports.Control = model_1.Control;
	exports.ControlGroup = model_1.ControlGroup;
	exports.ControlArray = model_1.ControlArray;
	var abstract_control_directive_1 = __webpack_require__(193);
	exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
	var control_container_1 = __webpack_require__(194);
	exports.ControlContainer = control_container_1.ControlContainer;
	var ng_control_name_1 = __webpack_require__(195);
	exports.NgControlName = ng_control_name_1.NgControlName;
	var ng_form_control_1 = __webpack_require__(206);
	exports.NgFormControl = ng_form_control_1.NgFormControl;
	var ng_model_1 = __webpack_require__(207);
	exports.NgModel = ng_model_1.NgModel;
	var ng_control_1 = __webpack_require__(196);
	exports.NgControl = ng_control_1.NgControl;
	var ng_control_group_1 = __webpack_require__(208);
	exports.NgControlGroup = ng_control_group_1.NgControlGroup;
	var ng_form_model_1 = __webpack_require__(209);
	exports.NgFormModel = ng_form_model_1.NgFormModel;
	var ng_form_1 = __webpack_require__(210);
	exports.NgForm = ng_form_1.NgForm;
	var control_value_accessor_1 = __webpack_require__(197);
	exports.NG_VALUE_ACCESSOR = control_value_accessor_1.NG_VALUE_ACCESSOR;
	var default_value_accessor_1 = __webpack_require__(200);
	exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
	var ng_control_status_1 = __webpack_require__(211);
	exports.NgControlStatus = ng_control_status_1.NgControlStatus;
	var checkbox_value_accessor_1 = __webpack_require__(202);
	exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
	var select_control_value_accessor_1 = __webpack_require__(203);
	exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
	exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
	var directives_1 = __webpack_require__(212);
	exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
	exports.RadioButtonState = directives_1.RadioButtonState;
	var validators_1 = __webpack_require__(199);
	exports.NG_VALIDATORS = validators_1.NG_VALIDATORS;
	exports.NG_ASYNC_VALIDATORS = validators_1.NG_ASYNC_VALIDATORS;
	exports.Validators = validators_1.Validators;
	var validators_2 = __webpack_require__(213);
	exports.RequiredValidator = validators_2.RequiredValidator;
	exports.MinLengthValidator = validators_2.MinLengthValidator;
	exports.MaxLengthValidator = validators_2.MaxLengthValidator;
	var form_builder_1 = __webpack_require__(214);
	exports.FormBuilder = form_builder_1.FormBuilder;
	var form_builder_2 = __webpack_require__(214);
	var radio_control_value_accessor_1 = __webpack_require__(204);
	var lang_1 = __webpack_require__(10);
	/**
	 * Shorthand set of providers used for building Angular forms.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * bootstrap(MyApp, [FORM_PROVIDERS]);
	 * ```
	 */
	exports.FORM_PROVIDERS = lang_1.CONST_EXPR([form_builder_2.FormBuilder, radio_control_value_accessor_1.RadioControlRegistry]);
	/**
	 * See {@link FORM_PROVIDERS} instead.
	 *
	 * @deprecated
	 */
	exports.FORM_BINDINGS = exports.FORM_PROVIDERS;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	var promise_1 = __webpack_require__(54);
	var collection_1 = __webpack_require__(17);
	/**
	 * Indicates that a Control is valid, i.e. that no errors exist in the input value.
	 */
	exports.VALID = "VALID";
	/**
	 * Indicates that a Control is invalid, i.e. that an error exists in the input value.
	 */
	exports.INVALID = "INVALID";
	/**
	 * Indicates that a Control is pending, i.e. that async validation is occurring and
	 * errors are not yet available for the input value.
	 */
	exports.PENDING = "PENDING";
	function isControl(control) {
	    return control instanceof AbstractControl;
	}
	exports.isControl = isControl;
	function _find(control, path) {
	    if (lang_1.isBlank(path))
	        return null;
	    if (!(path instanceof Array)) {
	        path = path.split("/");
	    }
	    if (path instanceof Array && collection_1.ListWrapper.isEmpty(path))
	        return null;
	    return path
	        .reduce(function (v, name) {
	        if (v instanceof ControlGroup) {
	            return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
	        }
	        else if (v instanceof ControlArray) {
	            var index = name;
	            return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
	        }
	        else {
	            return null;
	        }
	    }, control);
	}
	function toObservable(r) {
	    return promise_1.PromiseWrapper.isPromise(r) ? async_1.ObservableWrapper.fromPromise(r) : r;
	}
	/**
	 *
	 */
	var AbstractControl = (function () {
	    function AbstractControl(validator, asyncValidator) {
	        this.validator = validator;
	        this.asyncValidator = asyncValidator;
	        this._pristine = true;
	        this._touched = false;
	    }
	    Object.defineProperty(AbstractControl.prototype, "value", {
	        get: function () { return this._value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "status", {
	        get: function () { return this._status; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valid", {
	        get: function () { return this._status === exports.VALID; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "errors", {
	        /**
	         * Returns the errors of this control.
	         */
	        get: function () { return this._errors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pristine", {
	        get: function () { return this._pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "dirty", {
	        get: function () { return !this.pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "touched", {
	        get: function () { return this._touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "untouched", {
	        get: function () { return !this._touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	        get: function () { return this._valueChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
	        get: function () { return this._statusChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pending", {
	        get: function () { return this._status == exports.PENDING; },
	        enumerable: true,
	        configurable: true
	    });
	    AbstractControl.prototype.markAsTouched = function () { this._touched = true; };
	    AbstractControl.prototype.markAsDirty = function (_a) {
	        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	        onlySelf = lang_1.normalizeBool(onlySelf);
	        this._pristine = false;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.markAsDirty({ onlySelf: onlySelf });
	        }
	    };
	    AbstractControl.prototype.markAsPending = function (_a) {
	        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	        onlySelf = lang_1.normalizeBool(onlySelf);
	        this._status = exports.PENDING;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.markAsPending({ onlySelf: onlySelf });
	        }
	    };
	    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	    AbstractControl.prototype.updateValueAndValidity = function (_a) {
	        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	        onlySelf = lang_1.normalizeBool(onlySelf);
	        emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
	        this._updateValue();
	        this._errors = this._runValidator();
	        this._status = this._calculateStatus();
	        if (this._status == exports.VALID || this._status == exports.PENDING) {
	            this._runAsyncValidator(emitEvent);
	        }
	        if (emitEvent) {
	            async_1.ObservableWrapper.callEmit(this._valueChanges, this._value);
	            async_1.ObservableWrapper.callEmit(this._statusChanges, this._status);
	        }
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        }
	    };
	    AbstractControl.prototype._runValidator = function () { return lang_1.isPresent(this.validator) ? this.validator(this) : null; };
	    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
	        var _this = this;
	        if (lang_1.isPresent(this.asyncValidator)) {
	            this._status = exports.PENDING;
	            this._cancelExistingSubscription();
	            var obs = toObservable(this.asyncValidator(this));
	            this._asyncValidationSubscription =
	                async_1.ObservableWrapper.subscribe(obs, function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); });
	        }
	    };
	    AbstractControl.prototype._cancelExistingSubscription = function () {
	        if (lang_1.isPresent(this._asyncValidationSubscription)) {
	            async_1.ObservableWrapper.dispose(this._asyncValidationSubscription);
	        }
	    };
	    /**
	     * Sets errors on a control.
	     *
	     * This is used when validations are run not automatically, but manually by the user.
	     *
	     * Calling `setErrors` will also update the validity of the parent control.
	     *
	     * ## Usage
	     *
	     * ```
	     * var login = new Control("someLogin");
	     * login.setErrors({
	     *   "notUnique": true
	     * });
	     *
	     * expect(login.valid).toEqual(false);
	     * expect(login.errors).toEqual({"notUnique": true});
	     *
	     * login.updateValue("someOtherLogin");
	     *
	     * expect(login.valid).toEqual(true);
	     * ```
	     */
	    AbstractControl.prototype.setErrors = function (errors, _a) {
	        var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
	        emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
	        this._errors = errors;
	        this._status = this._calculateStatus();
	        if (emitEvent) {
	            async_1.ObservableWrapper.callEmit(this._statusChanges, this._status);
	        }
	        if (lang_1.isPresent(this._parent)) {
	            this._parent._updateControlsErrors();
	        }
	    };
	    AbstractControl.prototype.find = function (path) { return _find(this, path); };
	    AbstractControl.prototype.getError = function (errorCode, path) {
	        if (path === void 0) { path = null; }
	        var control = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
	        if (lang_1.isPresent(control) && lang_1.isPresent(control._errors)) {
	            return collection_1.StringMapWrapper.get(control._errors, errorCode);
	        }
	        else {
	            return null;
	        }
	    };
	    AbstractControl.prototype.hasError = function (errorCode, path) {
	        if (path === void 0) { path = null; }
	        return lang_1.isPresent(this.getError(errorCode, path));
	    };
	    Object.defineProperty(AbstractControl.prototype, "root", {
	        get: function () {
	            var x = this;
	            while (lang_1.isPresent(x._parent)) {
	                x = x._parent;
	            }
	            return x;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    AbstractControl.prototype._updateControlsErrors = function () {
	        this._status = this._calculateStatus();
	        if (lang_1.isPresent(this._parent)) {
	            this._parent._updateControlsErrors();
	        }
	    };
	    /** @internal */
	    AbstractControl.prototype._initObservables = function () {
	        this._valueChanges = new async_1.EventEmitter();
	        this._statusChanges = new async_1.EventEmitter();
	    };
	    AbstractControl.prototype._calculateStatus = function () {
	        if (lang_1.isPresent(this._errors))
	            return exports.INVALID;
	        if (this._anyControlsHaveStatus(exports.PENDING))
	            return exports.PENDING;
	        if (this._anyControlsHaveStatus(exports.INVALID))
	            return exports.INVALID;
	        return exports.VALID;
	    };
	    return AbstractControl;
	})();
	exports.AbstractControl = AbstractControl;
	/**
	 * Defines a part of a form that cannot be divided into other controls. `Control`s have values and
	 * validation state, which is determined by an optional validation function.
	 *
	 * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
	 * with {@link ControlGroup} and {@link ControlArray}.
	 *
	 * ## Usage
	 *
	 * By default, a `Control` is created for every `<input>` or other form component.
	 * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be
	 * bound to a DOM element instead. This `Control` can be configured with a custom
	 * validation function.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
	 */
	var Control = (function (_super) {
	    __extends(Control, _super);
	    function Control(value, validator, asyncValidator) {
	        if (value === void 0) { value = null; }
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        _super.call(this, validator, asyncValidator);
	        this._value = value;
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        this._initObservables();
	    }
	    /**
	     * Set the value of the control to `value`.
	     *
	     * If `onlySelf` is `true`, this change will only affect the validation of this `Control`
	     * and not its parent component. If `emitEvent` is `true`, this change will cause a
	     * `valueChanges` event on the `Control` to be emitted. Both of these options default to
	     * `false`.
	     *
	     * If `emitModelToViewChange` is `true`, the view will be notified about the new value
	     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
	     * specified.
	     */
	    Control.prototype.updateValue = function (value, _a) {
	        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
	        emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
	        this._value = value;
	        if (lang_1.isPresent(this._onChange) && emitModelToViewChange)
	            this._onChange(this._value);
	        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	    };
	    /**
	     * @internal
	     */
	    Control.prototype._updateValue = function () { };
	    /**
	     * @internal
	     */
	    Control.prototype._anyControlsHaveStatus = function (status) { return false; };
	    /**
	     * Register a listener for change events.
	     */
	    Control.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    return Control;
	})(AbstractControl);
	exports.Control = Control;
	/**
	 * Defines a part of a form, of fixed length, that can contain other controls.
	 *
	 * A `ControlGroup` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
	 * changes its value, the entire group changes as well.
	 *
	 * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other
	 * controls, but is of variable length.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
	 */
	var ControlGroup = (function (_super) {
	    __extends(ControlGroup, _super);
	    function ControlGroup(controls, optionals, validator, asyncValidator) {
	        if (optionals === void 0) { optionals = null; }
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        _super.call(this, validator, asyncValidator);
	        this.controls = controls;
	        this._optionals = lang_1.isPresent(optionals) ? optionals : {};
	        this._initObservables();
	        this._setParentForControls();
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	    }
	    /**
	     * Add a control to this group.
	     */
	    ControlGroup.prototype.addControl = function (name, control) {
	        this.controls[name] = control;
	        control.setParent(this);
	    };
	    /**
	     * Remove a control from this group.
	     */
	    ControlGroup.prototype.removeControl = function (name) { collection_1.StringMapWrapper.delete(this.controls, name); };
	    /**
	     * Mark the named control as non-optional.
	     */
	    ControlGroup.prototype.include = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, true);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Mark the named control as optional.
	     */
	    ControlGroup.prototype.exclude = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, false);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Check whether there is a control with the given name in the group.
	     */
	    ControlGroup.prototype.contains = function (controlName) {
	        var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
	        return c && this._included(controlName);
	    };
	    /** @internal */
	    ControlGroup.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) { control.setParent(_this); });
	    };
	    /** @internal */
	    ControlGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
	    /** @internal */
	    ControlGroup.prototype._anyControlsHaveStatus = function (status) {
	        var _this = this;
	        var res = false;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            res = res || (_this.contains(name) && control.status == status);
	        });
	        return res;
	    };
	    /** @internal */
	    ControlGroup.prototype._reduceValue = function () {
	        return this._reduceChildren({}, function (acc, control, name) {
	            acc[name] = control.value;
	            return acc;
	        });
	    };
	    /** @internal */
	    ControlGroup.prototype._reduceChildren = function (initValue, fn) {
	        var _this = this;
	        var res = initValue;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            if (_this._included(name)) {
	                res = fn(res, control, name);
	            }
	        });
	        return res;
	    };
	    /** @internal */
	    ControlGroup.prototype._included = function (controlName) {
	        var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
	        return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
	    };
	    return ControlGroup;
	})(AbstractControl);
	exports.ControlGroup = ControlGroup;
	/**
	 * Defines a part of a form, of variable length, that can contain other controls.
	 *
	 * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
	 * changes its value, the entire group changes as well.
	 *
	 * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain
	 * other controls, but is of fixed length.
	 *
	 * ## Adding or removing controls
	 *
	 * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
	 * in `ControlArray` itself. These methods ensure the controls are properly tracked in the
	 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
	 * the `ControlArray` directly, as that will result in strange and unexpected behavior such
	 * as broken change detection.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
	 */
	var ControlArray = (function (_super) {
	    __extends(ControlArray, _super);
	    function ControlArray(controls, validator, asyncValidator) {
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        _super.call(this, validator, asyncValidator);
	        this.controls = controls;
	        this._initObservables();
	        this._setParentForControls();
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	    }
	    /**
	     * Get the {@link AbstractControl} at the given `index` in the array.
	     */
	    ControlArray.prototype.at = function (index) { return this.controls[index]; };
	    /**
	     * Insert a new {@link AbstractControl} at the end of the array.
	     */
	    ControlArray.prototype.push = function (control) {
	        this.controls.push(control);
	        control.setParent(this);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Insert a new {@link AbstractControl} at the given `index` in the array.
	     */
	    ControlArray.prototype.insert = function (index, control) {
	        collection_1.ListWrapper.insert(this.controls, index, control);
	        control.setParent(this);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Remove the control at the given `index` in the array.
	     */
	    ControlArray.prototype.removeAt = function (index) {
	        collection_1.ListWrapper.removeAt(this.controls, index);
	        this.updateValueAndValidity();
	    };
	    Object.defineProperty(ControlArray.prototype, "length", {
	        /**
	         * Length of the control array.
	         */
	        get: function () { return this.controls.length; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ControlArray.prototype._updateValue = function () { this._value = this.controls.map(function (control) { return control.value; }); };
	    /** @internal */
	    ControlArray.prototype._anyControlsHaveStatus = function (status) {
	        return this.controls.some(function (c) { return c.status == status; });
	    };
	    /** @internal */
	    ControlArray.prototype._setParentForControls = function () {
	        var _this = this;
	        this.controls.forEach(function (control) { control.setParent(_this); });
	    };
	    return ControlArray;
	})(AbstractControl);
	exports.ControlArray = ControlArray;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	/**
	 * Base class for control directives.
	 *
	 * Only used internally in the forms module.
	 */
	var AbstractControlDirective = (function () {
	    function AbstractControlDirective() {
	    }
	    Object.defineProperty(AbstractControlDirective.prototype, "control", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "value", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.value : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.valid : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	        get: function () {
	            return lang_1.isPresent(this.control) ? this.control.errors : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.pristine : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.dirty : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.touched : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.untouched : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "path", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractControlDirective;
	})();
	exports.AbstractControlDirective = AbstractControlDirective;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_control_directive_1 = __webpack_require__(193);
	/**
	 * A directive that contains multiple {@link NgControl}s.
	 *
	 * Only used by the forms module.
	 */
	var ControlContainer = (function (_super) {
	    __extends(ControlContainer, _super);
	    function ControlContainer() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(ControlContainer.prototype, "formDirective", {
	        /**
	         * Get the form to which this container belongs.
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ControlContainer.prototype, "path", {
	        /**
	         * Get the path to this container.
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    return ControlContainer;
	})(abstract_control_directive_1.AbstractControlDirective);
	exports.ControlContainer = ControlContainer;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	var core_1 = __webpack_require__(7);
	var control_container_1 = __webpack_require__(194);
	var ng_control_1 = __webpack_require__(196);
	var control_value_accessor_1 = __webpack_require__(197);
	var shared_1 = __webpack_require__(198);
	var validators_1 = __webpack_require__(199);
	var controlNameBinding = lang_1.CONST_EXPR(new core_1.Provider(ng_control_1.NgControl, { useExisting: core_1.forwardRef(function () { return NgControlName; }) }));
	/**
	 * Creates and binds a control with a specified name to a DOM element.
	 *
	 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.

	 * ### Example
	 *
	 * In this example, we create the login and password controls.
	 * We can work with each control separately: check its validity, get its value, listen to its
	 * changes.
	 *
	 *  ```
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `
	 *        <form #f="ngForm" (submit)='onLogIn(f.value)'>
	 *          Login <input type='text' ngControl='login' #l="form">
	 *          <div *ngIf="!l.valid">Login is invalid</div>
	 *
	 *          Password <input type='password' ngControl='password'>
	 *          <button type='submit'>Log in!</button>
	 *        </form>
	 *      `})
	 * class LoginComp {
	 *  onLogIn(value): void {
	 *    // value === {login: 'some login', password: 'some password'}
	 *  }
	 * }
	 *  ```
	 *
	 * We can also use ngModel to bind a domain model to the form.
	 *
	 *  ```
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `
	 *        <form (submit)='onLogIn()'>
	 *          Login <input type='text' ngControl='login' [(ngModel)]="credentials.login">
	 *          Password <input type='password' ngControl='password'
	 *                          [(ngModel)]="credentials.password">
	 *          <button type='submit'>Log in!</button>
	 *        </form>
	 *      `})
	 * class LoginComp {
	 *  credentials: {login:string, password:string};
	 *
	 *  onLogIn(): void {
	 *    // this.credentials.login === "some login"
	 *    // this.credentials.password === "some password"
	 *  }
	 * }
	 *  ```
	 */
	var NgControlName = (function (_super) {
	    __extends(NgControlName, _super);
	    function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
	        _super.call(this);
	        this._parent = _parent;
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        /** @internal */
	        this.update = new async_1.EventEmitter();
	        this._added = false;
	        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
	    }
	    NgControlName.prototype.ngOnChanges = function (changes) {
	        if (!this._added) {
	            this.formDirective.addControl(this);
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
	            this.viewModel = this.model;
	            this.formDirective.updateModel(this, this.model);
	        }
	    };
	    NgControlName.prototype.ngOnDestroy = function () { this.formDirective.removeControl(this); };
	    NgControlName.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callEmit(this.update, newValue);
	    };
	    Object.defineProperty(NgControlName.prototype, "path", {
	        get: function () { return shared_1.controlPath(this.name, this._parent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "formDirective", {
	        get: function () { return this._parent.formDirective; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "control", {
	        get: function () { return this.formDirective.getControl(this); },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlName = __decorate([
	        core_1.Directive({
	            selector: '[ngControl]',
	            bindings: [controlNameBinding],
	            inputs: ['name: ngControl', 'model: ngModel'],
	            outputs: ['update: ngModelChange'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, core_1.Host()),
	        __param(0, core_1.SkipSelf()),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Self()),
	        __param(1, core_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Self()),
	        __param(2, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)),
	        __param(3, core_1.Optional()),
	        __param(3, core_1.Self()),
	        __param(3, core_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
	        __metadata('design:paramtypes', [control_container_1.ControlContainer, Array, Array, Array])
	    ], NgControlName);
	    return NgControlName;
	})(ng_control_1.NgControl);
	exports.NgControlName = NgControlName;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_control_directive_1 = __webpack_require__(193);
	var exceptions_1 = __webpack_require__(19);
	/**
	 * A base class that all control directive extend.
	 * It binds a {@link Control} object to a DOM element.
	 *
	 * Used internally by Angular forms.
	 */
	var NgControl = (function (_super) {
	    __extends(NgControl, _super);
	    function NgControl() {
	        _super.apply(this, arguments);
	        this.name = null;
	        this.valueAccessor = null;
	    }
	    Object.defineProperty(NgControl.prototype, "validator", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControl.prototype, "asyncValidator", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return NgControl;
	})(abstract_control_directive_1.AbstractControlDirective);
	exports.NgControl = NgControl;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	/**
	 * Used to provide a {@link ControlValueAccessor} for form controls.
	 *
	 * See {@link DefaultValueAccessor} for how to implement one.
	 */
	exports.NG_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.OpaqueToken("NgValueAccessor"));


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var validators_1 = __webpack_require__(199);
	var default_value_accessor_1 = __webpack_require__(200);
	var number_value_accessor_1 = __webpack_require__(201);
	var checkbox_value_accessor_1 = __webpack_require__(202);
	var select_control_value_accessor_1 = __webpack_require__(203);
	var radio_control_value_accessor_1 = __webpack_require__(204);
	var normalize_validator_1 = __webpack_require__(205);
	function controlPath(name, parent) {
	    var p = collection_1.ListWrapper.clone(parent.path);
	    p.push(name);
	    return p;
	}
	exports.controlPath = controlPath;
	function setUpControl(control, dir) {
	    if (lang_1.isBlank(control))
	        _throwError(dir, "Cannot find control");
	    if (lang_1.isBlank(dir.valueAccessor))
	        _throwError(dir, "No value accessor for");
	    control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
	    control.asyncValidator = validators_1.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	    dir.valueAccessor.writeValue(control.value);
	    // view -> model
	    dir.valueAccessor.registerOnChange(function (newValue) {
	        dir.viewToModelUpdate(newValue);
	        control.updateValue(newValue, { emitModelToViewChange: false });
	        control.markAsDirty();
	    });
	    // model -> view
	    control.registerOnChange(function (newValue) { return dir.valueAccessor.writeValue(newValue); });
	    // touched
	    dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
	}
	exports.setUpControl = setUpControl;
	function setUpControlGroup(control, dir) {
	    if (lang_1.isBlank(control))
	        _throwError(dir, "Cannot find control");
	    control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
	    control.asyncValidator = validators_1.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	}
	exports.setUpControlGroup = setUpControlGroup;
	function _throwError(dir, message) {
	    var path = dir.path.join(" -> ");
	    throw new exceptions_1.BaseException(message + " '" + path + "'");
	}
	function composeValidators(validators) {
	    return lang_1.isPresent(validators) ? validators_1.Validators.compose(validators.map(normalize_validator_1.normalizeValidator)) : null;
	}
	exports.composeValidators = composeValidators;
	function composeAsyncValidators(validators) {
	    return lang_1.isPresent(validators) ? validators_1.Validators.composeAsync(validators.map(normalize_validator_1.normalizeValidator)) : null;
	}
	exports.composeAsyncValidators = composeAsyncValidators;
	function isPropertyUpdated(changes, viewModel) {
	    if (!collection_1.StringMapWrapper.contains(changes, "model"))
	        return false;
	    var change = changes["model"];
	    if (change.isFirstChange())
	        return true;
	    return !lang_1.looseIdentical(viewModel, change.currentValue);
	}
	exports.isPropertyUpdated = isPropertyUpdated;
	// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
	function selectValueAccessor(dir, valueAccessors) {
	    if (lang_1.isBlank(valueAccessors))
	        return null;
	    var defaultAccessor;
	    var builtinAccessor;
	    var customAccessor;
	    valueAccessors.forEach(function (v) {
	        if (lang_1.hasConstructor(v, default_value_accessor_1.DefaultValueAccessor)) {
	            defaultAccessor = v;
	        }
	        else if (lang_1.hasConstructor(v, checkbox_value_accessor_1.CheckboxControlValueAccessor) ||
	            lang_1.hasConstructor(v, number_value_accessor_1.NumberValueAccessor) ||
	            lang_1.hasConstructor(v, select_control_value_accessor_1.SelectControlValueAccessor) ||
	            lang_1.hasConstructor(v, radio_control_value_accessor_1.RadioControlValueAccessor)) {
	            if (lang_1.isPresent(builtinAccessor))
	                _throwError(dir, "More than one built-in value accessor matches");
	            builtinAccessor = v;
	        }
	        else {
	            if (lang_1.isPresent(customAccessor))
	                _throwError(dir, "More than one custom value accessor matches");
	            customAccessor = v;
	        }
	    });
	    if (lang_1.isPresent(customAccessor))
	        return customAccessor;
	    if (lang_1.isPresent(builtinAccessor))
	        return builtinAccessor;
	    if (lang_1.isPresent(defaultAccessor))
	        return defaultAccessor;
	    _throwError(dir, "No valid value accessor for");
	    return null;
	}
	exports.selectValueAccessor = selectValueAccessor;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var promise_1 = __webpack_require__(54);
	var async_1 = __webpack_require__(53);
	var collection_1 = __webpack_require__(17);
	var core_1 = __webpack_require__(7);
	/**
	 * Providers for validators to be used for {@link Control}s in a form.
	 *
	 * Provide this using `multi: true` to add validators.
	 *
	 * ### Example
	 *
	 * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
	 */
	exports.NG_VALIDATORS = lang_1.CONST_EXPR(new core_1.OpaqueToken("NgValidators"));
	/**
	 * Providers for asynchronous validators to be used for {@link Control}s
	 * in a form.
	 *
	 * Provide this using `multi: true` to add validators.
	 *
	 * See {@link NG_VALIDATORS} for more details.
	 */
	exports.NG_ASYNC_VALIDATORS = lang_1.CONST_EXPR(new core_1.OpaqueToken("NgAsyncValidators"));
	/**
	 * Provides a set of validators used by form controls.
	 *
	 * A validator is a function that processes a {@link Control} or collection of
	 * controls and returns a map of errors. A null map means that validation has passed.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * var loginControl = new Control("", Validators.required)
	 * ```
	 */
	var Validators = (function () {
	    function Validators() {
	    }
	    /**
	     * Validator that requires controls to have a non-empty value.
	     */
	    Validators.required = function (control) {
	        return lang_1.isBlank(control.value) || (lang_1.isString(control.value) && control.value == "") ?
	            { "required": true } :
	            null;
	    };
	    /**
	     * Validator that requires controls to have a value of a minimum length.
	     */
	    Validators.minLength = function (minLength) {
	        return function (control) {
	            if (lang_1.isPresent(Validators.required(control)))
	                return null;
	            var v = control.value;
	            return v.length < minLength ?
	                { "minlength": { "requiredLength": minLength, "actualLength": v.length } } :
	                null;
	        };
	    };
	    /**
	     * Validator that requires controls to have a value of a maximum length.
	     */
	    Validators.maxLength = function (maxLength) {
	        return function (control) {
	            if (lang_1.isPresent(Validators.required(control)))
	                return null;
	            var v = control.value;
	            return v.length > maxLength ?
	                { "maxlength": { "requiredLength": maxLength, "actualLength": v.length } } :
	                null;
	        };
	    };
	    /**
	     * No-op validator.
	     */
	    Validators.nullValidator = function (c) { return null; };
	    /**
	     * Compose multiple validators into a single function that returns the union
	     * of the individual error maps.
	     */
	    Validators.compose = function (validators) {
	        if (lang_1.isBlank(validators))
	            return null;
	        var presentValidators = validators.filter(lang_1.isPresent);
	        if (presentValidators.length == 0)
	            return null;
	        return function (control) {
	            return _mergeErrors(_executeValidators(control, presentValidators));
	        };
	    };
	    Validators.composeAsync = function (validators) {
	        if (lang_1.isBlank(validators))
	            return null;
	        var presentValidators = validators.filter(lang_1.isPresent);
	        if (presentValidators.length == 0)
	            return null;
	        return function (control) {
	            var promises = _executeValidators(control, presentValidators).map(_convertToPromise);
	            return promise_1.PromiseWrapper.all(promises).then(_mergeErrors);
	        };
	    };
	    return Validators;
	})();
	exports.Validators = Validators;
	function _convertToPromise(obj) {
	    return promise_1.PromiseWrapper.isPromise(obj) ? obj : async_1.ObservableWrapper.toPromise(obj);
	}
	function _executeValidators(control, validators) {
	    return validators.map(function (v) { return v(control); });
	}
	function _mergeErrors(arrayOfErrors) {
	    var res = arrayOfErrors.reduce(function (res, errors) {
	        return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
	    }, {});
	    return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	}


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var control_value_accessor_1 = __webpack_require__(197);
	var lang_1 = __webpack_require__(10);
	var DEFAULT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return DefaultValueAccessor; }), multi: true }));
	/**
	 * The default accessor for writing a value and listening to changes that is used by the
	 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
	 *
	 *  ### Example
	 *  ```
	 *  <input type="text" ngControl="searchQuery">
	 *  ```
	 */
	var DefaultValueAccessor = (function () {
	    function DefaultValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    DefaultValueAccessor.prototype.writeValue = function (value) {
	        var normalizedValue = lang_1.isBlank(value) ? '' : value;
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	    };
	    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    DefaultValueAccessor = __decorate([
	        core_1.Directive({
	            selector: 'input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
	            // TODO: vsavkin replace the above selector with the one below it once
	            // https://github.com/angular/angular/issues/3011 is implemented
	            // selector: '[ngControl],[ngModel],[ngFormControl]',
	            host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	            bindings: [DEFAULT_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], DefaultValueAccessor);
	    return DefaultValueAccessor;
	})();
	exports.DefaultValueAccessor = DefaultValueAccessor;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var control_value_accessor_1 = __webpack_require__(197);
	var lang_1 = __webpack_require__(10);
	var NUMBER_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return NumberValueAccessor; }), multi: true }));
	/**
	 * The accessor for writing a number value and listening to changes that is used by the
	 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
	 *
	 *  ### Example
	 *  ```
	 *  <input type="number" [(ngModel)]="age">
	 *  ```
	 */
	var NumberValueAccessor = (function () {
	    function NumberValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    NumberValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
	    };
	    NumberValueAccessor.prototype.registerOnChange = function (fn) {
	        this.onChange = function (value) { fn(lang_1.NumberWrapper.parseFloat(value)); };
	    };
	    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NumberValueAccessor = __decorate([
	        core_1.Directive({
	            selector: 'input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()'
	            },
	            bindings: [NUMBER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], NumberValueAccessor);
	    return NumberValueAccessor;
	})();
	exports.NumberValueAccessor = NumberValueAccessor;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var control_value_accessor_1 = __webpack_require__(197);
	var lang_1 = __webpack_require__(10);
	var CHECKBOX_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return CheckboxControlValueAccessor; }), multi: true }));
	/**
	 * The accessor for writing a value and listening to changes on a checkbox input element.
	 *
	 *  ### Example
	 *  ```
	 *  <input type="checkbox" ngControl="rememberLogin">
	 *  ```
	 */
	var CheckboxControlValueAccessor = (function () {
	    function CheckboxControlValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
	    };
	    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    CheckboxControlValueAccessor = __decorate([
	        core_1.Directive({
	            selector: 'input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]',
	            host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
	            providers: [CHECKBOX_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], CheckboxControlValueAccessor);
	    return CheckboxControlValueAccessor;
	})();
	exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var async_1 = __webpack_require__(53);
	var control_value_accessor_1 = __webpack_require__(197);
	var lang_1 = __webpack_require__(10);
	var SELECT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return SelectControlValueAccessor; }), multi: true }));
	/**
	 * Marks `<option>` as dynamic, so Angular can be notified when options change.
	 *
	 * ### Example
	 *
	 * ```
	 * <select ngControl="city">
	 *   <option *ngFor="#c of cities" [value]="c"></option>
	 * </select>
	 * ```
	 */
	var NgSelectOption = (function () {
	    function NgSelectOption() {
	    }
	    NgSelectOption = __decorate([
	        core_1.Directive({ selector: 'option' }), 
	        __metadata('design:paramtypes', [])
	    ], NgSelectOption);
	    return NgSelectOption;
	})();
	exports.NgSelectOption = NgSelectOption;
	/**
	 * The accessor for writing a value and listening to changes on a select element.
	 */
	var SelectControlValueAccessor = (function () {
	    function SelectControlValueAccessor(_renderer, _elementRef, query) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this._updateValueWhenListOfOptionsChanges(query);
	    }
	    SelectControlValueAccessor.prototype.writeValue = function (value) {
	        this.value = value;
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
	    };
	    SelectControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function (query) {
	        var _this = this;
	        async_1.ObservableWrapper.subscribe(query.changes, function (_) { return _this.writeValue(_this.value); });
	    };
	    SelectControlValueAccessor = __decorate([
	        core_1.Directive({
	            selector: 'select[ngControl],select[ngFormControl],select[ngModel]',
	            host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	            bindings: [SELECT_VALUE_ACCESSOR]
	        }),
	        __param(2, core_1.Query(NgSelectOption, { descendants: true })), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef, core_1.QueryList])
	    ], SelectControlValueAccessor);
	    return SelectControlValueAccessor;
	})();
	exports.SelectControlValueAccessor = SelectControlValueAccessor;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var control_value_accessor_1 = __webpack_require__(197);
	var ng_control_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var RADIO_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return RadioControlValueAccessor; }), multi: true }));
	/**
	 * Internal class used by Angular to uncheck radio buttons with the matching name.
	 */
	var RadioControlRegistry = (function () {
	    function RadioControlRegistry() {
	        this._accessors = [];
	    }
	    RadioControlRegistry.prototype.add = function (control, accessor) {
	        this._accessors.push([control, accessor]);
	    };
	    RadioControlRegistry.prototype.remove = function (accessor) {
	        var indexToRemove = -1;
	        for (var i = 0; i < this._accessors.length; ++i) {
	            if (this._accessors[i][1] === accessor) {
	                indexToRemove = i;
	            }
	        }
	        collection_1.ListWrapper.removeAt(this._accessors, indexToRemove);
	    };
	    RadioControlRegistry.prototype.select = function (accessor) {
	        this._accessors.forEach(function (c) {
	            if (c[0].control.root === accessor._control.control.root && c[1] !== accessor) {
	                c[1].fireUncheck();
	            }
	        });
	    };
	    RadioControlRegistry = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], RadioControlRegistry);
	    return RadioControlRegistry;
	})();
	exports.RadioControlRegistry = RadioControlRegistry;
	/**
	 * The value provided by the forms API for radio buttons.
	 */
	var RadioButtonState = (function () {
	    function RadioButtonState(checked, value) {
	        this.checked = checked;
	        this.value = value;
	    }
	    return RadioButtonState;
	})();
	exports.RadioButtonState = RadioButtonState;
	/**
	 * The accessor for writing a radio control value and listening to changes that is used by the
	 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
	 *
	 *  ### Example
	 *  ```
	 *  @Component({
	 *    template: `
	 *      <input type="radio" name="food" [(ngModel)]="foodChicken">
	 *      <input type="radio" name="food" [(ngModel)]="foodFish">
	 *    `
	 *  })
	 *  class FoodCmp {
	 *    foodChicken = new RadioButtonState(true, "chicken");
	 *    foodFish = new RadioButtonState(false, "fish");
	 *  }
	 *  ```
	 */
	var RadioControlValueAccessor = (function () {
	    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._registry = _registry;
	        this._injector = _injector;
	        this.onChange = function () { };
	        this.onTouched = function () { };
	    }
	    RadioControlValueAccessor.prototype.ngOnInit = function () {
	        this._control = this._injector.get(ng_control_1.NgControl);
	        this._registry.add(this._control, this);
	    };
	    RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
	    RadioControlValueAccessor.prototype.writeValue = function (value) {
	        this._state = value;
	        if (lang_1.isPresent(value) && value.checked) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', true);
	        }
	    };
	    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function () {
	            fn(new RadioButtonState(true, _this._state.value));
	            _this._registry.select(_this);
	        };
	    };
	    RadioControlValueAccessor.prototype.fireUncheck = function () { this._fn(new RadioButtonState(false, this._state.value)); };
	    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RadioControlValueAccessor.prototype, "name", void 0);
	    RadioControlValueAccessor = __decorate([
	        core_1.Directive({
	            selector: 'input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]',
	            host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
	            providers: [RADIO_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef, RadioControlRegistry, core_1.Injector])
	    ], RadioControlValueAccessor);
	    return RadioControlValueAccessor;
	})();
	exports.RadioControlValueAccessor = RadioControlValueAccessor;


/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';function normalizeValidator(validator) {
	    if (validator.validate !== undefined) {
	        return function (c) { return validator.validate(c); };
	    }
	    else {
	        return validator;
	    }
	}
	exports.normalizeValidator = normalizeValidator;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var async_1 = __webpack_require__(53);
	var core_1 = __webpack_require__(7);
	var ng_control_1 = __webpack_require__(196);
	var validators_1 = __webpack_require__(199);
	var control_value_accessor_1 = __webpack_require__(197);
	var shared_1 = __webpack_require__(198);
	var formControlBinding = lang_1.CONST_EXPR(new core_1.Provider(ng_control_1.NgControl, { useExisting: core_1.forwardRef(function () { return NgFormControl; }) }));
	/**
	 * Binds an existing {@link Control} to a DOM element.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jcQlZ2tTh22BZZ2ucNAT?p=preview))
	 *
	 * In this example, we bind the control to an input element. When the value of the input element
	 * changes, the value of the control will reflect that change. Likewise, if the value of the
	 * control changes, the input element reflects that change.
	 *
	 *  ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   template: `
	 *     <div>
	 *       <h2>NgFormControl Example</h2>
	 *       <form>
	 *         <p>Element with existing control: <input type="text"
	 * [ngFormControl]="loginControl"></p>
	 *         <p>Value of existing control: {{loginControl.value}}</p>
	 *       </form>
	 *     </div>
	 *   `,
	 *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   loginControl: Control = new Control('');
	 * }
	 *  ```
	 *
	 * ###ngModel
	 *
	 * We can also use `ngModel` to bind a domain model to the form.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/yHMLuHO7DNgT8XvtjTDH?p=preview))
	 *
	 *  ```typescript
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: "<input type='text' [ngFormControl]='loginControl' [(ngModel)]='login'>"
	 *      })
	 * class LoginComp {
	 *  loginControl: Control = new Control('');
	 *  login:string;
	 * }
	 *  ```
	 */
	var NgFormControl = (function (_super) {
	    __extends(NgFormControl, _super);
	    function NgFormControl(_validators, _asyncValidators, valueAccessors) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        this.update = new async_1.EventEmitter();
	        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
	    }
	    NgFormControl.prototype.ngOnChanges = function (changes) {
	        if (this._isControlChanged(changes)) {
	            shared_1.setUpControl(this.form, this);
	            this.form.updateValueAndValidity({ emitEvent: false });
	        }
	        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
	            this.form.updateValue(this.model);
	            this.viewModel = this.model;
	        }
	    };
	    Object.defineProperty(NgFormControl.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    NgFormControl.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callEmit(this.update, newValue);
	    };
	    NgFormControl.prototype._isControlChanged = function (changes) {
	        return collection_1.StringMapWrapper.contains(changes, "form");
	    };
	    NgFormControl = __decorate([
	        core_1.Directive({
	            selector: '[ngFormControl]',
	            bindings: [formControlBinding],
	            inputs: ['form: ngFormControl', 'model: ngModel'],
	            outputs: ['update: ngModelChange'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, core_1.Optional()),
	        __param(0, core_1.Self()),
	        __param(0, core_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Self()),
	        __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Self()),
	        __param(2, core_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
	        __metadata('design:paramtypes', [Array, Array, Array])
	    ], NgFormControl);
	    return NgFormControl;
	})(ng_control_1.NgControl);
	exports.NgFormControl = NgFormControl;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	var core_1 = __webpack_require__(7);
	var control_value_accessor_1 = __webpack_require__(197);
	var ng_control_1 = __webpack_require__(196);
	var model_1 = __webpack_require__(192);
	var validators_1 = __webpack_require__(199);
	var shared_1 = __webpack_require__(198);
	var formControlBinding = lang_1.CONST_EXPR(new core_1.Provider(ng_control_1.NgControl, { useExisting: core_1.forwardRef(function () { return NgModel; }) }));
	/**
	 * Binds a domain model to a form control.
	 *
	 * ### Usage
	 *
	 * `ngModel` binds an existing domain model to a form control. For a
	 * two-way binding, use `[(ngModel)]` to ensure the model updates in
	 * both directions.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/R3UX5qDaUqFO2VYR0UzH?p=preview))
	 *  ```typescript
	 * @Component({
	 *      selector: "search-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `<input type='text' [(ngModel)]="searchQuery">`
	 *      })
	 * class SearchComp {
	 *  searchQuery: string;
	 * }
	 *  ```
	 */
	var NgModel = (function (_super) {
	    __extends(NgModel, _super);
	    function NgModel(_validators, _asyncValidators, valueAccessors) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        /** @internal */
	        this._control = new model_1.Control();
	        /** @internal */
	        this._added = false;
	        this.update = new async_1.EventEmitter();
	        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
	    }
	    NgModel.prototype.ngOnChanges = function (changes) {
	        if (!this._added) {
	            shared_1.setUpControl(this._control, this);
	            this._control.updateValueAndValidity({ emitEvent: false });
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
	            this._control.updateValue(this.model);
	            this.viewModel = this.model;
	        }
	    };
	    Object.defineProperty(NgModel.prototype, "control", {
	        get: function () { return this._control; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgModel.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callEmit(this.update, newValue);
	    };
	    NgModel = __decorate([
	        core_1.Directive({
	            selector: '[ngModel]:not([ngControl]):not([ngFormControl])',
	            bindings: [formControlBinding],
	            inputs: ['model: ngModel'],
	            outputs: ['update: ngModelChange'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, core_1.Optional()),
	        __param(0, core_1.Self()),
	        __param(0, core_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Self()),
	        __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Self()),
	        __param(2, core_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
	        __metadata('design:paramtypes', [Array, Array, Array])
	    ], NgModel);
	    return NgModel;
	})(ng_control_1.NgControl);
	exports.NgModel = NgModel;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var control_container_1 = __webpack_require__(194);
	var shared_1 = __webpack_require__(198);
	var validators_1 = __webpack_require__(199);
	var controlGroupProvider = lang_1.CONST_EXPR(new core_1.Provider(control_container_1.ControlContainer, { useExisting: core_1.forwardRef(function () { return NgControlGroup; }) }));
	/**
	 * Creates and binds a control group to a DOM element.
	 *
	 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7EJ11uGeaggViYM6T5nq?p=preview))
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   directives: [FORM_DIRECTIVES],
	 * })
	 * @View({
	 *   template: `
	 *     <div>
	 *       <h2>Angular2 Control &amp; ControlGroup Example</h2>
	 *       <form #f="ngForm">
	 *         <div ngControlGroup="name" #cg-name="form">
	 *           <h3>Enter your name:</h3>
	 *           <p>First: <input ngControl="first" required></p>
	 *           <p>Middle: <input ngControl="middle"></p>
	 *           <p>Last: <input ngControl="last" required></p>
	 *         </div>
	 *         <h3>Name value:</h3>
	 *         <pre>{{valueOf(cgName)}}</pre>
	 *         <p>Name is {{cgName?.control?.valid ? "valid" : "invalid"}}</p>
	 *         <h3>What's your favorite food?</h3>
	 *         <p><input ngControl="food"></p>
	 *         <h3>Form value</h3>
	 *         <pre>{{valueOf(f)}}</pre>
	 *       </form>
	 *     </div>
	 *   `,
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   valueOf(cg: NgControlGroup): string {
	 *     if (cg.control == null) {
	 *       return null;
	 *     }
	 *     return JSON.stringify(cg.control.value, null, 2);
	 *   }
	 * }
	 * ```
	 *
	 * This example declares a control group for a user's name. The value and validation state of
	 * this group can be accessed separately from the overall form.
	 */
	var NgControlGroup = (function (_super) {
	    __extends(NgControlGroup, _super);
	    function NgControlGroup(parent, _validators, _asyncValidators) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        this._parent = parent;
	    }
	    NgControlGroup.prototype.ngOnInit = function () { this.formDirective.addControlGroup(this); };
	    NgControlGroup.prototype.ngOnDestroy = function () { this.formDirective.removeControlGroup(this); };
	    Object.defineProperty(NgControlGroup.prototype, "control", {
	        /**
	         * Get the {@link ControlGroup} backing this binding.
	         */
	        get: function () { return this.formDirective.getControlGroup(this); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "path", {
	        /**
	         * Get the path to this control group.
	         */
	        get: function () { return shared_1.controlPath(this.name, this._parent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "formDirective", {
	        /**
	         * Get the {@link Form} to which this group belongs.
	         */
	        get: function () { return this._parent.formDirective; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlGroup = __decorate([
	        core_1.Directive({
	            selector: '[ngControlGroup]',
	            providers: [controlGroupProvider],
	            inputs: ['name: ngControlGroup'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, core_1.Host()),
	        __param(0, core_1.SkipSelf()),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Self()),
	        __param(1, core_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Self()),
	        __param(2, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), 
	        __metadata('design:paramtypes', [control_container_1.ControlContainer, Array, Array])
	    ], NgControlGroup);
	    return NgControlGroup;
	})(control_container_1.ControlContainer);
	exports.NgControlGroup = NgControlGroup;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var async_1 = __webpack_require__(53);
	var core_1 = __webpack_require__(7);
	var control_container_1 = __webpack_require__(194);
	var shared_1 = __webpack_require__(198);
	var validators_1 = __webpack_require__(199);
	var formDirectiveProvider = lang_1.CONST_EXPR(new core_1.Provider(control_container_1.ControlContainer, { useExisting: core_1.forwardRef(function () { return NgFormModel; }) }));
	/**
	 * Binds an existing control group to a DOM element.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview))
	 *
	 * In this example, we bind the control group to the form element, and we bind the login and
	 * password controls to the login and password elements.
	 *
	 *  ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   template: `
	 *     <div>
	 *       <h2>NgFormModel Example</h2>
	 *       <form [ngFormModel]="loginForm">
	 *         <p>Login: <input type="text" ngControl="login"></p>
	 *         <p>Password: <input type="password" ngControl="password"></p>
	 *       </form>
	 *       <p>Value:</p>
	 *       <pre>{{value}}</pre>
	 *     </div>
	 *   `,
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor() {
	 *     this.loginForm = new ControlGroup({
	 *       login: new Control(""),
	 *       password: new Control("")
	 *     });
	 *   }
	 *
	 *   get value(): string {
	 *     return JSON.stringify(this.loginForm.value, null, 2);
	 *   }
	 * }
	 *  ```
	 *
	 * We can also use ngModel to bind a domain model to the form.
	 *
	 *  ```typescript
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `
	 *        <form [ngFormModel]='loginForm'>
	 *          Login <input type='text' ngControl='login' [(ngModel)]='credentials.login'>
	 *          Password <input type='password' ngControl='password'
	 *                          [(ngModel)]='credentials.password'>
	 *          <button (click)="onLogin()">Login</button>
	 *        </form>`
	 *      })
	 * class LoginComp {
	 *  credentials: {login: string, password: string};
	 *  loginForm: ControlGroup;
	 *
	 *  constructor() {
	 *    this.loginForm = new ControlGroup({
	 *      login: new Control(""),
	 *      password: new Control("")
	 *    });
	 *  }
	 *
	 *  onLogin(): void {
	 *    // this.credentials.login === 'some login'
	 *    // this.credentials.password === 'some password'
	 *  }
	 * }
	 *  ```
	 */
	var NgFormModel = (function (_super) {
	    __extends(NgFormModel, _super);
	    function NgFormModel(_validators, _asyncValidators) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        this.form = null;
	        this.directives = [];
	        this.ngSubmit = new async_1.EventEmitter();
	    }
	    NgFormModel.prototype.ngOnChanges = function (changes) {
	        if (collection_1.StringMapWrapper.contains(changes, "form")) {
	            var sync = shared_1.composeValidators(this._validators);
	            this.form.validator = validators_1.Validators.compose([this.form.validator, sync]);
	            var async = shared_1.composeAsyncValidators(this._asyncValidators);
	            this.form.asyncValidator = validators_1.Validators.composeAsync([this.form.asyncValidator, async]);
	            this.form.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        this._updateDomValue();
	    };
	    Object.defineProperty(NgFormModel.prototype, "formDirective", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormModel.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormModel.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    NgFormModel.prototype.addControl = function (dir) {
	        var ctrl = this.form.find(dir.path);
	        shared_1.setUpControl(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	        this.directives.push(dir);
	    };
	    NgFormModel.prototype.getControl = function (dir) { return this.form.find(dir.path); };
	    NgFormModel.prototype.removeControl = function (dir) { collection_1.ListWrapper.remove(this.directives, dir); };
	    NgFormModel.prototype.addControlGroup = function (dir) {
	        var ctrl = this.form.find(dir.path);
	        shared_1.setUpControlGroup(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	    };
	    NgFormModel.prototype.removeControlGroup = function (dir) { };
	    NgFormModel.prototype.getControlGroup = function (dir) {
	        return this.form.find(dir.path);
	    };
	    NgFormModel.prototype.updateModel = function (dir, value) {
	        var ctrl = this.form.find(dir.path);
	        ctrl.updateValue(value);
	    };
	    NgFormModel.prototype.onSubmit = function () {
	        async_1.ObservableWrapper.callEmit(this.ngSubmit, null);
	        return false;
	    };
	    /** @internal */
	    NgFormModel.prototype._updateDomValue = function () {
	        var _this = this;
	        this.directives.forEach(function (dir) {
	            var ctrl = _this.form.find(dir.path);
	            dir.valueAccessor.writeValue(ctrl.value);
	        });
	    };
	    NgFormModel = __decorate([
	        core_1.Directive({
	            selector: '[ngFormModel]',
	            bindings: [formDirectiveProvider],
	            inputs: ['form: ngFormModel'],
	            host: { '(submit)': 'onSubmit()' },
	            outputs: ['ngSubmit'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, core_1.Optional()),
	        __param(0, core_1.Self()),
	        __param(0, core_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Self()),
	        __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), 
	        __metadata('design:paramtypes', [Array, Array])
	    ], NgFormModel);
	    return NgFormModel;
	})(control_container_1.ControlContainer);
	exports.NgFormModel = NgFormModel;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var async_1 = __webpack_require__(53);
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	var control_container_1 = __webpack_require__(194);
	var model_1 = __webpack_require__(192);
	var shared_1 = __webpack_require__(198);
	var validators_1 = __webpack_require__(199);
	var formDirectiveProvider = lang_1.CONST_EXPR(new core_1.Provider(control_container_1.ControlContainer, { useExisting: core_1.forwardRef(function () { return NgForm; }) }));
	/**
	 * If `NgForm` is bound in a component, `<form>` elements in that component will be
	 * upgraded to use the Angular form system.
	 *
	 * ### Typical Use
	 *
	 * Include `FORM_DIRECTIVES` in the `directives` section of a {@link View} annotation
	 * to use `NgForm` and its associated controls.
	 *
	 * ### Structure
	 *
	 * An Angular form is a collection of `Control`s in some hierarchy.
	 * `Control`s can be at the top level or can be organized in `ControlGroup`s
	 * or `ControlArray`s. This hierarchy is reflected in the form's `value`, a
	 * JSON object that mirrors the form structure.
	 *
	 * ### Submission
	 *
	 * The `ngSubmit` event signals when the user triggers a form submission.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/ltdgYj4P0iY64AR71EpL?p=preview))
	 *
	 *  ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   template: `
	 *     <div>
	 *       <p>Submit the form to see the data object Angular builds</p>
	 *       <h2>NgForm demo</h2>
	 *       <form #f="ngForm" (ngSubmit)="onSubmit(f.value)">
	 *         <h3>Control group: credentials</h3>
	 *         <div ngControlGroup="credentials">
	 *           <p>Login: <input type="text" ngControl="login"></p>
	 *           <p>Password: <input type="password" ngControl="password"></p>
	 *         </div>
	 *         <h3>Control group: person</h3>
	 *         <div ngControlGroup="person">
	 *           <p>First name: <input type="text" ngControl="firstName"></p>
	 *           <p>Last name: <input type="text" ngControl="lastName"></p>
	 *         </div>
	 *         <button type="submit">Submit Form</button>
	 *       <p>Form data submitted:</p>
	 *       </form>
	 *       <pre>{{data}}</pre>
	 *     </div>
	 * `,
	 *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   constructor() {}
	 *
	 *   data: string;
	 *
	 *   onSubmit(data) {
	 *     this.data = JSON.stringify(data, null, 2);
	 *   }
	 * }
	 *  ```
	 */
	var NgForm = (function (_super) {
	    __extends(NgForm, _super);
	    function NgForm(validators, asyncValidators) {
	        _super.call(this);
	        this.ngSubmit = new async_1.EventEmitter();
	        this.form = new model_1.ControlGroup({}, null, shared_1.composeValidators(validators), shared_1.composeAsyncValidators(asyncValidators));
	    }
	    Object.defineProperty(NgForm.prototype, "formDirective", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "controls", {
	        get: function () { return this.form.controls; },
	        enumerable: true,
	        configurable: true
	    });
	    NgForm.prototype.addControl = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            var ctrl = new model_1.Control();
	            shared_1.setUpControl(ctrl, dir);
	            container.addControl(dir.name, ctrl);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        });
	    };
	    NgForm.prototype.getControl = function (dir) { return this.form.find(dir.path); };
	    NgForm.prototype.removeControl = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            if (lang_1.isPresent(container)) {
	                container.removeControl(dir.name);
	                container.updateValueAndValidity({ emitEvent: false });
	            }
	        });
	    };
	    NgForm.prototype.addControlGroup = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            var group = new model_1.ControlGroup({});
	            shared_1.setUpControlGroup(group, dir);
	            container.addControl(dir.name, group);
	            group.updateValueAndValidity({ emitEvent: false });
	        });
	    };
	    NgForm.prototype.removeControlGroup = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            if (lang_1.isPresent(container)) {
	                container.removeControl(dir.name);
	                container.updateValueAndValidity({ emitEvent: false });
	            }
	        });
	    };
	    NgForm.prototype.getControlGroup = function (dir) {
	        return this.form.find(dir.path);
	    };
	    NgForm.prototype.updateModel = function (dir, value) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var ctrl = _this.form.find(dir.path);
	            ctrl.updateValue(value);
	        });
	    };
	    NgForm.prototype.onSubmit = function () {
	        async_1.ObservableWrapper.callEmit(this.ngSubmit, null);
	        return false;
	    };
	    /** @internal */
	    NgForm.prototype._findContainer = function (path) {
	        path.pop();
	        return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
	    };
	    NgForm = __decorate([
	        core_1.Directive({
	            selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',
	            bindings: [formDirectiveProvider],
	            host: {
	                '(submit)': 'onSubmit()',
	            },
	            outputs: ['ngSubmit'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, core_1.Optional()),
	        __param(0, core_1.Self()),
	        __param(0, core_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, core_1.Optional()),
	        __param(1, core_1.Self()),
	        __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), 
	        __metadata('design:paramtypes', [Array, Array])
	    ], NgForm);
	    return NgForm;
	})(control_container_1.ControlContainer);
	exports.NgForm = NgForm;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var ng_control_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(10);
	/**
	 * Directive automatically applied to Angular forms that sets CSS classes
	 * based on control status (valid/invalid/dirty/etc).
	 */
	var NgControlStatus = (function () {
	    function NgControlStatus(cd) {
	        this._cd = cd;
	    }
	    Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.untouched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.touched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.pristine : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.dirty : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? !this._cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlStatus = __decorate([
	        core_1.Directive({
	            selector: '[ngControl],[ngModel],[ngFormControl]',
	            host: {
	                '[class.ng-untouched]': 'ngClassUntouched',
	                '[class.ng-touched]': 'ngClassTouched',
	                '[class.ng-pristine]': 'ngClassPristine',
	                '[class.ng-dirty]': 'ngClassDirty',
	                '[class.ng-valid]': 'ngClassValid',
	                '[class.ng-invalid]': 'ngClassInvalid'
	            }
	        }),
	        __param(0, core_1.Self()), 
	        __metadata('design:paramtypes', [ng_control_1.NgControl])
	    ], NgControlStatus);
	    return NgControlStatus;
	})();
	exports.NgControlStatus = NgControlStatus;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var ng_control_name_1 = __webpack_require__(195);
	var ng_form_control_1 = __webpack_require__(206);
	var ng_model_1 = __webpack_require__(207);
	var ng_control_group_1 = __webpack_require__(208);
	var ng_form_model_1 = __webpack_require__(209);
	var ng_form_1 = __webpack_require__(210);
	var default_value_accessor_1 = __webpack_require__(200);
	var checkbox_value_accessor_1 = __webpack_require__(202);
	var number_value_accessor_1 = __webpack_require__(201);
	var radio_control_value_accessor_1 = __webpack_require__(204);
	var ng_control_status_1 = __webpack_require__(211);
	var select_control_value_accessor_1 = __webpack_require__(203);
	var validators_1 = __webpack_require__(213);
	var ng_control_name_2 = __webpack_require__(195);
	exports.NgControlName = ng_control_name_2.NgControlName;
	var ng_form_control_2 = __webpack_require__(206);
	exports.NgFormControl = ng_form_control_2.NgFormControl;
	var ng_model_2 = __webpack_require__(207);
	exports.NgModel = ng_model_2.NgModel;
	var ng_control_group_2 = __webpack_require__(208);
	exports.NgControlGroup = ng_control_group_2.NgControlGroup;
	var ng_form_model_2 = __webpack_require__(209);
	exports.NgFormModel = ng_form_model_2.NgFormModel;
	var ng_form_2 = __webpack_require__(210);
	exports.NgForm = ng_form_2.NgForm;
	var default_value_accessor_2 = __webpack_require__(200);
	exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
	var checkbox_value_accessor_2 = __webpack_require__(202);
	exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
	var radio_control_value_accessor_2 = __webpack_require__(204);
	exports.RadioControlValueAccessor = radio_control_value_accessor_2.RadioControlValueAccessor;
	exports.RadioButtonState = radio_control_value_accessor_2.RadioButtonState;
	var number_value_accessor_2 = __webpack_require__(201);
	exports.NumberValueAccessor = number_value_accessor_2.NumberValueAccessor;
	var ng_control_status_2 = __webpack_require__(211);
	exports.NgControlStatus = ng_control_status_2.NgControlStatus;
	var select_control_value_accessor_2 = __webpack_require__(203);
	exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
	exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
	var validators_2 = __webpack_require__(213);
	exports.RequiredValidator = validators_2.RequiredValidator;
	exports.MinLengthValidator = validators_2.MinLengthValidator;
	exports.MaxLengthValidator = validators_2.MaxLengthValidator;
	var ng_control_1 = __webpack_require__(196);
	exports.NgControl = ng_control_1.NgControl;
	/**
	 *
	 * A list of all the form directives used as part of a `@View` annotation.
	 *
	 *  This is a shorthand for importing them each individually.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * class MyApp {}
	 * ```
	 */
	exports.FORM_DIRECTIVES = lang_1.CONST_EXPR([
	    ng_control_name_1.NgControlName,
	    ng_control_group_1.NgControlGroup,
	    ng_form_control_1.NgFormControl,
	    ng_model_1.NgModel,
	    ng_form_model_1.NgFormModel,
	    ng_form_1.NgForm,
	    select_control_value_accessor_1.NgSelectOption,
	    default_value_accessor_1.DefaultValueAccessor,
	    number_value_accessor_1.NumberValueAccessor,
	    checkbox_value_accessor_1.CheckboxControlValueAccessor,
	    select_control_value_accessor_1.SelectControlValueAccessor,
	    radio_control_value_accessor_1.RadioControlValueAccessor,
	    ng_control_status_1.NgControlStatus,
	    validators_1.RequiredValidator,
	    validators_1.MinLengthValidator,
	    validators_1.MaxLengthValidator
	]);


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var lang_1 = __webpack_require__(10);
	var validators_1 = __webpack_require__(199);
	var lang_2 = __webpack_require__(10);
	var REQUIRED_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, { useValue: validators_1.Validators.required, multi: true }));
	/**
	 * A Directive that adds the `required` validator to any controls marked with the
	 * `required` attribute, via the {@link NG_VALIDATORS} binding.
	 *
	 * ### Example
	 *
	 * ```
	 * <input ngControl="fullName" required>
	 * ```
	 */
	var RequiredValidator = (function () {
	    function RequiredValidator() {
	    }
	    RequiredValidator = __decorate([
	        core_1.Directive({
	            selector: '[required][ngControl],[required][ngFormControl],[required][ngModel]',
	            providers: [REQUIRED_VALIDATOR]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], RequiredValidator);
	    return RequiredValidator;
	})();
	exports.RequiredValidator = RequiredValidator;
	/**
	 * Provivder which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
	 *
	 * ## Example:
	 *
	 * {@example common/forms/ts/validators/validators.ts region='min'}
	 */
	var MIN_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, { useExisting: core_1.forwardRef(function () { return MinLengthValidator; }), multi: true }));
	/**
	 * A directive which installs the {@link MinLengthValidator} for any `ngControl`,
	 * `ngFormControl`, or control with `ngModel` that also has a `minlength` attribute.
	 */
	var MinLengthValidator = (function () {
	    function MinLengthValidator(minLength) {
	        this._validator = validators_1.Validators.minLength(lang_2.NumberWrapper.parseInt(minLength, 10));
	    }
	    MinLengthValidator.prototype.validate = function (c) { return this._validator(c); };
	    MinLengthValidator = __decorate([
	        core_1.Directive({
	            selector: '[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]',
	            providers: [MIN_LENGTH_VALIDATOR]
	        }),
	        __param(0, core_1.Attribute("minlength")), 
	        __metadata('design:paramtypes', [String])
	    ], MinLengthValidator);
	    return MinLengthValidator;
	})();
	exports.MinLengthValidator = MinLengthValidator;
	/**
	 * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
	 *
	 * ## Example:
	 *
	 * {@example common/forms/ts/validators/validators.ts region='max'}
	 */
	var MAX_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, { useExisting: core_1.forwardRef(function () { return MaxLengthValidator; }), multi: true }));
	/**
	 * A directive which installs the {@link MaxLengthValidator} for any `ngControl, `ngFormControl`,
	 * or control with `ngModel` that also has a `maxlength` attribute.
	 */
	var MaxLengthValidator = (function () {
	    function MaxLengthValidator(maxLength) {
	        this._validator = validators_1.Validators.maxLength(lang_2.NumberWrapper.parseInt(maxLength, 10));
	    }
	    MaxLengthValidator.prototype.validate = function (c) { return this._validator(c); };
	    MaxLengthValidator = __decorate([
	        core_1.Directive({
	            selector: '[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]',
	            providers: [MAX_LENGTH_VALIDATOR]
	        }),
	        __param(0, core_1.Attribute("maxlength")), 
	        __metadata('design:paramtypes', [String])
	    ], MaxLengthValidator);
	    return MaxLengthValidator;
	})();
	exports.MaxLengthValidator = MaxLengthValidator;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var modelModule = __webpack_require__(192);
	/**
	 * Creates a form object from a user-specified configuration.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/ENgZo8EuIECZNensZCVr?p=preview))
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   viewBindings: [FORM_BINDINGS]
	 *   template: `
	 *     <form [ngFormModel]="loginForm">
	 *       <p>Login <input ngControl="login"></p>
	 *       <div ngControlGroup="passwordRetry">
	 *         <p>Password <input type="password" ngControl="password"></p>
	 *         <p>Confirm password <input type="password" ngControl="passwordConfirmation"></p>
	 *       </div>
	 *     </form>
	 *     <h3>Form value:</h3>
	 *     <pre>{{value}}</pre>
	 *   `,
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor(builder: FormBuilder) {
	 *     this.loginForm = builder.group({
	 *       login: ["", Validators.required],
	 *       passwordRetry: builder.group({
	 *         password: ["", Validators.required],
	 *         passwordConfirmation: ["", Validators.required, asyncValidator]
	 *       })
	 *     });
	 *   }
	 *
	 *   get value(): string {
	 *     return JSON.stringify(this.loginForm.value, null, 2);
	 *   }
	 * }
	 * ```
	 */
	var FormBuilder = (function () {
	    function FormBuilder() {
	    }
	    /**
	     * Construct a new {@link ControlGroup} with the given map of configuration.
	     * Valid keys for the `extra` parameter map are `optionals` and `validator`.
	     *
	     * See the {@link ControlGroup} constructor for more details.
	     */
	    FormBuilder.prototype.group = function (controlsConfig, extra) {
	        if (extra === void 0) { extra = null; }
	        var controls = this._reduceControls(controlsConfig);
	        var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
	        var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
	        var asyncValidator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "asyncValidator") : null;
	        return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);
	    };
	    /**
	     * Construct a new {@link Control} with the given `value`,`validator`, and `asyncValidator`.
	     */
	    FormBuilder.prototype.control = function (value, validator, asyncValidator) {
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        return new modelModule.Control(value, validator, asyncValidator);
	    };
	    /**
	     * Construct an array of {@link Control}s from the given `controlsConfig` array of
	     * configuration, with the given optional `validator` and `asyncValidator`.
	     */
	    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
	        var _this = this;
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
	        return new modelModule.ControlArray(controls, validator, asyncValidator);
	    };
	    /** @internal */
	    FormBuilder.prototype._reduceControls = function (controlsConfig) {
	        var _this = this;
	        var controls = {};
	        collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	            controls[controlName] = _this._createControl(controlConfig);
	        });
	        return controls;
	    };
	    /** @internal */
	    FormBuilder.prototype._createControl = function (controlConfig) {
	        if (controlConfig instanceof modelModule.Control ||
	            controlConfig instanceof modelModule.ControlGroup ||
	            controlConfig instanceof modelModule.ControlArray) {
	            return controlConfig;
	        }
	        else if (lang_1.isArray(controlConfig)) {
	            var value = controlConfig[0];
	            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	            var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
	            return this.control(value, validator, asyncValidator);
	        }
	        else {
	            return this.control(controlConfig);
	        }
	    };
	    FormBuilder = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], FormBuilder);
	    return FormBuilder;
	})();
	exports.FormBuilder = FormBuilder;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var forms_1 = __webpack_require__(191);
	var directives_1 = __webpack_require__(183);
	/**
	 * A collection of Angular core directives that are likely to be used in each and every Angular
	 * application. This includes core directives (e.g., NgIf and NgFor), and forms directives (e.g.,
	 * NgModel).
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `directives`
	 * property of the `@Component` or `@View` decorators.
	 *
	 * ### Example
	 *
	 * Instead of writing:
	 *
	 * ```typescript
	 * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from
	 * 'angular2/common';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,
	 * OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could import all the common directives at once:
	 *
	 * ```typescript
	 * import {COMMON_DIRECTIVES} from 'angular2/common';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [COMMON_DIRECTIVES, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 */
	exports.COMMON_DIRECTIVES = lang_1.CONST_EXPR([directives_1.CORE_DIRECTIVES, forms_1.FORM_DIRECTIVES]);


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var dom_adapter_1 = __webpack_require__(144);
	var core_1 = __webpack_require__(7);
	var event_manager_1 = __webpack_require__(217);
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin() {
	        _super.apply(this, arguments);
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var zone = this.manager.getZone();
	        var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
	        return this.manager.getZone().runOutsideAngular(function () { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
	        var zone = this.manager.getZone();
	        var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
	        return this.manager.getZone().runOutsideAngular(function () { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DomEventsPlugin);
	    return DomEventsPlugin;
	})(event_manager_1.EventManagerPlugin);
	exports.DomEventsPlugin = DomEventsPlugin;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var di_1 = __webpack_require__(11);
	var ng_zone_1 = __webpack_require__(86);
	var collection_1 = __webpack_require__(17);
	exports.EVENT_MANAGER_PLUGINS = lang_1.CONST_EXPR(new di_1.OpaqueToken("EventManagerPlugins"));
	var EventManager = (function () {
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = collection_1.ListWrapper.reversed(plugins);
	    }
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    EventManager.prototype.getZone = function () { return this._zone; };
	    /** @internal */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin = plugins[i];
	            if (plugin.supports(eventName)) {
	                return plugin;
	            }
	        }
	        throw new exceptions_1.BaseException("No event manager plugin found for event " + eventName);
	    };
	    EventManager = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(exports.EVENT_MANAGER_PLUGINS)), 
	        __metadata('design:paramtypes', [Array, ng_zone_1.NgZone])
	    ], EventManager);
	    return EventManager;
	})();
	exports.EventManager = EventManager;
	var EventManagerPlugin = (function () {
	    function EventManagerPlugin() {
	    }
	    // That is equivalent to having supporting $event.target
	    EventManagerPlugin.prototype.supports = function (eventName) { return false; };
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        throw "not implemented";
	    };
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        throw "not implemented";
	    };
	    return EventManagerPlugin;
	})();
	exports.EventManagerPlugin = EventManagerPlugin;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var dom_adapter_1 = __webpack_require__(144);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var event_manager_1 = __webpack_require__(217);
	var di_1 = __webpack_require__(11);
	var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	var modifierKeyGetters = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    function KeyEventsPlugin() {
	        _super.call(this);
	    }
	    KeyEventsPlugin.prototype.supports = function (eventName) {
	        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
	    };
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin.eventCallback(element, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	        return this.manager.getZone().runOutsideAngular(function () {
	            return dom_adapter_1.DOM.onAndCancel(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var parts = eventName.toLowerCase().split('.');
	        var domEventName = parts.shift();
	        if ((parts.length === 0) ||
	            !(lang_1.StringWrapper.equals(domEventName, 'keydown') ||
	                lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
	            return null;
	        }
	        var key = KeyEventsPlugin._normalizeKey(parts.pop());
	        var fullKey = '';
	        modifierKeys.forEach(function (modifierName) {
	            if (collection_1.ListWrapper.contains(parts, modifierName)) {
	                collection_1.ListWrapper.remove(parts, modifierName);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var result = collection_1.StringMapWrapper.create();
	        collection_1.StringMapWrapper.set(result, 'domEventName', domEventName);
	        collection_1.StringMapWrapper.set(result, 'fullKey', fullKey);
	        return result;
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = dom_adapter_1.DOM.getEventKey(event);
	        key = key.toLowerCase();
	        if (lang_1.StringWrapper.equals(key, ' ')) {
	            key = 'space'; // for readability
	        }
	        else if (lang_1.StringWrapper.equals(key, '.')) {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        modifierKeys.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {
	        return function (event) {
	            if (lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
	                zone.run(function () { return handler(event); });
	            }
	        };
	    };
	    /** @internal */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a StringMap if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    KeyEventsPlugin = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], KeyEventsPlugin);
	    return KeyEventsPlugin;
	})(event_manager_1.EventManagerPlugin);
	exports.KeyEventsPlugin = KeyEventsPlugin;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var hammer_common_1 = __webpack_require__(220);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var di_1 = __webpack_require__(11);
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin() {
	        _super.apply(this, arguments);
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!_super.prototype.supports.call(this, eventName))
	            return false;
	        if (!lang_1.isPresent(window['Hammer'])) {
	            throw new exceptions_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        return zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            var handler = function (eventObj) { zone.run(function () { handler(eventObj); }); };
	            mc.on(eventName, handler);
	            return function () { mc.off(eventName, handler); };
	        });
	    };
	    HammerGesturesPlugin = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], HammerGesturesPlugin);
	    return HammerGesturesPlugin;
	})(hammer_common_1.HammerGesturesPluginCommon);
	exports.HammerGesturesPlugin = HammerGesturesPlugin;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var event_manager_1 = __webpack_require__(217);
	var collection_1 = __webpack_require__(17);
	var _eventNames = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	var HammerGesturesPluginCommon = (function (_super) {
	    __extends(HammerGesturesPluginCommon, _super);
	    function HammerGesturesPluginCommon() {
	        _super.call(this);
	    }
	    HammerGesturesPluginCommon.prototype.supports = function (eventName) {
	        eventName = eventName.toLowerCase();
	        return collection_1.StringMapWrapper.contains(_eventNames, eventName);
	    };
	    return HammerGesturesPluginCommon;
	})(event_manager_1.EventManagerPlugin);
	exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application into a Web Worker).
	 */
	exports.DOCUMENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('DocumentToken'));


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(11);
	var animation_builder_1 = __webpack_require__(223);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var shared_styles_host_1 = __webpack_require__(230);
	var event_manager_1 = __webpack_require__(217);
	var dom_tokens_1 = __webpack_require__(221);
	var metadata_1 = __webpack_require__(8);
	var dom_adapter_1 = __webpack_require__(144);
	var util_1 = __webpack_require__(228);
	var NAMESPACE_URIS = lang_1.CONST_EXPR({ 'xlink': 'http://www.w3.org/1999/xlink', 'svg': 'http://www.w3.org/2000/svg' });
	var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/g;
	var DomRootRenderer = (function () {
	    function DomRootRenderer(document, eventManager, sharedStylesHost, animate) {
	        this.document = document;
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this.animate = animate;
	        this._registeredComponents = new Map();
	    }
	    DomRootRenderer.prototype.renderComponent = function (componentProto) {
	        var renderer = this._registeredComponents.get(componentProto.id);
	        if (lang_1.isBlank(renderer)) {
	            renderer = new DomRenderer(this, componentProto);
	            this._registeredComponents.set(componentProto.id, renderer);
	        }
	        return renderer;
	    };
	    return DomRootRenderer;
	})();
	exports.DomRootRenderer = DomRootRenderer;
	var DomRootRenderer_ = (function (_super) {
	    __extends(DomRootRenderer_, _super);
	    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animate) {
	        _super.call(this, _document, _eventManager, sharedStylesHost, animate);
	    }
	    DomRootRenderer_ = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), 
	        __metadata('design:paramtypes', [Object, event_manager_1.EventManager, shared_styles_host_1.DomSharedStylesHost, animation_builder_1.AnimationBuilder])
	    ], DomRootRenderer_);
	    return DomRootRenderer_;
	})(DomRootRenderer);
	exports.DomRootRenderer_ = DomRootRenderer_;
	var DomRenderer = (function () {
	    function DomRenderer(_rootRenderer, componentProto) {
	        this._rootRenderer = _rootRenderer;
	        this.componentProto = componentProto;
	        this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
	        if (componentProto.encapsulation !== metadata_1.ViewEncapsulation.Native) {
	            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	        }
	        if (this.componentProto.encapsulation === metadata_1.ViewEncapsulation.Emulated) {
	            this._contentAttr = _shimContentAttribute(componentProto.id);
	            this._hostAttr = _shimHostAttribute(componentProto.id);
	        }
	        else {
	            this._contentAttr = null;
	            this._hostAttr = null;
	        }
	    }
	    DomRenderer.prototype.renderComponent = function (componentProto) {
	        return this._rootRenderer.renderComponent(componentProto);
	    };
	    DomRenderer.prototype.selectRootElement = function (selector) {
	        var el = dom_adapter_1.DOM.querySelector(this._rootRenderer.document, selector);
	        if (lang_1.isBlank(el)) {
	            throw new exceptions_1.BaseException("The selector \"" + selector + "\" did not match any elements");
	        }
	        dom_adapter_1.DOM.clearNodes(el);
	        return el;
	    };
	    DomRenderer.prototype.createElement = function (parent, name) {
	        var nsAndName = splitNamespace(name);
	        var el = lang_1.isPresent(nsAndName[0]) ?
	            dom_adapter_1.DOM.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :
	            dom_adapter_1.DOM.createElement(nsAndName[1]);
	        if (lang_1.isPresent(this._contentAttr)) {
	            dom_adapter_1.DOM.setAttribute(el, this._contentAttr, '');
	        }
	        if (lang_1.isPresent(parent)) {
	            dom_adapter_1.DOM.appendChild(parent, el);
	        }
	        return el;
	    };
	    DomRenderer.prototype.createViewRoot = function (hostElement) {
	        var nodesParent;
	        if (this.componentProto.encapsulation === metadata_1.ViewEncapsulation.Native) {
	            nodesParent = dom_adapter_1.DOM.createShadowRoot(hostElement);
	            this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	            for (var i = 0; i < this._styles.length; i++) {
	                dom_adapter_1.DOM.appendChild(nodesParent, dom_adapter_1.DOM.createStyleElement(this._styles[i]));
	            }
	        }
	        else {
	            if (lang_1.isPresent(this._hostAttr)) {
	                dom_adapter_1.DOM.setAttribute(hostElement, this._hostAttr, '');
	            }
	            nodesParent = hostElement;
	        }
	        return nodesParent;
	    };
	    DomRenderer.prototype.createTemplateAnchor = function (parentElement) {
	        var comment = dom_adapter_1.DOM.createComment(TEMPLATE_COMMENT_TEXT);
	        if (lang_1.isPresent(parentElement)) {
	            dom_adapter_1.DOM.appendChild(parentElement, comment);
	        }
	        return comment;
	    };
	    DomRenderer.prototype.createText = function (parentElement, value) {
	        var node = dom_adapter_1.DOM.createTextNode(value);
	        if (lang_1.isPresent(parentElement)) {
	            dom_adapter_1.DOM.appendChild(parentElement, node);
	        }
	        return node;
	    };
	    DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	        if (lang_1.isBlank(parentElement))
	            return;
	        appendNodes(parentElement, nodes);
	    };
	    DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	        moveNodesAfterSibling(node, viewRootNodes);
	        for (var i = 0; i < viewRootNodes.length; i++)
	            this.animateNodeEnter(viewRootNodes[i]);
	    };
	    DomRenderer.prototype.detachView = function (viewRootNodes) {
	        for (var i = 0; i < viewRootNodes.length; i++) {
	            var node = viewRootNodes[i];
	            dom_adapter_1.DOM.remove(node);
	            this.animateNodeLeave(node);
	        }
	    };
	    DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	        if (this.componentProto.encapsulation === metadata_1.ViewEncapsulation.Native && lang_1.isPresent(hostElement)) {
	            this._rootRenderer.sharedStylesHost.removeHost(dom_adapter_1.DOM.getShadowRoot(hostElement));
	        }
	    };
	    DomRenderer.prototype.listen = function (renderElement, name, callback) {
	        return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	    };
	    DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	        return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	    };
	    DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        dom_adapter_1.DOM.setProperty(renderElement, propertyName, propertyValue);
	    };
	    DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	        var attrNs;
	        var nsAndName = splitNamespace(attributeName);
	        if (lang_1.isPresent(nsAndName[0])) {
	            attributeName = nsAndName[0] + ':' + nsAndName[1];
	            attrNs = NAMESPACE_URIS[nsAndName[0]];
	        }
	        if (lang_1.isPresent(attributeValue)) {
	            if (lang_1.isPresent(attrNs)) {
	                dom_adapter_1.DOM.setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
	            }
	            else {
	                dom_adapter_1.DOM.setAttribute(renderElement, nsAndName[1], attributeValue);
	            }
	        }
	        else {
	            dom_adapter_1.DOM.removeAttribute(renderElement, attributeName);
	        }
	    };
	    DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	        var dashCasedPropertyName = util_1.camelCaseToDashCase(propertyName);
	        if (dom_adapter_1.DOM.isCommentNode(renderElement)) {
	            var existingBindings = lang_1.RegExpWrapper.firstMatch(TEMPLATE_BINDINGS_EXP, lang_1.StringWrapper.replaceAll(dom_adapter_1.DOM.getText(renderElement), /\n/g, ''));
	            var parsedBindings = lang_1.Json.parse(existingBindings[1]);
	            parsedBindings[dashCasedPropertyName] = propertyValue;
	            dom_adapter_1.DOM.setText(renderElement, lang_1.StringWrapper.replace(TEMPLATE_COMMENT_TEXT, '{}', lang_1.Json.stringify(parsedBindings)));
	        }
	        else {
	            this.setElementAttribute(renderElement, propertyName, propertyValue);
	        }
	    };
	    DomRenderer.prototype.setElementDebugInfo = function (renderElement, info) { };
	    DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	        if (isAdd) {
	            dom_adapter_1.DOM.addClass(renderElement, className);
	        }
	        else {
	            dom_adapter_1.DOM.removeClass(renderElement, className);
	        }
	    };
	    DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        if (lang_1.isPresent(styleValue)) {
	            dom_adapter_1.DOM.setStyle(renderElement, styleName, lang_1.stringify(styleValue));
	        }
	        else {
	            dom_adapter_1.DOM.removeStyle(renderElement, styleName);
	        }
	    };
	    DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        dom_adapter_1.DOM.invoke(renderElement, methodName, args);
	    };
	    DomRenderer.prototype.setText = function (renderNode, text) { dom_adapter_1.DOM.setText(renderNode, text); };
	    /**
	     * Performs animations if necessary
	     * @param node
	     */
	    DomRenderer.prototype.animateNodeEnter = function (node) {
	        if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, 'ng-animate')) {
	            dom_adapter_1.DOM.addClass(node, 'ng-enter');
	            this._rootRenderer.animate.css()
	                .addAnimationClass('ng-enter-active')
	                .start(node)
	                .onComplete(function () { dom_adapter_1.DOM.removeClass(node, 'ng-enter'); });
	        }
	    };
	    /**
	     * If animations are necessary, performs animations then removes the element; otherwise, it just
	     * removes the element.
	     * @param node
	     */
	    DomRenderer.prototype.animateNodeLeave = function (node) {
	        if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, 'ng-animate')) {
	            dom_adapter_1.DOM.addClass(node, 'ng-leave');
	            this._rootRenderer.animate.css()
	                .addAnimationClass('ng-leave-active')
	                .start(node)
	                .onComplete(function () {
	                dom_adapter_1.DOM.removeClass(node, 'ng-leave');
	                dom_adapter_1.DOM.remove(node);
	            });
	        }
	        else {
	            dom_adapter_1.DOM.remove(node);
	        }
	    };
	    return DomRenderer;
	})();
	exports.DomRenderer = DomRenderer;
	function moveNodesAfterSibling(sibling, nodes) {
	    var parent = dom_adapter_1.DOM.parentElement(sibling);
	    if (nodes.length > 0 && lang_1.isPresent(parent)) {
	        var nextSibling = dom_adapter_1.DOM.nextSibling(sibling);
	        if (lang_1.isPresent(nextSibling)) {
	            for (var i = 0; i < nodes.length; i++) {
	                dom_adapter_1.DOM.insertBefore(nextSibling, nodes[i]);
	            }
	        }
	        else {
	            for (var i = 0; i < nodes.length; i++) {
	                dom_adapter_1.DOM.appendChild(parent, nodes[i]);
	            }
	        }
	    }
	}
	function appendNodes(parent, nodes) {
	    for (var i = 0; i < nodes.length; i++) {
	        dom_adapter_1.DOM.appendChild(parent, nodes[i]);
	    }
	}
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            dom_adapter_1.DOM.preventDefault(event);
	        }
	    };
	}
	var COMPONENT_REGEX = /%COMP%/g;
	exports.COMPONENT_VARIABLE = '%COMP%';
	exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
	exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
	function _shimContentAttribute(componentShortId) {
	    return lang_1.StringWrapper.replaceAll(exports.CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
	}
	function _shimHostAttribute(componentShortId) {
	    return lang_1.StringWrapper.replaceAll(exports.HOST_ATTR, COMPONENT_REGEX, componentShortId);
	}
	function _flattenStyles(compId, styles, target) {
	    for (var i = 0; i < styles.length; i++) {
	        var style = styles[i];
	        if (lang_1.isArray(style)) {
	            _flattenStyles(compId, style, target);
	        }
	        else {
	            style = lang_1.StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	var NS_PREFIX_RE = /^@([^:]+):(.+)/g;
	function splitNamespace(name) {
	    if (name[0] != '@') {
	        return [null, name];
	    }
	    var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, name);
	    return [match[1], match[2]];
	}


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var css_animation_builder_1 = __webpack_require__(224);
	var browser_details_1 = __webpack_require__(229);
	var AnimationBuilder = (function () {
	    /**
	     * Used for DI
	     * @param browserDetails
	     */
	    function AnimationBuilder(browserDetails) {
	        this.browserDetails = browserDetails;
	    }
	    /**
	     * Creates a new CSS Animation
	     * @returns {CssAnimationBuilder}
	     */
	    AnimationBuilder.prototype.css = function () { return new css_animation_builder_1.CssAnimationBuilder(this.browserDetails); };
	    AnimationBuilder = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_details_1.BrowserDetails])
	    ], AnimationBuilder);
	    return AnimationBuilder;
	})();
	exports.AnimationBuilder = AnimationBuilder;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var css_animation_options_1 = __webpack_require__(225);
	var animation_1 = __webpack_require__(226);
	var CssAnimationBuilder = (function () {
	    /**
	     * Accepts public properties for CssAnimationBuilder
	     */
	    function CssAnimationBuilder(browserDetails) {
	        this.browserDetails = browserDetails;
	        /** @type {CssAnimationOptions} */
	        this.data = new css_animation_options_1.CssAnimationOptions();
	    }
	    /**
	     * Adds a temporary class that will be removed at the end of the animation
	     * @param className
	     */
	    CssAnimationBuilder.prototype.addAnimationClass = function (className) {
	        this.data.animationClasses.push(className);
	        return this;
	    };
	    /**
	     * Adds a class that will remain on the element after the animation has finished
	     * @param className
	     */
	    CssAnimationBuilder.prototype.addClass = function (className) {
	        this.data.classesToAdd.push(className);
	        return this;
	    };
	    /**
	     * Removes a class from the element
	     * @param className
	     */
	    CssAnimationBuilder.prototype.removeClass = function (className) {
	        this.data.classesToRemove.push(className);
	        return this;
	    };
	    /**
	     * Sets the animation duration (and overrides any defined through CSS)
	     * @param duration
	     */
	    CssAnimationBuilder.prototype.setDuration = function (duration) {
	        this.data.duration = duration;
	        return this;
	    };
	    /**
	     * Sets the animation delay (and overrides any defined through CSS)
	     * @param delay
	     */
	    CssAnimationBuilder.prototype.setDelay = function (delay) {
	        this.data.delay = delay;
	        return this;
	    };
	    /**
	     * Sets styles for both the initial state and the destination state
	     * @param from
	     * @param to
	     */
	    CssAnimationBuilder.prototype.setStyles = function (from, to) {
	        return this.setFromStyles(from).setToStyles(to);
	    };
	    /**
	     * Sets the initial styles for the animation
	     * @param from
	     */
	    CssAnimationBuilder.prototype.setFromStyles = function (from) {
	        this.data.fromStyles = from;
	        return this;
	    };
	    /**
	     * Sets the destination styles for the animation
	     * @param to
	     */
	    CssAnimationBuilder.prototype.setToStyles = function (to) {
	        this.data.toStyles = to;
	        return this;
	    };
	    /**
	     * Starts the animation and returns a promise
	     * @param element
	     */
	    CssAnimationBuilder.prototype.start = function (element) {
	        return new animation_1.Animation(element, this.data, this.browserDetails);
	    };
	    return CssAnimationBuilder;
	})();
	exports.CssAnimationBuilder = CssAnimationBuilder;


/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';var CssAnimationOptions = (function () {
	    function CssAnimationOptions() {
	        /** classes to be added to the element */
	        this.classesToAdd = [];
	        /** classes to be removed from the element */
	        this.classesToRemove = [];
	        /** classes to be added for the duration of the animation */
	        this.animationClasses = [];
	    }
	    return CssAnimationOptions;
	})();
	exports.CssAnimationOptions = CssAnimationOptions;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var math_1 = __webpack_require__(227);
	var util_1 = __webpack_require__(228);
	var collection_1 = __webpack_require__(17);
	var dom_adapter_1 = __webpack_require__(144);
	var Animation = (function () {
	    /**
	     * Stores the start time and starts the animation
	     * @param element
	     * @param data
	     * @param browserDetails
	     */
	    function Animation(element, data, browserDetails) {
	        var _this = this;
	        this.element = element;
	        this.data = data;
	        this.browserDetails = browserDetails;
	        /** functions to be called upon completion */
	        this.callbacks = [];
	        /** functions for removing event listeners */
	        this.eventClearFunctions = [];
	        /** flag used to track whether or not the animation has finished */
	        this.completed = false;
	        this._stringPrefix = '';
	        this.startTime = lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
	        this._stringPrefix = dom_adapter_1.DOM.getAnimationPrefix();
	        this.setup();
	        this.wait(function (timestamp) { return _this.start(); });
	    }
	    Object.defineProperty(Animation.prototype, "totalTime", {
	        /** total amount of time that the animation should take including delay */
	        get: function () {
	            var delay = this.computedDelay != null ? this.computedDelay : 0;
	            var duration = this.computedDuration != null ? this.computedDuration : 0;
	            return delay + duration;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Animation.prototype.wait = function (callback) {
	        // Firefox requires 2 frames for some reason
	        this.browserDetails.raf(callback, 2);
	    };
	    /**
	     * Sets up the initial styles before the animation is started
	     */
	    Animation.prototype.setup = function () {
	        if (this.data.fromStyles != null)
	            this.applyStyles(this.data.fromStyles);
	        if (this.data.duration != null)
	            this.applyStyles({ 'transitionDuration': this.data.duration.toString() + 'ms' });
	        if (this.data.delay != null)
	            this.applyStyles({ 'transitionDelay': this.data.delay.toString() + 'ms' });
	    };
	    /**
	     * After the initial setup has occurred, this method adds the animation styles
	     */
	    Animation.prototype.start = function () {
	        this.addClasses(this.data.classesToAdd);
	        this.addClasses(this.data.animationClasses);
	        this.removeClasses(this.data.classesToRemove);
	        if (this.data.toStyles != null)
	            this.applyStyles(this.data.toStyles);
	        var computedStyles = dom_adapter_1.DOM.getComputedStyle(this.element);
	        this.computedDelay =
	            math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-delay')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-delay')));
	        this.computedDuration = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-duration')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-duration')));
	        this.addEvents();
	    };
	    /**
	     * Applies the provided styles to the element
	     * @param styles
	     */
	    Animation.prototype.applyStyles = function (styles) {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(styles, function (value, key) {
	            var dashCaseKey = util_1.camelCaseToDashCase(key);
	            if (lang_1.isPresent(dom_adapter_1.DOM.getStyle(_this.element, dashCaseKey))) {
	                dom_adapter_1.DOM.setStyle(_this.element, dashCaseKey, value.toString());
	            }
	            else {
	                dom_adapter_1.DOM.setStyle(_this.element, _this._stringPrefix + dashCaseKey, value.toString());
	            }
	        });
	    };
	    /**
	     * Adds the provided classes to the element
	     * @param classes
	     */
	    Animation.prototype.addClasses = function (classes) {
	        for (var i = 0, len = classes.length; i < len; i++)
	            dom_adapter_1.DOM.addClass(this.element, classes[i]);
	    };
	    /**
	     * Removes the provided classes from the element
	     * @param classes
	     */
	    Animation.prototype.removeClasses = function (classes) {
	        for (var i = 0, len = classes.length; i < len; i++)
	            dom_adapter_1.DOM.removeClass(this.element, classes[i]);
	    };
	    /**
	     * Adds events to track when animations have finished
	     */
	    Animation.prototype.addEvents = function () {
	        var _this = this;
	        if (this.totalTime > 0) {
	            this.eventClearFunctions.push(dom_adapter_1.DOM.onAndCancel(this.element, dom_adapter_1.DOM.getTransitionEnd(), function (event) { return _this.handleAnimationEvent(event); }));
	        }
	        else {
	            this.handleAnimationCompleted();
	        }
	    };
	    Animation.prototype.handleAnimationEvent = function (event) {
	        var elapsedTime = math_1.Math.round(event.elapsedTime * 1000);
	        if (!this.browserDetails.elapsedTimeIncludesDelay)
	            elapsedTime += this.computedDelay;
	        event.stopPropagation();
	        if (elapsedTime >= this.totalTime)
	            this.handleAnimationCompleted();
	    };
	    /**
	     * Runs all animation callbacks and removes temporary classes
	     */
	    Animation.prototype.handleAnimationCompleted = function () {
	        this.removeClasses(this.data.animationClasses);
	        this.callbacks.forEach(function (callback) { return callback(); });
	        this.callbacks = [];
	        this.eventClearFunctions.forEach(function (fn) { return fn(); });
	        this.eventClearFunctions = [];
	        this.completed = true;
	    };
	    /**
	     * Adds animation callbacks to be called upon completion
	     * @param callback
	     * @returns {Animation}
	     */
	    Animation.prototype.onComplete = function (callback) {
	        if (this.completed) {
	            callback();
	        }
	        else {
	            this.callbacks.push(callback);
	        }
	        return this;
	    };
	    /**
	     * Converts the duration string to the number of milliseconds
	     * @param duration
	     * @returns {number}
	     */
	    Animation.prototype.parseDurationString = function (duration) {
	        var maxValue = 0;
	        // duration must have at least 2 characters to be valid. (number + type)
	        if (duration == null || duration.length < 2) {
	            return maxValue;
	        }
	        else if (duration.substring(duration.length - 2) == 'ms') {
	            var value = lang_1.NumberWrapper.parseInt(this.stripLetters(duration), 10);
	            if (value > maxValue)
	                maxValue = value;
	        }
	        else if (duration.substring(duration.length - 1) == 's') {
	            var ms = lang_1.NumberWrapper.parseFloat(this.stripLetters(duration)) * 1000;
	            var value = math_1.Math.floor(ms);
	            if (value > maxValue)
	                maxValue = value;
	        }
	        return maxValue;
	    };
	    /**
	     * Strips the letters from the duration string
	     * @param str
	     * @returns {string}
	     */
	    Animation.prototype.stripLetters = function (str) {
	        return lang_1.StringWrapper.replaceAll(str, lang_1.RegExpWrapper.create('[^0-9]+$', ''), '');
	    };
	    return Animation;
	})();
	exports.Animation = Animation;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	exports.Math = lang_1.global.Math;
	exports.NaN = typeof exports.NaN;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var math_1 = __webpack_require__(227);
	var dom_adapter_1 = __webpack_require__(144);
	var BrowserDetails = (function () {
	    function BrowserDetails() {
	        this.elapsedTimeIncludesDelay = false;
	        this.doesElapsedTimeIncludesDelay();
	    }
	    /**
	     * Determines if `event.elapsedTime` includes transition delay in the current browser.  At this
	     * time, Chrome and Opera seem to be the only browsers that include this.
	     */
	    BrowserDetails.prototype.doesElapsedTimeIncludesDelay = function () {
	        var _this = this;
	        var div = dom_adapter_1.DOM.createElement('div');
	        dom_adapter_1.DOM.setAttribute(div, 'style', "position: absolute; top: -9999px; left: -9999px; width: 1px;\n      height: 1px; transition: all 1ms linear 1ms;");
	        // Firefox requires that we wait for 2 frames for some reason
	        this.raf(function (timestamp) {
	            dom_adapter_1.DOM.on(div, 'transitionend', function (event) {
	                var elapsed = math_1.Math.round(event.elapsedTime * 1000);
	                _this.elapsedTimeIncludesDelay = elapsed == 2;
	                dom_adapter_1.DOM.remove(div);
	            });
	            dom_adapter_1.DOM.setStyle(div, 'width', '2px');
	        }, 2);
	    };
	    BrowserDetails.prototype.raf = function (callback, frames) {
	        if (frames === void 0) { frames = 1; }
	        var queue = new RafQueue(callback, frames);
	        return function () { return queue.cancel(); };
	    };
	    BrowserDetails = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserDetails);
	    return BrowserDetails;
	})();
	exports.BrowserDetails = BrowserDetails;
	var RafQueue = (function () {
	    function RafQueue(callback, frames) {
	        this.callback = callback;
	        this.frames = frames;
	        this._raf();
	    }
	    RafQueue.prototype._raf = function () {
	        var _this = this;
	        this.currentFrameId = dom_adapter_1.DOM.requestAnimationFrame(function (timestamp) { return _this._nextFrame(timestamp); });
	    };
	    RafQueue.prototype._nextFrame = function (timestamp) {
	        this.frames--;
	        if (this.frames > 0) {
	            this._raf();
	        }
	        else {
	            this.callback(timestamp);
	        }
	    };
	    RafQueue.prototype.cancel = function () {
	        dom_adapter_1.DOM.cancelAnimationFrame(this.currentFrameId);
	        this.currentFrameId = null;
	    };
	    return RafQueue;
	})();


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var dom_adapter_1 = __webpack_require__(144);
	var di_1 = __webpack_require__(11);
	var collection_1 = __webpack_require__(17);
	var dom_tokens_1 = __webpack_require__(221);
	var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        /** @internal */
	        this._styles = [];
	        /** @internal */
	        this._stylesSet = new Set();
	    }
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var additions = [];
	        styles.forEach(function (style) {
	            if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
	                _this._stylesSet.add(style);
	                _this._styles.push(style);
	                additions.push(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	    SharedStylesHost = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], SharedStylesHost);
	    return SharedStylesHost;
	})();
	exports.SharedStylesHost = SharedStylesHost;
	var DomSharedStylesHost = (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    function DomSharedStylesHost(doc) {
	        _super.call(this);
	        this._hostNodes = new Set();
	        this._hostNodes.add(doc.head);
	    }
	    /** @internal */
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        for (var i = 0; i < styles.length; i++) {
	            var style = styles[i];
	            dom_adapter_1.DOM.appendChild(host, dom_adapter_1.DOM.createStyleElement(style));
	        }
	    };
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._styles, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) { collection_1.SetWrapper.delete(this._hostNodes, hostNode); };
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	    };
	    DomSharedStylesHost = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), 
	        __metadata('design:paramtypes', [Object])
	    ], DomSharedStylesHost);
	    return DomSharedStylesHost;
	})(SharedStylesHost);
	exports.DomSharedStylesHost = DomSharedStylesHost;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var dom_adapter_1 = __webpack_require__(144);
	var generic_browser_adapter_1 = __webpack_require__(232);
	var _attrToPropMap = {
	    'class': 'className',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex'
	};
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	/**
	 * A `DomAdapter` powered by full browser DOM APIs.
	 */
	/* tslint:disable:requireParameterType */
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error("parse not implemented"); };
	    BrowserDomAdapter.makeCurrent = function () { dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter()); };
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
	    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
	    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
	        el[methodName].apply(el, args);
	    };
	    // TODO(tbosch): move this into a separate environment class once we have it
	    BrowserDomAdapter.prototype.logError = function (error) {
	        if (window.console.error) {
	            window.console.error(error);
	        }
	        else {
	            window.console.log(error);
	        }
	    };
	    BrowserDomAdapter.prototype.log = function (error) { window.console.log(error); };
	    BrowserDomAdapter.prototype.logGroup = function (error) {
	        if (window.console.group) {
	            window.console.group(error);
	            this.logError(error);
	        }
	        else {
	            window.console.log(error);
	        }
	    };
	    BrowserDomAdapter.prototype.logGroupEnd = function () {
	        if (window.console.groupEnd) {
	            window.console.groupEnd();
	        }
	    };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () { el.removeEventListener(evt, listener, false); };
	    };
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var evt = document.createEvent('MouseEvent');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        var evt = document.createEvent('Event');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.preventDefault = function (evt) {
	        evt.preventDefault();
	        evt.returnValue = false;
	    };
	    BrowserDomAdapter.prototype.isPrevented = function (evt) {
	        return evt.defaultPrevented || lang_1.isPresent(evt.returnValue) && !evt.returnValue;
	    };
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, "content")) {
	            return node.content;
	        }
	        else {
	            return node;
	        }
	    };
	    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var childNodes = el.childNodes;
	        var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
	        for (var i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	    };
	    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	    BrowserDomAdapter.prototype.remove = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	        return node;
	    };
	    BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) { nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); }); };
	    BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	    // TODO(vicb): removed Element type because it does not support StyleElement
	    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElementNS(ns, tagName);
	    };
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var el = doc.createElement('SCRIPT');
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var style = doc.createElement('style');
	        this.appendChild(style, this.createTextNode(css));
	        return style;
	    };
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
	    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
	    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	    BrowserDomAdapter.prototype.hasClass = function (element, className) { return element.classList.contains(className); };
	    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	        element.style[styleName] = styleValue;
	    };
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) { element.style[stylename] = null; };
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	        if (styleValue === void 0) { styleValue = null; }
	        var value = this.getStyle(element, styleName) || '';
	        return styleValue ? value == styleValue : value.length > 0;
	    };
	    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var res = new Map();
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) { return element.hasAttribute(attribute); };
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) { return element.getAttribute(attribute); };
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	        element.setAttributeNS(ns, name, value);
	    };
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        try {
	            return el.getBoundingClientRect();
	        }
	        catch (e) {
	            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	        }
	    };
	    BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	    BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        var matches = false;
	        if (n instanceof HTMLElement) {
	            if (n.matches) {
	                matches = n.matches(selector);
	            }
	            else if (n.msMatchesSelector) {
	                matches = n.msMatchesSelector(selector);
	            }
	            else if (n.webkitMatchesSelector) {
	                matches = n.webkitMatchesSelector(selector);
	            }
	        }
	        return matches;
	    };
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
	    };
	    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) { return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot); };
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) {
	        var toImport = node;
	        if (this.isTemplateElement(node)) {
	            toImport = this.content(node);
	        }
	        return document.importNode(toImport, true);
	    };
	    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	    BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var key = event.key;
	        if (lang_1.isBlank(key)) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari
	            // cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (lang_1.isBlank(key)) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = _chromeNumKeyPadMap[key];
	                }
	            }
	        }
	        if (_keyMap.hasOwnProperty(key)) {
	            key = _keyMap[key];
	        }
	        return key;
	    };
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	        if (target == "window") {
	            return window;
	        }
	        else if (target == "document") {
	            return document;
	        }
	        else if (target == "body") {
	            return document.body;
	        }
	    };
	    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	    BrowserDomAdapter.prototype.getBaseHref = function () {
	        var href = getBaseElementHref();
	        if (lang_1.isBlank(href)) {
	            return null;
	        }
	        return relativePath(href);
	    };
	    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	    BrowserDomAdapter.prototype.setData = function (element, name, value) {
	        this.setAttribute(element, 'data-' + name, value);
	    };
	    BrowserDomAdapter.prototype.getData = function (element, name) { return this.getAttribute(element, 'data-' + name); };
	    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	    // TODO(tbosch): move this into a separate environment class once we have it
	    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { lang_1.setValueOnPath(lang_1.global, path, value); };
	    BrowserDomAdapter.prototype.requestAnimationFrame = function (callback) { return window.requestAnimationFrame(callback); };
	    BrowserDomAdapter.prototype.cancelAnimationFrame = function (id) { window.cancelAnimationFrame(id); };
	    BrowserDomAdapter.prototype.performanceNow = function () {
	        // performance.now() is not available in all browsers, see
	        // http://caniuse.com/#search=performance.now
	        if (lang_1.isPresent(window.performance) && lang_1.isPresent(window.performance.now)) {
	            return window.performance.now();
	        }
	        else {
	            return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
	        }
	    };
	    return BrowserDomAdapter;
	})(generic_browser_adapter_1.GenericBrowserDomAdapter);
	exports.BrowserDomAdapter = BrowserDomAdapter;
	var baseElement = null;
	function getBaseElementHref() {
	    if (lang_1.isBlank(baseElement)) {
	        baseElement = document.querySelector('base');
	        if (lang_1.isBlank(baseElement)) {
	            return null;
	        }
	    }
	    return baseElement.getAttribute('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode = null;
	function relativePath(url) {
	    if (lang_1.isBlank(urlParsingNode)) {
	        urlParsingNode = document.createElement("a");
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var dom_adapter_1 = __webpack_require__(144);
	var xhr_impl_1 = __webpack_require__(233);
	/**
	 * Provides DOM operations in any browser environment.
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        var _this = this;
	        _super.call(this);
	        this._animationPrefix = null;
	        this._transitionEnd = null;
	        try {
	            var element = this.createElement('div', this.defaultDoc());
	            if (lang_1.isPresent(this.getStyle(element, 'animationName'))) {
	                this._animationPrefix = '';
	            }
	            else {
	                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                for (var i = 0; i < domPrefixes.length; i++) {
	                    if (lang_1.isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
	                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                        break;
	                    }
	                }
	            }
	            var transEndEventNames = {
	                WebkitTransition: 'webkitTransitionEnd',
	                MozTransition: 'transitionend',
	                OTransition: 'oTransitionEnd otransitionend',
	                transition: 'transitionend'
	            };
	            collection_1.StringMapWrapper.forEach(transEndEventNames, function (value, key) {
	                if (lang_1.isPresent(_this.getStyle(element, key))) {
	                    _this._transitionEnd = value;
	                }
	            });
	        }
	        catch (e) {
	            this._animationPrefix = null;
	            this._transitionEnd = null;
	        }
	    }
	    GenericBrowserDomAdapter.prototype.getXHR = function () { return xhr_impl_1.XHRImpl; };
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
	    };
	    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
	        return lang_1.isPresent(this._animationPrefix) ? this._animationPrefix : "";
	    };
	    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return lang_1.isPresent(this._transitionEnd) ? this._transitionEnd : ""; };
	    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	        return lang_1.isPresent(this._animationPrefix) && lang_1.isPresent(this._transitionEnd);
	    };
	    return GenericBrowserDomAdapter;
	})(dom_adapter_1.DomAdapter);
	exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var promise_1 = __webpack_require__(54);
	var lang_1 = __webpack_require__(10);
	var xhr_1 = __webpack_require__(234);
	var XHRImpl = (function (_super) {
	    __extends(XHRImpl, _super);
	    function XHRImpl() {
	        _super.apply(this, arguments);
	    }
	    XHRImpl.prototype.get = function (url) {
	        var completer = promise_1.PromiseWrapper.completer();
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	            var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                completer.resolve(response);
	            }
	            else {
	                completer.reject("Failed to load " + url, null);
	            }
	        };
	        xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
	        xhr.send();
	        return completer.promise;
	    };
	    return XHRImpl;
	})(xhr_1.XHR);
	exports.XHRImpl = XHRImpl;


/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';// TODO: vsavkin rename it into TemplateLoader
	/**
	 * An interface for retrieving documents by URL that the compiler uses
	 * to load templates.
	 */
	var XHR = (function () {
	    function XHR() {
	    }
	    XHR.prototype.get = function (url) { return null; };
	    return XHR;
	})();
	exports.XHR = XHR;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var dom_adapter_1 = __webpack_require__(144);
	var core_1 = __webpack_require__(7);
	var PublicTestability = (function () {
	    function PublicTestability(testability) {
	        this._testability = testability;
	    }
	    PublicTestability.prototype.isStable = function () { return this._testability.isStable(); };
	    PublicTestability.prototype.whenStable = function (callback) { this._testability.whenStable(callback); };
	    PublicTestability.prototype.findBindings = function (using, provider, exactMatch) {
	        return this.findProviders(using, provider, exactMatch);
	    };
	    PublicTestability.prototype.findProviders = function (using, provider, exactMatch) {
	        return this._testability.findBindings(using, provider, exactMatch);
	    };
	    return PublicTestability;
	})();
	var BrowserGetTestability = (function () {
	    function BrowserGetTestability() {
	    }
	    BrowserGetTestability.init = function () { core_1.setTestabilityGetter(new BrowserGetTestability()); };
	    BrowserGetTestability.prototype.addToWindow = function (registry) {
	        lang_1.global.getAngularTestability = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            var testability = registry.findTestabilityInTree(elem, findInAncestors);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return new PublicTestability(testability);
	        };
	        lang_1.global.getAllAngularTestabilities = function () {
	            var testabilities = registry.getAllTestabilities();
	            return testabilities.map(function (testability) { return new PublicTestability(testability); });
	        };
	        var whenAllStable = function (callback) {
	            var testabilities = lang_1.global.getAllAngularTestabilities();
	            var count = testabilities.length;
	            var didWork = false;
	            var decrement = function (didWork_) {
	                didWork = didWork || didWork_;
	                count--;
	                if (count == 0) {
	                    callback(didWork);
	                }
	            };
	            testabilities.forEach(function (testability) { testability.whenStable(decrement); });
	        };
	        if (!lang_1.global.frameworkStabilizers) {
	            lang_1.global.frameworkStabilizers = collection_1.ListWrapper.createGrowableSize(0);
	        }
	        lang_1.global.frameworkStabilizers.push(whenAllStable);
	    };
	    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        if (elem == null) {
	            return null;
	        }
	        var t = registry.getTestability(elem);
	        if (lang_1.isPresent(t)) {
	            return t;
	        }
	        else if (!findInAncestors) {
	            return null;
	        }
	        if (dom_adapter_1.DOM.isShadowRoot(elem)) {
	            return this.findTestabilityInTree(registry, dom_adapter_1.DOM.getHost(elem), true);
	        }
	        return this.findTestabilityInTree(registry, dom_adapter_1.DOM.parentElement(elem), true);
	    };
	    return BrowserGetTestability;
	})();
	exports.BrowserGetTestability = BrowserGetTestability;


/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';/**
	 * This is here because DART requires it. It is noop in JS.
	 */
	function wtfInit() { }
	exports.wtfInit = wtfInit;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * This is a set of classes and objects that can be used both in the browser and on the server.
	 */
	var dom_adapter_1 = __webpack_require__(144);
	exports.DOM = dom_adapter_1.DOM;
	exports.setRootDomAdapter = dom_adapter_1.setRootDomAdapter;
	exports.DomAdapter = dom_adapter_1.DomAdapter;
	var dom_renderer_1 = __webpack_require__(222);
	exports.DomRenderer = dom_renderer_1.DomRenderer;
	var dom_tokens_1 = __webpack_require__(221);
	exports.DOCUMENT = dom_tokens_1.DOCUMENT;
	var shared_styles_host_1 = __webpack_require__(230);
	exports.SharedStylesHost = shared_styles_host_1.SharedStylesHost;
	exports.DomSharedStylesHost = shared_styles_host_1.DomSharedStylesHost;
	var dom_events_1 = __webpack_require__(216);
	exports.DomEventsPlugin = dom_events_1.DomEventsPlugin;
	var event_manager_1 = __webpack_require__(217);
	exports.EVENT_MANAGER_PLUGINS = event_manager_1.EVENT_MANAGER_PLUGINS;
	exports.EventManager = event_manager_1.EventManager;
	exports.EventManagerPlugin = event_manager_1.EventManagerPlugin;
	__export(__webpack_require__(238));
	__export(__webpack_require__(239));


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var dom_adapter_1 = __webpack_require__(144);
	/**
	 * Predicates for use with {@link DebugElement}'s query functions.
	 */
	var By = (function () {
	    function By() {
	    }
	    /**
	     * Match all elements.
	     *
	     * ## Example
	     *
	     * {@example platform/dom/debug/ts/by/by.ts region='by_all'}
	     */
	    By.all = function () { return function (debugElement) { return true; }; };
	    /**
	     * Match elements by the given CSS selector.
	     *
	     * ## Example
	     *
	     * {@example platform/dom/debug/ts/by/by.ts region='by_css'}
	     */
	    By.css = function (selector) {
	        return function (debugElement) {
	            return lang_1.isPresent(debugElement.nativeElement) ?
	                dom_adapter_1.DOM.elementMatches(debugElement.nativeElement, selector) :
	                false;
	        };
	    };
	    /**
	     * Match elements that have the given directive present.
	     *
	     * ## Example
	     *
	     * {@example platform/dom/debug/ts/by/by.ts region='by_directive'}
	     */
	    By.directive = function (type) {
	        return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	    };
	    return By;
	})();
	exports.By = By;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var dom_adapter_1 = __webpack_require__(144);
	var debug_node_1 = __webpack_require__(111);
	var dom_renderer_1 = __webpack_require__(222);
	var core_1 = __webpack_require__(7);
	var debug_renderer_1 = __webpack_require__(240);
	var INSPECT_GLOBAL_NAME = 'ng.probe';
	/**
	 * Returns a {@link DebugElement} for the given native DOM element, or
	 * null if the given native element does not have an Angular view associated
	 * with it.
	 */
	function inspectNativeElement(element) {
	    return debug_node_1.getDebugNode(element);
	}
	exports.inspectNativeElement = inspectNativeElement;
	function _createConditionalRootRenderer(rootRenderer) {
	    if (lang_1.assertionsEnabled()) {
	        return _createRootRenderer(rootRenderer);
	    }
	    return rootRenderer;
	}
	function _createRootRenderer(rootRenderer) {
	    dom_adapter_1.DOM.setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	    return new debug_renderer_1.DebugDomRootRenderer(rootRenderer);
	}
	/**
	 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	 */
	exports.ELEMENT_PROBE_PROVIDERS = lang_1.CONST_EXPR([
	    new di_1.Provider(core_1.RootRenderer, { useFactory: _createConditionalRootRenderer, deps: [dom_renderer_1.DomRootRenderer] })
	]);
	exports.ELEMENT_PROBE_PROVIDERS_PROD_MODE = lang_1.CONST_EXPR([new di_1.Provider(core_1.RootRenderer, { useFactory: _createRootRenderer, deps: [dom_renderer_1.DomRootRenderer] })]);


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var debug_node_1 = __webpack_require__(111);
	var DebugDomRootRenderer = (function () {
	    function DebugDomRootRenderer(_delegate) {
	        this._delegate = _delegate;
	    }
	    DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
	        return new DebugDomRenderer(this, this._delegate.renderComponent(componentProto));
	    };
	    return DebugDomRootRenderer;
	})();
	exports.DebugDomRootRenderer = DebugDomRootRenderer;
	var DebugDomRenderer = (function () {
	    function DebugDomRenderer(_rootRenderer, _delegate) {
	        this._rootRenderer = _rootRenderer;
	        this._delegate = _delegate;
	    }
	    DebugDomRenderer.prototype.renderComponent = function (componentType) {
	        return this._rootRenderer.renderComponent(componentType);
	    };
	    DebugDomRenderer.prototype.selectRootElement = function (selector) {
	        var nativeEl = this._delegate.selectRootElement(selector);
	        var debugEl = new debug_node_1.DebugElement(nativeEl, null);
	        debug_node_1.indexDebugNode(debugEl);
	        return nativeEl;
	    };
	    DebugDomRenderer.prototype.createElement = function (parentElement, name) {
	        var nativeEl = this._delegate.createElement(parentElement, name);
	        var debugEl = new debug_node_1.DebugElement(nativeEl, debug_node_1.getDebugNode(parentElement));
	        debugEl.name = name;
	        debug_node_1.indexDebugNode(debugEl);
	        return nativeEl;
	    };
	    DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
	    DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement) {
	        var comment = this._delegate.createTemplateAnchor(parentElement);
	        var debugEl = new debug_node_1.DebugNode(comment, debug_node_1.getDebugNode(parentElement));
	        debug_node_1.indexDebugNode(debugEl);
	        return comment;
	    };
	    DebugDomRenderer.prototype.createText = function (parentElement, value) {
	        var text = this._delegate.createText(parentElement, value);
	        var debugEl = new debug_node_1.DebugNode(text, debug_node_1.getDebugNode(parentElement));
	        debug_node_1.indexDebugNode(debugEl);
	        return text;
	    };
	    DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	        var debugParent = debug_node_1.getDebugNode(parentElement);
	        if (lang_1.isPresent(debugParent) && debugParent instanceof debug_node_1.DebugElement) {
	            nodes.forEach(function (node) { debugParent.addChild(debug_node_1.getDebugNode(node)); });
	        }
	        return this._delegate.projectNodes(parentElement, nodes);
	    };
	    DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	        var debugNode = debug_node_1.getDebugNode(node);
	        if (lang_1.isPresent(debugNode)) {
	            var debugParent = debugNode.parent;
	            if (viewRootNodes.length > 0 && lang_1.isPresent(debugParent)) {
	                var debugViewRootNodes = [];
	                viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes.push(debug_node_1.getDebugNode(rootNode)); });
	                debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
	            }
	        }
	        return this._delegate.attachViewAfter(node, viewRootNodes);
	    };
	    DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
	        viewRootNodes.forEach(function (node) {
	            var debugNode = debug_node_1.getDebugNode(node);
	            if (lang_1.isPresent(debugNode) && lang_1.isPresent(debugNode.parent)) {
	                debugNode.parent.removeChild(debugNode);
	            }
	        });
	        return this._delegate.detachView(viewRootNodes);
	    };
	    DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	        viewAllNodes.forEach(function (node) { debug_node_1.removeDebugNodeFromIndex(debug_node_1.getDebugNode(node)); });
	        return this._delegate.destroyView(hostElement, viewAllNodes);
	    };
	    DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
	        var debugEl = debug_node_1.getDebugNode(renderElement);
	        if (lang_1.isPresent(debugEl)) {
	            debugEl.listeners.push(new debug_node_1.EventListener(name, callback));
	        }
	        return this._delegate.listen(renderElement, name, callback);
	    };
	    DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
	        return this._delegate.listenGlobal(target, name, callback);
	    };
	    DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	        var debugEl = debug_node_1.getDebugNode(renderElement);
	        if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
	            debugEl.properties.set(propertyName, propertyValue);
	        }
	        return this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
	    };
	    DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	        var debugEl = debug_node_1.getDebugNode(renderElement);
	        if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
	            debugEl.attributes.set(attributeName, attributeValue);
	        }
	        return this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
	    };
	    /**
	     * Used only in debug mode to serialize property changes to comment nodes,
	     * such as <template> placeholders.
	     */
	    DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	        return this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
	    };
	    /**
	     * Used only in development mode to set information needed by the DebugNode for this element.
	     */
	    DebugDomRenderer.prototype.setElementDebugInfo = function (renderElement, info) {
	        var debugEl = debug_node_1.getDebugNode(renderElement);
	        debugEl.setDebugInfo(info);
	        return this._delegate.setElementDebugInfo(renderElement, info);
	    };
	    DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	        return this._delegate.setElementClass(renderElement, className, isAdd);
	    };
	    DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	        return this._delegate.setElementStyle(renderElement, styleName, styleValue);
	    };
	    DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	        return this._delegate.invokeElementMethod(renderElement, methodName, args);
	    };
	    DebugDomRenderer.prototype.setText = function (renderNode, text) { return this._delegate.setText(renderNode, text); };
	    return DebugDomRenderer;
	})();
	exports.DebugDomRenderer = DebugDomRenderer;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var dom_adapter_1 = __webpack_require__(144);
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 */
	var Title = (function () {
	    function Title() {
	    }
	    /**
	     * Get the title of the current HTML document.
	     * @returns {string}
	     */
	    Title.prototype.getTitle = function () { return dom_adapter_1.DOM.getTitle(); };
	    /**
	     * Set the title of the current HTML document.
	     * @param newTitle
	     */
	    Title.prototype.setTitle = function (newTitle) { dom_adapter_1.DOM.setTitle(newTitle); };
	    return Title;
	})();
	exports.Title = Title;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var common_tools_1 = __webpack_require__(243);
	var context = lang_1.global;
	/**
	 * Enabled Angular 2 debug tools that are accessible via your browser's
	 * developer console.
	 *
	 * Usage:
	 *
	 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	 *    then hit Enter.
	 */
	function enableDebugTools(ref) {
	    context.ng = new common_tools_1.AngularTools(ref);
	}
	exports.enableDebugTools = enableDebugTools;
	/**
	 * Disables Angular 2 tools.
	 */
	function disableDebugTools() {
	    delete context.ng;
	}
	exports.disableDebugTools = disableDebugTools;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var application_ref_1 = __webpack_require__(85);
	var lang_1 = __webpack_require__(10);
	var browser_1 = __webpack_require__(244);
	var dom_adapter_1 = __webpack_require__(144);
	/**
	 * Entry point for all Angular debug tools. This object corresponds to the `ng`
	 * global variable accessible in the dev console.
	 */
	var AngularTools = (function () {
	    function AngularTools(ref) {
	        this.profiler = new AngularProfiler(ref);
	    }
	    return AngularTools;
	})();
	exports.AngularTools = AngularTools;
	/**
	 * Entry point for all Angular profiling-related debug tools. This object
	 * corresponds to the `ng.profiler` in the dev console.
	 */
	var AngularProfiler = (function () {
	    function AngularProfiler(ref) {
	        this.appRef = ref.injector.get(application_ref_1.ApplicationRef);
	    }
	    /**
	     * Exercises change detection in a loop and then prints the average amount of
	     * time in milliseconds how long a single round of change detection takes for
	     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	     * of 500 milliseconds.
	     *
	     * Optionally, a user may pass a `config` parameter containing a map of
	     * options. Supported options are:
	     *
	     * `record` (boolean) - causes the profiler to record a CPU profile while
	     * it exercises the change detector. Example:
	     *
	     * ```
	     * ng.profiler.timeChangeDetection({record: true})
	     * ```
	     */
	    AngularProfiler.prototype.timeChangeDetection = function (config) {
	        var record = lang_1.isPresent(config) && config['record'];
	        var profileName = 'Change Detection';
	        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	        var isProfilerAvailable = lang_1.isPresent(browser_1.window.console.profile);
	        if (record && isProfilerAvailable) {
	            browser_1.window.console.profile(profileName);
	        }
	        var start = dom_adapter_1.DOM.performanceNow();
	        var numTicks = 0;
	        while (numTicks < 5 || (dom_adapter_1.DOM.performanceNow() - start) < 500) {
	            this.appRef.tick();
	            numTicks++;
	        }
	        var end = dom_adapter_1.DOM.performanceNow();
	        if (record && isProfilerAvailable) {
	            // need to cast to <any> because type checker thinks there's no argument
	            // while in fact there is:
	            //
	            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	            browser_1.window.console.profileEnd(profileName);
	        }
	        var msPerTick = (end - start) / numTicks;
	        browser_1.window.console.log("ran " + numTicks + " change detection cycles");
	        browser_1.window.console.log(lang_1.NumberWrapper.toFixed(msPerTick, 2) + " ms per check");
	    };
	    return AngularProfiler;
	})();
	exports.AngularProfiler = AngularProfiler;


/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';/**
	 * JS version of browser APIs. This library can only run in the browser.
	 */
	var win = window;
	exports.window = win;
	exports.document = window.document;
	exports.location = window.location;
	exports.gc = window['gc'] ? function () { return window['gc'](); } : function () { return null; };
	exports.performance = window['performance'] ? window['performance'] : null;
	exports.Event = window['Event'];
	exports.MouseEvent = window['MouseEvent'];
	exports.KeyboardEvent = window['KeyboardEvent'];
	exports.EventTarget = window['EventTarget'];
	exports.History = window['History'];
	exports.Location = window['Location'];
	exports.EventListener = window['EventListener'];


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @description
	 * Starting point to import all compiler APIs.
	 */
	__export(__webpack_require__(246));
	__export(__webpack_require__(234));
	__export(__webpack_require__(247));


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var application_tokens_1 = __webpack_require__(87);
	var di_2 = __webpack_require__(11);
	/**
	 * Create a {@link UrlResolver} with no package prefix.
	 */
	function createWithoutPackagePrefix() {
	    return new UrlResolver();
	}
	exports.createWithoutPackagePrefix = createWithoutPackagePrefix;
	/**
	 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	 */
	exports.DEFAULT_PACKAGE_URL_PROVIDER = new di_2.Provider(application_tokens_1.PACKAGE_ROOT_URL, { useValue: "/" });
	/**
	 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This class can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 *
	 * ## Example
	 *
	 * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	 */
	var UrlResolver = (function () {
	    function UrlResolver(packagePrefix) {
	        if (packagePrefix === void 0) { packagePrefix = null; }
	        if (lang_1.isPresent(packagePrefix)) {
	            this._packagePrefix = lang_1.StringWrapper.stripRight(packagePrefix, "/") + "/";
	        }
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     *
	     * @param {string} baseUrl
	     * @param {string} url
	     * @returns {string} the resolved URL
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) {
	        var resolvedUrl = url;
	        if (lang_1.isPresent(baseUrl) && baseUrl.length > 0) {
	            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	        }
	        if (lang_1.isPresent(this._packagePrefix) && getUrlScheme(resolvedUrl) == "package") {
	            resolvedUrl = resolvedUrl.replace("package:", this._packagePrefix);
	        }
	        return resolvedUrl;
	    };
	    UrlResolver = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(application_tokens_1.PACKAGE_ROOT_URL)), 
	        __metadata('design:paramtypes', [String])
	    ], UrlResolver);
	    return UrlResolver;
	})();
	exports.UrlResolver = UrlResolver;
	/**
	 * Extract the scheme of a URL.
	 */
	function getUrlScheme(url) {
	    var match = _split(url);
	    return (match && match[_ComponentIndex.Scheme]) || "";
	}
	exports.getUrlScheme = getUrlScheme;
	// The code below is adapted from Traceur:
	// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param {?string=} opt_scheme The scheme such as 'http'.
	 * @param {?string=} opt_userInfo The user name before the '@'.
	 * @param {?string=} opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param {(string|null)=} opt_port The port number.
	 * @param {?string=} opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param {?string=} opt_queryData The URI-encoded query data.
	 * @param {?string=} opt_fragment The URI-encoded fragment identifier.
	 * @return {string} The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (lang_1.isPresent(opt_scheme)) {
	        out.push(opt_scheme + ':');
	    }
	    if (lang_1.isPresent(opt_domain)) {
	        out.push('//');
	        if (lang_1.isPresent(opt_userInfo)) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (lang_1.isPresent(opt_port)) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (lang_1.isPresent(opt_path)) {
	        out.push(opt_path);
	    }
	    if (lang_1.isPresent(opt_queryData)) {
	        out.push('?' + opt_queryData);
	    }
	    if (lang_1.isPresent(opt_fragment)) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * @type {!RegExp}
	 * @internal
	 */
	var _splitRe = lang_1.RegExpWrapper.create('^' +
	    '(?:' +
	    '([^:/?#.]+)' +
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' +
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' +
	    ')?' +
	    '([^?#]+)?' +
	    '(?:\\?([^#]*))?' +
	    '(?:#(.*))?' +
	    '$');
	/**
	 * The index of each URI component in the return value of goog.uri.utils.split.
	 * @enum {number}
	 */
	var _ComponentIndex;
	(function (_ComponentIndex) {
	    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
	    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
	    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
	    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
	    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
	    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
	    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
	})(_ComponentIndex || (_ComponentIndex = {}));
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param {string} uri The URI string to examine.
	 * @return {!Array.<string|undefined>} Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
	}
	/**
	  * Removes dot segments in given path component, as described in
	  * RFC 3986, section 5.2.4.
	  *
	  * @param {string} path A non-empty path component.
	  * @return {string} Path component with removed dot segments.
	  */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var leadingSlash = path[0] == '/' ? '/' : '';
	    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	        var segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    out.pop();
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            out.unshift('..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 * @param {Array.<string?>} parts
	 * @return {string}
	 */
	function _joinAndCanonicalizePath(parts) {
	    var path = parts[_ComponentIndex.Path];
	    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.Path] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	}
	/**
	 * Resolves a URL.
	 * @param {string} base The URL acting as the base URL.
	 * @param {string} to The URL to resolve.
	 * @return {string}
	 */
	function _resolveUrl(base, url) {
	    var parts = _split(encodeURI(url));
	    var baseParts = _split(base);
	    if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	    }
	    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	        if (lang_1.isBlank(parts[i])) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.Path][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[_ComponentIndex.Path];
	    if (lang_1.isBlank(path))
	        path = '/';
	    var index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	    parts[_ComponentIndex.Path] = path;
	    return _joinAndCanonicalizePath(parts);
	}


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var runtime_compiler_1 = __webpack_require__(248);
	var template_compiler_1 = __webpack_require__(249);
	exports.TemplateCompiler = template_compiler_1.TemplateCompiler;
	var directive_metadata_1 = __webpack_require__(250);
	exports.CompileDirectiveMetadata = directive_metadata_1.CompileDirectiveMetadata;
	exports.CompileTypeMetadata = directive_metadata_1.CompileTypeMetadata;
	exports.CompileTemplateMetadata = directive_metadata_1.CompileTemplateMetadata;
	var source_module_1 = __webpack_require__(255);
	exports.SourceModule = source_module_1.SourceModule;
	exports.SourceWithImports = source_module_1.SourceWithImports;
	var platform_directives_and_pipes_1 = __webpack_require__(112);
	exports.PLATFORM_DIRECTIVES = platform_directives_and_pipes_1.PLATFORM_DIRECTIVES;
	exports.PLATFORM_PIPES = platform_directives_and_pipes_1.PLATFORM_PIPES;
	__export(__webpack_require__(254));
	var template_parser_1 = __webpack_require__(264);
	exports.TEMPLATE_TRANSFORMS = template_parser_1.TEMPLATE_TRANSFORMS;
	var lang_1 = __webpack_require__(10);
	var di_1 = __webpack_require__(11);
	var template_parser_2 = __webpack_require__(264);
	var html_parser_1 = __webpack_require__(265);
	var template_normalizer_1 = __webpack_require__(272);
	var runtime_metadata_1 = __webpack_require__(273);
	var change_detector_compiler_1 = __webpack_require__(256);
	var style_compiler_1 = __webpack_require__(259);
	var view_compiler_1 = __webpack_require__(262);
	var proto_view_compiler_1 = __webpack_require__(263);
	var template_compiler_2 = __webpack_require__(249);
	var change_detection_1 = __webpack_require__(30);
	var compiler_1 = __webpack_require__(90);
	var runtime_compiler_2 = __webpack_require__(248);
	var element_schema_registry_1 = __webpack_require__(270);
	var dom_element_schema_registry_1 = __webpack_require__(275);
	var url_resolver_1 = __webpack_require__(246);
	var change_detection_2 = __webpack_require__(30);
	function _createChangeDetectorGenConfig() {
	    return new change_detection_1.ChangeDetectorGenConfig(lang_1.assertionsEnabled(), false, true);
	}
	/**
	 * A set of providers that provide `RuntimeCompiler` and its dependencies to use for
	 * template compilation.
	 */
	exports.COMPILER_PROVIDERS = lang_1.CONST_EXPR([
	    change_detection_2.Lexer,
	    change_detection_2.Parser,
	    html_parser_1.HtmlParser,
	    template_parser_2.TemplateParser,
	    template_normalizer_1.TemplateNormalizer,
	    runtime_metadata_1.RuntimeMetadataResolver,
	    url_resolver_1.DEFAULT_PACKAGE_URL_PROVIDER,
	    style_compiler_1.StyleCompiler,
	    proto_view_compiler_1.ProtoViewCompiler,
	    view_compiler_1.ViewCompiler,
	    change_detector_compiler_1.ChangeDetectionCompiler,
	    new di_1.Provider(change_detection_1.ChangeDetectorGenConfig, { useFactory: _createChangeDetectorGenConfig, deps: [] }),
	    template_compiler_2.TemplateCompiler,
	    new di_1.Provider(runtime_compiler_2.RuntimeCompiler, { useClass: runtime_compiler_1.RuntimeCompiler_ }),
	    new di_1.Provider(compiler_1.Compiler, { useExisting: runtime_compiler_2.RuntimeCompiler }),
	    dom_element_schema_registry_1.DomElementSchemaRegistry,
	    new di_1.Provider(element_schema_registry_1.ElementSchemaRegistry, { useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry }),
	    url_resolver_1.UrlResolver
	]);


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var compiler_1 = __webpack_require__(90);
	var view_ref_1 = __webpack_require__(100);
	var template_compiler_1 = __webpack_require__(249);
	var di_1 = __webpack_require__(11);
	var RuntimeCompiler = (function (_super) {
	    __extends(RuntimeCompiler, _super);
	    function RuntimeCompiler() {
	        _super.apply(this, arguments);
	    }
	    return RuntimeCompiler;
	})(compiler_1.Compiler);
	exports.RuntimeCompiler = RuntimeCompiler;
	var RuntimeCompiler_ = (function (_super) {
	    __extends(RuntimeCompiler_, _super);
	    function RuntimeCompiler_(_templateCompiler) {
	        _super.call(this);
	        this._templateCompiler = _templateCompiler;
	    }
	    RuntimeCompiler_.prototype.compileInHost = function (componentType) {
	        return this._templateCompiler.compileHostComponentRuntime(componentType)
	            .then(function (hostViewFactory) { return new view_ref_1.HostViewFactoryRef_(hostViewFactory); });
	    };
	    RuntimeCompiler_.prototype.clearCache = function () {
	        _super.prototype.clearCache.call(this);
	        this._templateCompiler.clearCache();
	    };
	    RuntimeCompiler_ = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [template_compiler_1.TemplateCompiler])
	    ], RuntimeCompiler_);
	    return RuntimeCompiler_;
	})(compiler_1.Compiler_);
	exports.RuntimeCompiler_ = RuntimeCompiler_;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var async_1 = __webpack_require__(53);
	var directive_metadata_1 = __webpack_require__(250);
	var template_ast_1 = __webpack_require__(254);
	var di_1 = __webpack_require__(11);
	var source_module_1 = __webpack_require__(255);
	var change_detector_compiler_1 = __webpack_require__(256);
	var style_compiler_1 = __webpack_require__(259);
	var view_compiler_1 = __webpack_require__(262);
	var proto_view_compiler_1 = __webpack_require__(263);
	var template_parser_1 = __webpack_require__(264);
	var template_normalizer_1 = __webpack_require__(272);
	var runtime_metadata_1 = __webpack_require__(273);
	var view_1 = __webpack_require__(91);
	var change_detection_1 = __webpack_require__(30);
	var resolved_metadata_cache_1 = __webpack_require__(115);
	var util_1 = __webpack_require__(252);
	exports.METADATA_CACHE_MODULE_REF = source_module_1.moduleRef('package:angular2/src/core/linker/resolved_metadata_cache' + util_1.MODULE_SUFFIX);
	/**
	 * An internal module of the Angular compiler that begins with component types,
	 * extracts templates, and eventually produces a compiled version of the component
	 * ready for linking into an application.
	 */
	var TemplateCompiler = (function () {
	    function TemplateCompiler(_runtimeMetadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _cdCompiler, _protoViewCompiler, _viewCompiler, _resolvedMetadataCache, _genConfig) {
	        this._runtimeMetadataResolver = _runtimeMetadataResolver;
	        this._templateNormalizer = _templateNormalizer;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._cdCompiler = _cdCompiler;
	        this._protoViewCompiler = _protoViewCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._resolvedMetadataCache = _resolvedMetadataCache;
	        this._genConfig = _genConfig;
	        this._hostCacheKeys = new Map();
	        this._compiledTemplateCache = new Map();
	        this._compiledTemplateDone = new Map();
	    }
	    TemplateCompiler.prototype.normalizeDirectiveMetadata = function (directive) {
	        if (!directive.isComponent) {
	            // For non components there is nothing to be normalized yet.
	            return async_1.PromiseWrapper.resolve(directive);
	        }
	        return this._templateNormalizer.normalizeTemplate(directive.type, directive.template)
	            .then(function (normalizedTemplate) { return new directive_metadata_1.CompileDirectiveMetadata({
	            type: directive.type,
	            isComponent: directive.isComponent,
	            dynamicLoadable: directive.dynamicLoadable,
	            selector: directive.selector,
	            exportAs: directive.exportAs,
	            changeDetection: directive.changeDetection,
	            inputs: directive.inputs,
	            outputs: directive.outputs,
	            hostListeners: directive.hostListeners,
	            hostProperties: directive.hostProperties,
	            hostAttributes: directive.hostAttributes,
	            lifecycleHooks: directive.lifecycleHooks,
	            template: normalizedTemplate
	        }); });
	    };
	    TemplateCompiler.prototype.compileHostComponentRuntime = function (type) {
	        var compMeta = this._runtimeMetadataResolver.getDirectiveMetadata(type);
	        var hostCacheKey = this._hostCacheKeys.get(type);
	        if (lang_1.isBlank(hostCacheKey)) {
	            hostCacheKey = new Object();
	            this._hostCacheKeys.set(type, hostCacheKey);
	            assertComponent(compMeta);
	            var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
	            this._compileComponentRuntime(hostCacheKey, hostMeta, [compMeta], [], []);
	        }
	        return this._compiledTemplateDone.get(hostCacheKey)
	            .then(function (compiledTemplate) {
	            return new view_1.HostViewFactory(compMeta.selector, compiledTemplate.viewFactory);
	        });
	    };
	    TemplateCompiler.prototype.clearCache = function () {
	        this._styleCompiler.clearCache();
	        this._compiledTemplateCache.clear();
	        this._compiledTemplateDone.clear();
	        this._hostCacheKeys.clear();
	    };
	    TemplateCompiler.prototype.compileTemplatesCodeGen = function (components) {
	        var _this = this;
	        if (components.length === 0) {
	            throw new exceptions_1.BaseException('No components given');
	        }
	        var declarations = [];
	        components.forEach(function (componentWithDirs) {
	            var compMeta = componentWithDirs.component;
	            assertComponent(compMeta);
	            _this._compileComponentCodeGen(compMeta, componentWithDirs.directives, componentWithDirs.pipes, declarations);
	            if (compMeta.dynamicLoadable) {
	                var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
	                var viewFactoryExpression = _this._compileComponentCodeGen(hostMeta, [compMeta], [], declarations);
	                var constructionKeyword = lang_1.IS_DART ? 'const' : 'new';
	                var compiledTemplateExpr = constructionKeyword + " " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "HostViewFactory('" + compMeta.selector + "'," + viewFactoryExpression + ")";
	                var varName = codeGenHostViewFactoryName(compMeta.type);
	                declarations.push("" + util_1.codeGenExportVariable(varName) + compiledTemplateExpr + ";");
	            }
	        });
	        var moduleUrl = components[0].component.type.moduleUrl;
	        return new source_module_1.SourceModule("" + templateModuleUrl(moduleUrl), declarations.join('\n'));
	    };
	    TemplateCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
	        return this._styleCompiler.compileStylesheetCodeGen(stylesheetUrl, cssText);
	    };
	    TemplateCompiler.prototype._compileComponentRuntime = function (cacheKey, compMeta, viewDirectives, pipes, compilingComponentsPath) {
	        var _this = this;
	        var uniqViewDirectives = removeDuplicates(viewDirectives);
	        var uniqViewPipes = removeDuplicates(pipes);
	        var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
	        var done = this._compiledTemplateDone.get(cacheKey);
	        if (lang_1.isBlank(compiledTemplate)) {
	            compiledTemplate = new CompiledTemplate();
	            this._compiledTemplateCache.set(cacheKey, compiledTemplate);
	            done = async_1.PromiseWrapper
	                .all([this._styleCompiler.compileComponentRuntime(compMeta.template)].concat(uniqViewDirectives.map(function (dirMeta) { return _this.normalizeDirectiveMetadata(dirMeta); })))
	                .then(function (stylesAndNormalizedViewDirMetas) {
	                var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
	                var styles = stylesAndNormalizedViewDirMetas[0];
	                var parsedTemplate = _this._templateParser.parse(compMeta.template.template, normalizedViewDirMetas, uniqViewPipes, compMeta.type.name);
	                var childPromises = [];
	                var usedDirectives = DirectiveCollector.findUsedDirectives(parsedTemplate);
	                usedDirectives.components.forEach(function (component) { return _this._compileNestedComponentRuntime(component, compilingComponentsPath, childPromises); });
	                return async_1.PromiseWrapper.all(childPromises)
	                    .then(function (_) {
	                    var filteredPipes = filterPipes(parsedTemplate, uniqViewPipes);
	                    compiledTemplate.init(_this._createViewFactoryRuntime(compMeta, parsedTemplate, usedDirectives.directives, styles, filteredPipes));
	                    return compiledTemplate;
	                });
	            });
	            this._compiledTemplateDone.set(cacheKey, done);
	        }
	        return compiledTemplate;
	    };
	    TemplateCompiler.prototype._compileNestedComponentRuntime = function (childComponentDir, parentCompilingComponentsPath, childPromises) {
	        var compilingComponentsPath = collection_1.ListWrapper.clone(parentCompilingComponentsPath);
	        var childCacheKey = childComponentDir.type.runtime;
	        var childViewDirectives = this._runtimeMetadataResolver.getViewDirectivesMetadata(childComponentDir.type.runtime);
	        var childViewPipes = this._runtimeMetadataResolver.getViewPipesMetadata(childComponentDir.type.runtime);
	        var childIsRecursive = collection_1.ListWrapper.contains(compilingComponentsPath, childCacheKey);
	        compilingComponentsPath.push(childCacheKey);
	        this._compileComponentRuntime(childCacheKey, childComponentDir, childViewDirectives, childViewPipes, compilingComponentsPath);
	        if (!childIsRecursive) {
	            // Only wait for a child if it is not a cycle
	            childPromises.push(this._compiledTemplateDone.get(childCacheKey));
	        }
	    };
	    TemplateCompiler.prototype._createViewFactoryRuntime = function (compMeta, parsedTemplate, directives, styles, pipes) {
	        var _this = this;
	        if (lang_1.IS_DART || !this._genConfig.useJit) {
	            var changeDetectorFactories = this._cdCompiler.compileComponentRuntime(compMeta.type, compMeta.changeDetection, parsedTemplate);
	            var protoViews = this._protoViewCompiler.compileProtoViewRuntime(this._resolvedMetadataCache, compMeta, parsedTemplate, pipes);
	            return this._viewCompiler.compileComponentRuntime(compMeta, parsedTemplate, styles, protoViews.protoViews, changeDetectorFactories, function (compMeta) { return _this._getNestedComponentViewFactory(compMeta); });
	        }
	        else {
	            var declarations = [];
	            var viewFactoryExpr = this._createViewFactoryCodeGen('resolvedMetadataCache', compMeta, new source_module_1.SourceExpression([], 'styles'), parsedTemplate, pipes, declarations);
	            var vars = { 'exports': {}, 'styles': styles, 'resolvedMetadataCache': this._resolvedMetadataCache };
	            directives.forEach(function (dirMeta) {
	                vars[dirMeta.type.name] = dirMeta.type.runtime;
	                if (dirMeta.isComponent && dirMeta.type.runtime !== compMeta.type.runtime) {
	                    vars[("viewFactory_" + dirMeta.type.name + "0")] = _this._getNestedComponentViewFactory(dirMeta);
	                }
	            });
	            pipes.forEach(function (pipeMeta) { return vars[pipeMeta.type.name] = pipeMeta.type.runtime; });
	            var declarationsWithoutImports = source_module_1.SourceModule.getSourceWithoutImports(declarations.join('\n'));
	            return lang_1.evalExpression("viewFactory_" + compMeta.type.name, viewFactoryExpr, declarationsWithoutImports, mergeStringMaps([vars, change_detector_compiler_1.CHANGE_DETECTION_JIT_IMPORTS, proto_view_compiler_1.PROTO_VIEW_JIT_IMPORTS, view_compiler_1.VIEW_JIT_IMPORTS]));
	        }
	    };
	    TemplateCompiler.prototype._getNestedComponentViewFactory = function (compMeta) {
	        return this._compiledTemplateCache.get(compMeta.type.runtime).viewFactory;
	    };
	    TemplateCompiler.prototype._compileComponentCodeGen = function (compMeta, directives, pipes, targetDeclarations) {
	        var uniqueDirectives = removeDuplicates(directives);
	        var uniqPipes = removeDuplicates(pipes);
	        var styleExpr = this._styleCompiler.compileComponentCodeGen(compMeta.template);
	        var parsedTemplate = this._templateParser.parse(compMeta.template.template, uniqueDirectives, uniqPipes, compMeta.type.name);
	        var filteredPipes = filterPipes(parsedTemplate, uniqPipes);
	        return this._createViewFactoryCodeGen(exports.METADATA_CACHE_MODULE_REF + "CODEGEN_RESOLVED_METADATA_CACHE", compMeta, styleExpr, parsedTemplate, filteredPipes, targetDeclarations);
	    };
	    TemplateCompiler.prototype._createViewFactoryCodeGen = function (resolvedMetadataCacheExpr, compMeta, styleExpr, parsedTemplate, pipes, targetDeclarations) {
	        var changeDetectorsExprs = this._cdCompiler.compileComponentCodeGen(compMeta.type, compMeta.changeDetection, parsedTemplate);
	        var protoViewExprs = this._protoViewCompiler.compileProtoViewCodeGen(new util_1.Expression(resolvedMetadataCacheExpr), compMeta, parsedTemplate, pipes);
	        var viewFactoryExpr = this._viewCompiler.compileComponentCodeGen(compMeta, parsedTemplate, styleExpr, protoViewExprs.protoViews, changeDetectorsExprs, codeGenComponentViewFactoryName);
	        util_1.addAll(changeDetectorsExprs.declarations, targetDeclarations);
	        util_1.addAll(protoViewExprs.declarations, targetDeclarations);
	        util_1.addAll(viewFactoryExpr.declarations, targetDeclarations);
	        return viewFactoryExpr.expression;
	    };
	    TemplateCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [runtime_metadata_1.RuntimeMetadataResolver, template_normalizer_1.TemplateNormalizer, template_parser_1.TemplateParser, style_compiler_1.StyleCompiler, change_detector_compiler_1.ChangeDetectionCompiler, proto_view_compiler_1.ProtoViewCompiler, view_compiler_1.ViewCompiler, resolved_metadata_cache_1.ResolvedMetadataCache, change_detection_1.ChangeDetectorGenConfig])
	    ], TemplateCompiler);
	    return TemplateCompiler;
	})();
	exports.TemplateCompiler = TemplateCompiler;
	var NormalizedComponentWithViewDirectives = (function () {
	    function NormalizedComponentWithViewDirectives(component, directives, pipes) {
	        this.component = component;
	        this.directives = directives;
	        this.pipes = pipes;
	    }
	    return NormalizedComponentWithViewDirectives;
	})();
	exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives;
	var CompiledTemplate = (function () {
	    function CompiledTemplate() {
	        this.viewFactory = null;
	    }
	    CompiledTemplate.prototype.init = function (viewFactory) { this.viewFactory = viewFactory; };
	    return CompiledTemplate;
	})();
	function assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
	    }
	}
	function templateModuleUrl(moduleUrl) {
	    var urlWithoutSuffix = moduleUrl.substring(0, moduleUrl.length - util_1.MODULE_SUFFIX.length);
	    return urlWithoutSuffix + ".template" + util_1.MODULE_SUFFIX;
	}
	function codeGenHostViewFactoryName(type) {
	    return "hostViewFactory_" + type.name;
	}
	function codeGenComponentViewFactoryName(nestedCompType) {
	    return source_module_1.moduleRef(templateModuleUrl(nestedCompType.type.moduleUrl)) + "viewFactory_" + nestedCompType.type.name + "0";
	}
	function mergeStringMaps(maps) {
	    var result = {};
	    maps.forEach(function (map) { collection_1.StringMapWrapper.forEach(map, function (value, key) { result[key] = value; }); });
	    return result;
	}
	function removeDuplicates(items) {
	    var res = [];
	    items.forEach(function (item) {
	        var hasMatch = res.filter(function (r) { return r.type.name == item.type.name && r.type.moduleUrl == item.type.moduleUrl &&
	            r.type.runtime == item.type.runtime; })
	            .length > 0;
	        if (!hasMatch) {
	            res.push(item);
	        }
	    });
	    return res;
	}
	var DirectiveCollector = (function () {
	    function DirectiveCollector() {
	        this.directives = [];
	        this.components = [];
	    }
	    DirectiveCollector.findUsedDirectives = function (parsedTemplate) {
	        var collector = new DirectiveCollector();
	        template_ast_1.templateVisitAll(collector, parsedTemplate);
	        return collector;
	    };
	    DirectiveCollector.prototype.visitBoundText = function (ast, context) { return null; };
	    DirectiveCollector.prototype.visitText = function (ast, context) { return null; };
	    DirectiveCollector.prototype.visitNgContent = function (ast, context) { return null; };
	    DirectiveCollector.prototype.visitElement = function (ast, context) {
	        template_ast_1.templateVisitAll(this, ast.directives);
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    DirectiveCollector.prototype.visitEmbeddedTemplate = function (ast, context) {
	        template_ast_1.templateVisitAll(this, ast.directives);
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    DirectiveCollector.prototype.visitVariable = function (ast, ctx) { return null; };
	    DirectiveCollector.prototype.visitAttr = function (ast, attrNameAndValues) { return null; };
	    DirectiveCollector.prototype.visitDirective = function (ast, ctx) {
	        if (ast.directive.isComponent) {
	            this.components.push(ast.directive);
	        }
	        this.directives.push(ast.directive);
	        return null;
	    };
	    DirectiveCollector.prototype.visitEvent = function (ast, eventTargetAndNames) {
	        return null;
	    };
	    DirectiveCollector.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	    DirectiveCollector.prototype.visitElementProperty = function (ast, context) { return null; };
	    return DirectiveCollector;
	})();
	function filterPipes(template, allPipes) {
	    var visitor = new PipeVisitor();
	    template_ast_1.templateVisitAll(visitor, template);
	    return allPipes.filter(function (pipeMeta) { return collection_1.SetWrapper.has(visitor.collector.pipes, pipeMeta.name); });
	}
	var PipeVisitor = (function () {
	    function PipeVisitor() {
	        this.collector = new template_parser_1.PipeCollector();
	    }
	    PipeVisitor.prototype.visitBoundText = function (ast, context) {
	        ast.value.visit(this.collector);
	        return null;
	    };
	    PipeVisitor.prototype.visitText = function (ast, context) { return null; };
	    PipeVisitor.prototype.visitNgContent = function (ast, context) { return null; };
	    PipeVisitor.prototype.visitElement = function (ast, context) {
	        template_ast_1.templateVisitAll(this, ast.inputs);
	        template_ast_1.templateVisitAll(this, ast.outputs);
	        template_ast_1.templateVisitAll(this, ast.directives);
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    PipeVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
	        template_ast_1.templateVisitAll(this, ast.outputs);
	        template_ast_1.templateVisitAll(this, ast.directives);
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    PipeVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	    PipeVisitor.prototype.visitAttr = function (ast, attrNameAndValues) { return null; };
	    PipeVisitor.prototype.visitDirective = function (ast, ctx) {
	        template_ast_1.templateVisitAll(this, ast.inputs);
	        template_ast_1.templateVisitAll(this, ast.hostEvents);
	        template_ast_1.templateVisitAll(this, ast.hostProperties);
	        return null;
	    };
	    PipeVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	        ast.handler.visit(this.collector);
	        return null;
	    };
	    PipeVisitor.prototype.visitDirectiveProperty = function (ast, context) {
	        ast.value.visit(this.collector);
	        return null;
	    };
	    PipeVisitor.prototype.visitElementProperty = function (ast, context) {
	        ast.value.visit(this.collector);
	        return null;
	    };
	    return PipeVisitor;
	})();


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var collection_1 = __webpack_require__(17);
	var change_detection_1 = __webpack_require__(30);
	var view_1 = __webpack_require__(81);
	var selector_1 = __webpack_require__(251);
	var util_1 = __webpack_require__(252);
	var interfaces_1 = __webpack_require__(253);
	// group 1: "property" from "[property]"
	// group 2: "event" from "(event)"
	var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
	var CompileMetadataWithType = (function () {
	    function CompileMetadataWithType() {
	    }
	    CompileMetadataWithType.fromJson = function (data) {
	        return _COMPILE_METADATA_FROM_JSON[data['class']](data);
	    };
	    Object.defineProperty(CompileMetadataWithType.prototype, "type", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return CompileMetadataWithType;
	})();
	exports.CompileMetadataWithType = CompileMetadataWithType;
	/**
	 * Metadata regarding compilation of a type.
	 */
	var CompileTypeMetadata = (function () {
	    function CompileTypeMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, isHost = _b.isHost;
	        this.runtime = runtime;
	        this.name = name;
	        this.moduleUrl = moduleUrl;
	        this.isHost = lang_1.normalizeBool(isHost);
	    }
	    CompileTypeMetadata.fromJson = function (data) {
	        return new CompileTypeMetadata({ name: data['name'], moduleUrl: data['moduleUrl'], isHost: data['isHost'] });
	    };
	    CompileTypeMetadata.prototype.toJson = function () {
	        return {
	            // Note: Runtime type can't be serialized...
	            'name': this.name,
	            'moduleUrl': this.moduleUrl,
	            'isHost': this.isHost
	        };
	    };
	    return CompileTypeMetadata;
	})();
	exports.CompileTypeMetadata = CompileTypeMetadata;
	/**
	 * Metadata regarding compilation of a template.
	 */
	var CompileTemplateMetadata = (function () {
	    function CompileTemplateMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, ngContentSelectors = _b.ngContentSelectors;
	        this.encapsulation = lang_1.isPresent(encapsulation) ? encapsulation : view_1.ViewEncapsulation.Emulated;
	        this.template = template;
	        this.templateUrl = templateUrl;
	        this.styles = lang_1.isPresent(styles) ? styles : [];
	        this.styleUrls = lang_1.isPresent(styleUrls) ? styleUrls : [];
	        this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
	    }
	    CompileTemplateMetadata.fromJson = function (data) {
	        return new CompileTemplateMetadata({
	            encapsulation: lang_1.isPresent(data['encapsulation']) ?
	                view_1.VIEW_ENCAPSULATION_VALUES[data['encapsulation']] :
	                data['encapsulation'],
	            template: data['template'],
	            templateUrl: data['templateUrl'],
	            styles: data['styles'],
	            styleUrls: data['styleUrls'],
	            ngContentSelectors: data['ngContentSelectors']
	        });
	    };
	    CompileTemplateMetadata.prototype.toJson = function () {
	        return {
	            'encapsulation': lang_1.isPresent(this.encapsulation) ? lang_1.serializeEnum(this.encapsulation) : this.encapsulation,
	            'template': this.template,
	            'templateUrl': this.templateUrl,
	            'styles': this.styles,
	            'styleUrls': this.styleUrls,
	            'ngContentSelectors': this.ngContentSelectors
	        };
	    };
	    return CompileTemplateMetadata;
	})();
	exports.CompileTemplateMetadata = CompileTemplateMetadata;
	/**
	 * Metadata regarding compilation of a directive.
	 */
	var CompileDirectiveMetadata = (function () {
	    function CompileDirectiveMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, template = _b.template;
	        this.type = type;
	        this.isComponent = isComponent;
	        this.dynamicLoadable = dynamicLoadable;
	        this.selector = selector;
	        this.exportAs = exportAs;
	        this.changeDetection = changeDetection;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.lifecycleHooks = lifecycleHooks;
	        this.template = template;
	    }
	    CompileDirectiveMetadata.create = function (_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, template = _b.template;
	        var hostListeners = {};
	        var hostProperties = {};
	        var hostAttributes = {};
	        if (lang_1.isPresent(host)) {
	            collection_1.StringMapWrapper.forEach(host, function (value, key) {
	                var matches = lang_1.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
	                if (lang_1.isBlank(matches)) {
	                    hostAttributes[key] = value;
	                }
	                else if (lang_1.isPresent(matches[1])) {
	                    hostProperties[matches[1]] = value;
	                }
	                else if (lang_1.isPresent(matches[2])) {
	                    hostListeners[matches[2]] = value;
	                }
	            });
	        }
	        var inputsMap = {};
	        if (lang_1.isPresent(inputs)) {
	            inputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                inputsMap[parts[0]] = parts[1];
	            });
	        }
	        var outputsMap = {};
	        if (lang_1.isPresent(outputs)) {
	            outputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                outputsMap[parts[0]] = parts[1];
	            });
	        }
	        return new CompileDirectiveMetadata({
	            type: type,
	            isComponent: lang_1.normalizeBool(isComponent),
	            dynamicLoadable: lang_1.normalizeBool(dynamicLoadable),
	            selector: selector,
	            exportAs: exportAs,
	            changeDetection: changeDetection,
	            inputs: inputsMap,
	            outputs: outputsMap,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            lifecycleHooks: lang_1.isPresent(lifecycleHooks) ? lifecycleHooks : [],
	            template: template
	        });
	    };
	    CompileDirectiveMetadata.fromJson = function (data) {
	        return new CompileDirectiveMetadata({
	            isComponent: data['isComponent'],
	            dynamicLoadable: data['dynamicLoadable'],
	            selector: data['selector'],
	            exportAs: data['exportAs'],
	            type: lang_1.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
	            changeDetection: lang_1.isPresent(data['changeDetection']) ?
	                change_detection_1.CHANGE_DETECTION_STRATEGY_VALUES[data['changeDetection']] :
	                data['changeDetection'],
	            inputs: data['inputs'],
	            outputs: data['outputs'],
	            hostListeners: data['hostListeners'],
	            hostProperties: data['hostProperties'],
	            hostAttributes: data['hostAttributes'],
	            lifecycleHooks: data['lifecycleHooks'].map(function (hookValue) { return interfaces_1.LIFECYCLE_HOOKS_VALUES[hookValue]; }),
	            template: lang_1.isPresent(data['template']) ? CompileTemplateMetadata.fromJson(data['template']) :
	                data['template']
	        });
	    };
	    CompileDirectiveMetadata.prototype.toJson = function () {
	        return {
	            'class': 'Directive',
	            'isComponent': this.isComponent,
	            'dynamicLoadable': this.dynamicLoadable,
	            'selector': this.selector,
	            'exportAs': this.exportAs,
	            'type': lang_1.isPresent(this.type) ? this.type.toJson() : this.type,
	            'changeDetection': lang_1.isPresent(this.changeDetection) ? lang_1.serializeEnum(this.changeDetection) :
	                this.changeDetection,
	            'inputs': this.inputs,
	            'outputs': this.outputs,
	            'hostListeners': this.hostListeners,
	            'hostProperties': this.hostProperties,
	            'hostAttributes': this.hostAttributes,
	            'lifecycleHooks': this.lifecycleHooks.map(function (hook) { return lang_1.serializeEnum(hook); }),
	            'template': lang_1.isPresent(this.template) ? this.template.toJson() : this.template
	        };
	    };
	    return CompileDirectiveMetadata;
	})();
	exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	/**
	 * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
	 */
	function createHostComponentMeta(componentType, componentSelector) {
	    var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
	    return CompileDirectiveMetadata.create({
	        type: new CompileTypeMetadata({
	            runtime: Object,
	            name: "Host" + componentType.name,
	            moduleUrl: componentType.moduleUrl,
	            isHost: true
	        }),
	        template: new CompileTemplateMetadata({ template: template, templateUrl: '', styles: [], styleUrls: [], ngContentSelectors: [] }),
	        changeDetection: change_detection_1.ChangeDetectionStrategy.Default,
	        inputs: [],
	        outputs: [],
	        host: {},
	        lifecycleHooks: [],
	        isComponent: true,
	        dynamicLoadable: false,
	        selector: '*'
	    });
	}
	exports.createHostComponentMeta = createHostComponentMeta;
	var CompilePipeMetadata = (function () {
	    function CompilePipeMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	        this.type = type;
	        this.name = name;
	        this.pure = lang_1.normalizeBool(pure);
	    }
	    CompilePipeMetadata.fromJson = function (data) {
	        return new CompilePipeMetadata({
	            type: lang_1.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
	            name: data['name'],
	            pure: data['pure']
	        });
	    };
	    CompilePipeMetadata.prototype.toJson = function () {
	        return {
	            'class': 'Pipe',
	            'type': lang_1.isPresent(this.type) ? this.type.toJson() : null,
	            'name': this.name,
	            'pure': this.pure
	        };
	    };
	    return CompilePipeMetadata;
	})();
	exports.CompilePipeMetadata = CompilePipeMetadata;
	var _COMPILE_METADATA_FROM_JSON = {
	    'Directive': CompileDirectiveMetadata.fromJson,
	    'Pipe': CompilePipeMetadata.fromJson
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var _EMPTY_ATTR_VALUE = '';
	// TODO: Can't use `const` here as
	// in Dart this is not transpiled into `final` yet...
	var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	    '(\\))|' +
	    '(\\s*,\\s*)'); // ","
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    CssSelector.parse = function (selector) {
	        var results = [];
	        var _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) &&
	                collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
	                cssSel.element = "*";
	            }
	            res.push(cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	        var match;
	        var current = cssSelector;
	        var inNot = false;
	        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            if (lang_1.isPresent(match[1])) {
	                if (inNot) {
	                    throw new exceptions_1.BaseException('Nesting :not is not allowed in a selector');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            if (lang_1.isPresent(match[2])) {
	                current.setElement(match[2]);
	            }
	            if (lang_1.isPresent(match[3])) {
	                current.addClassName(match[3]);
	            }
	            if (lang_1.isPresent(match[4])) {
	                current.addAttribute(match[4], match[5]);
	            }
	            if (lang_1.isPresent(match[6])) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (lang_1.isPresent(match[7])) {
	                if (inNot) {
	                    throw new exceptions_1.BaseException('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) &&
	            collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        this.element = element;
	    };
	    /** Gets a template string for an element that matches the selector. */
	    CssSelector.prototype.getMatchingElementTemplate = function () {
	        var tagName = lang_1.isPresent(this.element) ? this.element : 'div';
	        var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	        var attrs = '';
	        for (var i = 0; i < this.attrs.length; i += 2) {
	            var attrName = this.attrs[i];
	            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	            attrs += " " + attrName + attrValue;
	        }
	        return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
	        this.attrs.push(name);
	        if (lang_1.isPresent(value)) {
	            value = value.toLowerCase();
	        }
	        else {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        this.attrs.push(value);
	    };
	    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	    CssSelector.prototype.toString = function () {
	        var res = '';
	        if (lang_1.isPresent(this.element)) {
	            res += this.element;
	        }
	        if (lang_1.isPresent(this.classNames)) {
	            for (var i = 0; i < this.classNames.length; i++) {
	                res += '.' + this.classNames[i];
	            }
	        }
	        if (lang_1.isPresent(this.attrs)) {
	            for (var i = 0; i < this.attrs.length;) {
	                var attrName = this.attrs[i++];
	                var attrValue = this.attrs[i++];
	                res += '[' + attrName;
	                if (attrValue.length > 0) {
	                    res += '=' + attrValue;
	                }
	                res += ']';
	            }
	        }
	        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	        return res;
	    };
	    return CssSelector;
	})();
	exports.CssSelector = CssSelector;
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = new collection_1.Map();
	        this._elementPartialMap = new collection_1.Map();
	        this._classMap = new collection_1.Map();
	        this._classPartialMap = new collection_1.Map();
	        this._attrValueMap = new collection_1.Map();
	        this._attrValuePartialMap = new collection_1.Map();
	        this._listContexts = [];
	    }
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (lang_1.isPresent(element)) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                var className = classNames[index];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var isTerminal = index === attrs.length - 2;
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = terminalMap.get(attrName);
	                    if (lang_1.isBlank(terminalValuesMap)) {
	                        terminalValuesMap = new collection_1.Map();
	                        terminalMap.set(attrName, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, attrValue, selectable);
	                }
	                else {
	                    var parttialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = parttialMap.get(attrName);
	                    if (lang_1.isBlank(partialValuesMap)) {
	                        partialValuesMap = new collection_1.Map();
	                        parttialMap.set(attrName, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, attrValue);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = map.get(name);
	        if (lang_1.isBlank(terminalList)) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = map.get(name);
	        if (lang_1.isBlank(matcher)) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	    */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var className = classNames[index];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                var terminalValuesMap = this._attrValueMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
	                    result;
	                var partialValuesMap = this._attrValuePartialMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var selectables = map.get(name);
	        var starSelectables = map.get("*");
	        if (lang_1.isPresent(starSelectables)) {
	            selectables = selectables.concat(starSelectables);
	        }
	        if (lang_1.isBlank(selectables)) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var index = 0; index < selectables.length; index++) {
	            selectable = selectables[index];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (c: CssSelector, a: any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var nestedSelector = map.get(name);
	        if (lang_1.isBlank(nestedSelector)) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	})();
	exports.SelectorMatcher = SelectorMatcher;
	var SelectorListContext = (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	})();
	exports.SelectorListContext = SelectorListContext;
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var result = true;
	        if (this.notSelectors.length > 0 &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && lang_1.isPresent(callback) &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            if (lang_1.isPresent(this.listContext)) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	})();
	exports.SelectorContext = SelectorContext;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	var SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	var DOUBLE_QUOTE_ESCAPE_STRING_RE = /"|\\|\n|\r|\$/g;
	exports.MODULE_SUFFIX = lang_1.IS_DART ? '.dart' : '.js';
	exports.CONST_VAR = lang_1.IS_DART ? 'const' : 'var';
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	function escapeSingleQuoteString(input) {
	    if (lang_1.isBlank(input)) {
	        return null;
	    }
	    return "'" + escapeString(input, SINGLE_QUOTE_ESCAPE_STRING_RE) + "'";
	}
	exports.escapeSingleQuoteString = escapeSingleQuoteString;
	function escapeDoubleQuoteString(input) {
	    if (lang_1.isBlank(input)) {
	        return null;
	    }
	    return "\"" + escapeString(input, DOUBLE_QUOTE_ESCAPE_STRING_RE) + "\"";
	}
	exports.escapeDoubleQuoteString = escapeDoubleQuoteString;
	function escapeString(input, re) {
	    return lang_1.StringWrapper.replaceAllMapped(input, re, function (match) {
	        if (match[0] == '$') {
	            return lang_1.IS_DART ? '\\$' : '$';
	        }
	        else if (match[0] == '\n') {
	            return '\\n';
	        }
	        else if (match[0] == '\r') {
	            return '\\r';
	        }
	        else {
	            return "\\" + match[0];
	        }
	    });
	}
	function codeGenExportVariable(name) {
	    if (lang_1.IS_DART) {
	        return "const " + name + " = ";
	    }
	    else {
	        return "var " + name + " = exports['" + name + "'] = ";
	    }
	}
	exports.codeGenExportVariable = codeGenExportVariable;
	function codeGenConstConstructorCall(name) {
	    if (lang_1.IS_DART) {
	        return "const " + name;
	    }
	    else {
	        return "new " + name;
	    }
	}
	exports.codeGenConstConstructorCall = codeGenConstConstructorCall;
	function codeGenValueFn(params, value, fnName) {
	    if (fnName === void 0) { fnName = ''; }
	    if (lang_1.IS_DART) {
	        return codeGenFnHeader(params, fnName) + " => " + value;
	    }
	    else {
	        return codeGenFnHeader(params, fnName) + " { return " + value + "; }";
	    }
	}
	exports.codeGenValueFn = codeGenValueFn;
	function codeGenFnHeader(params, fnName) {
	    if (fnName === void 0) { fnName = ''; }
	    if (lang_1.IS_DART) {
	        return fnName + "(" + params.join(',') + ")";
	    }
	    else {
	        return "function " + fnName + "(" + params.join(',') + ")";
	    }
	}
	exports.codeGenFnHeader = codeGenFnHeader;
	function codeGenToString(expr) {
	    if (lang_1.IS_DART) {
	        return "'${" + expr + "}'";
	    }
	    else {
	        // JS automatically converts to string...
	        return expr;
	    }
	}
	exports.codeGenToString = codeGenToString;
	function splitAtColon(input, defaultValues) {
	    var parts = lang_1.StringWrapper.split(input.trim(), /\s*:\s*/g);
	    if (parts.length > 1) {
	        return parts;
	    }
	    else {
	        return defaultValues;
	    }
	}
	exports.splitAtColon = splitAtColon;
	var Statement = (function () {
	    function Statement(statement) {
	        this.statement = statement;
	    }
	    return Statement;
	})();
	exports.Statement = Statement;
	var Expression = (function () {
	    function Expression(expression, isArray) {
	        if (isArray === void 0) { isArray = false; }
	        this.expression = expression;
	        this.isArray = isArray;
	    }
	    return Expression;
	})();
	exports.Expression = Expression;
	function escapeValue(value) {
	    if (value instanceof Expression) {
	        return value.expression;
	    }
	    else if (lang_1.isString(value)) {
	        return escapeSingleQuoteString(value);
	    }
	    else if (lang_1.isBlank(value)) {
	        return 'null';
	    }
	    else {
	        return "" + value;
	    }
	}
	exports.escapeValue = escapeValue;
	function codeGenArray(data) {
	    return "[" + data.map(escapeValue).join(',') + "]";
	}
	exports.codeGenArray = codeGenArray;
	function codeGenFlatArray(values) {
	    var result = '([';
	    var isFirstArrayEntry = true;
	    var concatFn = lang_1.IS_DART ? '.addAll' : 'concat';
	    for (var i = 0; i < values.length; i++) {
	        var value = values[i];
	        if (value instanceof Expression && value.isArray) {
	            result += "])." + concatFn + "(" + value.expression + ")." + concatFn + "([";
	            isFirstArrayEntry = true;
	        }
	        else {
	            if (!isFirstArrayEntry) {
	                result += ',';
	            }
	            isFirstArrayEntry = false;
	            result += escapeValue(value);
	        }
	    }
	    result += '])';
	    return result;
	}
	exports.codeGenFlatArray = codeGenFlatArray;
	function codeGenStringMap(keyValueArray) {
	    return "{" + keyValueArray.map(codeGenKeyValue).join(',') + "}";
	}
	exports.codeGenStringMap = codeGenStringMap;
	function codeGenKeyValue(keyValue) {
	    return escapeValue(keyValue[0]) + ":" + escapeValue(keyValue[1]);
	}
	function addAll(source, target) {
	    for (var i = 0; i < source.length; i++) {
	        target.push(source[i]);
	    }
	}
	exports.addAll = addAll;
	function flattenArray(source, target) {
	    if (lang_1.isPresent(source)) {
	        for (var i = 0; i < source.length; i++) {
	            var item = source[i];
	            if (lang_1.isArray(item)) {
	                flattenArray(item, target);
	            }
	            else {
	                target.push(item);
	            }
	        }
	    }
	    return target;
	}
	exports.flattenArray = flattenArray;


/***/ },
/* 253 */
/***/ function(module, exports) {

	'use strict';(function (LifecycleHooks) {
	    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
	    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
	    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
	    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
	    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
	    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
	    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
	    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
	})(exports.LifecycleHooks || (exports.LifecycleHooks = {}));
	var LifecycleHooks = exports.LifecycleHooks;
	/**
	 * @internal
	 */
	exports.LIFECYCLE_HOOKS_VALUES = [
	    LifecycleHooks.OnInit,
	    LifecycleHooks.OnDestroy,
	    LifecycleHooks.DoCheck,
	    LifecycleHooks.OnChanges,
	    LifecycleHooks.AfterContentInit,
	    LifecycleHooks.AfterContentChecked,
	    LifecycleHooks.AfterViewInit,
	    LifecycleHooks.AfterViewChecked
	];


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	/**
	 * A segment of text within the template.
	 */
	var TextAst = (function () {
	    function TextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return TextAst;
	})();
	exports.TextAst = TextAst;
	/**
	 * A bound expression within the text of a template.
	 */
	var BoundTextAst = (function () {
	    function BoundTextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundTextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitBoundText(this, context);
	    };
	    return BoundTextAst;
	})();
	exports.BoundTextAst = BoundTextAst;
	/**
	 * A plain attribute on an element.
	 */
	var AttrAst = (function () {
	    function AttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return AttrAst;
	})();
	exports.AttrAst = AttrAst;
	/**
	 * A binding for an element property (e.g. `[property]="expression"`).
	 */
	var BoundElementPropertyAst = (function () {
	    function BoundElementPropertyAst(name, type, value, unit, sourceSpan) {
	        this.name = name;
	        this.type = type;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElementProperty(this, context);
	    };
	    return BoundElementPropertyAst;
	})();
	exports.BoundElementPropertyAst = BoundElementPropertyAst;
	/**
	 * A binding for an element event (e.g. `(event)="handler()"`).
	 */
	var BoundEventAst = (function () {
	    function BoundEventAst(name, target, handler, sourceSpan) {
	        this.name = name;
	        this.target = target;
	        this.handler = handler;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundEventAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEvent(this, context);
	    };
	    Object.defineProperty(BoundEventAst.prototype, "fullName", {
	        get: function () {
	            if (lang_1.isPresent(this.target)) {
	                return this.target + ":" + this.name;
	            }
	            else {
	                return this.name;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundEventAst;
	})();
	exports.BoundEventAst = BoundEventAst;
	/**
	 * A variable declaration on an element (e.g. `#var="expression"`).
	 */
	var VariableAst = (function () {
	    function VariableAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    VariableAst.prototype.visit = function (visitor, context) {
	        return visitor.visitVariable(this, context);
	    };
	    return VariableAst;
	})();
	exports.VariableAst = VariableAst;
	/**
	 * An element declaration in a template.
	 */
	var ElementAst = (function () {
	    function ElementAst(name, attrs, inputs, outputs, exportAsVars, directives, children, ngContentIndex, sourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.exportAsVars = exportAsVars;
	        this.directives = directives;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    ElementAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    /**
	     * Whether the element has any active bindings (inputs, outputs, vars, or directives).
	     */
	    ElementAst.prototype.isBound = function () {
	        return (this.inputs.length > 0 || this.outputs.length > 0 || this.exportAsVars.length > 0 ||
	            this.directives.length > 0);
	    };
	    /**
	     * Get the component associated with this element, if any.
	     */
	    ElementAst.prototype.getComponent = function () {
	        return this.directives.length > 0 && this.directives[0].directive.isComponent ?
	            this.directives[0].directive :
	            null;
	    };
	    return ElementAst;
	})();
	exports.ElementAst = ElementAst;
	/**
	 * A `<template>` element included in an Angular template.
	 */
	var EmbeddedTemplateAst = (function () {
	    function EmbeddedTemplateAst(attrs, outputs, vars, directives, children, ngContentIndex, sourceSpan) {
	        this.attrs = attrs;
	        this.outputs = outputs;
	        this.vars = vars;
	        this.directives = directives;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    return EmbeddedTemplateAst;
	})();
	exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	/**
	 * A directive property with a bound value (e.g. `*ngIf="condition").
	 */
	var BoundDirectivePropertyAst = (function () {
	    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	        this.directiveName = directiveName;
	        this.templateName = templateName;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirectiveProperty(this, context);
	    };
	    return BoundDirectivePropertyAst;
	})();
	exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	/**
	 * A directive declared on an element.
	 */
	var DirectiveAst = (function () {
	    function DirectiveAst(directive, inputs, hostProperties, hostEvents, exportAsVars, sourceSpan) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.hostProperties = hostProperties;
	        this.hostEvents = hostEvents;
	        this.exportAsVars = exportAsVars;
	        this.sourceSpan = sourceSpan;
	    }
	    DirectiveAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirective(this, context);
	    };
	    return DirectiveAst;
	})();
	exports.DirectiveAst = DirectiveAst;
	/**
	 * Position where content is to be projected (instance of `<ng-content>` in a template).
	 */
	var NgContentAst = (function () {
	    function NgContentAst(index, ngContentIndex, sourceSpan) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    NgContentAst.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    return NgContentAst;
	})();
	exports.NgContentAst = NgContentAst;
	/**
	 * Enumeration of types of property bindings.
	 */
	(function (PropertyBindingType) {
	    /**
	     * A normal binding to a property (e.g. `[property]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
	    /**
	     * A binding to an element attribute (e.g. `[attr.name]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
	    /**
	     * A binding to a CSS class (e.g. `[class.name]="condition"`).
	     */
	    PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
	    /**
	     * A binding to a style rule (e.g. `[style.rule]="expression"`).
	     */
	    PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
	})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
	var PropertyBindingType = exports.PropertyBindingType;
	/**
	 * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
	 */
	function templateVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    asts.forEach(function (ast) {
	        var astResult = ast.visit(visitor, context);
	        if (lang_1.isPresent(astResult)) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	exports.templateVisitAll = templateVisitAll;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var MODULE_REGEXP = /#MODULE\[([^\]]*)\]/g;
	function moduleRef(moduleUrl) {
	    return "#MODULE[" + moduleUrl + "]";
	}
	exports.moduleRef = moduleRef;
	/**
	 * Represents generated source code with module references. Internal to the Angular compiler.
	 */
	var SourceModule = (function () {
	    function SourceModule(moduleUrl, sourceWithModuleRefs) {
	        this.moduleUrl = moduleUrl;
	        this.sourceWithModuleRefs = sourceWithModuleRefs;
	    }
	    SourceModule.getSourceWithoutImports = function (sourceWithModuleRefs) {
	        return lang_1.StringWrapper.replaceAllMapped(sourceWithModuleRefs, MODULE_REGEXP, function (match) { return ''; });
	    };
	    SourceModule.prototype.getSourceWithImports = function () {
	        var _this = this;
	        var moduleAliases = {};
	        var imports = [];
	        var newSource = lang_1.StringWrapper.replaceAllMapped(this.sourceWithModuleRefs, MODULE_REGEXP, function (match) {
	            var moduleUrl = match[1];
	            var alias = moduleAliases[moduleUrl];
	            if (lang_1.isBlank(alias)) {
	                if (moduleUrl == _this.moduleUrl) {
	                    alias = '';
	                }
	                else {
	                    alias = "import" + imports.length;
	                    imports.push([moduleUrl, alias]);
	                }
	                moduleAliases[moduleUrl] = alias;
	            }
	            return alias.length > 0 ? alias + "." : '';
	        });
	        return new SourceWithImports(newSource, imports);
	    };
	    return SourceModule;
	})();
	exports.SourceModule = SourceModule;
	var SourceExpression = (function () {
	    function SourceExpression(declarations, expression) {
	        this.declarations = declarations;
	        this.expression = expression;
	    }
	    return SourceExpression;
	})();
	exports.SourceExpression = SourceExpression;
	var SourceExpressions = (function () {
	    function SourceExpressions(declarations, expressions) {
	        this.declarations = declarations;
	        this.expressions = expressions;
	    }
	    return SourceExpressions;
	})();
	exports.SourceExpressions = SourceExpressions;
	/**
	 * Represents generated source code with imports. Internal to the Angular compiler.
	 */
	var SourceWithImports = (function () {
	    function SourceWithImports(source, imports) {
	        this.source = source;
	        this.imports = imports;
	    }
	    return SourceWithImports;
	})();
	exports.SourceWithImports = SourceWithImports;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var source_module_1 = __webpack_require__(255);
	var change_detection_jit_generator_1 = __webpack_require__(77);
	var abstract_change_detector_1 = __webpack_require__(48);
	var change_detection_util_1 = __webpack_require__(43);
	var constants_1 = __webpack_require__(41);
	var change_definition_factory_1 = __webpack_require__(257);
	var lang_1 = __webpack_require__(10);
	var change_detection_1 = __webpack_require__(30);
	var change_detector_codegen_1 = __webpack_require__(258);
	var util_1 = __webpack_require__(252);
	var di_1 = __webpack_require__(11);
	var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
	var UTIL = "ChangeDetectionUtil";
	var CHANGE_DETECTOR_STATE = "ChangeDetectorState";
	exports.CHANGE_DETECTION_JIT_IMPORTS = lang_1.CONST_EXPR({
	    'AbstractChangeDetector': abstract_change_detector_1.AbstractChangeDetector,
	    'ChangeDetectionUtil': change_detection_util_1.ChangeDetectionUtil,
	    'ChangeDetectorState': constants_1.ChangeDetectorState
	});
	var ABSTRACT_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/abstract_change_detector" + util_1.MODULE_SUFFIX);
	var UTIL_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/change_detection_util" + util_1.MODULE_SUFFIX);
	var PREGEN_PROTO_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/pregen_proto_change_detector" + util_1.MODULE_SUFFIX);
	var CONSTANTS_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/constants" + util_1.MODULE_SUFFIX);
	var ChangeDetectionCompiler = (function () {
	    function ChangeDetectionCompiler(_genConfig) {
	        this._genConfig = _genConfig;
	    }
	    ChangeDetectionCompiler.prototype.compileComponentRuntime = function (componentType, strategy, parsedTemplate) {
	        var _this = this;
	        var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
	        return changeDetectorDefinitions.map(function (definition) {
	            return _this._createChangeDetectorFactory(definition);
	        });
	    };
	    ChangeDetectionCompiler.prototype._createChangeDetectorFactory = function (definition) {
	        var proto = new change_detection_1.DynamicProtoChangeDetector(definition);
	        return function () { return proto.instantiate(); };
	    };
	    ChangeDetectionCompiler.prototype.compileComponentCodeGen = function (componentType, strategy, parsedTemplate) {
	        var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
	        var factories = [];
	        var index = 0;
	        var sourceParts = changeDetectorDefinitions.map(function (definition) {
	            var codegen;
	            var sourcePart;
	            // TODO(tbosch): move the 2 code generators to the same place, one with .dart and one with .ts
	            // suffix
	            // and have the same API for calling them!
	            if (lang_1.IS_DART) {
	                codegen = new change_detector_codegen_1.Codegen(PREGEN_PROTO_CHANGE_DETECTOR_MODULE);
	                var className = "_" + definition.id;
	                var typeRef = (index === 0 && componentType.isHost) ?
	                    'dynamic' :
	                    "" + source_module_1.moduleRef(componentType.moduleUrl) + componentType.name;
	                codegen.generate(typeRef, className, definition);
	                factories.push(className + ".newChangeDetector");
	                sourcePart = codegen.toString();
	            }
	            else {
	                codegen = new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, "" + UTIL_MODULE + UTIL, "" + ABSTRACT_CHANGE_DETECTOR_MODULE + ABSTRACT_CHANGE_DETECTOR, "" + CONSTANTS_MODULE + CHANGE_DETECTOR_STATE);
	                factories.push("function() { return new " + codegen.typeName + "(); }");
	                sourcePart = codegen.generateSource();
	            }
	            index++;
	            return sourcePart;
	        });
	        return new source_module_1.SourceExpressions(sourceParts, factories);
	    };
	    ChangeDetectionCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.ChangeDetectorGenConfig])
	    ], ChangeDetectionCompiler);
	    return ChangeDetectionCompiler;
	})();
	exports.ChangeDetectionCompiler = ChangeDetectionCompiler;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var reflection_1 = __webpack_require__(21);
	var change_detection_1 = __webpack_require__(30);
	var template_ast_1 = __webpack_require__(254);
	var interfaces_1 = __webpack_require__(253);
	function createChangeDetectorDefinitions(componentType, componentStrategy, genConfig, parsedTemplate) {
	    var pvVisitors = [];
	    var visitor = new ProtoViewVisitor(null, pvVisitors, componentStrategy);
	    template_ast_1.templateVisitAll(visitor, parsedTemplate);
	    return createChangeDefinitions(pvVisitors, componentType, genConfig);
	}
	exports.createChangeDetectorDefinitions = createChangeDetectorDefinitions;
	var ProtoViewVisitor = (function () {
	    function ProtoViewVisitor(parent, allVisitors, strategy) {
	        this.parent = parent;
	        this.allVisitors = allVisitors;
	        this.strategy = strategy;
	        this.nodeCount = 0;
	        this.boundElementCount = 0;
	        this.variableNames = [];
	        this.bindingRecords = [];
	        this.eventRecords = [];
	        this.directiveRecords = [];
	        this.viewIndex = allVisitors.length;
	        allVisitors.push(this);
	    }
	    ProtoViewVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
	        this.nodeCount++;
	        this.boundElementCount++;
	        template_ast_1.templateVisitAll(this, ast.outputs);
	        for (var i = 0; i < ast.directives.length; i++) {
	            ast.directives[i].visit(this, i);
	        }
	        var childVisitor = new ProtoViewVisitor(this, this.allVisitors, change_detection_1.ChangeDetectionStrategy.Default);
	        // Attention: variables present on an embedded template count towards
	        // the embedded template and not the template anchor!
	        template_ast_1.templateVisitAll(childVisitor, ast.vars);
	        template_ast_1.templateVisitAll(childVisitor, ast.children);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitElement = function (ast, context) {
	        this.nodeCount++;
	        if (ast.isBound()) {
	            this.boundElementCount++;
	        }
	        template_ast_1.templateVisitAll(this, ast.inputs, null);
	        template_ast_1.templateVisitAll(this, ast.outputs);
	        template_ast_1.templateVisitAll(this, ast.exportAsVars);
	        for (var i = 0; i < ast.directives.length; i++) {
	            ast.directives[i].visit(this, i);
	        }
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitNgContent = function (ast, context) { return null; };
	    ProtoViewVisitor.prototype.visitVariable = function (ast, context) {
	        this.variableNames.push(ast.name);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitEvent = function (ast, directiveRecord) {
	        var bindingRecord = lang_1.isPresent(directiveRecord) ?
	            change_detection_1.BindingRecord.createForHostEvent(ast.handler, ast.fullName, directiveRecord) :
	            change_detection_1.BindingRecord.createForEvent(ast.handler, ast.fullName, this.boundElementCount - 1);
	        this.eventRecords.push(bindingRecord);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitElementProperty = function (ast, directiveRecord) {
	        var boundElementIndex = this.boundElementCount - 1;
	        var dirIndex = lang_1.isPresent(directiveRecord) ? directiveRecord.directiveIndex : null;
	        var bindingRecord;
	        if (ast.type === template_ast_1.PropertyBindingType.Property) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostProperty(dirIndex, ast.value, ast.name) :
	                    change_detection_1.BindingRecord.createForElementProperty(ast.value, boundElementIndex, ast.name);
	        }
	        else if (ast.type === template_ast_1.PropertyBindingType.Attribute) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostAttribute(dirIndex, ast.value, ast.name) :
	                    change_detection_1.BindingRecord.createForElementAttribute(ast.value, boundElementIndex, ast.name);
	        }
	        else if (ast.type === template_ast_1.PropertyBindingType.Class) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostClass(dirIndex, ast.value, ast.name) :
	                    change_detection_1.BindingRecord.createForElementClass(ast.value, boundElementIndex, ast.name);
	        }
	        else if (ast.type === template_ast_1.PropertyBindingType.Style) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostStyle(dirIndex, ast.value, ast.name, ast.unit) :
	                    change_detection_1.BindingRecord.createForElementStyle(ast.value, boundElementIndex, ast.name, ast.unit);
	        }
	        this.bindingRecords.push(bindingRecord);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitAttr = function (ast, context) { return null; };
	    ProtoViewVisitor.prototype.visitBoundText = function (ast, context) {
	        var nodeIndex = this.nodeCount++;
	        this.bindingRecords.push(change_detection_1.BindingRecord.createForTextNode(ast.value, nodeIndex));
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitText = function (ast, context) {
	        this.nodeCount++;
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitDirective = function (ast, directiveIndexAsNumber) {
	        var directiveIndex = new change_detection_1.DirectiveIndex(this.boundElementCount - 1, directiveIndexAsNumber);
	        var directiveMetadata = ast.directive;
	        var outputsArray = [];
	        collection_1.StringMapWrapper.forEach(ast.directive.outputs, function (eventName, dirProperty) { return outputsArray.push([dirProperty, eventName]); });
	        var directiveRecord = new change_detection_1.DirectiveRecord({
	            directiveIndex: directiveIndex,
	            callAfterContentInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentInit) !== -1,
	            callAfterContentChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentChecked) !== -1,
	            callAfterViewInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewInit) !== -1,
	            callAfterViewChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewChecked) !== -1,
	            callOnChanges: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnChanges) !== -1,
	            callDoCheck: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.DoCheck) !== -1,
	            callOnInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnInit) !== -1,
	            callOnDestroy: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnDestroy) !== -1,
	            changeDetection: directiveMetadata.changeDetection,
	            outputs: outputsArray
	        });
	        this.directiveRecords.push(directiveRecord);
	        template_ast_1.templateVisitAll(this, ast.inputs, directiveRecord);
	        var bindingRecords = this.bindingRecords;
	        if (directiveRecord.callOnChanges) {
	            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnChanges(directiveRecord));
	        }
	        if (directiveRecord.callOnInit) {
	            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
	        }
	        if (directiveRecord.callDoCheck) {
	            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveDoCheck(directiveRecord));
	        }
	        template_ast_1.templateVisitAll(this, ast.hostProperties, directiveRecord);
	        template_ast_1.templateVisitAll(this, ast.hostEvents, directiveRecord);
	        template_ast_1.templateVisitAll(this, ast.exportAsVars);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitDirectiveProperty = function (ast, directiveRecord) {
	        // TODO: these setters should eventually be created by change detection, to make
	        // it monomorphic!
	        var setter = reflection_1.reflector.setter(ast.directiveName);
	        this.bindingRecords.push(change_detection_1.BindingRecord.createForDirective(ast.value, ast.directiveName, setter, directiveRecord));
	        return null;
	    };
	    return ProtoViewVisitor;
	})();
	function createChangeDefinitions(pvVisitors, componentType, genConfig) {
	    var pvVariableNames = _collectNestedProtoViewsVariableNames(pvVisitors);
	    return pvVisitors.map(function (pvVisitor) {
	        var id = componentType.name + "_" + pvVisitor.viewIndex;
	        return new change_detection_1.ChangeDetectorDefinition(id, pvVisitor.strategy, pvVariableNames[pvVisitor.viewIndex], pvVisitor.bindingRecords, pvVisitor.eventRecords, pvVisitor.directiveRecords, genConfig);
	    });
	}
	function _collectNestedProtoViewsVariableNames(pvVisitors) {
	    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(pvVisitors.length);
	    pvVisitors.forEach(function (pv) {
	        var parentVariableNames = lang_1.isPresent(pv.parent) ? nestedPvVariableNames[pv.parent.viewIndex] : [];
	        nestedPvVariableNames[pv.viewIndex] = parentVariableNames.concat(pv.variableNames);
	    });
	    return nestedPvVariableNames;
	}


/***/ },
/* 258 */
/***/ function(module, exports) {

	'use strict';// Note: This class is only here so that we can reference it from TypeScript code.
	// The actual implementation lives under modules_dart.
	// TODO(tbosch): Move the corresponding code into angular2/src/compiler once
	// the new compiler is done.
	var Codegen = (function () {
	    function Codegen(moduleAlias) {
	    }
	    Codegen.prototype.generate = function (typeName, changeDetectorTypeName, def) {
	        throw "Not implemented in JS";
	    };
	    Codegen.prototype.toString = function () { throw "Not implemented in JS"; };
	    return Codegen;
	})();
	exports.Codegen = Codegen;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var source_module_1 = __webpack_require__(255);
	var view_1 = __webpack_require__(81);
	var xhr_1 = __webpack_require__(234);
	var lang_1 = __webpack_require__(10);
	var async_1 = __webpack_require__(53);
	var shadow_css_1 = __webpack_require__(260);
	var url_resolver_1 = __webpack_require__(246);
	var style_url_resolver_1 = __webpack_require__(261);
	var util_1 = __webpack_require__(252);
	var di_1 = __webpack_require__(11);
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	var StyleCompiler = (function () {
	    function StyleCompiler(_xhr, _urlResolver) {
	        this._xhr = _xhr;
	        this._urlResolver = _urlResolver;
	        this._styleCache = new Map();
	        this._shadowCss = new shadow_css_1.ShadowCss();
	    }
	    StyleCompiler.prototype.compileComponentRuntime = function (template) {
	        var styles = template.styles;
	        var styleAbsUrls = template.styleUrls;
	        return this._loadStyles(styles, styleAbsUrls, template.encapsulation === view_1.ViewEncapsulation.Emulated);
	    };
	    StyleCompiler.prototype.compileComponentCodeGen = function (template) {
	        var shim = template.encapsulation === view_1.ViewEncapsulation.Emulated;
	        return this._styleCodeGen(template.styles, template.styleUrls, shim);
	    };
	    StyleCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
	        var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
	        return [
	            this._styleModule(stylesheetUrl, false, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, false)),
	            this._styleModule(stylesheetUrl, true, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, true))
	        ];
	    };
	    StyleCompiler.prototype.clearCache = function () { this._styleCache.clear(); };
	    StyleCompiler.prototype._loadStyles = function (plainStyles, absUrls, encapsulate) {
	        var _this = this;
	        var promises = absUrls.map(function (absUrl) {
	            var cacheKey = "" + absUrl + (encapsulate ? '.shim' : '');
	            var result = _this._styleCache.get(cacheKey);
	            if (lang_1.isBlank(result)) {
	                result = _this._xhr.get(absUrl).then(function (style) {
	                    var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, absUrl, style);
	                    return _this._loadStyles([styleWithImports.style], styleWithImports.styleUrls, encapsulate);
	                });
	                _this._styleCache.set(cacheKey, result);
	            }
	            return result;
	        });
	        return async_1.PromiseWrapper.all(promises).then(function (nestedStyles) {
	            var result = plainStyles.map(function (plainStyle) { return _this._shimIfNeeded(plainStyle, encapsulate); });
	            nestedStyles.forEach(function (styles) { return result.push(styles); });
	            return result;
	        });
	    };
	    StyleCompiler.prototype._styleCodeGen = function (plainStyles, absUrls, shim) {
	        var _this = this;
	        var arrayPrefix = lang_1.IS_DART ? "const" : '';
	        var styleExpressions = plainStyles.map(function (plainStyle) { return util_1.escapeSingleQuoteString(_this._shimIfNeeded(plainStyle, shim)); });
	        for (var i = 0; i < absUrls.length; i++) {
	            var moduleUrl = this._createModuleUrl(absUrls[i], shim);
	            styleExpressions.push(source_module_1.moduleRef(moduleUrl) + "STYLES");
	        }
	        var expressionSource = arrayPrefix + " [" + styleExpressions.join(',') + "]";
	        return new source_module_1.SourceExpression([], expressionSource);
	    };
	    StyleCompiler.prototype._styleModule = function (stylesheetUrl, shim, expression) {
	        var moduleSource = "\n      " + expression.declarations.join('\n') + "\n      " + util_1.codeGenExportVariable('STYLES') + expression.expression + ";\n    ";
	        return new source_module_1.SourceModule(this._createModuleUrl(stylesheetUrl, shim), moduleSource);
	    };
	    StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	    };
	    StyleCompiler.prototype._createModuleUrl = function (stylesheetUrl, shim) {
	        return shim ? stylesheetUrl + ".shim" + util_1.MODULE_SUFFIX : "" + stylesheetUrl + util_1.MODULE_SUFFIX;
	    };
	    StyleCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver])
	    ], StyleCompiler);
	    return StyleCompiler;
	})();
	exports.StyleCompiler = StyleCompiler;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	/**
	 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.

	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.

	  Shimmed features:

	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:

	    :host {
	        background: red;
	      }
	    }

	  becomes:

	    .foo {
	      background: red;
	    }

	  * encapsultion: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to implement
	  this feature.

	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,

	  div {
	      font-weight: bold;
	    }

	  becomes:

	  x-foo div {
	      font-weight: bold;
	    }

	  becomes:


	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:

	    div {
	      font-weight: bold;
	    }

	  becomes:

	    div[x-foo] {
	      font-weight: bold;
	    }

	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.

	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.

	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.

	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.

	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:

	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>

	  could become:

	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>

	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	    * Shim some cssText with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    *
	    * When strictStyling is true:
	    * - selector is the attribute added to all elements inside the host,
	    * - hostSelector is the attribute added to the host itself.
	    */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        cssText = stripComments(cssText);
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector);
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) { return m[1] + '{'; });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[1], '');
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            return m[3] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	    */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (lang_1.isPresent(scopeSelector)) {
	            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	        }
	        cssText = cssText + '\n' + unscoped;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '', m;
	        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar
	    */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * scopeName.foo .bar { ... }
	    */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // p1 = :host, p2 = contents of (), p3 rest of rule
	        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	            if (lang_1.isPresent(m[2])) {
	                var parts = m[2].split(','), r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i];
	                    if (lang_1.isBlank(p))
	                        break;
	                    p = p.trim();
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	    */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	        }
	        return cssText;
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        return processRules(cssText, function (rule) {
	            var selector = rule.selector;
	            var content = rule.content;
	            if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
	                selector =
	                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	            }
	            else if (rule.selector.startsWith('@media')) {
	                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	            }
	            return new CssRule(selector, content);
	        });
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var r = [], parts = selector.split(',');
	        for (var i = 0; i < parts.length; i++) {
	            var p = parts[i];
	            p = p.trim();
	            if (this._selectorNeedsScoping(p, scopeSelector)) {
	                p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ?
	                    this._applyStrictSelectorScope(p, scopeSelector) :
	                    this._applySelectorScope(p, scopeSelector, hostSelector);
	            }
	            r.push(p);
	        }
	        return r.join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = /\[/g;
	        var rre = /\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponentsjs: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	        }
	        else {
	            return scopeSelector + ' ' + selector;
	        }
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
	        var isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) { return m[1]; });
	        var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
	        for (var i = 0; i < splits.length; i++) {
	            var sep = splits[i];
	            var parts = scoped.split(sep);
	            scoped = parts.map(function (p) {
	                // remove :host since it should be unnecessary
	                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) &&
	                    !lang_1.StringWrapper.contains(t, attrName)) {
	                    var re = /([^:]*)(:*)(.*)/g;
	                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
	                    if (lang_1.isPresent(m)) {
	                        p = m[1] + attrName + m[2] + m[3];
	                    }
	                }
	                return p;
	            })
	                .join(sep);
	        }
	        return scoped;
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	        return selector;
	    };
	    return ShadowCss;
	})();
	exports.ShadowCss = ShadowCss;
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [
	    />>>/g,
	    /::shadow/g,
	    /::content/g,
	    // Deprecated selectors
	    // TODO(vicb): see https://github.com/angular/clang-format/issues/16
	    // clang-format off
	    /\/deep\//g,
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	var _commentRe = /\/\*[\s\S]*?\*\//g;
	function stripComments(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, _commentRe, function (_) { return ''; });
	}
	var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	var _curlyRe = /([{}])/g;
	var OPEN_CURLY = '{';
	var CLOSE_CURLY = '}';
	var BLOCK_PLACEHOLDER = '%BLOCK%';
	var CssRule = (function () {
	    function CssRule(selector, content) {
	        this.selector = selector;
	        this.content = content;
	    }
	    return CssRule;
	})();
	exports.CssRule = CssRule;
	function processRules(input, ruleCallback) {
	    var inputWithEscapedBlocks = escapeBlocks(input);
	    var nextBlockIndex = 0;
	    return lang_1.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m) {
	        var selector = m[2];
	        var content = '';
	        var suffix = m[4];
	        var contentPrefix = '';
	        if (lang_1.isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
	            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	            suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
	            contentPrefix = '{';
	        }
	        var rule = ruleCallback(new CssRule(selector, content));
	        return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	    });
	}
	exports.processRules = processRules;
	var StringWithEscapedBlocks = (function () {
	    function StringWithEscapedBlocks(escapedString, blocks) {
	        this.escapedString = escapedString;
	        this.blocks = blocks;
	    }
	    return StringWithEscapedBlocks;
	})();
	function escapeBlocks(input) {
	    var inputParts = lang_1.StringWrapper.split(input, _curlyRe);
	    var resultParts = [];
	    var escapedBlocks = [];
	    var bracketCount = 0;
	    var currentBlockParts = [];
	    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
	        var part = inputParts[partIndex];
	        if (part == CLOSE_CURLY) {
	            bracketCount--;
	        }
	        if (bracketCount > 0) {
	            currentBlockParts.push(part);
	        }
	        else {
	            if (currentBlockParts.length > 0) {
	                escapedBlocks.push(currentBlockParts.join(''));
	                resultParts.push(BLOCK_PLACEHOLDER);
	                currentBlockParts = [];
	            }
	            resultParts.push(part);
	        }
	        if (part == OPEN_CURLY) {
	            bracketCount++;
	        }
	    }
	    if (currentBlockParts.length > 0) {
	        escapedBlocks.push(currentBlockParts.join(''));
	        resultParts.push(BLOCK_PLACEHOLDER);
	    }
	    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	}


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Some of the code comes from WebComponents.JS
	// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
	var lang_1 = __webpack_require__(10);
	var StyleWithImports = (function () {
	    function StyleWithImports(style, styleUrls) {
	        this.style = style;
	        this.styleUrls = styleUrls;
	    }
	    return StyleWithImports;
	})();
	exports.StyleWithImports = StyleWithImports;
	function isStyleUrlResolvable(url) {
	    if (lang_1.isBlank(url) || url.length === 0 || url[0] == '/')
	        return false;
	    var schemeMatch = lang_1.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
	    return lang_1.isBlank(schemeMatch) || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	}
	exports.isStyleUrlResolvable = isStyleUrlResolvable;
	/**
	 * Rewrites stylesheets by resolving and removing the @import urls that
	 * are either relative or don't have a `package:` scheme
	 */
	function extractStyleUrls(resolver, baseUrl, cssText) {
	    var foundUrls = [];
	    var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
	        var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
	        if (!isStyleUrlResolvable(url)) {
	            // Do not attempt to resolve non-package absolute URLs with URI scheme
	            return m[0];
	        }
	        foundUrls.push(resolver.resolve(baseUrl, url));
	        return '';
	    });
	    return new StyleWithImports(modifiedCssText, foundUrls);
	}
	exports.extractStyleUrls = extractStyleUrls;
	var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	// TODO: can't use /^[^:/?#.]+:/g due to clang-format bug:
	//       https://github.com/angular/angular/issues/4596
	var _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var template_ast_1 = __webpack_require__(254);
	var source_module_1 = __webpack_require__(255);
	var view_1 = __webpack_require__(91);
	var view_type_1 = __webpack_require__(93);
	var element_1 = __webpack_require__(92);
	var view_2 = __webpack_require__(81);
	var util_1 = __webpack_require__(252);
	var di_1 = __webpack_require__(11);
	var proto_view_compiler_1 = __webpack_require__(263);
	exports.VIEW_JIT_IMPORTS = lang_1.CONST_EXPR({
	    'AppView': view_1.AppView,
	    'AppElement': element_1.AppElement,
	    'flattenNestedViewRenderNodes': view_1.flattenNestedViewRenderNodes,
	    'checkSlotCount': view_1.checkSlotCount
	});
	var ViewCompiler = (function () {
	    function ViewCompiler() {
	    }
	    ViewCompiler.prototype.compileComponentRuntime = function (component, template, styles, protoViews, changeDetectorFactories, componentViewFactory) {
	        var viewFactory = new RuntimeViewFactory(component, styles, protoViews, changeDetectorFactories, componentViewFactory);
	        return viewFactory.createViewFactory(template, 0, []);
	    };
	    ViewCompiler.prototype.compileComponentCodeGen = function (component, template, styles, protoViews, changeDetectorFactoryExpressions, componentViewFactory) {
	        var viewFactory = new CodeGenViewFactory(component, styles, protoViews, changeDetectorFactoryExpressions, componentViewFactory);
	        var targetStatements = [];
	        var viewFactoryExpression = viewFactory.createViewFactory(template, 0, targetStatements);
	        return new source_module_1.SourceExpression(targetStatements.map(function (stmt) { return stmt.statement; }), viewFactoryExpression.expression);
	    };
	    ViewCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ViewCompiler);
	    return ViewCompiler;
	})();
	exports.ViewCompiler = ViewCompiler;
	var CodeGenViewFactory = (function () {
	    function CodeGenViewFactory(component, styles, protoViews, changeDetectorExpressions, componentViewFactory) {
	        this.component = component;
	        this.styles = styles;
	        this.protoViews = protoViews;
	        this.changeDetectorExpressions = changeDetectorExpressions;
	        this.componentViewFactory = componentViewFactory;
	        this._nextVarId = 0;
	    }
	    CodeGenViewFactory.prototype._nextVar = function (prefix) {
	        return "" + prefix + this._nextVarId++ + "_" + this.component.type.name;
	    };
	    CodeGenViewFactory.prototype._nextRenderVar = function () { return this._nextVar('render'); };
	    CodeGenViewFactory.prototype._nextAppVar = function () { return this._nextVar('app'); };
	    CodeGenViewFactory.prototype._nextDisposableVar = function () {
	        return "disposable" + this._nextVarId++ + "_" + this.component.type.name;
	    };
	    CodeGenViewFactory.prototype.createText = function (renderer, parent, text, targetStatements) {
	        var varName = this._nextRenderVar();
	        var statement = "var " + varName + " = " + renderer.expression + ".createText(" + (lang_1.isPresent(parent) ? parent.expression : null) + ", " + util_1.escapeSingleQuoteString(text) + ");";
	        targetStatements.push(new util_1.Statement(statement));
	        return new util_1.Expression(varName);
	    };
	    CodeGenViewFactory.prototype.createElement = function (renderer, parentRenderNode, name, rootSelector, targetStatements) {
	        var varName = this._nextRenderVar();
	        var valueExpr;
	        if (lang_1.isPresent(rootSelector)) {
	            valueExpr = rootSelector.expression + " == null ?\n        " + renderer.expression + ".createElement(" + (lang_1.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ", " + util_1.escapeSingleQuoteString(name) + ") :\n        " + renderer.expression + ".selectRootElement(" + rootSelector.expression + ");";
	        }
	        else {
	            valueExpr =
	                renderer.expression + ".createElement(" + (lang_1.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ", " + util_1.escapeSingleQuoteString(name) + ")";
	        }
	        var statement = "var " + varName + " = " + valueExpr + ";";
	        targetStatements.push(new util_1.Statement(statement));
	        return new util_1.Expression(varName);
	    };
	    CodeGenViewFactory.prototype.createTemplateAnchor = function (renderer, parentRenderNode, targetStatements) {
	        var varName = this._nextRenderVar();
	        var valueExpr = renderer.expression + ".createTemplateAnchor(" + (lang_1.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ");";
	        targetStatements.push(new util_1.Statement("var " + varName + " = " + valueExpr));
	        return new util_1.Expression(varName);
	    };
	    CodeGenViewFactory.prototype.createGlobalEventListener = function (renderer, appView, boundElementIndex, eventAst, targetStatements) {
	        var disposableVar = this._nextDisposableVar();
	        var eventHandlerExpr = codeGenEventHandler(appView, boundElementIndex, eventAst.fullName);
	        targetStatements.push(new util_1.Statement("var " + disposableVar + " = " + renderer.expression + ".listenGlobal(" + util_1.escapeValue(eventAst.target) + ", " + util_1.escapeValue(eventAst.name) + ", " + eventHandlerExpr + ");"));
	        return new util_1.Expression(disposableVar);
	    };
	    CodeGenViewFactory.prototype.createElementEventListener = function (renderer, appView, boundElementIndex, renderNode, eventAst, targetStatements) {
	        var disposableVar = this._nextDisposableVar();
	        var eventHandlerExpr = codeGenEventHandler(appView, boundElementIndex, eventAst.fullName);
	        targetStatements.push(new util_1.Statement("var " + disposableVar + " = " + renderer.expression + ".listen(" + renderNode.expression + ", " + util_1.escapeValue(eventAst.name) + ", " + eventHandlerExpr + ");"));
	        return new util_1.Expression(disposableVar);
	    };
	    CodeGenViewFactory.prototype.setElementAttribute = function (renderer, renderNode, attrName, attrValue, targetStatements) {
	        targetStatements.push(new util_1.Statement(renderer.expression + ".setElementAttribute(" + renderNode.expression + ", " + util_1.escapeSingleQuoteString(attrName) + ", " + util_1.escapeSingleQuoteString(attrValue) + ");"));
	    };
	    CodeGenViewFactory.prototype.createAppElement = function (appProtoEl, appView, renderNode, parentAppEl, embeddedViewFactory, targetStatements) {
	        var appVar = this._nextAppVar();
	        var varValue = "new " + proto_view_compiler_1.APP_EL_MODULE_REF + "AppElement(" + appProtoEl.expression + ", " + appView.expression + ",\n      " + (lang_1.isPresent(parentAppEl) ? parentAppEl.expression : null) + ", " + renderNode.expression + ", " + (lang_1.isPresent(embeddedViewFactory) ? embeddedViewFactory.expression : null) + ")";
	        targetStatements.push(new util_1.Statement("var " + appVar + " = " + varValue + ";"));
	        return new util_1.Expression(appVar);
	    };
	    CodeGenViewFactory.prototype.createAndSetComponentView = function (renderer, viewManager, view, appEl, component, contentNodesByNgContentIndex, targetStatements) {
	        var codeGenContentNodes;
	        if (this.component.type.isHost) {
	            codeGenContentNodes = view.expression + ".projectableNodes";
	        }
	        else {
	            codeGenContentNodes =
	                "[" + contentNodesByNgContentIndex.map(function (nodes) { return util_1.codeGenFlatArray(nodes); }).join(',') + "]";
	        }
	        targetStatements.push(new util_1.Statement(this.componentViewFactory(component) + "(" + renderer.expression + ", " + viewManager.expression + ", " + appEl.expression + ", " + codeGenContentNodes + ", null, null, null);"));
	    };
	    CodeGenViewFactory.prototype.getProjectedNodes = function (projectableNodes, ngContentIndex) {
	        return new util_1.Expression(projectableNodes.expression + "[" + ngContentIndex + "]", true);
	    };
	    CodeGenViewFactory.prototype.appendProjectedNodes = function (renderer, parent, nodes, targetStatements) {
	        targetStatements.push(new util_1.Statement(renderer.expression + ".projectNodes(" + parent.expression + ", " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "flattenNestedViewRenderNodes(" + nodes.expression + "));"));
	    };
	    CodeGenViewFactory.prototype.createViewFactory = function (asts, embeddedTemplateIndex, targetStatements) {
	        var compileProtoView = this.protoViews[embeddedTemplateIndex];
	        var isHostView = this.component.type.isHost;
	        var isComponentView = embeddedTemplateIndex === 0 && !isHostView;
	        var visitor = new ViewBuilderVisitor(new util_1.Expression('renderer'), new util_1.Expression('viewManager'), new util_1.Expression('projectableNodes'), isHostView ? new util_1.Expression('rootSelector') : null, new util_1.Expression('view'), compileProtoView, targetStatements, this);
	        template_ast_1.templateVisitAll(visitor, asts, new ParentElement(isComponentView ? new util_1.Expression('parentRenderNode') : null, null, null));
	        var appProtoView = compileProtoView.protoView.expression;
	        var viewFactoryName = codeGenViewFactoryName(this.component, embeddedTemplateIndex);
	        var changeDetectorFactory = this.changeDetectorExpressions.expressions[embeddedTemplateIndex];
	        var factoryArgs = [
	            'parentRenderer',
	            'viewManager',
	            'containerEl',
	            'projectableNodes',
	            'rootSelector',
	            'dynamicallyCreatedProviders',
	            'rootInjector'
	        ];
	        var initRendererStmts = [];
	        var rendererExpr = "parentRenderer";
	        if (embeddedTemplateIndex === 0) {
	            var renderCompTypeVar = this._nextVar('renderType');
	            targetStatements.push(new util_1.Statement("var " + renderCompTypeVar + " = null;"));
	            var stylesVar = this._nextVar('styles');
	            targetStatements.push(new util_1.Statement(util_1.CONST_VAR + " " + stylesVar + " = " + this.styles.expression + ";"));
	            var encapsulation = this.component.template.encapsulation;
	            initRendererStmts.push("if (" + renderCompTypeVar + " == null) {\n        " + renderCompTypeVar + " = viewManager.createRenderComponentType(" + codeGenViewEncapsulation(encapsulation) + ", " + stylesVar + ");\n      }");
	            rendererExpr = "parentRenderer.renderComponent(" + renderCompTypeVar + ")";
	        }
	        var statement = "\n" + util_1.codeGenFnHeader(factoryArgs, viewFactoryName) + "{\n  " + initRendererStmts.join('\n') + "\n  var renderer = " + rendererExpr + ";\n  var view = new " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "AppView(\n    " + appProtoView + ", renderer, viewManager,\n    projectableNodes,\n    containerEl,\n    dynamicallyCreatedProviders, rootInjector,\n    " + changeDetectorFactory + "()\n  );\n  " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "checkSlotCount(" + util_1.escapeValue(this.component.type.name) + ", " + this.component.template.ngContentSelectors.length + ", projectableNodes);\n  " + (isComponentView ? 'var parentRenderNode = renderer.createViewRoot(view.containerAppElement.nativeElement);' : '') + "\n  " + visitor.renderStmts.map(function (stmt) { return stmt.statement; }).join('\n') + "\n  " + visitor.appStmts.map(function (stmt) { return stmt.statement; }).join('\n') + "\n\n  view.init(" + util_1.codeGenFlatArray(visitor.rootNodesOrAppElements) + ", " + util_1.codeGenArray(visitor.renderNodes) + ", " + util_1.codeGenArray(visitor.appDisposables) + ",\n            " + util_1.codeGenArray(visitor.appElements) + ");\n  return view;\n}";
	        targetStatements.push(new util_1.Statement(statement));
	        return new util_1.Expression(viewFactoryName);
	    };
	    return CodeGenViewFactory;
	})();
	var RuntimeViewFactory = (function () {
	    function RuntimeViewFactory(component, styles, protoViews, changeDetectorFactories, componentViewFactory) {
	        this.component = component;
	        this.styles = styles;
	        this.protoViews = protoViews;
	        this.changeDetectorFactories = changeDetectorFactories;
	        this.componentViewFactory = componentViewFactory;
	    }
	    RuntimeViewFactory.prototype.createText = function (renderer, parent, text, targetStatements) {
	        return renderer.createText(parent, text);
	    };
	    RuntimeViewFactory.prototype.createElement = function (renderer, parent, name, rootSelector, targetStatements) {
	        var el;
	        if (lang_1.isPresent(rootSelector)) {
	            el = renderer.selectRootElement(rootSelector);
	        }
	        else {
	            el = renderer.createElement(parent, name);
	        }
	        return el;
	    };
	    RuntimeViewFactory.prototype.createTemplateAnchor = function (renderer, parent, targetStatements) {
	        return renderer.createTemplateAnchor(parent);
	    };
	    RuntimeViewFactory.prototype.createGlobalEventListener = function (renderer, appView, boundElementIndex, eventAst, targetStatements) {
	        return renderer.listenGlobal(eventAst.target, eventAst.name, function (event) { return appView.triggerEventHandlers(eventAst.fullName, event, boundElementIndex); });
	    };
	    RuntimeViewFactory.prototype.createElementEventListener = function (renderer, appView, boundElementIndex, renderNode, eventAst, targetStatements) {
	        return renderer.listen(renderNode, eventAst.name, function (event) { return appView.triggerEventHandlers(eventAst.fullName, event, boundElementIndex); });
	    };
	    RuntimeViewFactory.prototype.setElementAttribute = function (renderer, renderNode, attrName, attrValue, targetStatements) {
	        renderer.setElementAttribute(renderNode, attrName, attrValue);
	    };
	    RuntimeViewFactory.prototype.createAppElement = function (appProtoEl, appView, renderNode, parentAppEl, embeddedViewFactory, targetStatements) {
	        return new element_1.AppElement(appProtoEl, appView, parentAppEl, renderNode, embeddedViewFactory);
	    };
	    RuntimeViewFactory.prototype.createAndSetComponentView = function (renderer, viewManager, appView, appEl, component, contentNodesByNgContentIndex, targetStatements) {
	        var flattenedContentNodes;
	        if (this.component.type.isHost) {
	            flattenedContentNodes = appView.projectableNodes;
	        }
	        else {
	            flattenedContentNodes = collection_1.ListWrapper.createFixedSize(contentNodesByNgContentIndex.length);
	            for (var i = 0; i < contentNodesByNgContentIndex.length; i++) {
	                flattenedContentNodes[i] = util_1.flattenArray(contentNodesByNgContentIndex[i], []);
	            }
	        }
	        this.componentViewFactory(component)(renderer, viewManager, appEl, flattenedContentNodes);
	    };
	    RuntimeViewFactory.prototype.getProjectedNodes = function (projectableNodes, ngContentIndex) {
	        return projectableNodes[ngContentIndex];
	    };
	    RuntimeViewFactory.prototype.appendProjectedNodes = function (renderer, parent, nodes, targetStatements) {
	        renderer.projectNodes(parent, view_1.flattenNestedViewRenderNodes(nodes));
	    };
	    RuntimeViewFactory.prototype.createViewFactory = function (asts, embeddedTemplateIndex, targetStatements) {
	        var _this = this;
	        var compileProtoView = this.protoViews[embeddedTemplateIndex];
	        var isComponentView = compileProtoView.protoView.type === view_type_1.ViewType.COMPONENT;
	        var renderComponentType = null;
	        return function (parentRenderer, viewManager, containerEl, projectableNodes, rootSelector, dynamicallyCreatedProviders, rootInjector) {
	            if (rootSelector === void 0) { rootSelector = null; }
	            if (dynamicallyCreatedProviders === void 0) { dynamicallyCreatedProviders = null; }
	            if (rootInjector === void 0) { rootInjector = null; }
	            view_1.checkSlotCount(_this.component.type.name, _this.component.template.ngContentSelectors.length, projectableNodes);
	            var renderer;
	            if (embeddedTemplateIndex === 0) {
	                if (lang_1.isBlank(renderComponentType)) {
	                    renderComponentType = viewManager.createRenderComponentType(_this.component.template.encapsulation, _this.styles);
	                }
	                renderer = parentRenderer.renderComponent(renderComponentType);
	            }
	            else {
	                renderer = parentRenderer;
	            }
	            var changeDetector = _this.changeDetectorFactories[embeddedTemplateIndex]();
	            var view = new view_1.AppView(compileProtoView.protoView, renderer, viewManager, projectableNodes, containerEl, dynamicallyCreatedProviders, rootInjector, changeDetector);
	            var visitor = new ViewBuilderVisitor(renderer, viewManager, projectableNodes, rootSelector, view, compileProtoView, [], _this);
	            var parentRenderNode = isComponentView ? renderer.createViewRoot(containerEl.nativeElement) : null;
	            template_ast_1.templateVisitAll(visitor, asts, new ParentElement(parentRenderNode, null, null));
	            view.init(util_1.flattenArray(visitor.rootNodesOrAppElements, []), visitor.renderNodes, visitor.appDisposables, visitor.appElements);
	            return view;
	        };
	    };
	    return RuntimeViewFactory;
	})();
	var ParentElement = (function () {
	    function ParentElement(renderNode, appEl, component) {
	        this.renderNode = renderNode;
	        this.appEl = appEl;
	        this.component = component;
	        if (lang_1.isPresent(component)) {
	            this.contentNodesByNgContentIndex =
	                collection_1.ListWrapper.createFixedSize(component.template.ngContentSelectors.length);
	            for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	                this.contentNodesByNgContentIndex[i] = [];
	            }
	        }
	        else {
	            this.contentNodesByNgContentIndex = null;
	        }
	    }
	    ParentElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	        this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	    };
	    return ParentElement;
	})();
	var ViewBuilderVisitor = (function () {
	    function ViewBuilderVisitor(renderer, viewManager, projectableNodes, rootSelector, view, protoView, targetStatements, factory) {
	        this.renderer = renderer;
	        this.viewManager = viewManager;
	        this.projectableNodes = projectableNodes;
	        this.rootSelector = rootSelector;
	        this.view = view;
	        this.protoView = protoView;
	        this.targetStatements = targetStatements;
	        this.factory = factory;
	        this.renderStmts = [];
	        this.renderNodes = [];
	        this.appStmts = [];
	        this.appElements = [];
	        this.appDisposables = [];
	        this.rootNodesOrAppElements = [];
	        this.elementCount = 0;
	    }
	    ViewBuilderVisitor.prototype._addRenderNode = function (renderNode, appEl, ngContentIndex, parent) {
	        this.renderNodes.push(renderNode);
	        if (lang_1.isPresent(parent.component)) {
	            if (lang_1.isPresent(ngContentIndex)) {
	                parent.addContentNode(ngContentIndex, lang_1.isPresent(appEl) ? appEl : renderNode);
	            }
	        }
	        else if (lang_1.isBlank(parent.renderNode)) {
	            this.rootNodesOrAppElements.push(lang_1.isPresent(appEl) ? appEl : renderNode);
	        }
	    };
	    ViewBuilderVisitor.prototype._getParentRenderNode = function (ngContentIndex, parent) {
	        return lang_1.isPresent(parent.component) &&
	            parent.component.template.encapsulation !== view_2.ViewEncapsulation.Native ?
	            null :
	            parent.renderNode;
	    };
	    ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	        return this._visitText('', ast.ngContentIndex, parent);
	    };
	    ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	        return this._visitText(ast.value, ast.ngContentIndex, parent);
	    };
	    ViewBuilderVisitor.prototype._visitText = function (value, ngContentIndex, parent) {
	        var renderNode = this.factory.createText(this.renderer, this._getParentRenderNode(ngContentIndex, parent), value, this.renderStmts);
	        this._addRenderNode(renderNode, null, ngContentIndex, parent);
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	        var nodesExpression = this.factory.getProjectedNodes(this.projectableNodes, ast.index);
	        if (lang_1.isPresent(parent.component)) {
	            if (lang_1.isPresent(ast.ngContentIndex)) {
	                parent.addContentNode(ast.ngContentIndex, nodesExpression);
	            }
	        }
	        else {
	            if (lang_1.isPresent(parent.renderNode)) {
	                this.factory.appendProjectedNodes(this.renderer, parent.renderNode, nodesExpression, this.renderStmts);
	            }
	            else {
	                this.rootNodesOrAppElements.push(nodesExpression);
	            }
	        }
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	        var _this = this;
	        var renderNode = this.factory.createElement(this.renderer, this._getParentRenderNode(ast.ngContentIndex, parent), ast.name, this.rootSelector, this.renderStmts);
	        var component = ast.getComponent();
	        var elementIndex = this.elementCount++;
	        var protoEl = this.protoView.protoElements[elementIndex];
	        protoEl.renderEvents.forEach(function (eventAst) {
	            var disposable;
	            if (lang_1.isPresent(eventAst.target)) {
	                disposable = _this.factory.createGlobalEventListener(_this.renderer, _this.view, protoEl.boundElementIndex, eventAst, _this.renderStmts);
	            }
	            else {
	                disposable = _this.factory.createElementEventListener(_this.renderer, _this.view, protoEl.boundElementIndex, renderNode, eventAst, _this.renderStmts);
	            }
	            _this.appDisposables.push(disposable);
	        });
	        for (var i = 0; i < protoEl.attrNameAndValues.length; i++) {
	            var attrName = protoEl.attrNameAndValues[i][0];
	            var attrValue = protoEl.attrNameAndValues[i][1];
	            this.factory.setElementAttribute(this.renderer, renderNode, attrName, attrValue, this.renderStmts);
	        }
	        var appEl = null;
	        if (lang_1.isPresent(protoEl.appProtoEl)) {
	            appEl = this.factory.createAppElement(protoEl.appProtoEl, this.view, renderNode, parent.appEl, null, this.appStmts);
	            this.appElements.push(appEl);
	        }
	        this._addRenderNode(renderNode, appEl, ast.ngContentIndex, parent);
	        var newParent = new ParentElement(renderNode, lang_1.isPresent(appEl) ? appEl : parent.appEl, component);
	        template_ast_1.templateVisitAll(this, ast.children, newParent);
	        if (lang_1.isPresent(appEl) && lang_1.isPresent(component)) {
	            this.factory.createAndSetComponentView(this.renderer, this.viewManager, this.view, appEl, component, newParent.contentNodesByNgContentIndex, this.appStmts);
	        }
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	        var renderNode = this.factory.createTemplateAnchor(this.renderer, this._getParentRenderNode(ast.ngContentIndex, parent), this.renderStmts);
	        var elementIndex = this.elementCount++;
	        var protoEl = this.protoView.protoElements[elementIndex];
	        var embeddedViewFactory = this.factory.createViewFactory(ast.children, protoEl.embeddedTemplateIndex, this.targetStatements);
	        var appEl = this.factory.createAppElement(protoEl.appProtoEl, this.view, renderNode, parent.appEl, embeddedViewFactory, this.appStmts);
	        this._addRenderNode(renderNode, appEl, ast.ngContentIndex, parent);
	        this.appElements.push(appEl);
	        return null;
	    };
	    ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitEvent = function (ast, ctx) { return null; };
	    ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	    ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	    return ViewBuilderVisitor;
	})();
	function codeGenEventHandler(view, boundElementIndex, eventName) {
	    return util_1.codeGenValueFn(['event'], view.expression + ".triggerEventHandlers(" + util_1.escapeValue(eventName) + ", event, " + boundElementIndex + ")");
	}
	function codeGenViewFactoryName(component, embeddedTemplateIndex) {
	    return "viewFactory_" + component.type.name + embeddedTemplateIndex;
	}
	function codeGenViewEncapsulation(value) {
	    if (lang_1.IS_DART) {
	        return "" + proto_view_compiler_1.METADATA_MODULE_REF + value;
	    }
	    else {
	        return "" + value;
	    }
	}


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var template_ast_1 = __webpack_require__(254);
	var source_module_1 = __webpack_require__(255);
	var view_1 = __webpack_require__(91);
	var view_type_1 = __webpack_require__(93);
	var element_1 = __webpack_require__(92);
	var util_1 = __webpack_require__(252);
	var di_1 = __webpack_require__(11);
	exports.PROTO_VIEW_JIT_IMPORTS = lang_1.CONST_EXPR({ 'AppProtoView': view_1.AppProtoView, 'AppProtoElement': element_1.AppProtoElement, 'ViewType': view_type_1.ViewType });
	// TODO: have a single file that reexports everything needed for
	// codegen explicitly
	// - helps understanding what codegen works against
	// - less imports in codegen code
	exports.APP_VIEW_MODULE_REF = source_module_1.moduleRef('package:angular2/src/core/linker/view' + util_1.MODULE_SUFFIX);
	exports.VIEW_TYPE_MODULE_REF = source_module_1.moduleRef('package:angular2/src/core/linker/view_type' + util_1.MODULE_SUFFIX);
	exports.APP_EL_MODULE_REF = source_module_1.moduleRef('package:angular2/src/core/linker/element' + util_1.MODULE_SUFFIX);
	exports.METADATA_MODULE_REF = source_module_1.moduleRef('package:angular2/src/core/metadata/view' + util_1.MODULE_SUFFIX);
	var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	var CLASS_ATTR = 'class';
	var STYLE_ATTR = 'style';
	var ProtoViewCompiler = (function () {
	    function ProtoViewCompiler() {
	    }
	    ProtoViewCompiler.prototype.compileProtoViewRuntime = function (metadataCache, component, template, pipes) {
	        var protoViewFactory = new RuntimeProtoViewFactory(metadataCache, component, pipes);
	        var allProtoViews = [];
	        protoViewFactory.createCompileProtoView(template, [], [], allProtoViews);
	        return new CompileProtoViews([], allProtoViews);
	    };
	    ProtoViewCompiler.prototype.compileProtoViewCodeGen = function (resolvedMetadataCacheExpr, component, template, pipes) {
	        var protoViewFactory = new CodeGenProtoViewFactory(resolvedMetadataCacheExpr, component, pipes);
	        var allProtoViews = [];
	        var allStatements = [];
	        protoViewFactory.createCompileProtoView(template, [], allStatements, allProtoViews);
	        return new CompileProtoViews(allStatements.map(function (stmt) { return stmt.statement; }), allProtoViews);
	    };
	    ProtoViewCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ProtoViewCompiler);
	    return ProtoViewCompiler;
	})();
	exports.ProtoViewCompiler = ProtoViewCompiler;
	var CompileProtoViews = (function () {
	    function CompileProtoViews(declarations, protoViews) {
	        this.declarations = declarations;
	        this.protoViews = protoViews;
	    }
	    return CompileProtoViews;
	})();
	exports.CompileProtoViews = CompileProtoViews;
	var CompileProtoView = (function () {
	    function CompileProtoView(embeddedTemplateIndex, protoElements, protoView) {
	        this.embeddedTemplateIndex = embeddedTemplateIndex;
	        this.protoElements = protoElements;
	        this.protoView = protoView;
	    }
	    return CompileProtoView;
	})();
	exports.CompileProtoView = CompileProtoView;
	var CompileProtoElement = (function () {
	    function CompileProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex, appProtoEl) {
	        this.boundElementIndex = boundElementIndex;
	        this.attrNameAndValues = attrNameAndValues;
	        this.variableNameAndValues = variableNameAndValues;
	        this.renderEvents = renderEvents;
	        this.directives = directives;
	        this.embeddedTemplateIndex = embeddedTemplateIndex;
	        this.appProtoEl = appProtoEl;
	    }
	    return CompileProtoElement;
	})();
	exports.CompileProtoElement = CompileProtoElement;
	function visitAndReturnContext(visitor, asts, context) {
	    template_ast_1.templateVisitAll(visitor, asts, context);
	    return context;
	}
	var ProtoViewFactory = (function () {
	    function ProtoViewFactory(component) {
	        this.component = component;
	    }
	    ProtoViewFactory.prototype.createCompileProtoView = function (template, templateVariableBindings, targetStatements, targetProtoViews) {
	        var embeddedTemplateIndex = targetProtoViews.length;
	        // Note: targetProtoViews needs to be in depth first order.
	        // So we "reserve" a space here that we fill after the recursion is done
	        targetProtoViews.push(null);
	        var builder = new ProtoViewBuilderVisitor(this, targetStatements, targetProtoViews);
	        template_ast_1.templateVisitAll(builder, template);
	        var viewType = getViewType(this.component, embeddedTemplateIndex);
	        var appProtoView = this.createAppProtoView(embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements);
	        var cpv = new CompileProtoView(embeddedTemplateIndex, builder.protoElements, appProtoView);
	        targetProtoViews[embeddedTemplateIndex] = cpv;
	        return cpv;
	    };
	    return ProtoViewFactory;
	})();
	var CodeGenProtoViewFactory = (function (_super) {
	    __extends(CodeGenProtoViewFactory, _super);
	    function CodeGenProtoViewFactory(resolvedMetadataCacheExpr, component, pipes) {
	        _super.call(this, component);
	        this.resolvedMetadataCacheExpr = resolvedMetadataCacheExpr;
	        this.pipes = pipes;
	        this._nextVarId = 0;
	    }
	    CodeGenProtoViewFactory.prototype._nextProtoViewVar = function (embeddedTemplateIndex) {
	        return "appProtoView" + this._nextVarId++ + "_" + this.component.type.name + embeddedTemplateIndex;
	    };
	    CodeGenProtoViewFactory.prototype.createAppProtoView = function (embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements) {
	        var protoViewVarName = this._nextProtoViewVar(embeddedTemplateIndex);
	        var viewTypeExpr = codeGenViewType(viewType);
	        var pipesExpr = embeddedTemplateIndex === 0 ?
	            codeGenTypesArray(this.pipes.map(function (pipeMeta) { return pipeMeta.type; })) :
	            null;
	        var statement = "var " + protoViewVarName + " = " + exports.APP_VIEW_MODULE_REF + "AppProtoView.create(" + this.resolvedMetadataCacheExpr.expression + ", " + viewTypeExpr + ", " + pipesExpr + ", " + util_1.codeGenStringMap(templateVariableBindings) + ");";
	        targetStatements.push(new util_1.Statement(statement));
	        return new util_1.Expression(protoViewVarName);
	    };
	    CodeGenProtoViewFactory.prototype.createAppProtoElement = function (boundElementIndex, attrNameAndValues, variableNameAndValues, directives, targetStatements) {
	        var varName = "appProtoEl" + this._nextVarId++ + "_" + this.component.type.name;
	        var value = exports.APP_EL_MODULE_REF + "AppProtoElement.create(\n        " + this.resolvedMetadataCacheExpr.expression + ",\n        " + boundElementIndex + ",\n        " + util_1.codeGenStringMap(attrNameAndValues) + ",\n        " + codeGenDirectivesArray(directives) + ",\n        " + util_1.codeGenStringMap(variableNameAndValues) + "\n      )";
	        var statement = "var " + varName + " = " + value + ";";
	        targetStatements.push(new util_1.Statement(statement));
	        return new util_1.Expression(varName);
	    };
	    return CodeGenProtoViewFactory;
	})(ProtoViewFactory);
	var RuntimeProtoViewFactory = (function (_super) {
	    __extends(RuntimeProtoViewFactory, _super);
	    function RuntimeProtoViewFactory(metadataCache, component, pipes) {
	        _super.call(this, component);
	        this.metadataCache = metadataCache;
	        this.pipes = pipes;
	    }
	    RuntimeProtoViewFactory.prototype.createAppProtoView = function (embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements) {
	        var pipes = embeddedTemplateIndex === 0 ? this.pipes.map(function (pipeMeta) { return pipeMeta.type.runtime; }) : [];
	        var templateVars = keyValueArrayToStringMap(templateVariableBindings);
	        return view_1.AppProtoView.create(this.metadataCache, viewType, pipes, templateVars);
	    };
	    RuntimeProtoViewFactory.prototype.createAppProtoElement = function (boundElementIndex, attrNameAndValues, variableNameAndValues, directives, targetStatements) {
	        var attrs = keyValueArrayToStringMap(attrNameAndValues);
	        return element_1.AppProtoElement.create(this.metadataCache, boundElementIndex, attrs, directives.map(function (dirMeta) { return dirMeta.type.runtime; }), keyValueArrayToStringMap(variableNameAndValues));
	    };
	    return RuntimeProtoViewFactory;
	})(ProtoViewFactory);
	var ProtoViewBuilderVisitor = (function () {
	    function ProtoViewBuilderVisitor(factory, allStatements, allProtoViews) {
	        this.factory = factory;
	        this.allStatements = allStatements;
	        this.allProtoViews = allProtoViews;
	        this.protoElements = [];
	        this.boundElementCount = 0;
	    }
	    ProtoViewBuilderVisitor.prototype._readAttrNameAndValues = function (directives, attrAsts) {
	        var attrs = visitAndReturnContext(this, attrAsts, {});
	        directives.forEach(function (directiveMeta) {
	            collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
	                var prevValue = attrs[name];
	                attrs[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	            });
	        });
	        return mapToKeyValueArray(attrs);
	    };
	    ProtoViewBuilderVisitor.prototype.visitBoundText = function (ast, context) { return null; };
	    ProtoViewBuilderVisitor.prototype.visitText = function (ast, context) { return null; };
	    ProtoViewBuilderVisitor.prototype.visitNgContent = function (ast, context) { return null; };
	    ProtoViewBuilderVisitor.prototype.visitElement = function (ast, context) {
	        var _this = this;
	        var boundElementIndex = null;
	        if (ast.isBound()) {
	            boundElementIndex = this.boundElementCount++;
	        }
	        var component = ast.getComponent();
	        var variableNameAndValues = [];
	        if (lang_1.isBlank(component)) {
	            ast.exportAsVars.forEach(function (varAst) { variableNameAndValues.push([varAst.name, null]); });
	        }
	        var directives = [];
	        var renderEvents = visitAndReturnContext(this, ast.outputs, new Map());
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            directiveAst.visit(_this, new DirectiveContext(index, boundElementIndex, renderEvents, variableNameAndValues, directives));
	        });
	        var renderEventArray = [];
	        renderEvents.forEach(function (eventAst, _) { return renderEventArray.push(eventAst); });
	        var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
	        this._addProtoElement(ast.isBound(), boundElementIndex, attrNameAndValues, variableNameAndValues, renderEventArray, directives, null);
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    ProtoViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
	        var _this = this;
	        var boundElementIndex = this.boundElementCount++;
	        var directives = [];
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            directiveAst.visit(_this, new DirectiveContext(index, boundElementIndex, new Map(), [], directives));
	        });
	        var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
	        var templateVariableBindings = ast.vars.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	        var nestedProtoView = this.factory.createCompileProtoView(ast.children, templateVariableBindings, this.allStatements, this.allProtoViews);
	        this._addProtoElement(true, boundElementIndex, attrNameAndValues, [], [], directives, nestedProtoView.embeddedTemplateIndex);
	        return null;
	    };
	    ProtoViewBuilderVisitor.prototype._addProtoElement = function (isBound, boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex) {
	        var appProtoEl = null;
	        if (isBound) {
	            appProtoEl =
	                this.factory.createAppProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, directives, this.allStatements);
	        }
	        var compileProtoEl = new CompileProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex, appProtoEl);
	        this.protoElements.push(compileProtoEl);
	    };
	    ProtoViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	    ProtoViewBuilderVisitor.prototype.visitAttr = function (ast, attrNameAndValues) {
	        attrNameAndValues[ast.name] = ast.value;
	        return null;
	    };
	    ProtoViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) {
	        ctx.targetDirectives.push(ast.directive);
	        template_ast_1.templateVisitAll(this, ast.hostEvents, ctx.hostEventTargetAndNames);
	        ast.exportAsVars.forEach(function (varAst) { ctx.targetVariableNameAndValues.push([varAst.name, ctx.index]); });
	        return null;
	    };
	    ProtoViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	        eventTargetAndNames.set(ast.fullName, ast);
	        return null;
	    };
	    ProtoViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	    ProtoViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	    return ProtoViewBuilderVisitor;
	})();
	function mapToKeyValueArray(data) {
	    var entryArray = [];
	    collection_1.StringMapWrapper.forEach(data, function (value, name) { entryArray.push([name, value]); });
	    // We need to sort to get a defined output order
	    // for tests and for caching generated artifacts...
	    collection_1.ListWrapper.sort(entryArray, function (entry1, entry2) { return lang_1.StringWrapper.compare(entry1[0], entry2[0]); });
	    var keyValueArray = [];
	    entryArray.forEach(function (entry) { keyValueArray.push([entry[0], entry[1]]); });
	    return keyValueArray;
	}
	function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
	        return attrValue1 + " " + attrValue2;
	    }
	    else {
	        return attrValue2;
	    }
	}
	var DirectiveContext = (function () {
	    function DirectiveContext(index, boundElementIndex, hostEventTargetAndNames, targetVariableNameAndValues, targetDirectives) {
	        this.index = index;
	        this.boundElementIndex = boundElementIndex;
	        this.hostEventTargetAndNames = hostEventTargetAndNames;
	        this.targetVariableNameAndValues = targetVariableNameAndValues;
	        this.targetDirectives = targetDirectives;
	    }
	    return DirectiveContext;
	})();
	function keyValueArrayToStringMap(keyValueArray) {
	    var stringMap = {};
	    for (var i = 0; i < keyValueArray.length; i++) {
	        var entry = keyValueArray[i];
	        stringMap[entry[0]] = entry[1];
	    }
	    return stringMap;
	}
	function codeGenDirectivesArray(directives) {
	    var expressions = directives.map(function (directiveType) { return typeRef(directiveType.type); });
	    return "[" + expressions.join(',') + "]";
	}
	function codeGenTypesArray(types) {
	    var expressions = types.map(typeRef);
	    return "[" + expressions.join(',') + "]";
	}
	function codeGenViewType(value) {
	    if (lang_1.IS_DART) {
	        return "" + exports.VIEW_TYPE_MODULE_REF + value;
	    }
	    else {
	        return "" + value;
	    }
	}
	function typeRef(type) {
	    return "" + source_module_1.moduleRef(type.moduleUrl) + type.name;
	}
	function getViewType(component, embeddedTemplateIndex) {
	    if (embeddedTemplateIndex > 0) {
	        return view_type_1.ViewType.EMBEDDED;
	    }
	    else if (component.type.isHost) {
	        return view_type_1.ViewType.HOST;
	    }
	    else {
	        return view_type_1.ViewType.COMPONENT;
	    }
	}


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var collection_1 = __webpack_require__(17);
	var lang_1 = __webpack_require__(10);
	var core_1 = __webpack_require__(7);
	var lang_2 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var change_detection_1 = __webpack_require__(30);
	var html_parser_1 = __webpack_require__(265);
	var html_tags_1 = __webpack_require__(269);
	var parse_util_1 = __webpack_require__(268);
	var ast_1 = __webpack_require__(35);
	var template_ast_1 = __webpack_require__(254);
	var selector_1 = __webpack_require__(251);
	var element_schema_registry_1 = __webpack_require__(270);
	var template_preparser_1 = __webpack_require__(271);
	var style_url_resolver_1 = __webpack_require__(261);
	var html_ast_1 = __webpack_require__(266);
	var util_1 = __webpack_require__(252);
	// Group 1 = "bind-"
	// Group 2 = "var-" or "#"
	// Group 3 = "on-"
	// Group 4 = "bindon-"
	// Group 5 = the identifier after "bind-", "var-/#", or "on-"
	// Group 6 = identifier inside [()]
	// Group 7 = identifier inside []
	// Group 8 = identifier inside ()
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
	var TEMPLATE_ELEMENT = 'template';
	var TEMPLATE_ATTR = 'template';
	var TEMPLATE_ATTR_PREFIX = '*';
	var CLASS_ATTR = 'class';
	var PROPERTY_PARTS_SEPARATOR = '.';
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse('*')[0];
	/**
	 * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	 * parsed templates before compilation is invoked, allowing custom expression syntax
	 * and other advanced transformations.
	 *
	 * This is currently an internal-only feature and not meant for general use.
	 */
	exports.TEMPLATE_TRANSFORMS = lang_2.CONST_EXPR(new core_1.OpaqueToken('TemplateTransforms'));
	var TemplateParseError = (function (_super) {
	    __extends(TemplateParseError, _super);
	    function TemplateParseError(message, location) {
	        _super.call(this, location, message);
	    }
	    return TemplateParseError;
	})(parse_util_1.ParseError);
	exports.TemplateParseError = TemplateParseError;
	var TemplateParser = (function () {
	    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, transforms) {
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._htmlParser = _htmlParser;
	        this.transforms = transforms;
	    }
	    TemplateParser.prototype.parse = function (template, directives, pipes, templateUrl) {
	        var parseVisitor = new TemplateParseVisitor(directives, pipes, this._exprParser, this._schemaRegistry);
	        var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl);
	        var result = html_ast_1.htmlVisitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_COMPONENT);
	        var errors = htmlAstWithErrors.errors.concat(parseVisitor.errors);
	        if (errors.length > 0) {
	            var errorString = errors.join('\n');
	            throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
	        }
	        if (lang_1.isPresent(this.transforms)) {
	            this.transforms.forEach(function (transform) { result = template_ast_1.templateVisitAll(transform, result); });
	        }
	        return result;
	    };
	    TemplateParser = __decorate([
	        core_1.Injectable(),
	        __param(3, core_1.Optional()),
	        __param(3, core_1.Inject(exports.TEMPLATE_TRANSFORMS)), 
	        __metadata('design:paramtypes', [change_detection_1.Parser, element_schema_registry_1.ElementSchemaRegistry, html_parser_1.HtmlParser, Array])
	    ], TemplateParser);
	    return TemplateParser;
	})();
	exports.TemplateParser = TemplateParser;
	var TemplateParseVisitor = (function () {
	    function TemplateParseVisitor(directives, pipes, _exprParser, _schemaRegistry) {
	        var _this = this;
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this.errors = [];
	        this.directivesIndex = new Map();
	        this.ngContentCount = 0;
	        this.selectorMatcher = new selector_1.SelectorMatcher();
	        collection_1.ListWrapper.forEachWithIndex(directives, function (directive, index) {
	            var selector = selector_1.CssSelector.parse(directive.selector);
	            _this.selectorMatcher.addSelectables(selector, directive);
	            _this.directivesIndex.set(directive, index);
	        });
	        this.pipesByName = new Map();
	        pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	    }
	    TemplateParseVisitor.prototype._reportError = function (message, sourceSpan) {
	        this.errors.push(new TemplateParseError(message, sourceSpan.start));
	    };
	    TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseInterpolation(value, sourceInfo);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseAction = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseAction(value, sourceInfo);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseBinding = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseBinding(value, sourceInfo);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceSpan) {
	        var _this = this;
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var bindings = this._exprParser.parseTemplateBindings(value, sourceInfo);
	            bindings.forEach(function (binding) {
	                if (lang_1.isPresent(binding.expression)) {
	                    _this._checkPipes(binding.expression, sourceSpan);
	                }
	            });
	            return bindings;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return [];
	        }
	    };
	    TemplateParseVisitor.prototype._checkPipes = function (ast, sourceSpan) {
	        var _this = this;
	        if (lang_1.isPresent(ast)) {
	            var collector = new PipeCollector();
	            ast.visit(collector);
	            collector.pipes.forEach(function (pipeName) {
	                if (!_this.pipesByName.has(pipeName)) {
	                    _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
	                }
	            });
	        }
	    };
	    TemplateParseVisitor.prototype.visitText = function (ast, component) {
	        var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
	        var expr = this._parseInterpolation(ast.value, ast.sourceSpan);
	        if (lang_1.isPresent(expr)) {
	            return new template_ast_1.BoundTextAst(expr, ngContentIndex, ast.sourceSpan);
	        }
	        else {
	            return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
	        }
	    };
	    TemplateParseVisitor.prototype.visitAttr = function (ast, contex) {
	        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
	    };
	    TemplateParseVisitor.prototype.visitElement = function (element, component) {
	        var _this = this;
	        var nodeName = element.name;
	        var preparsedElement = template_preparser_1.preparseElement(element);
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
	            // Skipping <script> for security reasons
	            // Skipping <style> as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET &&
	            style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            // Skipping stylesheets with either relative urls or package scheme as we already processed
	            // them in the StyleCompiler
	            return null;
	        }
	        var matchableAttrs = [];
	        var elementOrDirectiveProps = [];
	        var vars = [];
	        var events = [];
	        var templateElementOrDirectiveProps = [];
	        var templateVars = [];
	        var templateMatchableAttrs = [];
	        var hasInlineTemplates = false;
	        var attrs = [];
	        element.attrs.forEach(function (attr) {
	            var hasBinding = _this._parseAttr(attr, matchableAttrs, elementOrDirectiveProps, events, vars);
	            var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateVars);
	            if (!hasBinding && !hasTemplateBinding) {
	                // don't include the bindings as attributes as well in the AST
	                attrs.push(_this.visitAttr(attr, null));
	                matchableAttrs.push([attr.name, attr.value]);
	            }
	            if (hasTemplateBinding) {
	                hasInlineTemplates = true;
	            }
	        });
	        var lcElName = html_tags_1.splitNsName(nodeName.toLowerCase())[1];
	        var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	        var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	        var directives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, elementCssSelector), elementOrDirectiveProps, isTemplateElement ? [] : vars, element.sourceSpan);
	        var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directives);
	        var children = html_ast_1.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, Component.create(directives));
	        var elementNgContentIndex = hasInlineTemplates ? null : component.findNgContentIndex(elementCssSelector);
	        var parsedElement;
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
	            if (lang_1.isPresent(element.children) && element.children.length > 0) {
	                this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
	            }
	            parsedElement =
	                new template_ast_1.NgContentAst(this.ngContentCount++, elementNgContentIndex, element.sourceSpan);
	        }
	        else if (isTemplateElement) {
	            this._assertAllEventsPublishedByDirectives(directives, events);
	            this._assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, element.sourceSpan);
	            parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, events, vars, directives, children, elementNgContentIndex, element.sourceSpan);
	        }
	        else {
	            this._assertOnlyOneComponent(directives, element.sourceSpan);
	            var elementExportAsVars = vars.filter(function (varAst) { return varAst.value.length === 0; });
	            parsedElement =
	                new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, elementExportAsVars, directives, children, elementNgContentIndex, element.sourceSpan);
	        }
	        if (hasInlineTemplates) {
	            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	            var templateDirectives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, templateCssSelector), templateElementOrDirectiveProps, [], element.sourceSpan);
	            var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectives);
	            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectives, templateElementProps, element.sourceSpan);
	            parsedElement = new template_ast_1.EmbeddedTemplateAst([], [], templateVars, templateDirectives, [parsedElement], component.findNgContentIndex(templateCssSelector), element.sourceSpan);
	        }
	        return parsedElement;
	    };
	    TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
	        var templateBindingsSource = null;
	        if (attr.name == TEMPLATE_ATTR) {
	            templateBindingsSource = attr.value;
	        }
	        else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
	            var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
	            templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
	        }
	        if (lang_1.isPresent(templateBindingsSource)) {
	            var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
	            for (var i = 0; i < bindings.length; i++) {
	                var binding = bindings[i];
	                if (binding.keyIsVar) {
	                    targetVars.push(new template_ast_1.VariableAst(binding.key, binding.name, attr.sourceSpan));
	                    targetMatchableAttrs.push([binding.key, binding.name]);
	                }
	                else if (lang_1.isPresent(binding.expression)) {
	                    this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                }
	                else {
	                    targetMatchableAttrs.push([binding.key, '']);
	                    this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    TemplateParseVisitor.prototype._parseAttr = function (attr, targetMatchableAttrs, targetProps, targetEvents, targetVars) {
	        var attrName = this._normalizeAttributeName(attr.name);
	        var attrValue = attr.value;
	        var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	        var hasBinding = false;
	        if (lang_1.isPresent(bindParts)) {
	            hasBinding = true;
	            if (lang_1.isPresent(bindParts[1])) {
	                this._parseProperty(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (lang_1.isPresent(bindParts[2])) {
	                var identifier = bindParts[5];
	                this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
	            }
	            else if (lang_1.isPresent(bindParts[3])) {
	                this._parseEvent(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[4])) {
	                this._parseProperty(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[6])) {
	                this._parseProperty(bindParts[6], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[6], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[7])) {
	                this._parseProperty(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (lang_1.isPresent(bindParts[8])) {
	                this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	        }
	        else {
	            hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
	        }
	        if (!hasBinding) {
	            this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps);
	        }
	        return hasBinding;
	    };
	    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	        return attrName.toLowerCase().startsWith('data-') ? attrName.substring(5) : attrName;
	    };
	    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	        }
	        targetVars.push(new template_ast_1.VariableAst(identifier, value, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseProperty = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	        this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	    };
	    TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	        var expr = this._parseInterpolation(value, sourceSpan);
	        if (lang_1.isPresent(expr)) {
	            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	            return true;
	        }
	        return false;
	    };
	    TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	    };
	    TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	        // long format: 'target: eventName'
	        var parts = util_1.splitAtColon(name, [null, name]);
	        var target = parts[0];
	        var eventName = parts[1];
	        var ast = this._parseAction(expression, sourceSpan);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetEvents.push(new template_ast_1.BoundEventAst(eventName, target, ast, sourceSpan));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the matchableAttrs
	    };
	    TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceSpan, targetProps) {
	        targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	        var _this = this;
	        var directives = [];
	        selectorMatcher.match(elementCssSelector, function (selector, directive) { directives.push(directive); });
	        // Need to sort the directives so that we get consistent results throughout,
	        // as selectorMatcher uses Maps inside.
	        // Also need to make components the first directive in the array
	        collection_1.ListWrapper.sort(directives, function (dir1, dir2) {
	            var dir1Comp = dir1.isComponent;
	            var dir2Comp = dir2.isComponent;
	            if (dir1Comp && !dir2Comp) {
	                return -1;
	            }
	            else if (!dir1Comp && dir2Comp) {
	                return 1;
	            }
	            else {
	                return _this.directivesIndex.get(dir1) - _this.directivesIndex.get(dir2);
	            }
	        });
	        return directives;
	    };
	    TemplateParseVisitor.prototype._createDirectiveAsts = function (elementName, directives, props, possibleExportAsVars, sourceSpan) {
	        var _this = this;
	        var matchedVariables = new Set();
	        var directiveAsts = directives.map(function (directive) {
	            var hostProperties = [];
	            var hostEvents = [];
	            var directiveProperties = [];
	            _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
	            _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
	            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	            var exportAsVars = [];
	            possibleExportAsVars.forEach(function (varAst) {
	                if ((varAst.value.length === 0 && directive.isComponent) ||
	                    (directive.exportAs == varAst.value)) {
	                    exportAsVars.push(varAst);
	                    matchedVariables.add(varAst.name);
	                }
	            });
	            return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, exportAsVars, sourceSpan);
	        });
	        possibleExportAsVars.forEach(function (varAst) {
	            if (varAst.value.length > 0 && !collection_1.SetWrapper.has(matchedVariables, varAst.name)) {
	                _this._reportError("There is no directive with \"exportAs\" set to \"" + varAst.value + "\"", varAst.sourceSpan);
	            }
	        });
	        return directiveAsts;
	    };
	    TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceSpan, targetPropertyAsts) {
	        var _this = this;
	        if (lang_1.isPresent(hostProps)) {
	            collection_1.StringMapWrapper.forEach(hostProps, function (expression, propName) {
	                var exprAst = _this._parseBinding(expression, sourceSpan);
	                targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceSpan, targetEventAsts) {
	        var _this = this;
	        if (lang_1.isPresent(hostListeners)) {
	            collection_1.StringMapWrapper.forEach(hostListeners, function (expression, propName) {
	                _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	        if (lang_1.isPresent(directiveProperties)) {
	            var boundPropsByName = new Map();
	            boundProps.forEach(function (boundProp) {
	                var prevValue = boundPropsByName.get(boundProp.name);
	                if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
	                    // give [a]="b" a higher precedence than a="b" on the same element
	                    boundPropsByName.set(boundProp.name, boundProp);
	                }
	            });
	            collection_1.StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
	                var boundProp = boundPropsByName.get(elProp);
	                // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                if (lang_1.isPresent(boundProp)) {
	                    targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                }
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	        var _this = this;
	        var boundElementProps = [];
	        var boundDirectivePropsIndex = new Map();
	        directives.forEach(function (directive) {
	            directive.inputs.forEach(function (prop) {
	                boundDirectivePropsIndex.set(prop.templateName, prop);
	            });
	        });
	        props.forEach(function (prop) {
	            if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
	                boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
	            }
	        });
	        return boundElementProps;
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceSpan) {
	        var unit = null;
	        var bindingType;
	        var boundPropertyName;
	        var parts = name.split(PROPERTY_PARTS_SEPARATOR);
	        if (parts.length === 1) {
	            boundPropertyName = this._schemaRegistry.getMappedPropName(parts[0]);
	            bindingType = template_ast_1.PropertyBindingType.Property;
	            if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
	                this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property", sourceSpan);
	            }
	        }
	        else {
	            if (parts[0] == ATTRIBUTE_PREFIX) {
	                boundPropertyName = parts[1];
	                bindingType = template_ast_1.PropertyBindingType.Attribute;
	            }
	            else if (parts[0] == CLASS_PREFIX) {
	                boundPropertyName = parts[1];
	                bindingType = template_ast_1.PropertyBindingType.Class;
	            }
	            else if (parts[0] == STYLE_PREFIX) {
	                unit = parts.length > 2 ? parts[2] : null;
	                boundPropertyName = parts[1];
	                bindingType = template_ast_1.PropertyBindingType.Style;
	            }
	            else {
	                this._reportError("Invalid property name '" + name + "'", sourceSpan);
	                bindingType = null;
	            }
	        }
	        return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, ast, unit, sourceSpan);
	    };
	    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	        var componentTypeNames = [];
	        directives.forEach(function (directive) {
	            var typeName = directive.directive.type.name;
	            if (directive.directive.isComponent) {
	                componentTypeNames.push(typeName);
	            }
	        });
	        return componentTypeNames;
	    };
	    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 1) {
	            this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
	        }
	    };
	    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	        var _this = this;
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 0) {
	            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	        }
	        elementProps.forEach(function (prop) {
	            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template", sourceSpan);
	        });
	    };
	    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	        var _this = this;
	        var allDirectiveEvents = new Set();
	        directives.forEach(function (directive) {
	            collection_1.StringMapWrapper.forEach(directive.directive.outputs, function (eventName, _) { allDirectiveEvents.add(eventName); });
	        });
	        events.forEach(function (event) {
	            if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
	                _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template", event.sourceSpan);
	            }
	        });
	    };
	    return TemplateParseVisitor;
	})();
	var NonBindableVisitor = (function () {
	    function NonBindableVisitor() {
	    }
	    NonBindableVisitor.prototype.visitElement = function (ast, component) {
	        var preparsedElement = template_preparser_1.preparseElement(ast);
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
	        var selector = createElementCssSelector(ast.name, attrNameAndValues);
	        var ngContentIndex = component.findNgContentIndex(selector);
	        var children = html_ast_1.htmlVisitAll(this, ast.children, EMPTY_COMPONENT);
	        return new template_ast_1.ElementAst(ast.name, html_ast_1.htmlVisitAll(this, ast.attrs), [], [], [], [], children, ngContentIndex, ast.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitAttr = function (ast, context) {
	        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitText = function (ast, component) {
	        var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
	        return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
	    };
	    return NonBindableVisitor;
	})();
	var BoundElementOrDirectiveProperty = (function () {
	    function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
	        this.name = name;
	        this.expression = expression;
	        this.isLiteral = isLiteral;
	        this.sourceSpan = sourceSpan;
	    }
	    return BoundElementOrDirectiveProperty;
	})();
	function splitClasses(classAttrValue) {
	    return lang_1.StringWrapper.split(classAttrValue.trim(), /\s+/g);
	}
	exports.splitClasses = splitClasses;
	var Component = (function () {
	    function Component(ngContentIndexMatcher, wildcardNgContentIndex) {
	        this.ngContentIndexMatcher = ngContentIndexMatcher;
	        this.wildcardNgContentIndex = wildcardNgContentIndex;
	    }
	    Component.create = function (directives) {
	        if (directives.length === 0 || !directives[0].directive.isComponent) {
	            return EMPTY_COMPONENT;
	        }
	        var matcher = new selector_1.SelectorMatcher();
	        var ngContentSelectors = directives[0].directive.template.ngContentSelectors;
	        var wildcardNgContentIndex = null;
	        for (var i = 0; i < ngContentSelectors.length; i++) {
	            var selector = ngContentSelectors[i];
	            if (lang_1.StringWrapper.equals(selector, '*')) {
	                wildcardNgContentIndex = i;
	            }
	            else {
	                matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
	            }
	        }
	        return new Component(matcher, wildcardNgContentIndex);
	    };
	    Component.prototype.findNgContentIndex = function (selector) {
	        var ngContentIndices = [];
	        this.ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	        collection_1.ListWrapper.sort(ngContentIndices);
	        if (lang_1.isPresent(this.wildcardNgContentIndex)) {
	            ngContentIndices.push(this.wildcardNgContentIndex);
	        }
	        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	    };
	    return Component;
	})();
	function createElementCssSelector(elementName, matchableAttrs) {
	    var cssSelector = new selector_1.CssSelector();
	    var elNameNoNs = html_tags_1.splitNsName(elementName)[1];
	    cssSelector.setElement(elNameNoNs);
	    for (var i = 0; i < matchableAttrs.length; i++) {
	        var attrName = matchableAttrs[i][0];
	        var attrNameNoNs = html_tags_1.splitNsName(attrName)[1];
	        var attrValue = matchableAttrs[i][1];
	        cssSelector.addAttribute(attrNameNoNs, attrValue);
	        if (attrName.toLowerCase() == CLASS_ATTR) {
	            var classes = splitClasses(attrValue);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    }
	    return cssSelector;
	}
	var EMPTY_COMPONENT = new Component(new selector_1.SelectorMatcher(), null);
	var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	var PipeCollector = (function (_super) {
	    __extends(PipeCollector, _super);
	    function PipeCollector() {
	        _super.apply(this, arguments);
	        this.pipes = new Set();
	    }
	    PipeCollector.prototype.visitPipe = function (ast) {
	        this.pipes.add(ast.name);
	        ast.exp.visit(this);
	        this.visitAll(ast.args);
	        return null;
	    };
	    return PipeCollector;
	})(ast_1.RecursiveAstVisitor);
	exports.PipeCollector = PipeCollector;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var html_ast_1 = __webpack_require__(266);
	var di_1 = __webpack_require__(11);
	var html_lexer_1 = __webpack_require__(267);
	var parse_util_1 = __webpack_require__(268);
	var html_tags_1 = __webpack_require__(269);
	var HtmlTreeError = (function (_super) {
	    __extends(HtmlTreeError, _super);
	    function HtmlTreeError(elementName, location, msg) {
	        _super.call(this, location, msg);
	        this.elementName = elementName;
	    }
	    HtmlTreeError.create = function (elementName, location, msg) {
	        return new HtmlTreeError(elementName, location, msg);
	    };
	    return HtmlTreeError;
	})(parse_util_1.ParseError);
	exports.HtmlTreeError = HtmlTreeError;
	var HtmlParseTreeResult = (function () {
	    function HtmlParseTreeResult(rootNodes, errors) {
	        this.rootNodes = rootNodes;
	        this.errors = errors;
	    }
	    return HtmlParseTreeResult;
	})();
	exports.HtmlParseTreeResult = HtmlParseTreeResult;
	var HtmlParser = (function () {
	    function HtmlParser() {
	    }
	    HtmlParser.prototype.parse = function (sourceContent, sourceUrl) {
	        var tokensAndErrors = html_lexer_1.tokenizeHtml(sourceContent, sourceUrl);
	        var treeAndErrors = new TreeBuilder(tokensAndErrors.tokens).build();
	        return new HtmlParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors
	            .concat(treeAndErrors.errors));
	    };
	    HtmlParser = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], HtmlParser);
	    return HtmlParser;
	})();
	exports.HtmlParser = HtmlParser;
	var TreeBuilder = (function () {
	    function TreeBuilder(tokens) {
	        this.tokens = tokens;
	        this.index = -1;
	        this.rootNodes = [];
	        this.errors = [];
	        this.elementStack = [];
	        this._advance();
	    }
	    TreeBuilder.prototype.build = function () {
	        while (this.peek.type !== html_lexer_1.HtmlTokenType.EOF) {
	            if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_START) {
	                this._consumeStartTag(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_CLOSE) {
	                this._consumeEndTag(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.CDATA_START) {
	                this._closeVoidElement();
	                this._consumeCdata(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.COMMENT_START) {
	                this._closeVoidElement();
	                this._consumeComment(this._advance());
	            }
	            else if (this.peek.type === html_lexer_1.HtmlTokenType.TEXT ||
	                this.peek.type === html_lexer_1.HtmlTokenType.RAW_TEXT ||
	                this.peek.type === html_lexer_1.HtmlTokenType.ESCAPABLE_RAW_TEXT) {
	                this._closeVoidElement();
	                this._consumeText(this._advance());
	            }
	            else {
	                // Skip all other tokens...
	                this._advance();
	            }
	        }
	        return new HtmlParseTreeResult(this.rootNodes, this.errors);
	    };
	    TreeBuilder.prototype._advance = function () {
	        var prev = this.peek;
	        if (this.index < this.tokens.length - 1) {
	            // Note: there is always an EOF token at the end
	            this.index++;
	        }
	        this.peek = this.tokens[this.index];
	        return prev;
	    };
	    TreeBuilder.prototype._advanceIf = function (type) {
	        if (this.peek.type === type) {
	            return this._advance();
	        }
	        return null;
	    };
	    TreeBuilder.prototype._consumeCdata = function (startToken) {
	        this._consumeText(this._advance());
	        this._advanceIf(html_lexer_1.HtmlTokenType.CDATA_END);
	    };
	    TreeBuilder.prototype._consumeComment = function (startToken) {
	        this._advanceIf(html_lexer_1.HtmlTokenType.RAW_TEXT);
	        this._advanceIf(html_lexer_1.HtmlTokenType.COMMENT_END);
	    };
	    TreeBuilder.prototype._consumeText = function (token) {
	        var text = token.parts[0];
	        if (text.length > 0 && text[0] == '\n') {
	            var parent_1 = this._getParentElement();
	            if (lang_1.isPresent(parent_1) && parent_1.children.length == 0 &&
	                html_tags_1.getHtmlTagDefinition(parent_1.name).ignoreFirstLf) {
	                text = text.substring(1);
	            }
	        }
	        if (text.length > 0) {
	            this._addToParent(new html_ast_1.HtmlTextAst(text, token.sourceSpan));
	        }
	    };
	    TreeBuilder.prototype._closeVoidElement = function () {
	        if (this.elementStack.length > 0) {
	            var el = collection_1.ListWrapper.last(this.elementStack);
	            if (html_tags_1.getHtmlTagDefinition(el.name).isVoid) {
	                this.elementStack.pop();
	            }
	        }
	    };
	    TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	        var prefix = startTagToken.parts[0];
	        var name = startTagToken.parts[1];
	        var attrs = [];
	        while (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_NAME) {
	            attrs.push(this._consumeAttr(this._advance()));
	        }
	        var fullName = getElementFullName(prefix, name, this._getParentElement());
	        var selfClosing = false;
	        // Note: There could have been a tokenizer error
	        // so that we don't get a token for the end tag...
	        if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END_VOID) {
	            this._advance();
	            selfClosing = true;
	            if (html_tags_1.getNsPrefix(fullName) == null && !html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
	                this.errors.push(HtmlTreeError.create(fullName, startTagToken.sourceSpan.start, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	            }
	        }
	        else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END) {
	            this._advance();
	            selfClosing = false;
	        }
	        var end = this.peek.sourceSpan.start;
	        var el = new html_ast_1.HtmlElementAst(fullName, attrs, [], new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end));
	        this._pushElement(el);
	        if (selfClosing) {
	            this._popElement(fullName);
	        }
	    };
	    TreeBuilder.prototype._pushElement = function (el) {
	        if (this.elementStack.length > 0) {
	            var parentEl = collection_1.ListWrapper.last(this.elementStack);
	            if (html_tags_1.getHtmlTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                this.elementStack.pop();
	            }
	        }
	        var tagDef = html_tags_1.getHtmlTagDefinition(el.name);
	        var parentEl = this._getParentElement();
	        if (tagDef.requireExtraParent(lang_1.isPresent(parentEl) ? parentEl.name : null)) {
	            var newParent = new html_ast_1.HtmlElementAst(tagDef.parentToAdd, [], [el], el.sourceSpan);
	            this._addToParent(newParent);
	            this.elementStack.push(newParent);
	            this.elementStack.push(el);
	        }
	        else {
	            this._addToParent(el);
	            this.elementStack.push(el);
	        }
	    };
	    TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	        var fullName = getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	        if (html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
	            this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan.start, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	        }
	        else if (!this._popElement(fullName)) {
	            this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan.start, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	        }
	    };
	    TreeBuilder.prototype._popElement = function (fullName) {
	        for (var stackIndex = this.elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	            var el = this.elementStack[stackIndex];
	            if (el.name == fullName) {
	                collection_1.ListWrapper.splice(this.elementStack, stackIndex, this.elementStack.length - stackIndex);
	                return true;
	            }
	            if (!html_tags_1.getHtmlTagDefinition(el.name).closedByParent) {
	                return false;
	            }
	        }
	        return false;
	    };
	    TreeBuilder.prototype._consumeAttr = function (attrName) {
	        var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	        var end = attrName.sourceSpan.end;
	        var value = '';
	        if (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_VALUE) {
	            var valueToken = this._advance();
	            value = valueToken.parts[0];
	            end = valueToken.sourceSpan.end;
	        }
	        return new html_ast_1.HtmlAttrAst(fullName, value, new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, end));
	    };
	    TreeBuilder.prototype._getParentElement = function () {
	        return this.elementStack.length > 0 ? collection_1.ListWrapper.last(this.elementStack) : null;
	    };
	    TreeBuilder.prototype._addToParent = function (node) {
	        var parent = this._getParentElement();
	        if (lang_1.isPresent(parent)) {
	            parent.children.push(node);
	        }
	        else {
	            this.rootNodes.push(node);
	        }
	    };
	    return TreeBuilder;
	})();
	function mergeNsAndName(prefix, localName) {
	    return lang_1.isPresent(prefix) ? "@" + prefix + ":" + localName : localName;
	}
	function getElementFullName(prefix, localName, parentElement) {
	    if (lang_1.isBlank(prefix)) {
	        prefix = html_tags_1.getHtmlTagDefinition(localName).implicitNamespacePrefix;
	        if (lang_1.isBlank(prefix) && lang_1.isPresent(parentElement)) {
	            prefix = html_tags_1.getNsPrefix(parentElement.name);
	        }
	    }
	    return mergeNsAndName(prefix, localName);
	}


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var HtmlTextAst = (function () {
	    function HtmlTextAst(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    HtmlTextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return HtmlTextAst;
	})();
	exports.HtmlTextAst = HtmlTextAst;
	var HtmlAttrAst = (function () {
	    function HtmlAttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    HtmlAttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return HtmlAttrAst;
	})();
	exports.HtmlAttrAst = HtmlAttrAst;
	var HtmlElementAst = (function () {
	    function HtmlElementAst(name, attrs, children, sourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	    }
	    HtmlElementAst.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	    return HtmlElementAst;
	})();
	exports.HtmlElementAst = HtmlElementAst;
	function htmlVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    asts.forEach(function (ast) {
	        var astResult = ast.visit(visitor, context);
	        if (lang_1.isPresent(astResult)) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	exports.htmlVisitAll = htmlVisitAll;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var parse_util_1 = __webpack_require__(268);
	var html_tags_1 = __webpack_require__(269);
	(function (HtmlTokenType) {
	    HtmlTokenType[HtmlTokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
	    HtmlTokenType[HtmlTokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
	    HtmlTokenType[HtmlTokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
	    HtmlTokenType[HtmlTokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
	    HtmlTokenType[HtmlTokenType["TEXT"] = 4] = "TEXT";
	    HtmlTokenType[HtmlTokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
	    HtmlTokenType[HtmlTokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
	    HtmlTokenType[HtmlTokenType["COMMENT_START"] = 7] = "COMMENT_START";
	    HtmlTokenType[HtmlTokenType["COMMENT_END"] = 8] = "COMMENT_END";
	    HtmlTokenType[HtmlTokenType["CDATA_START"] = 9] = "CDATA_START";
	    HtmlTokenType[HtmlTokenType["CDATA_END"] = 10] = "CDATA_END";
	    HtmlTokenType[HtmlTokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
	    HtmlTokenType[HtmlTokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
	    HtmlTokenType[HtmlTokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
	    HtmlTokenType[HtmlTokenType["EOF"] = 14] = "EOF";
	})(exports.HtmlTokenType || (exports.HtmlTokenType = {}));
	var HtmlTokenType = exports.HtmlTokenType;
	var HtmlToken = (function () {
	    function HtmlToken(type, parts, sourceSpan) {
	        this.type = type;
	        this.parts = parts;
	        this.sourceSpan = sourceSpan;
	    }
	    return HtmlToken;
	})();
	exports.HtmlToken = HtmlToken;
	var HtmlTokenError = (function (_super) {
	    __extends(HtmlTokenError, _super);
	    function HtmlTokenError(errorMsg, tokenType, location) {
	        _super.call(this, location, errorMsg);
	        this.tokenType = tokenType;
	    }
	    return HtmlTokenError;
	})(parse_util_1.ParseError);
	exports.HtmlTokenError = HtmlTokenError;
	var HtmlTokenizeResult = (function () {
	    function HtmlTokenizeResult(tokens, errors) {
	        this.tokens = tokens;
	        this.errors = errors;
	    }
	    return HtmlTokenizeResult;
	})();
	exports.HtmlTokenizeResult = HtmlTokenizeResult;
	function tokenizeHtml(sourceContent, sourceUrl) {
	    return new _HtmlTokenizer(new parse_util_1.ParseSourceFile(sourceContent, sourceUrl)).tokenize();
	}
	exports.tokenizeHtml = tokenizeHtml;
	var $EOF = 0;
	var $TAB = 9;
	var $LF = 10;
	var $FF = 12;
	var $CR = 13;
	var $SPACE = 32;
	var $BANG = 33;
	var $DQ = 34;
	var $HASH = 35;
	var $$ = 36;
	var $AMPERSAND = 38;
	var $SQ = 39;
	var $MINUS = 45;
	var $SLASH = 47;
	var $0 = 48;
	var $SEMICOLON = 59;
	var $9 = 57;
	var $COLON = 58;
	var $LT = 60;
	var $EQ = 61;
	var $GT = 62;
	var $QUESTION = 63;
	var $LBRACKET = 91;
	var $RBRACKET = 93;
	var $A = 65;
	var $F = 70;
	var $X = 88;
	var $Z = 90;
	var $a = 97;
	var $f = 102;
	var $z = 122;
	var $x = 120;
	var $NBSP = 160;
	var CR_OR_CRLF_REGEXP = /\r\n?/g;
	function unexpectedCharacterErrorMsg(charCode) {
	    var char = charCode === $EOF ? 'EOF' : lang_1.StringWrapper.fromCharCode(charCode);
	    return "Unexpected character \"" + char + "\"";
	}
	function unknownEntityErrorMsg(entitySrc) {
	    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	}
	var ControlFlowError = (function () {
	    function ControlFlowError(error) {
	        this.error = error;
	    }
	    return ControlFlowError;
	})();
	// See http://www.w3.org/TR/html51/syntax.html#writing
	var _HtmlTokenizer = (function () {
	    function _HtmlTokenizer(file) {
	        this.file = file;
	        // Note: this is always lowercase!
	        this.peek = -1;
	        this.index = -1;
	        this.line = 0;
	        this.column = -1;
	        this.tokens = [];
	        this.errors = [];
	        this.input = file.content;
	        this.length = file.content.length;
	        this._advance();
	    }
	    _HtmlTokenizer.prototype._processCarriageReturns = function (content) {
	        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	        // In order to keep the original position in the source, we can not pre-process it.
	        // Instead CRs are processed right before instantiating the tokens.
	        return lang_1.StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, '\n');
	    };
	    _HtmlTokenizer.prototype.tokenize = function () {
	        while (this.peek !== $EOF) {
	            var start = this._getLocation();
	            try {
	                if (this._attemptCharCode($LT)) {
	                    if (this._attemptCharCode($BANG)) {
	                        if (this._attemptCharCode($LBRACKET)) {
	                            this._consumeCdata(start);
	                        }
	                        else if (this._attemptCharCode($MINUS)) {
	                            this._consumeComment(start);
	                        }
	                        else {
	                            this._consumeDocType(start);
	                        }
	                    }
	                    else if (this._attemptCharCode($SLASH)) {
	                        this._consumeTagClose(start);
	                    }
	                    else {
	                        this._consumeTagOpen(start);
	                    }
	                }
	                else {
	                    this._consumeText();
	                }
	            }
	            catch (e) {
	                if (e instanceof ControlFlowError) {
	                    this.errors.push(e.error);
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        this._beginToken(HtmlTokenType.EOF);
	        this._endToken([]);
	        return new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);
	    };
	    _HtmlTokenizer.prototype._getLocation = function () {
	        return new parse_util_1.ParseLocation(this.file, this.index, this.line, this.column);
	    };
	    _HtmlTokenizer.prototype._beginToken = function (type, start) {
	        if (start === void 0) { start = null; }
	        if (lang_1.isBlank(start)) {
	            start = this._getLocation();
	        }
	        this.currentTokenStart = start;
	        this.currentTokenType = type;
	    };
	    _HtmlTokenizer.prototype._endToken = function (parts, end) {
	        if (end === void 0) { end = null; }
	        if (lang_1.isBlank(end)) {
	            end = this._getLocation();
	        }
	        var token = new HtmlToken(this.currentTokenType, parts, new parse_util_1.ParseSourceSpan(this.currentTokenStart, end));
	        this.tokens.push(token);
	        this.currentTokenStart = null;
	        this.currentTokenType = null;
	        return token;
	    };
	    _HtmlTokenizer.prototype._createError = function (msg, position) {
	        var error = new HtmlTokenError(msg, this.currentTokenType, position);
	        this.currentTokenStart = null;
	        this.currentTokenType = null;
	        return new ControlFlowError(error);
	    };
	    _HtmlTokenizer.prototype._advance = function () {
	        if (this.index >= this.length) {
	            throw this._createError(unexpectedCharacterErrorMsg($EOF), this._getLocation());
	        }
	        if (this.peek === $LF) {
	            this.line++;
	            this.column = 0;
	        }
	        else if (this.peek !== $LF && this.peek !== $CR) {
	            this.column++;
	        }
	        this.index++;
	        this.peek = this.index >= this.length ? $EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _HtmlTokenizer.prototype._attemptCharCode = function (charCode) {
	        if (this.peek === charCode) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    _HtmlTokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	        if (compareCharCodeCaseInsensitive(this.peek, charCode)) {
	            this._advance();
	            return true;
	        }
	        return false;
	    };
	    _HtmlTokenizer.prototype._requireCharCode = function (charCode) {
	        var location = this._getLocation();
	        if (!this._attemptCharCode(charCode)) {
	            throw this._createError(unexpectedCharacterErrorMsg(this.peek), location);
	        }
	    };
	    _HtmlTokenizer.prototype._attemptStr = function (chars) {
	        for (var i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCode(lang_1.StringWrapper.charCodeAt(chars, i))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    _HtmlTokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	        for (var i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCodeCaseInsensitive(lang_1.StringWrapper.charCodeAt(chars, i))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    _HtmlTokenizer.prototype._requireStr = function (chars) {
	        var location = this._getLocation();
	        if (!this._attemptStr(chars)) {
	            throw this._createError(unexpectedCharacterErrorMsg(this.peek), location);
	        }
	    };
	    _HtmlTokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	        while (!predicate(this.peek)) {
	            this._advance();
	        }
	    };
	    _HtmlTokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	        var start = this._getLocation();
	        this._attemptCharCodeUntilFn(predicate);
	        if (this.index - start.offset < len) {
	            throw this._createError(unexpectedCharacterErrorMsg(this.peek), start);
	        }
	    };
	    _HtmlTokenizer.prototype._attemptUntilChar = function (char) {
	        while (this.peek !== char) {
	            this._advance();
	        }
	    };
	    _HtmlTokenizer.prototype._readChar = function (decodeEntities) {
	        if (decodeEntities && this.peek === $AMPERSAND) {
	            return this._decodeEntity();
	        }
	        else {
	            var index = this.index;
	            this._advance();
	            return this.input[index];
	        }
	    };
	    _HtmlTokenizer.prototype._decodeEntity = function () {
	        var start = this._getLocation();
	        this._advance();
	        if (this._attemptCharCode($HASH)) {
	            var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	            var numberStart = this._getLocation().offset;
	            this._attemptCharCodeUntilFn(isDigitEntityEnd);
	            if (this.peek != $SEMICOLON) {
	                throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getLocation());
	            }
	            this._advance();
	            var strNum = this.input.substring(numberStart, this.index - 1);
	            try {
	                var charCode = lang_1.NumberWrapper.parseInt(strNum, isHex ? 16 : 10);
	                return lang_1.StringWrapper.fromCharCode(charCode);
	            }
	            catch (e) {
	                var entity = this.input.substring(start.offset + 1, this.index - 1);
	                throw this._createError(unknownEntityErrorMsg(entity), start);
	            }
	        }
	        else {
	            var startPosition = this._savePosition();
	            this._attemptCharCodeUntilFn(isNamedEntityEnd);
	            if (this.peek != $SEMICOLON) {
	                this._restorePosition(startPosition);
	                return '&';
	            }
	            this._advance();
	            var name_1 = this.input.substring(start.offset + 1, this.index - 1);
	            var char = html_tags_1.NAMED_ENTITIES[name_1];
	            if (lang_1.isBlank(char)) {
	                throw this._createError(unknownEntityErrorMsg(name_1), start);
	            }
	            return char;
	        }
	    };
	    _HtmlTokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	        var tagCloseStart;
	        var textStart = this._getLocation();
	        this._beginToken(decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);
	        var parts = [];
	        while (true) {
	            tagCloseStart = this._getLocation();
	            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                break;
	            }
	            if (this.index > tagCloseStart.offset) {
	                parts.push(this.input.substring(tagCloseStart.offset, this.index));
	            }
	            while (this.peek !== firstCharOfEnd) {
	                parts.push(this._readChar(decodeEntities));
	            }
	        }
	        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	    };
	    _HtmlTokenizer.prototype._consumeComment = function (start) {
	        var _this = this;
	        this._beginToken(HtmlTokenType.COMMENT_START, start);
	        this._requireCharCode($MINUS);
	        this._endToken([]);
	        var textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	        this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    _HtmlTokenizer.prototype._consumeCdata = function (start) {
	        var _this = this;
	        this._beginToken(HtmlTokenType.CDATA_START, start);
	        this._requireStr('CDATA[');
	        this._endToken([]);
	        var textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	        this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end);
	        this._endToken([]);
	    };
	    _HtmlTokenizer.prototype._consumeDocType = function (start) {
	        this._beginToken(HtmlTokenType.DOC_TYPE, start);
	        this._attemptUntilChar($GT);
	        this._advance();
	        this._endToken([this.input.substring(start.offset + 2, this.index - 1)]);
	    };
	    _HtmlTokenizer.prototype._consumePrefixAndName = function () {
	        var nameOrPrefixStart = this.index;
	        var prefix = null;
	        while (this.peek !== $COLON && !isPrefixEnd(this.peek)) {
	            this._advance();
	        }
	        var nameStart;
	        if (this.peek === $COLON) {
	            this._advance();
	            prefix = this.input.substring(nameOrPrefixStart, this.index - 1);
	            nameStart = this.index;
	        }
	        else {
	            nameStart = nameOrPrefixStart;
	        }
	        this._requireCharCodeUntilFn(isNameEnd, this.index === nameStart ? 1 : 0);
	        var name = this.input.substring(nameStart, this.index);
	        return [prefix, name];
	    };
	    _HtmlTokenizer.prototype._consumeTagOpen = function (start) {
	        var savedPos = this._savePosition();
	        var lowercaseTagName;
	        try {
	            if (!isAsciiLetter(this.peek)) {
	                throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getLocation());
	            }
	            var nameStart = this.index;
	            this._consumeTagOpenStart(start);
	            lowercaseTagName = this.input.substring(nameStart, this.index).toLowerCase();
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            while (this.peek !== $SLASH && this.peek !== $GT) {
	                this._consumeAttributeName();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (this._attemptCharCode($EQ)) {
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    this._consumeAttributeValue();
	                }
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	            }
	            this._consumeTagOpenEnd();
	        }
	        catch (e) {
	            if (e instanceof ControlFlowError) {
	                // When the start tag is invalid, assume we want a "<"
	                this._restorePosition(savedPos);
	                // Back to back text tokens are merged at the end
	                this._beginToken(HtmlTokenType.TEXT, start);
	                this._endToken(['<']);
	                return;
	            }
	            throw e;
	        }
	        var contentTokenType = html_tags_1.getHtmlTagDefinition(lowercaseTagName).contentType;
	        if (contentTokenType === html_tags_1.HtmlTagContentType.RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, false);
	        }
	        else if (contentTokenType === html_tags_1.HtmlTagContentType.ESCAPABLE_RAW_TEXT) {
	            this._consumeRawTextWithTagClose(lowercaseTagName, true);
	        }
	    };
	    _HtmlTokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	        var _this = this;
	        var textToken = this._consumeRawText(decodeEntities, $LT, function () {
	            if (!_this._attemptCharCode($SLASH))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptCharCode($GT))
	                return false;
	            return true;
	        });
	        this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end);
	        this._endToken([null, lowercaseTagName]);
	    };
	    _HtmlTokenizer.prototype._consumeTagOpenStart = function (start) {
	        this._beginToken(HtmlTokenType.TAG_OPEN_START, start);
	        var parts = this._consumePrefixAndName();
	        this._endToken(parts);
	    };
	    _HtmlTokenizer.prototype._consumeAttributeName = function () {
	        this._beginToken(HtmlTokenType.ATTR_NAME);
	        var prefixAndName = this._consumePrefixAndName();
	        this._endToken(prefixAndName);
	    };
	    _HtmlTokenizer.prototype._consumeAttributeValue = function () {
	        this._beginToken(HtmlTokenType.ATTR_VALUE);
	        var value;
	        if (this.peek === $SQ || this.peek === $DQ) {
	            var quoteChar = this.peek;
	            this._advance();
	            var parts = [];
	            while (this.peek !== quoteChar) {
	                parts.push(this._readChar(true));
	            }
	            value = parts.join('');
	            this._advance();
	        }
	        else {
	            var valueStart = this.index;
	            this._requireCharCodeUntilFn(isNameEnd, 1);
	            value = this.input.substring(valueStart, this.index);
	        }
	        this._endToken([this._processCarriageReturns(value)]);
	    };
	    _HtmlTokenizer.prototype._consumeTagOpenEnd = function () {
	        var tokenType = this._attemptCharCode($SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID :
	            HtmlTokenType.TAG_OPEN_END;
	        this._beginToken(tokenType);
	        this._requireCharCode($GT);
	        this._endToken([]);
	    };
	    _HtmlTokenizer.prototype._consumeTagClose = function (start) {
	        this._beginToken(HtmlTokenType.TAG_CLOSE, start);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        var prefixAndName;
	        prefixAndName = this._consumePrefixAndName();
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._requireCharCode($GT);
	        this._endToken(prefixAndName);
	    };
	    _HtmlTokenizer.prototype._consumeText = function () {
	        var start = this._getLocation();
	        this._beginToken(HtmlTokenType.TEXT, start);
	        var parts = [this._readChar(true)];
	        while (!isTextEnd(this.peek)) {
	            parts.push(this._readChar(true));
	        }
	        this._endToken([this._processCarriageReturns(parts.join(''))]);
	    };
	    _HtmlTokenizer.prototype._savePosition = function () {
	        return [this.peek, this.index, this.column, this.line, this.tokens.length];
	    };
	    _HtmlTokenizer.prototype._restorePosition = function (position) {
	        this.peek = position[0];
	        this.index = position[1];
	        this.column = position[2];
	        this.line = position[3];
	        var nbTokens = position[4];
	        if (nbTokens < this.tokens.length) {
	            // remove any extra tokens
	            this.tokens = collection_1.ListWrapper.slice(this.tokens, 0, nbTokens);
	        }
	    };
	    return _HtmlTokenizer;
	})();
	function isNotWhitespace(code) {
	    return !isWhitespace(code) || code === $EOF;
	}
	function isWhitespace(code) {
	    return (code >= $TAB && code <= $SPACE) || (code === $NBSP);
	}
	function isNameEnd(code) {
	    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ ||
	        code === $EQ;
	}
	function isPrefixEnd(code) {
	    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
	}
	function isDigitEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	}
	function isNamedEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	}
	function isTextEnd(code) {
	    return code === $LT || code === $EOF;
	}
	function isAsciiLetter(code) {
	    return code >= $a && code <= $z || code >= $A && code <= $Z;
	}
	function isAsciiHexDigit(code) {
	    return code >= $a && code <= $f || code >= $A && code <= $F || code >= $0 && code <= $9;
	}
	function compareCharCodeCaseInsensitive(code1, code2) {
	    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	}
	function toUpperCaseCharCode(code) {
	    return code >= $a && code <= $z ? code - $a + $A : code;
	}
	function mergeTextTokens(srcTokens) {
	    var dstTokens = [];
	    var lastDstToken;
	    for (var i = 0; i < srcTokens.length; i++) {
	        var token = srcTokens[i];
	        if (lang_1.isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT &&
	            token.type == HtmlTokenType.TEXT) {
	            lastDstToken.parts[0] += token.parts[0];
	            lastDstToken.sourceSpan.end = token.sourceSpan.end;
	        }
	        else {
	            lastDstToken = token;
	            dstTokens.push(lastDstToken);
	        }
	    }
	    return dstTokens;
	}


/***/ },
/* 268 */
/***/ function(module, exports) {

	'use strict';var ParseLocation = (function () {
	    function ParseLocation(file, offset, line, col) {
	        this.file = file;
	        this.offset = offset;
	        this.line = line;
	        this.col = col;
	    }
	    ParseLocation.prototype.toString = function () { return this.file.url + "@" + this.line + ":" + this.col; };
	    return ParseLocation;
	})();
	exports.ParseLocation = ParseLocation;
	var ParseSourceFile = (function () {
	    function ParseSourceFile(content, url) {
	        this.content = content;
	        this.url = url;
	    }
	    return ParseSourceFile;
	})();
	exports.ParseSourceFile = ParseSourceFile;
	var ParseError = (function () {
	    function ParseError(location, msg) {
	        this.location = location;
	        this.msg = msg;
	    }
	    ParseError.prototype.toString = function () {
	        var source = this.location.file.content;
	        var ctxStart = this.location.offset;
	        if (ctxStart > source.length - 1) {
	            ctxStart = source.length - 1;
	        }
	        var ctxEnd = ctxStart;
	        var ctxLen = 0;
	        var ctxLines = 0;
	        while (ctxLen < 100 && ctxStart > 0) {
	            ctxStart--;
	            ctxLen++;
	            if (source[ctxStart] == "\n") {
	                if (++ctxLines == 3) {
	                    break;
	                }
	            }
	        }
	        ctxLen = 0;
	        ctxLines = 0;
	        while (ctxLen < 100 && ctxEnd < source.length - 1) {
	            ctxEnd++;
	            ctxLen++;
	            if (source[ctxEnd] == "\n") {
	                if (++ctxLines == 3) {
	                    break;
	                }
	            }
	        }
	        var context = source.substring(ctxStart, this.location.offset) + '[ERROR ->]' +
	            source.substring(this.location.offset, ctxEnd + 1);
	        return this.msg + " (\"" + context + "\"): " + this.location;
	    };
	    return ParseError;
	})();
	exports.ParseError = ParseError;
	var ParseSourceSpan = (function () {
	    function ParseSourceSpan(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    ParseSourceSpan.prototype.toString = function () {
	        return this.start.file.content.substring(this.start.offset, this.end.offset);
	    };
	    return ParseSourceSpan;
	})();
	exports.ParseSourceSpan = ParseSourceSpan;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	// see http://www.w3.org/TR/html51/syntax.html#named-character-references
	// see https://html.spec.whatwg.org/multipage/entities.json
	// This list is not exhaustive to keep the compiler footprint low.
	// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	exports.NAMED_ENTITIES = lang_1.CONST_EXPR({
	    'Aacute': '\u00C1',
	    'aacute': '\u00E1',
	    'Acirc': '\u00C2',
	    'acirc': '\u00E2',
	    'acute': '\u00B4',
	    'AElig': '\u00C6',
	    'aelig': '\u00E6',
	    'Agrave': '\u00C0',
	    'agrave': '\u00E0',
	    'alefsym': '\u2135',
	    'Alpha': '\u0391',
	    'alpha': '\u03B1',
	    'amp': '&',
	    'and': '\u2227',
	    'ang': '\u2220',
	    'apos': '\u0027',
	    'Aring': '\u00C5',
	    'aring': '\u00E5',
	    'asymp': '\u2248',
	    'Atilde': '\u00C3',
	    'atilde': '\u00E3',
	    'Auml': '\u00C4',
	    'auml': '\u00E4',
	    'bdquo': '\u201E',
	    'Beta': '\u0392',
	    'beta': '\u03B2',
	    'brvbar': '\u00A6',
	    'bull': '\u2022',
	    'cap': '\u2229',
	    'Ccedil': '\u00C7',
	    'ccedil': '\u00E7',
	    'cedil': '\u00B8',
	    'cent': '\u00A2',
	    'Chi': '\u03A7',
	    'chi': '\u03C7',
	    'circ': '\u02C6',
	    'clubs': '\u2663',
	    'cong': '\u2245',
	    'copy': '\u00A9',
	    'crarr': '\u21B5',
	    'cup': '\u222A',
	    'curren': '\u00A4',
	    'dagger': '\u2020',
	    'Dagger': '\u2021',
	    'darr': '\u2193',
	    'dArr': '\u21D3',
	    'deg': '\u00B0',
	    'Delta': '\u0394',
	    'delta': '\u03B4',
	    'diams': '\u2666',
	    'divide': '\u00F7',
	    'Eacute': '\u00C9',
	    'eacute': '\u00E9',
	    'Ecirc': '\u00CA',
	    'ecirc': '\u00EA',
	    'Egrave': '\u00C8',
	    'egrave': '\u00E8',
	    'empty': '\u2205',
	    'emsp': '\u2003',
	    'ensp': '\u2002',
	    'Epsilon': '\u0395',
	    'epsilon': '\u03B5',
	    'equiv': '\u2261',
	    'Eta': '\u0397',
	    'eta': '\u03B7',
	    'ETH': '\u00D0',
	    'eth': '\u00F0',
	    'Euml': '\u00CB',
	    'euml': '\u00EB',
	    'euro': '\u20AC',
	    'exist': '\u2203',
	    'fnof': '\u0192',
	    'forall': '\u2200',
	    'frac12': '\u00BD',
	    'frac14': '\u00BC',
	    'frac34': '\u00BE',
	    'frasl': '\u2044',
	    'Gamma': '\u0393',
	    'gamma': '\u03B3',
	    'ge': '\u2265',
	    'gt': '>',
	    'harr': '\u2194',
	    'hArr': '\u21D4',
	    'hearts': '\u2665',
	    'hellip': '\u2026',
	    'Iacute': '\u00CD',
	    'iacute': '\u00ED',
	    'Icirc': '\u00CE',
	    'icirc': '\u00EE',
	    'iexcl': '\u00A1',
	    'Igrave': '\u00CC',
	    'igrave': '\u00EC',
	    'image': '\u2111',
	    'infin': '\u221E',
	    'int': '\u222B',
	    'Iota': '\u0399',
	    'iota': '\u03B9',
	    'iquest': '\u00BF',
	    'isin': '\u2208',
	    'Iuml': '\u00CF',
	    'iuml': '\u00EF',
	    'Kappa': '\u039A',
	    'kappa': '\u03BA',
	    'Lambda': '\u039B',
	    'lambda': '\u03BB',
	    'lang': '\u27E8',
	    'laquo': '\u00AB',
	    'larr': '\u2190',
	    'lArr': '\u21D0',
	    'lceil': '\u2308',
	    'ldquo': '\u201C',
	    'le': '\u2264',
	    'lfloor': '\u230A',
	    'lowast': '\u2217',
	    'loz': '\u25CA',
	    'lrm': '\u200E',
	    'lsaquo': '\u2039',
	    'lsquo': '\u2018',
	    'lt': '<',
	    'macr': '\u00AF',
	    'mdash': '\u2014',
	    'micro': '\u00B5',
	    'middot': '\u00B7',
	    'minus': '\u2212',
	    'Mu': '\u039C',
	    'mu': '\u03BC',
	    'nabla': '\u2207',
	    'nbsp': '\u00A0',
	    'ndash': '\u2013',
	    'ne': '\u2260',
	    'ni': '\u220B',
	    'not': '\u00AC',
	    'notin': '\u2209',
	    'nsub': '\u2284',
	    'Ntilde': '\u00D1',
	    'ntilde': '\u00F1',
	    'Nu': '\u039D',
	    'nu': '\u03BD',
	    'Oacute': '\u00D3',
	    'oacute': '\u00F3',
	    'Ocirc': '\u00D4',
	    'ocirc': '\u00F4',
	    'OElig': '\u0152',
	    'oelig': '\u0153',
	    'Ograve': '\u00D2',
	    'ograve': '\u00F2',
	    'oline': '\u203E',
	    'Omega': '\u03A9',
	    'omega': '\u03C9',
	    'Omicron': '\u039F',
	    'omicron': '\u03BF',
	    'oplus': '\u2295',
	    'or': '\u2228',
	    'ordf': '\u00AA',
	    'ordm': '\u00BA',
	    'Oslash': '\u00D8',
	    'oslash': '\u00F8',
	    'Otilde': '\u00D5',
	    'otilde': '\u00F5',
	    'otimes': '\u2297',
	    'Ouml': '\u00D6',
	    'ouml': '\u00F6',
	    'para': '\u00B6',
	    'permil': '\u2030',
	    'perp': '\u22A5',
	    'Phi': '\u03A6',
	    'phi': '\u03C6',
	    'Pi': '\u03A0',
	    'pi': '\u03C0',
	    'piv': '\u03D6',
	    'plusmn': '\u00B1',
	    'pound': '\u00A3',
	    'prime': '\u2032',
	    'Prime': '\u2033',
	    'prod': '\u220F',
	    'prop': '\u221D',
	    'Psi': '\u03A8',
	    'psi': '\u03C8',
	    'quot': '\u0022',
	    'radic': '\u221A',
	    'rang': '\u27E9',
	    'raquo': '\u00BB',
	    'rarr': '\u2192',
	    'rArr': '\u21D2',
	    'rceil': '\u2309',
	    'rdquo': '\u201D',
	    'real': '\u211C',
	    'reg': '\u00AE',
	    'rfloor': '\u230B',
	    'Rho': '\u03A1',
	    'rho': '\u03C1',
	    'rlm': '\u200F',
	    'rsaquo': '\u203A',
	    'rsquo': '\u2019',
	    'sbquo': '\u201A',
	    'Scaron': '\u0160',
	    'scaron': '\u0161',
	    'sdot': '\u22C5',
	    'sect': '\u00A7',
	    'shy': '\u00AD',
	    'Sigma': '\u03A3',
	    'sigma': '\u03C3',
	    'sigmaf': '\u03C2',
	    'sim': '\u223C',
	    'spades': '\u2660',
	    'sub': '\u2282',
	    'sube': '\u2286',
	    'sum': '\u2211',
	    'sup': '\u2283',
	    'sup1': '\u00B9',
	    'sup2': '\u00B2',
	    'sup3': '\u00B3',
	    'supe': '\u2287',
	    'szlig': '\u00DF',
	    'Tau': '\u03A4',
	    'tau': '\u03C4',
	    'there4': '\u2234',
	    'Theta': '\u0398',
	    'theta': '\u03B8',
	    'thetasym': '\u03D1',
	    'thinsp': '\u2009',
	    'THORN': '\u00DE',
	    'thorn': '\u00FE',
	    'tilde': '\u02DC',
	    'times': '\u00D7',
	    'trade': '\u2122',
	    'Uacute': '\u00DA',
	    'uacute': '\u00FA',
	    'uarr': '\u2191',
	    'uArr': '\u21D1',
	    'Ucirc': '\u00DB',
	    'ucirc': '\u00FB',
	    'Ugrave': '\u00D9',
	    'ugrave': '\u00F9',
	    'uml': '\u00A8',
	    'upsih': '\u03D2',
	    'Upsilon': '\u03A5',
	    'upsilon': '\u03C5',
	    'Uuml': '\u00DC',
	    'uuml': '\u00FC',
	    'weierp': '\u2118',
	    'Xi': '\u039E',
	    'xi': '\u03BE',
	    'Yacute': '\u00DD',
	    'yacute': '\u00FD',
	    'yen': '\u00A5',
	    'yuml': '\u00FF',
	    'Yuml': '\u0178',
	    'Zeta': '\u0396',
	    'zeta': '\u03B6',
	    'zwj': '\u200D',
	    'zwnj': '\u200C',
	});
	(function (HtmlTagContentType) {
	    HtmlTagContentType[HtmlTagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
	    HtmlTagContentType[HtmlTagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
	    HtmlTagContentType[HtmlTagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
	})(exports.HtmlTagContentType || (exports.HtmlTagContentType = {}));
	var HtmlTagContentType = exports.HtmlTagContentType;
	var HtmlTagDefinition = (function () {
	    function HtmlTagDefinition(_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, contentType = _b.contentType, closedByParent = _b.closedByParent, isVoid = _b.isVoid, ignoreFirstLf = _b.ignoreFirstLf;
	        this.closedByChildren = {};
	        this.closedByParent = false;
	        if (lang_1.isPresent(closedByChildren) && closedByChildren.length > 0) {
	            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	        }
	        this.isVoid = lang_1.normalizeBool(isVoid);
	        this.closedByParent = lang_1.normalizeBool(closedByParent) || this.isVoid;
	        if (lang_1.isPresent(requiredParents) && requiredParents.length > 0) {
	            this.requiredParents = {};
	            this.parentToAdd = requiredParents[0];
	            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	        }
	        this.implicitNamespacePrefix = implicitNamespacePrefix;
	        this.contentType = lang_1.isPresent(contentType) ? contentType : HtmlTagContentType.PARSABLE_DATA;
	        this.ignoreFirstLf = lang_1.normalizeBool(ignoreFirstLf);
	    }
	    HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	        if (lang_1.isBlank(this.requiredParents)) {
	            return false;
	        }
	        if (lang_1.isBlank(currentParent)) {
	            return true;
	        }
	        var lcParent = currentParent.toLowerCase();
	        return this.requiredParents[lcParent] != true && lcParent != 'template';
	    };
	    HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	        return this.isVoid || lang_1.normalizeBool(this.closedByChildren[name.toLowerCase()]);
	    };
	    return HtmlTagDefinition;
	})();
	exports.HtmlTagDefinition = HtmlTagDefinition;
	// see http://www.w3.org/TR/html51/syntax.html#optional-tags
	// This implementation does not fully conform to the HTML5 spec.
	var TAG_DEFINITIONS = {
	    'area': new HtmlTagDefinition({ isVoid: true }),
	    'embed': new HtmlTagDefinition({ isVoid: true }),
	    'link': new HtmlTagDefinition({ isVoid: true }),
	    'img': new HtmlTagDefinition({ isVoid: true }),
	    'input': new HtmlTagDefinition({ isVoid: true }),
	    'param': new HtmlTagDefinition({ isVoid: true }),
	    'hr': new HtmlTagDefinition({ isVoid: true }),
	    'br': new HtmlTagDefinition({ isVoid: true }),
	    'source': new HtmlTagDefinition({ isVoid: true }),
	    'track': new HtmlTagDefinition({ isVoid: true }),
	    'wbr': new HtmlTagDefinition({ isVoid: true }),
	    'p': new HtmlTagDefinition({
	        closedByChildren: [
	            'address',
	            'article',
	            'aside',
	            'blockquote',
	            'div',
	            'dl',
	            'fieldset',
	            'footer',
	            'form',
	            'h1',
	            'h2',
	            'h3',
	            'h4',
	            'h5',
	            'h6',
	            'header',
	            'hgroup',
	            'hr',
	            'main',
	            'nav',
	            'ol',
	            'p',
	            'pre',
	            'section',
	            'table',
	            'ul'
	        ],
	        closedByParent: true
	    }),
	    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	    'tr': new HtmlTagDefinition({
	        closedByChildren: ['tr'],
	        requiredParents: ['tbody', 'tfoot', 'thead'],
	        closedByParent: true
	    }),
	    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	    'style': new HtmlTagDefinition({ contentType: HtmlTagContentType.RAW_TEXT }),
	    'script': new HtmlTagDefinition({ contentType: HtmlTagContentType.RAW_TEXT }),
	    'title': new HtmlTagDefinition({ contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT }),
	    'textarea': new HtmlTagDefinition({ contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	};
	var DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	function getHtmlTagDefinition(tagName) {
	    var result = TAG_DEFINITIONS[tagName.toLowerCase()];
	    return lang_1.isPresent(result) ? result : DEFAULT_TAG_DEFINITION;
	}
	exports.getHtmlTagDefinition = getHtmlTagDefinition;
	var NS_PREFIX_RE = /^@([^:]+):(.+)/g;
	function splitNsName(elementName) {
	    if (elementName[0] != '@') {
	        return [null, elementName];
	    }
	    var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, elementName);
	    return [match[1], match[2]];
	}
	exports.splitNsName = splitNsName;
	function getNsPrefix(elementName) {
	    return splitNsName(elementName)[0];
	}
	exports.getNsPrefix = getNsPrefix;


/***/ },
/* 270 */
/***/ function(module, exports) {

	'use strict';var ElementSchemaRegistry = (function () {
	    function ElementSchemaRegistry() {
	    }
	    ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) { return true; };
	    ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return propName; };
	    return ElementSchemaRegistry;
	})();
	exports.ElementSchemaRegistry = ElementSchemaRegistry;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var html_tags_1 = __webpack_require__(269);
	var NG_CONTENT_SELECT_ATTR = 'select';
	var NG_CONTENT_ELEMENT = 'ng-content';
	var LINK_ELEMENT = 'link';
	var LINK_STYLE_REL_ATTR = 'rel';
	var LINK_STYLE_HREF_ATTR = 'href';
	var LINK_STYLE_REL_VALUE = 'stylesheet';
	var STYLE_ELEMENT = 'style';
	var SCRIPT_ELEMENT = 'script';
	var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	function preparseElement(ast) {
	    var selectAttr = null;
	    var hrefAttr = null;
	    var relAttr = null;
	    var nonBindable = false;
	    ast.attrs.forEach(function (attr) {
	        var lcAttrName = attr.name.toLowerCase();
	        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	            selectAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	            hrefAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	            relAttr = attr.value;
	        }
	        else if (attr.name == NG_NON_BINDABLE_ATTR) {
	            nonBindable = true;
	        }
	    });
	    selectAttr = normalizeNgContentSelect(selectAttr);
	    var nodeName = ast.name.toLowerCase();
	    var type = PreparsedElementType.OTHER;
	    if (html_tags_1.splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	        type = PreparsedElementType.NG_CONTENT;
	    }
	    else if (nodeName == STYLE_ELEMENT) {
	        type = PreparsedElementType.STYLE;
	    }
	    else if (nodeName == SCRIPT_ELEMENT) {
	        type = PreparsedElementType.SCRIPT;
	    }
	    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	        type = PreparsedElementType.STYLESHEET;
	    }
	    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable);
	}
	exports.preparseElement = preparseElement;
	(function (PreparsedElementType) {
	    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
	    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
	    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
	    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
	    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
	})(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
	var PreparsedElementType = exports.PreparsedElementType;
	var PreparsedElement = (function () {
	    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable) {
	        this.type = type;
	        this.selectAttr = selectAttr;
	        this.hrefAttr = hrefAttr;
	        this.nonBindable = nonBindable;
	    }
	    return PreparsedElement;
	})();
	exports.PreparsedElement = PreparsedElement;
	function normalizeNgContentSelect(selectAttr) {
	    if (lang_1.isBlank(selectAttr) || selectAttr.length === 0) {
	        return '*';
	    }
	    return selectAttr;
	}


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var directive_metadata_1 = __webpack_require__(250);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var async_1 = __webpack_require__(53);
	var xhr_1 = __webpack_require__(234);
	var url_resolver_1 = __webpack_require__(246);
	var style_url_resolver_1 = __webpack_require__(261);
	var di_1 = __webpack_require__(11);
	var view_1 = __webpack_require__(81);
	var html_ast_1 = __webpack_require__(266);
	var html_parser_1 = __webpack_require__(265);
	var template_preparser_1 = __webpack_require__(271);
	var TemplateNormalizer = (function () {
	    function TemplateNormalizer(_xhr, _urlResolver, _htmlParser) {
	        this._xhr = _xhr;
	        this._urlResolver = _urlResolver;
	        this._htmlParser = _htmlParser;
	    }
	    TemplateNormalizer.prototype.normalizeTemplate = function (directiveType, template) {
	        var _this = this;
	        if (lang_1.isPresent(template.template)) {
	            return async_1.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
	        }
	        else if (lang_1.isPresent(template.templateUrl)) {
	            var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
	            return this._xhr.get(sourceAbsUrl)
	                .then(function (templateContent) { return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl); });
	        }
	        else {
	            throw new exceptions_1.BaseException("No template specified for component " + directiveType.name);
	        }
	    };
	    TemplateNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
	        var _this = this;
	        var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name);
	        if (rootNodesAndErrors.errors.length > 0) {
	            var errorString = rootNodesAndErrors.errors.join('\n');
	            throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
	        }
	        var visitor = new TemplatePreparseVisitor();
	        html_ast_1.htmlVisitAll(visitor, rootNodesAndErrors.rootNodes);
	        var allStyles = templateMeta.styles.concat(visitor.styles);
	        var allStyleAbsUrls = visitor.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(templateAbsUrl, url); })
	            .concat(templateMeta.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(directiveType.moduleUrl, url); }));
	        var allResolvedStyles = allStyles.map(function (style) {
	            var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
	            styleWithImports.styleUrls.forEach(function (styleUrl) { return allStyleAbsUrls.push(styleUrl); });
	            return styleWithImports.style;
	        });
	        var encapsulation = templateMeta.encapsulation;
	        if (encapsulation === view_1.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 &&
	            allStyleAbsUrls.length === 0) {
	            encapsulation = view_1.ViewEncapsulation.None;
	        }
	        return new directive_metadata_1.CompileTemplateMetadata({
	            encapsulation: encapsulation,
	            template: template,
	            templateUrl: templateAbsUrl,
	            styles: allResolvedStyles,
	            styleUrls: allStyleAbsUrls,
	            ngContentSelectors: visitor.ngContentSelectors
	        });
	    };
	    TemplateNormalizer = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver, html_parser_1.HtmlParser])
	    ], TemplateNormalizer);
	    return TemplateNormalizer;
	})();
	exports.TemplateNormalizer = TemplateNormalizer;
	var TemplatePreparseVisitor = (function () {
	    function TemplatePreparseVisitor() {
	        this.ngContentSelectors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngNonBindableStackCount = 0;
	    }
	    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	        var preparsedElement = template_preparser_1.preparseElement(ast);
	        switch (preparsedElement.type) {
	            case template_preparser_1.PreparsedElementType.NG_CONTENT:
	                if (this.ngNonBindableStackCount === 0) {
	                    this.ngContentSelectors.push(preparsedElement.selectAttr);
	                }
	                break;
	            case template_preparser_1.PreparsedElementType.STYLE:
	                var textContent = '';
	                ast.children.forEach(function (child) {
	                    if (child instanceof html_ast_1.HtmlTextAst) {
	                        textContent += child.value;
	                    }
	                });
	                this.styles.push(textContent);
	                break;
	            case template_preparser_1.PreparsedElementType.STYLESHEET:
	                this.styleUrls.push(preparsedElement.hrefAttr);
	                break;
	            default:
	                // DDC reports this as error. See:
	                // https://github.com/dart-lang/dev_compiler/issues/428
	                break;
	        }
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount++;
	        }
	        html_ast_1.htmlVisitAll(this, ast.children);
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount--;
	        }
	        return null;
	    };
	    TemplatePreparseVisitor.prototype.visitAttr = function (ast, context) { return null; };
	    TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	    return TemplatePreparseVisitor;
	})();


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var exceptions_1 = __webpack_require__(19);
	var cpl = __webpack_require__(250);
	var md = __webpack_require__(28);
	var directive_resolver_1 = __webpack_require__(109);
	var pipe_resolver_1 = __webpack_require__(116);
	var view_resolver_1 = __webpack_require__(110);
	var directive_lifecycle_reflector_1 = __webpack_require__(274);
	var interfaces_1 = __webpack_require__(253);
	var reflection_1 = __webpack_require__(21);
	var di_2 = __webpack_require__(11);
	var platform_directives_and_pipes_1 = __webpack_require__(112);
	var util_1 = __webpack_require__(252);
	var url_resolver_1 = __webpack_require__(246);
	var RuntimeMetadataResolver = (function () {
	    function RuntimeMetadataResolver(_directiveResolver, _pipeResolver, _viewResolver, _platformDirectives, _platformPipes) {
	        this._directiveResolver = _directiveResolver;
	        this._pipeResolver = _pipeResolver;
	        this._viewResolver = _viewResolver;
	        this._platformDirectives = _platformDirectives;
	        this._platformPipes = _platformPipes;
	        this._directiveCache = new Map();
	        this._pipeCache = new Map();
	    }
	    RuntimeMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	        var meta = this._directiveCache.get(directiveType);
	        if (lang_1.isBlank(meta)) {
	            var dirMeta = this._directiveResolver.resolve(directiveType);
	            var moduleUrl = null;
	            var templateMeta = null;
	            var changeDetectionStrategy = null;
	            if (dirMeta instanceof md.ComponentMetadata) {
	                var cmpMeta = dirMeta;
	                moduleUrl = calcModuleUrl(directiveType, cmpMeta);
	                var viewMeta = this._viewResolver.resolve(directiveType);
	                templateMeta = new cpl.CompileTemplateMetadata({
	                    encapsulation: viewMeta.encapsulation,
	                    template: viewMeta.template,
	                    templateUrl: viewMeta.templateUrl,
	                    styles: viewMeta.styles,
	                    styleUrls: viewMeta.styleUrls
	                });
	                changeDetectionStrategy = cmpMeta.changeDetection;
	            }
	            meta = cpl.CompileDirectiveMetadata.create({
	                selector: dirMeta.selector,
	                exportAs: dirMeta.exportAs,
	                isComponent: lang_1.isPresent(templateMeta),
	                dynamicLoadable: true,
	                type: new cpl.CompileTypeMetadata({ name: lang_1.stringify(directiveType), moduleUrl: moduleUrl, runtime: directiveType }),
	                template: templateMeta,
	                changeDetection: changeDetectionStrategy,
	                inputs: dirMeta.inputs,
	                outputs: dirMeta.outputs,
	                host: dirMeta.host,
	                lifecycleHooks: interfaces_1.LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType); })
	            });
	            this._directiveCache.set(directiveType, meta);
	        }
	        return meta;
	    };
	    RuntimeMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	        var meta = this._pipeCache.get(pipeType);
	        if (lang_1.isBlank(meta)) {
	            var pipeMeta = this._pipeResolver.resolve(pipeType);
	            var moduleUrl = reflection_1.reflector.importUri(pipeType);
	            meta = new cpl.CompilePipeMetadata({
	                type: new cpl.CompileTypeMetadata({ name: lang_1.stringify(pipeType), moduleUrl: moduleUrl, runtime: pipeType }),
	                name: pipeMeta.name,
	                pure: pipeMeta.pure
	            });
	            this._pipeCache.set(pipeType, meta);
	        }
	        return meta;
	    };
	    RuntimeMetadataResolver.prototype.getViewDirectivesMetadata = function (component) {
	        var _this = this;
	        var view = this._viewResolver.resolve(component);
	        var directives = flattenDirectives(view, this._platformDirectives);
	        for (var i = 0; i < directives.length; i++) {
	            if (!isValidType(directives[i])) {
	                throw new exceptions_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        return directives.map(function (type) { return _this.getDirectiveMetadata(type); });
	    };
	    RuntimeMetadataResolver.prototype.getViewPipesMetadata = function (component) {
	        var _this = this;
	        var view = this._viewResolver.resolve(component);
	        var pipes = flattenPipes(view, this._platformPipes);
	        for (var i = 0; i < pipes.length; i++) {
	            if (!isValidType(pipes[i])) {
	                throw new exceptions_1.BaseException("Unexpected piped value '" + lang_1.stringify(pipes[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        return pipes.map(function (type) { return _this.getPipeMetadata(type); });
	    };
	    RuntimeMetadataResolver = __decorate([
	        di_2.Injectable(),
	        __param(3, di_2.Optional()),
	        __param(3, di_2.Inject(platform_directives_and_pipes_1.PLATFORM_DIRECTIVES)),
	        __param(4, di_2.Optional()),
	        __param(4, di_2.Inject(platform_directives_and_pipes_1.PLATFORM_PIPES)), 
	        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver, view_resolver_1.ViewResolver, Array, Array])
	    ], RuntimeMetadataResolver);
	    return RuntimeMetadataResolver;
	})();
	exports.RuntimeMetadataResolver = RuntimeMetadataResolver;
	function flattenDirectives(view, platformDirectives) {
	    var directives = [];
	    if (lang_1.isPresent(platformDirectives)) {
	        flattenArray(platformDirectives, directives);
	    }
	    if (lang_1.isPresent(view.directives)) {
	        flattenArray(view.directives, directives);
	    }
	    return directives;
	}
	function flattenPipes(view, platformPipes) {
	    var pipes = [];
	    if (lang_1.isPresent(platformPipes)) {
	        flattenArray(platformPipes, pipes);
	    }
	    if (lang_1.isPresent(view.pipes)) {
	        flattenArray(view.pipes, pipes);
	    }
	    return pipes;
	}
	function flattenArray(tree, out) {
	    for (var i = 0; i < tree.length; i++) {
	        var item = di_1.resolveForwardRef(tree[i]);
	        if (lang_1.isArray(item)) {
	            flattenArray(item, out);
	        }
	        else {
	            out.push(item);
	        }
	    }
	}
	function isValidType(value) {
	    return lang_1.isPresent(value) && (value instanceof lang_1.Type);
	}
	function calcModuleUrl(type, cmpMetadata) {
	    var moduleId = cmpMetadata.moduleId;
	    if (lang_1.isPresent(moduleId)) {
	        var scheme = url_resolver_1.getUrlScheme(moduleId);
	        return lang_1.isPresent(scheme) && scheme.length > 0 ? moduleId :
	            "package:" + moduleId + util_1.MODULE_SUFFIX;
	    }
	    else {
	        return reflection_1.reflector.importUri(type);
	    }
	}


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(10);
	var interfaces_1 = __webpack_require__(253);
	function hasLifecycleHook(lcInterface, token) {
	    if (!(token instanceof lang_1.Type))
	        return false;
	    var proto = token.prototype;
	    switch (lcInterface) {
	        case interfaces_1.LifecycleHooks.AfterContentInit:
	            return !!proto.ngAfterContentInit;
	        case interfaces_1.LifecycleHooks.AfterContentChecked:
	            return !!proto.ngAfterContentChecked;
	        case interfaces_1.LifecycleHooks.AfterViewInit:
	            return !!proto.ngAfterViewInit;
	        case interfaces_1.LifecycleHooks.AfterViewChecked:
	            return !!proto.ngAfterViewChecked;
	        case interfaces_1.LifecycleHooks.OnChanges:
	            return !!proto.ngOnChanges;
	        case interfaces_1.LifecycleHooks.DoCheck:
	            return !!proto.ngDoCheck;
	        case interfaces_1.LifecycleHooks.OnDestroy:
	            return !!proto.ngOnDestroy;
	        case interfaces_1.LifecycleHooks.OnInit:
	            return !!proto.ngOnInit;
	        default:
	            return false;
	    }
	}
	exports.hasLifecycleHook = hasLifecycleHook;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(11);
	var lang_1 = __webpack_require__(10);
	var collection_1 = __webpack_require__(17);
	var dom_adapter_1 = __webpack_require__(144);
	var html_tags_1 = __webpack_require__(269);
	var element_schema_registry_1 = __webpack_require__(270);
	var NAMESPACE_URIS = lang_1.CONST_EXPR({ 'xlink': 'http://www.w3.org/1999/xlink', 'svg': 'http://www.w3.org/2000/svg' });
	var DomElementSchemaRegistry = (function (_super) {
	    __extends(DomElementSchemaRegistry, _super);
	    function DomElementSchemaRegistry() {
	        _super.apply(this, arguments);
	        this._protoElements = new Map();
	    }
	    DomElementSchemaRegistry.prototype._getProtoElement = function (tagName) {
	        var element = this._protoElements.get(tagName);
	        if (lang_1.isBlank(element)) {
	            var nsAndName = html_tags_1.splitNsName(tagName);
	            element = lang_1.isPresent(nsAndName[0]) ?
	                dom_adapter_1.DOM.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :
	                dom_adapter_1.DOM.createElement(nsAndName[1]);
	            this._protoElements.set(tagName, element);
	        }
	        return element;
	    };
	    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) {
	        if (tagName.indexOf('-') !== -1) {
	            // can't tell now as we don't know which properties a custom element will get
	            // once it is instantiated
	            return true;
	        }
	        else {
	            var elm = this._getProtoElement(tagName);
	            return dom_adapter_1.DOM.hasProperty(elm, propName);
	        }
	    };
	    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
	        var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
	        return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
	    };
	    DomElementSchemaRegistry = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DomElementSchemaRegistry);
	    return DomElementSchemaRegistry;
	})(element_schema_registry_1.ElementSchemaRegistry);
	exports.DomElementSchemaRegistry = DomElementSchemaRegistry;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var config_1 = __webpack_require__(161);
	var form_1 = __webpack_require__(167);
	var dom_1 = __webpack_require__(164);
	/**
	 * @name Keyboard
	 * @description
	 * The `Keyboard` class allows you to work with the keyboard events provided by the Ionic keyboard plugin.
	 *
	 * @usage
	 * ```ts
	 * export class MyClass{
	 *  constructor(keyboard: Keyboard){
	 *    this.keyboard = keyboard;
	 *  }
	 * }
	 *
	 * ```
	 */
	var Keyboard = (function () {
	    function Keyboard(config, _form, _zone) {
	        var _this = this;
	        this._form = _form;
	        this._zone = _zone;
	        _zone.runOutsideAngular(function () {
	            _this.focusOutline(config.get('focusOutline'), document);
	        });
	    }
	    /**
	     * Chech to see if the keyboard is open or not.
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(keyboard: Keyboard){
	     *    this.keyboard = keyboard;
	     *  }
	     *  keyboardCheck(){
	     *    setTimeout(()  => console.log('is the keyboard open ', this.keyboard.isOpen()));
	     *  }
	     * }
	     *
	     * ```
	     *
	     * @return {boolean} returns a true or flase value if the keyboard is open or not
	     */
	    Keyboard.prototype.isOpen = function () {
	        return dom_1.hasFocusedTextInput();
	    };
	    /**
	     * When the keyboard is closed, call any methods you want
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(keyboard: Keyboard){
	     *    this.keyboard = keyboard;
	     *    this.keyboard.onClose(this.closeCallback);
	     *  }
	     *  closeCallback(){
	     *     // call what ever functionality you want on keyboard close
	     *     console.log('Closing time");
	     *  }
	     * }
	     *
	     * ```
	     * @param {function} callback method you want to call when the keyboard has been closed
	     * @return {function} returns a callback that gets fired when the keyboard is closed
	     */
	    Keyboard.prototype.onClose = function (callback, pollingInternval) {
	        if (pollingInternval === void 0) { pollingInternval = KEYBOARD_CLOSE_POLLING; }
	        void 0;
	        var self = this;
	        var checks = 0;
	        var promise = null;
	        if (!callback) {
	            // a callback wasn't provided, so let's return a promise instead
	            promise = new Promise(function (resolve) { callback = resolve; });
	        }
	        self._zone.runOutsideAngular(function () {
	            function checkKeyboard() {
	                void 0;
	                if (!self.isOpen() || checks > 100) {
	                    dom_1.rafFrames(30, function () {
	                        self._zone.run(function () {
	                            void 0;
	                            callback();
	                        });
	                    });
	                }
	                else {
	                    setTimeout(checkKeyboard, pollingInternval);
	                }
	                checks++;
	            }
	            setTimeout(checkKeyboard, pollingInternval);
	        });
	        return promise;
	    };
	    /**
	     * Progamatically close they keyboard
	     *
	     */
	    Keyboard.prototype.close = function () {
	        var _this = this;
	        void 0;
	        dom_1.raf(function () {
	            if (dom_1.hasFocusedTextInput()) {
	                // only focus out when a text input has focus
	                _this._form.focusOut();
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Keyboard.prototype.focusOutline = function (setting, document) {
	        /* Focus Outline
	         * --------------------------------------------------
	         * By default, when a keydown event happens from a tab key, then
	         * the 'focus-outline' css class is added to the body element
	         * so focusable elements have an outline. On a mousedown or
	         * touchstart event, then the 'focus-outline' css class is removed.
	         *
	         * Config default overrides:
	         * focusOutline: true     - Always add the focus-outline
	         * focusOutline: false    - Do not add the focus-outline
	         */
	        var self = this;
	        var isKeyInputEnabled = false;
	        function cssClass() {
	            dom_1.raf(function () {
	                document.body.classList[isKeyInputEnabled ? 'add' : 'remove']('focus-outline');
	            });
	        }
	        if (setting === true) {
	            isKeyInputEnabled = true;
	            return cssClass();
	        }
	        else if (setting === false) {
	            return;
	        }
	        // default is to add the focus-outline when the tab key is used
	        function keyDown(ev) {
	            if (!isKeyInputEnabled && ev.keyCode == 9) {
	                isKeyInputEnabled = true;
	                enableKeyInput();
	            }
	        }
	        function pointerDown() {
	            isKeyInputEnabled = false;
	            enableKeyInput();
	        }
	        function enableKeyInput() {
	            cssClass();
	            self._zone.runOutsideAngular(function () {
	                document.removeEventListener('mousedown', pointerDown);
	                document.removeEventListener('touchstart', pointerDown);
	                if (isKeyInputEnabled) {
	                    document.addEventListener('mousedown', pointerDown);
	                    document.addEventListener('touchstart', pointerDown);
	                }
	            });
	        }
	        document.addEventListener('keydown', keyDown);
	    };
	    Keyboard = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [config_1.Config, form_1.Form, core_1.NgZone])
	    ], Keyboard);
	    return Keyboard;
	})();
	exports.Keyboard = Keyboard;
	var KEYBOARD_CLOSE_POLLING = 150;


/***/ },
/* 277 */
/***/ function(module, exports) {

	/**
	 * @name Menu
	 * @description
	 * _For basic Menu usage, see the [Menu section](../../../../components/#menus)
	 * of the Component docs._
	 *
	 * Menu is a side-menu interface that can be dragged and toggled to open or close.
	 * An Ionic app can have numerous menus, all of which can be controlled within
	 * template HTML, or programmatically.
	 *
	 * @usage
	 * In order to use Menu, you must specify a [reference](https://angular.io/docs/ts/latest/guide/user-input.html#local-variables)
	 * to the content element that Menu should listen on for drag events, using the `content` property.
	 * This is telling the menu which content the menu is attached to, so it knows which element to
	 * move over, and to respond to drag events. Note that a **menu is a sibling to its content**.
	 *
	 * ```html
	 * <ion-menu [content]="mycontent">
	 *   <ion-content>
	 *     <ion-list>
	 *     ...
	 *     </ion-list>
	 *   </ion-content>
	 * </ion-menu>
	 *
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * By default, Menus are on the left, but this can be overridden with the `side`
	 * property:
	 *
	 * ```html
	 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
	 * ```
	 *
	 *
	 * ### Programmatic Interaction
	 *
	 * To programmatically interact with any menu, you can inject the `MenuController`
	 * provider into any component or directive. This makes it easy get ahold of and
	 * control the correct menu instance. By default Ionic will find the app's menu
	 * without requiring a menu ID.
	 *
	 * ```ts
	 * import{Page, MenuController} from 'ionic-angular';
	 * @Page({...})
	 * export class MyPage {
	 *  constructor(menu: MenuController) {
	 *    this.menu = menu;
	 *  }
	 *
	 *  openMenu() {
	 *    this.menu.open();
	 *  }
	 *
	 * }
	 * ```
	 *
	 * Note that if you want to easily toggle or close a menu just from a page's
	 * template, you can use `menuToggle` and/or `menuClose` to accomplish the same
	 * tasks as above.
	 *
	 *
	 * ### Apps With Left And Right Menus
	 *
	 * For apps with a left and right menu, you can control the desired
	 * menu by passing in the side of the menu.
	 *
	 * ```html
	 * <ion-menu side="left" [content]="mycontent">...</ion-menu>
	 * <ion-menu side="right" [content]="mycontent">...</ion-menu>
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * ```ts
	 *  openLeftMenu() {
	 *    this.menu.open('left');
	 *  }
	 *
	 *  closeRightMenu() {
	 *    this.menu.close('right');
	 *  }
	 * ```
	 *
	 *
	 * ### Apps With Multiple, Same Side Menus
	 *
	 * Since more than one menu on a the same side is possible, and you wouldn't want
	 * both to be open at the same time, an app can decide which menu should be enabled.
	 * For apps with multiple menus on the same side, it's required to give each menu a
	 * unique ID. In the example below, we're saying that the left menu with the
	 * `authenticated` id should be enabled, and the left menu with the `unauthenticated`
	 * id be disabled.
	 *
	 * ```html
	 * <ion-menu id="authenticated" side="left" [content]="mycontent">...</ion-menu>
	 * <ion-menu id="unauthenticated" side="left" [content]="mycontent">...</ion-menu>
	 * <ion-nav #mycontent [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * ```ts
	 *  enableAuthenticatedMenu() {
	 *    this.menu.enable(true, 'authenticated');
	 *    this.menu.enable(false, 'unauthenticated');
	 *  }
	 * ```
	 *
	 * Note that if an app only had one menu, there is no reason to pass a menu id.
	 *
	 *
	 * ### Menu Types
	 *
	 * Menu supports two display types: `overlay`, `reveal` and `push`. Overlay
	 * is the traditional Material Design drawer type, and Reveal is the traditional
	 * iOS type. By default, menus will use to the correct type for the platform,
	 * but this can be overriden using the `type` property:
	 *
	 * ```html
	 * <ion-menu type="overlay" [content]="mycontent">...</ion-menu>
	 * ```
	 *
	 *
	 * ### Persistent Menus
	 *
	 * By default, menus, and specifically their menu toggle buttons in the navbar,
	 * only show on the root page within its `NavController`. For example, on Page 1
	 * the menu toggle will show in the navbar. However, when navigating to Page 2,
	 * because it is not the root Page for that `NavController`, the menu toggle
	 * will not show in the navbar.
	 *
	 * Not showing the menu toggle button in the navbar is commonly seen within
	 * native apps after navigating past the root Page. However, it is still possible
	 * to always show the menu toggle button in the navbar by setting
	 * `persistent="true"` on the `ion-menu` component.
	 *
	 * ```html
	 * <ion-menu persistent="true" [content]="content">...</ion-menu>
	 * ```
	 *
	 * @demo /docs/v2/demos/menu/
	 *
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../../nav/Nav Nav API Docs}
	 *
	 */
	var MenuController = (function () {
	    function MenuController() {
	        this._menus = [];
	    }
	    /**
	     * Progamatically open the Menu.
	     * @return {Promise} returns a promise when the menu is fully opened
	     */
	    MenuController.prototype.open = function (menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.open();
	        }
	        return Promise.resolve(false);
	    };
	    /**
	     * Progamatically close the Menu. If no `menuId` is given as the first
	     * argument then it'll close any menu which is open. If a `menuId`
	     * is given then it'll close that exact menu.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Promise} returns a promise when the menu is fully closed
	     */
	    MenuController.prototype.close = function (menuId) {
	        var menu;
	        if (menuId) {
	            // find the menu by its id
	            menu = this.get(menuId);
	        }
	        else {
	            // find the menu that is open
	            menu = this._menus.find(function (m) { return m.isOpen; });
	        }
	        if (menu) {
	            // close the menu
	            return menu.close();
	        }
	        return Promise.resolve(false);
	    };
	    /**
	     * Toggle the menu. If it's closed, it will open, and if opened, it
	     * will close.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Promise} returns a promise when the menu has been toggled
	     */
	    MenuController.prototype.toggle = function (menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.toggle();
	        }
	        return Promise.resolve(false);
	    };
	    /**
	     * Used to enable or disable a menu. For example, there could be multiple
	     * left menus, but only one of them should be able to be opened at the same
	     * time. If there are multiple menus on the same side, then enabling one menu
	     * will also automatically disable all the others that are on the same side.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
	     */
	    MenuController.prototype.enable = function (shouldEnable, menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.enable(shouldEnable);
	        }
	    };
	    /**
	     * Used to enable or disable the ability to swipe open the menu.
	     * @param {boolean} shouldEnable  True if it should be swipe-able, false if not.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
	     */
	    MenuController.prototype.swipeEnable = function (shouldEnable, menuId) {
	        var menu = this.get(menuId);
	        if (menu) {
	            return menu.swipeEnable(shouldEnable);
	        }
	    };
	    /**
	     * @return {boolean} Returns true if the menu is currently open, otherwise false.
	     */
	    MenuController.prototype.isOpen = function (menuId) {
	        var menu = this.get(menuId);
	        return menu && menu.isOpen || false;
	    };
	    /**
	     * @return {boolean} Returns true if the menu is currently enabled, otherwise false.
	     */
	    MenuController.prototype.isEnabled = function (menuId) {
	        var menu = this.get(menuId);
	        return menu && menu.enabled || false;
	    };
	    /**
	     * Used to get a menu instance. If a `menuId` is not provided then it'll
	     * return the first menu found. If a `menuId` is `left` or `right`, then
	     * it'll return the enabled menu on that side. Otherwise, if a `menuId` is
	     * provided, then it'll try to find the menu using the menu's `id`
	     * property. If a menu is not found then it'll return `null`.
	     * @param {string} [menuId]  Optionally get the menu by its id, or side.
	     * @return {Menu}  Returns the instance of the menu if found, otherwise `null`.
	     */
	    MenuController.prototype.get = function (menuId) {
	        var menu;
	        if (menuId === 'left' || menuId === 'right') {
	            // there could be more than one menu on the same side
	            // so first try to get the enabled one
	            menu = this._menus.find(function (m) { return m.side === menuId && m.enabled; });
	            if (menu)
	                return menu;
	            // didn't find a menu side that is enabled
	            // so try to get the first menu side found
	            return this._menus.find(function (m) { return m.side === menuId; }) || null;
	        }
	        else if (menuId) {
	            // the menuId was not left or right
	            // so try to get the menu by its "id"
	            return this._menus.find(function (m) { return m.id === menuId; }) || null;
	        }
	        // return the first enabled menu
	        menu = this._menus.find(function (m) { return m.enabled; });
	        if (menu)
	            return menu;
	        // get the first menu in the array, if one exists
	        return (this._menus.length ? this._menus[0] : null);
	    };
	    /**
	     * @return {Array<Menu>}  Returns an array of all menu instances.
	     */
	    MenuController.prototype.getMenus = function () {
	        return this._menus;
	    };
	    /**
	     * @private
	     */
	    MenuController.prototype.register = function (menu) {
	        this._menus.push(menu);
	    };
	    /**
	     * @private
	     */
	    MenuController.prototype.unregister = function (menu) {
	        var index = this._menus.indexOf(menu);
	        if (index > -1) {
	            this._menus.splice(index, 1);
	        }
	    };
	    /**
	     * @private
	     */
	    MenuController.registerType = function (name, cls) {
	        menuTypes[name] = cls;
	    };
	    /**
	     * @private
	     */
	    MenuController.create = function (type, menuCmp) {
	        return new menuTypes[type](menuCmp);
	    };
	    return MenuController;
	})();
	exports.MenuController = MenuController;
	var menuTypes = {};


/***/ },
/* 278 */
/***/ function(module, exports) {

	/**
	 * @private
	 * Map of possible pages that can be navigated to using an Ionic NavController
	 */
	var NavRegistry = (function () {
	    function NavRegistry(pages) {
	        if (pages === void 0) { pages = []; }
	        var pagePairs = pages.map(function (page) { return [page['name'], page]; });
	        this._pages = new Map();
	        for (var i = 0; i < pagePairs.length; i++) {
	            var pair = pagePairs[i];
	            this._pages.set(pair[0], pair[1]);
	        }
	    }
	    NavRegistry.prototype.get = function (pageName) {
	        return this._pages.get(pageName);
	    };
	    NavRegistry.prototype.set = function (page) {
	        this._pages.set(page.name, page);
	    };
	    return NavRegistry;
	})();
	exports.NavRegistry = NavRegistry;


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var dom_1 = __webpack_require__(164);
	var ScrollTo = (function () {
	    function ScrollTo(ele) {
	        if (typeof ele === 'string') {
	            // string query selector
	            ele = document.querySelector(ele);
	        }
	        if (ele) {
	            if (ele.nativeElement) {
	                // angular ElementRef
	                ele = ele.nativeElement;
	            }
	            if (ele.nodeType === 1) {
	                this._el = ele;
	            }
	        }
	    }
	    ScrollTo.prototype.start = function (x, y, duration, tolerance) {
	        // scroll animation loop w/ easing
	        // credit https://gist.github.com/dezinezync/5487119
	        var self = this;
	        if (!self._el) {
	            // invalid element
	            return Promise.resolve();
	        }
	        x = x || 0;
	        y = y || 0;
	        tolerance = tolerance || 0;
	        var fromY = self._el.scrollTop;
	        var fromX = self._el.scrollLeft;
	        var xDistance = Math.abs(x - fromX);
	        var yDistance = Math.abs(y - fromY);
	        void 0;
	        if (yDistance <= tolerance && xDistance <= tolerance) {
	            // prevent scrolling if already close to there
	            self._el = null;
	            return Promise.resolve();
	        }
	        return new Promise(function (resolve, reject) {
	            var startTime;
	            // scroll loop
	            function step() {
	                if (!self._el) {
	                    return resolve();
	                }
	                var time = Math.min(1, ((Date.now() - startTime) / duration));
	                // where .5 would be 50% of time on a linear scale easedT gives a
	                // fraction based on the easing method
	                var easedT = easeOutCubic(time);
	                if (fromY != y) {
	                    self._el.scrollTop = (easedT * (y - fromY)) + fromY;
	                }
	                if (fromX != x) {
	                    self._el.scrollLeft = Math.round((easedT * (x - fromX)) + fromX);
	                }
	                void 0;
	                if (time < 1 && self.isPlaying) {
	                    dom_1.raf(step);
	                }
	                else if (!self.isPlaying) {
	                    // stopped
	                    self._el = null;
	                    reject();
	                }
	                else {
	                    // done
	                    self._el = null;
	                    void 0;
	                    resolve();
	                }
	            }
	            // start scroll loop
	            self.isPlaying = true;
	            // chill out for a frame first
	            dom_1.raf(function () {
	                startTime = Date.now();
	                dom_1.raf(step);
	            });
	        });
	    };
	    ScrollTo.prototype.stop = function () {
	        this.isPlaying = false;
	    };
	    ScrollTo.prototype.dispose = function () {
	        this.stop();
	        this._el = null;
	    };
	    return ScrollTo;
	})();
	exports.ScrollTo = ScrollTo;
	// decelerating to zero velocity
	function easeOutCubic(t) {
	    return (--t) * t * t + 1;
	}


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var app_1 = __webpack_require__(168);
	var config_1 = __webpack_require__(161);
	var dom_1 = __webpack_require__(164);
	var activator_1 = __webpack_require__(281);
	var ripple_1 = __webpack_require__(282);
	/**
	 * @private
	 */
	var TapClick = (function () {
	    function TapClick(config, app, zone) {
	        this.app = app;
	        this.zone = zone;
	        this.lastTouch = 0;
	        this.disableClick = 0;
	        this.lastActivated = 0;
	        var self = this;
	        if (config.get('activator') == 'ripple') {
	            self.activator = new ripple_1.RippleActivator(app, config, zone);
	        }
	        else if (config.get('activator') == 'highlight') {
	            self.activator = new activator_1.Activator(app, config, zone);
	        }
	        self.usePolyfill = (config.get('tapPolyfill') === true);
	        zone.runOutsideAngular(function () {
	            addListener('click', self.click.bind(self), true);
	            addListener('touchstart', self.touchStart.bind(self));
	            addListener('touchend', self.touchEnd.bind(self));
	            addListener('touchcancel', self.pointerCancel.bind(self));
	            addListener('mousedown', self.mouseDown.bind(self), true);
	            addListener('mouseup', self.mouseUp.bind(self), true);
	        });
	        self.pointerMove = function (ev) {
	            if (dom_1.hasPointerMoved(POINTER_MOVE_UNTIL_CANCEL, self.startCoord, dom_1.pointerCoord(ev))) {
	                self.pointerCancel(ev);
	            }
	        };
	    }
	    TapClick.prototype.touchStart = function (ev) {
	        this.lastTouch = Date.now();
	        this.pointerStart(ev);
	    };
	    TapClick.prototype.touchEnd = function (ev) {
	        this.lastTouch = Date.now();
	        if (this.usePolyfill && this.startCoord && this.app.isEnabled()) {
	            // only dispatch mouse click events from a touchend event
	            // when tapPolyfill config is true, and the startCoordand endCoord
	            // are not too far off from each other
	            var endCoord = dom_1.pointerCoord(ev);
	            if (!dom_1.hasPointerMoved(POINTER_TOLERANCE, this.startCoord, endCoord)) {
	                // prevent native mouse click events for XX amount of time
	                this.disableClick = this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT;
	                if (this.app.isScrolling()) {
	                    // do not fire off a click event while the app was scrolling
	                    void 0;
	                }
	                else {
	                    // dispatch a mouse click event
	                    void 0;
	                    var clickEvent = document.createEvent('MouseEvents');
	                    clickEvent.initMouseEvent('click', true, true, window, 1, 0, 0, endCoord.x, endCoord.y, false, false, false, false, 0, null);
	                    clickEvent.isIonicTap = true;
	                    ev.target.dispatchEvent(clickEvent);
	                }
	            }
	        }
	        this.pointerEnd(ev);
	    };
	    TapClick.prototype.mouseDown = function (ev) {
	        if (this.isDisabledNativeClick()) {
	            void 0;
	            // does not prevent default on purpose
	            // so native blur events from inputs can happen
	            ev.stopPropagation();
	        }
	        else if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
	            this.pointerStart(ev);
	        }
	    };
	    TapClick.prototype.mouseUp = function (ev) {
	        if (this.isDisabledNativeClick()) {
	            void 0;
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	        if (this.lastTouch + DISABLE_NATIVE_CLICK_AMOUNT < Date.now()) {
	            this.pointerEnd(ev);
	        }
	    };
	    TapClick.prototype.pointerStart = function (ev) {
	        var activatableEle = getActivatableTarget(ev.target);
	        if (activatableEle) {
	            this.startCoord = dom_1.pointerCoord(ev);
	            var now = Date.now();
	            if (this.lastActivated + 150 < now) {
	                this.activator && this.activator.downAction(ev, activatableEle, this.startCoord.x, this.startCoord.y);
	                this.lastActivated = now;
	            }
	            this.moveListeners(true);
	        }
	        else {
	            this.startCoord = null;
	        }
	    };
	    TapClick.prototype.pointerEnd = function (ev) {
	        var activatableEle = getActivatableTarget(ev.target);
	        if (activatableEle) {
	            this.activator && this.activator.upAction(ev, activatableEle, this.startCoord.x, this.startCoord.y);
	        }
	        this.moveListeners(false);
	    };
	    TapClick.prototype.pointerCancel = function (ev) {
	        void 0;
	        this.activator && this.activator.clearState();
	        this.moveListeners(false);
	    };
	    TapClick.prototype.moveListeners = function (shouldAdd) {
	        removeListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
	        if (shouldAdd) {
	            addListener(this.usePolyfill ? 'touchmove' : 'mousemove', this.pointerMove);
	        }
	    };
	    TapClick.prototype.click = function (ev) {
	        var preventReason = null;
	        if (!this.app.isEnabled()) {
	            preventReason = 'appDisabled';
	        }
	        else if (!ev.isIonicTap && this.isDisabledNativeClick()) {
	            preventReason = 'nativeClick';
	        }
	        if (preventReason !== null) {
	            void 0;
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	    };
	    TapClick.prototype.isDisabledNativeClick = function () {
	        return this.disableClick > Date.now();
	    };
	    TapClick = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [config_1.Config, app_1.IonicApp, core_1.NgZone])
	    ], TapClick);
	    return TapClick;
	})();
	exports.TapClick = TapClick;
	function getActivatableTarget(ele) {
	    var targetEle = ele;
	    for (var x = 0; x < 4; x++) {
	        if (!targetEle)
	            break;
	        if (isActivatable(targetEle))
	            return targetEle;
	        targetEle = targetEle.parentElement;
	    }
	    return null;
	}
	/**
	 * @private
	 */
	function isActivatable(ele) {
	    if (ACTIVATABLE_ELEMENTS.test(ele.tagName)) {
	        return true;
	    }
	    var attributes = ele.attributes;
	    for (var i = 0, l = attributes.length; i < l; i++) {
	        if (ACTIVATABLE_ATTRIBUTES.test(attributes[i].name)) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.isActivatable = isActivatable;
	function addListener(type, listener, useCapture) {
	    document.addEventListener(type, listener, useCapture);
	}
	function removeListener(type, listener) {
	    document.removeEventListener(type, listener);
	}
	var ACTIVATABLE_ELEMENTS = /^(A|BUTTON)$/;
	var ACTIVATABLE_ATTRIBUTES = /tappable|button/i;
	var POINTER_TOLERANCE = 4;
	var POINTER_MOVE_UNTIL_CANCEL = 10;
	var DISABLE_NATIVE_CLICK_AMOUNT = 2500;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var dom_1 = __webpack_require__(164);
	var Activator = (function () {
	    function Activator(app, config, _zone) {
	        this.app = app;
	        this._zone = _zone;
	        this._queue = [];
	        this._active = [];
	        this._css = config.get('activatedClass') || 'activated';
	    }
	    Activator.prototype.downAction = function (ev, activatableEle, pointerX, pointerY) {
	        // the user just pressed down
	        var self = this;
	        if (self.disableActivated(ev)) {
	            return;
	        }
	        // queue to have this element activated
	        self._queue.push(activatableEle);
	        this._zone.runOutsideAngular(function () {
	            dom_1.rafFrames(2, function () {
	                var activatableEle;
	                for (var i = 0; i < self._queue.length; i++) {
	                    activatableEle = self._queue[i];
	                    if (activatableEle && activatableEle.parentNode) {
	                        self._active.push(activatableEle);
	                        activatableEle.classList.add(self._css);
	                    }
	                }
	                self._queue = [];
	            });
	        });
	    };
	    Activator.prototype.upAction = function (ev, activatableEle, pointerX, pointerY) {
	        // the user was pressing down, then just let up
	        var self = this;
	        function activateUp() {
	            self.clearState();
	        }
	        this._zone.runOutsideAngular(function () {
	            dom_1.rafFrames(CLEAR_STATE_DEFERS, activateUp);
	        });
	    };
	    Activator.prototype.clearState = function () {
	        var _this = this;
	        // all states should return to normal
	        if (!this.app.isEnabled()) {
	            // the app is actively disabled, so don't bother deactivating anything.
	            // this makes it easier on the GPU so it doesn't have to redraw any
	            // buttons during a transition. This will retry in XX milliseconds.
	            setTimeout(function () {
	                _this.clearState();
	            }, 600);
	        }
	        else {
	            // not actively transitioning, good to deactivate any elements
	            this.deactivate();
	        }
	    };
	    Activator.prototype.deactivate = function () {
	        // remove the active class from all active elements
	        var self = this;
	        self._queue = [];
	        dom_1.rafFrames(2, function () {
	            for (var i = 0; i < self._active.length; i++) {
	                self._active[i].classList.remove(self._css);
	            }
	            self._active = [];
	        });
	    };
	    Activator.prototype.disableActivated = function (ev) {
	        if (ev.defaultPrevented)
	            return true;
	        var targetEle = ev.target;
	        for (var x = 0; x < 4; x++) {
	            if (!targetEle)
	                break;
	            if (targetEle.hasAttribute('disable-activated'))
	                return true;
	            targetEle = targetEle.parentElement;
	        }
	        return false;
	    };
	    return Activator;
	})();
	exports.Activator = Activator;
	var CLEAR_STATE_DEFERS = 5;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var activator_1 = __webpack_require__(281);
	var dom_1 = __webpack_require__(164);
	var win = window;
	/**
	 * @private
	 */
	var RippleActivator = (function (_super) {
	    __extends(RippleActivator, _super);
	    function RippleActivator(app, config, zone) {
	        _super.call(this, app, config, zone);
	    }
	    RippleActivator.prototype.downAction = function (ev, activatableEle, pointerX, pointerY) {
	        var self = this;
	        if (self.disableActivated(ev)) {
	            return;
	        }
	        // queue to have this element activated
	        self._queue.push(activatableEle);
	        this._zone.runOutsideAngular(function () {
	            dom_1.raf(function () {
	                var i;
	                for (i = 0; i < self._queue.length; i++) {
	                    var queuedEle = self._queue[i];
	                    if (queuedEle && queuedEle.parentNode) {
	                        self._active.push(queuedEle);
	                        // DOM WRITE
	                        queuedEle.classList.add(self._css);
	                        var j = queuedEle.childElementCount;
	                        while (j--) {
	                            var rippleEle = queuedEle.children[j];
	                            if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
	                                // DOM WRITE
	                                rippleEle.style.left = '-9999px';
	                                rippleEle.style.opacity = '';
	                                rippleEle.style[dom_1.CSS.transform] = 'scale(0.001) translateZ(0px)';
	                                rippleEle.style[dom_1.CSS.transition] = '';
	                                // DOM READ
	                                var clientRect = activatableEle.getBoundingClientRect();
	                                rippleEle.$top = clientRect.top;
	                                rippleEle.$left = clientRect.left;
	                                rippleEle.$width = clientRect.width;
	                                rippleEle.$height = clientRect.height;
	                                break;
	                            }
	                        }
	                    }
	                }
	                self._queue = [];
	            });
	        });
	    };
	    RippleActivator.prototype.upAction = function (ev, activatableEle, pointerX, pointerY) {
	        var self = this;
	        var i = activatableEle.childElementCount;
	        while (i--) {
	            var rippleEle = activatableEle.children[i];
	            if (rippleEle.tagName === 'ION-BUTTON-EFFECT') {
	                var clientPointerX = (pointerX - rippleEle.$left);
	                var clientPointerY = (pointerY - rippleEle.$top);
	                var x = Math.max(Math.abs(rippleEle.$width - clientPointerX), clientPointerX) * 2;
	                var y = Math.max(Math.abs(rippleEle.$height - clientPointerY), clientPointerY) * 2;
	                var diameter = Math.min(Math.max(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), 64), 240);
	                if (activatableEle.hasAttribute('ion-item')) {
	                    diameter = Math.min(diameter, 140);
	                }
	                var radius = Math.sqrt(rippleEle.$width + rippleEle.$height);
	                var scaleTransitionDuration = Math.max(1600 * Math.sqrt(radius / TOUCH_DOWN_ACCEL) + 0.5, 260);
	                var opacityTransitionDuration = scaleTransitionDuration * 0.7;
	                var opacityTransitionDelay = scaleTransitionDuration - opacityTransitionDuration;
	                // DOM WRITE
	                rippleEle.style.width = rippleEle.style.height = diameter + 'px';
	                rippleEle.style.marginTop = rippleEle.style.marginLeft = -(diameter / 2) + 'px';
	                rippleEle.style.left = clientPointerX + 'px';
	                rippleEle.style.top = clientPointerY + 'px';
	                rippleEle.style.opacity = '0';
	                rippleEle.style[dom_1.CSS.transform] = 'scale(1) translateZ(0px)';
	                rippleEle.style[dom_1.CSS.transition] = 'transform ' +
	                    scaleTransitionDuration +
	                    'ms,opacity ' +
	                    opacityTransitionDuration +
	                    'ms ' +
	                    opacityTransitionDelay + 'ms';
	            }
	        }
	        _super.prototype.upAction.call(this, ev, activatableEle, pointerX, pointerY);
	    };
	    RippleActivator.prototype.deactivate = function () {
	        // remove the active class from all active elements
	        var self = this;
	        self._queue = [];
	        dom_1.rafFrames(2, function () {
	            for (var i = 0; i < self._active.length; i++) {
	                self._active[i].classList.remove(self._css);
	            }
	            self._active = [];
	        });
	    };
	    return RippleActivator;
	})(activator_1.Activator);
	exports.RippleActivator = RippleActivator;
	var TOUCH_DOWN_ACCEL = 300;


/***/ },
/* 283 */
/***/ function(module, exports) {

	/**
	 * @private
	 * Provide multi-language and i18n support in your app. Translate works by
	 * mapping full strings to language translated ones. That means that you don't
	 * need to provide strings for your default language, just new languages.
	 *
	 * Note: The Angular team will be building an
	 * [Localization/Internationalization](https://docs.google.com/document/d/1mwyOFsAD-bPoXTk3Hthq0CAcGXCUw-BtTJMR4nGTY-0/view#heading=h.ixg45w3363q)
	 * provider, so this Translation provider may not be further developed.
	 *
	 * @usage
	 * ```js
	 * Translate.translations({
	 *   'de': {
	 *     'Welcome to MyApp': 'Willkommen auf'
	 *   }
	 * })
	 *
	 * Changing the default language:
	 *
	 * Translate.setLanguage('de');
	 * ```
	 *
	 * Usage in a template:
	 *
	 * ```js
	 * <span>{{ 'Welcome to MyApp' | translate }}
	 * ```
	 */
	var Translate = (function () {
	    function Translate() {
	        this._transMap = {};
	        this._language = {};
	    }
	    Translate.prototype.translations = function (lang, map) {
	        this._transMap[lang] = map;
	    };
	    Translate.prototype.setLanguage = function (lang) {
	        this._language = lang;
	    };
	    Translate.prototype.getTranslations = function (lang) {
	        return this._transMap[lang];
	    };
	    Translate.prototype.translate = function (key, lang) {
	        // If the language isn't specified and we have no overridden one, return the string passed.
	        if (!lang && !this._language) {
	            return key;
	        }
	        var setLanguage = lang || this._language;
	        var map = this.getTranslations(setLanguage);
	        if (!map) {
	            void 0;
	            return '';
	        }
	        return this._getTranslation(map, key);
	    };
	    Translate.prototype._getTranslation = function (map, key) {
	        return map && map[key] || '';
	    };
	    return Translate;
	})();
	exports.Translate = Translate;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var common_1 = __webpack_require__(172);
	var overlay_1 = __webpack_require__(285);
	var menu_1 = __webpack_require__(286);
	var menu_toggle_1 = __webpack_require__(295);
	var menu_close_1 = __webpack_require__(307);
	var badge_1 = __webpack_require__(308);
	var button_1 = __webpack_require__(301);
	var blur_1 = __webpack_require__(309);
	var content_1 = __webpack_require__(310);
	var scroll_1 = __webpack_require__(311);
	var infinite_scroll_1 = __webpack_require__(312);
	var infinite_scroll_content_1 = __webpack_require__(313);
	var refresher_1 = __webpack_require__(315);
	var refresher_content_1 = __webpack_require__(316);
	var slides_1 = __webpack_require__(317);
	var tabs_1 = __webpack_require__(319);
	var tab_1 = __webpack_require__(321);
	var list_1 = __webpack_require__(323);
	var item_1 = __webpack_require__(325);
	var item_sliding_1 = __webpack_require__(327);
	var toolbar_1 = __webpack_require__(300);
	var icon_1 = __webpack_require__(299);
	var spinner_1 = __webpack_require__(314);
	var checkbox_1 = __webpack_require__(328);
	var select_1 = __webpack_require__(329);
	var option_1 = __webpack_require__(331);
	var toggle_1 = __webpack_require__(332);
	var input_1 = __webpack_require__(333);
	var label_1 = __webpack_require__(326);
	var segment_1 = __webpack_require__(336);
	var radio_button_1 = __webpack_require__(337);
	var radio_group_1 = __webpack_require__(338);
	var searchbar_1 = __webpack_require__(339);
	var nav_1 = __webpack_require__(340);
	var nav_push_1 = __webpack_require__(341);
	var nav_router_1 = __webpack_require__(342);
	var navbar_1 = __webpack_require__(298);
	var id_1 = __webpack_require__(343);
	var show_hide_when_1 = __webpack_require__(344);
	/**
	 * @name IONIC_DIRECTIVES
	 * @private
	 * @description
	 * The core Ionic directives as well as Angular's CORE_DIRECTIVES and
	 * FORM_DIRECTIVES.  Automatically available in every [@Page](../Page/) template.
	 *
	 * **Angular**
	 * - CORE_DIRECTIVES
	 * - FORM_DIRECTIVES
	 *
	 * **Content**
	 * -  Menu
	 * -  MenuToggle
	 * -  MenuClose
	 *
	 * -  Button
	 * -  Blur
	 * -  Content
	 * -  Scroll
	 * -  InfiniteScroll
	 * -  InfiniteScrollContent
	 * -  Refresher
	 * -  RefresherContent
	 *
	 * **Lists**
	 * -  List
	 * -  ListHeader
	 * -  Item
	 * -  ItemSliding
	 *
	 * **Slides**
	 * -  Slides
	 * -  Slide
	 * -  SlideLazy
	 *
	 * **Tabs**
	 * -  Tabs
	 * -  Tab
	 *
	 * **Toolbar**
	 * -  Toolbar
	 * -  ToolbarTitle
	 * -  ToolbarItem
	 *
	 * **Media**
	 * -  Icon
	 * -  Spinner
	 *
	 * **Forms**
	 * -  Searchbar
	 * -  Segment
	 * -  SegmentButton
	 * -  Checkbox
	 * -  RadioGroup
	 * -  RadioButton
	 * -  Select
	 * -  Option
	 * -  Toggle
	 * -  TextInput
	 * -  Label
	 *
	 * **Nav**
	 * -  Nav
	 * -  NavbarTemplate
	 * -  Navbar
	 * -  NavPush
	 * -  NavPop
	 * -  NavRouter
	 * -  IdRef
	 *
	 * -  ShowWhen
	 * -  HideWhen
	 */
	exports.IONIC_DIRECTIVES = [
	    // Angular
	    common_1.CORE_DIRECTIVES,
	    common_1.FORM_DIRECTIVES,
	    // Content
	    overlay_1.OverlayNav,
	    menu_1.Menu,
	    menu_toggle_1.MenuToggle,
	    menu_close_1.MenuClose,
	    badge_1.Badge,
	    button_1.Button,
	    blur_1.Blur,
	    content_1.Content,
	    scroll_1.Scroll,
	    infinite_scroll_1.InfiniteScroll,
	    infinite_scroll_content_1.InfiniteScrollContent,
	    refresher_1.Refresher,
	    refresher_content_1.RefresherContent,
	    // Lists
	    list_1.List,
	    list_1.ListHeader,
	    item_1.Item,
	    item_sliding_1.ItemSliding,
	    // Slides
	    slides_1.Slides,
	    slides_1.Slide,
	    slides_1.SlideLazy,
	    // Tabs
	    tabs_1.Tabs,
	    tab_1.Tab,
	    // Toolbar
	    toolbar_1.Toolbar,
	    toolbar_1.ToolbarTitle,
	    toolbar_1.ToolbarItem,
	    // Media
	    icon_1.Icon,
	    spinner_1.Spinner,
	    // Forms
	    searchbar_1.Searchbar,
	    searchbar_1.SearchbarInput,
	    segment_1.Segment,
	    segment_1.SegmentButton,
	    checkbox_1.Checkbox,
	    radio_group_1.RadioGroup,
	    radio_button_1.RadioButton,
	    select_1.Select,
	    option_1.Option,
	    toggle_1.Toggle,
	    input_1.TextArea,
	    input_1.TextInput,
	    label_1.Label,
	    // Nav
	    nav_1.Nav,
	    navbar_1.NavbarTemplate,
	    navbar_1.Navbar,
	    nav_push_1.NavPush,
	    nav_push_1.NavPop,
	    nav_router_1.NavRouter,
	    id_1.IdRef,
	    show_hide_when_1.ShowWhen,
	    show_hide_when_1.HideWhen
	];


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	/**
	 * @private
	 */
	var OverlayNav = (function () {
	    function OverlayNav() {
	        // deprecated warning
	        void 0;
	        void 0;
	        void 0;
	    }
	    OverlayNav = __decorate([
	        core_1.Directive({
	            selector: 'ion-overlay'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], OverlayNav);
	    return OverlayNav;
	})();
	exports.OverlayNav = OverlayNav;


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var ion_1 = __webpack_require__(287);
	var config_1 = __webpack_require__(161);
	var platform_1 = __webpack_require__(162);
	var keyboard_1 = __webpack_require__(276);
	var menu_gestures_1 = __webpack_require__(288);
	var menu_controller_1 = __webpack_require__(277);
	var util_1 = __webpack_require__(163);
	/**
	 * @private
	 */
	var Menu = (function (_super) {
	    __extends(Menu, _super);
	    function Menu(_menuCtrl, _elementRef, _config, _platform, _renderer, _keyboard, _zone) {
	        _super.call(this, _elementRef);
	        this._menuCtrl = _menuCtrl;
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this._platform = _platform;
	        this._renderer = _renderer;
	        this._keyboard = _keyboard;
	        this._zone = _zone;
	        this._preventTime = 0;
	        this._isEnabled = true;
	        this._isSwipeEnabled = true;
	        this._isPers = false;
	        this._init = false;
	        /**
	         * @private
	         */
	        this.isOpen = false;
	        /**
	         * @private
	         */
	        this.opening = new core_1.EventEmitter();
	    }
	    Object.defineProperty(Menu.prototype, "enabled", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._isEnabled;
	        },
	        set: function (val) {
	            this._isEnabled = util_1.isTrueProperty(val);
	            this._setListeners();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "swipeEnabled", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._isSwipeEnabled;
	        },
	        set: function (val) {
	            this._isSwipeEnabled = util_1.isTrueProperty(val);
	            this._setListeners();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "persistent", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._isPers;
	        },
	        set: function (val) {
	            this._isPers = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Menu.prototype.ngOnInit = function () {
	        var self = this;
	        self._init = true;
	        var content = self.content;
	        self._cntEle = (content instanceof Node) ? content : content && content.getNativeElement && content.getNativeElement();
	        // requires content element
	        if (!self._cntEle) {
	            return void 0;
	        }
	        // normalize the "side"
	        if (self.side !== 'left' && self.side !== 'right') {
	            self.side = 'left';
	        }
	        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'side', self.side);
	        // normalize the "type"
	        if (!self.type) {
	            self.type = self._config.get('menuType');
	        }
	        self._renderer.setElementAttribute(self._elementRef.nativeElement, 'type', self.type);
	        // add the gestures
	        self._cntGesture = new menu_gestures_1.MenuContentGesture(self, self.getContentElement());
	        self._menuGesture = new menu_gestures_1.MenuTargetGesture(self, self.getNativeElement());
	        // register listeners if this menu is enabled
	        // check if more than one menu is on the same side
	        var hasEnabledSameSideMenu = self._menuCtrl.getMenus().some(function (m) {
	            return m.side === self.side && m.enabled;
	        });
	        if (hasEnabledSameSideMenu) {
	            // auto-disable if another menu on the same side is already enabled
	            self._isEnabled = false;
	        }
	        self._setListeners();
	        // create a reusable click handler on this instance, but don't assign yet
	        self.onContentClick = function (ev) {
	            if (self._isEnabled) {
	                ev.preventDefault();
	                ev.stopPropagation();
	                self.close();
	            }
	        };
	        self._cntEle.classList.add('menu-content');
	        self._cntEle.classList.add('menu-content-' + self.type);
	        // register this menu with the app's menu controller
	        self._menuCtrl.register(self);
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._setListeners = function () {
	        var self = this;
	        if (self._init) {
	            // only listen/unlisten if the menu has initialized
	            if (self._isEnabled && self._isSwipeEnabled && !self._cntGesture.isListening) {
	                // should listen, but is not currently listening
	                void 0;
	                self._zone.runOutsideAngular(function () {
	                    self._cntGesture.listen();
	                    self._menuGesture.listen();
	                });
	            }
	            else if (self._cntGesture.isListening && (!self._isEnabled || !self._isSwipeEnabled)) {
	                // should not listen, but is currently listening
	                void 0;
	                self._cntGesture.unlisten();
	                self._menuGesture.unlisten();
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._getType = function () {
	        if (!this._type) {
	            this._type = menu_controller_1.MenuController.create(this.type, this);
	            if (this._config.get('animate') === false) {
	                this._type.ani.duration(0);
	            }
	        }
	        return this._type;
	    };
	    /**
	     * Sets the state of the Menu to open or not.
	     * @param {boolean} shouldOpen  If the Menu is open or not.
	     * @return {Promise} returns a promise once set
	     */
	    Menu.prototype.setOpen = function (shouldOpen) {
	        var _this = this;
	        // _isPrevented is used to prevent unwanted opening/closing after swiping open/close
	        // or swiping open the menu while pressing down on the menuToggle button
	        if ((shouldOpen && this.isOpen) || this._isPrevented()) {
	            return Promise.resolve(this.isOpen);
	        }
	        this._before();
	        return new Promise(function (resolve) {
	            _this._getType().setOpen(shouldOpen, function () {
	                _this._after(shouldOpen);
	                resolve(_this.isOpen);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeStart = function () {
	        // user started swiping the menu open/close
	        if (this._isPrevented() || !this._isEnabled || !this._isSwipeEnabled)
	            return;
	        this._before();
	        this._getType().setProgressStart(this.isOpen);
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeProgress = function (stepValue) {
	        // user actively dragging the menu
	        if (this._isEnabled && this._isSwipeEnabled) {
	            this._prevent();
	            this._getType().setProgessStep(stepValue);
	            this.opening.next(stepValue);
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.swipeEnd = function (shouldComplete, currentStepValue) {
	        var _this = this;
	        // user has finished dragging the menu
	        if (this._isEnabled && this._isSwipeEnabled) {
	            this._prevent();
	            this._getType().setProgressEnd(shouldComplete, currentStepValue, function (isOpen) {
	                void 0;
	                _this._after(isOpen);
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._before = function () {
	        // this places the menu into the correct location before it animates in
	        // this css class doesn't actually kick off any animations
	        if (this._isEnabled) {
	            this.getNativeElement().classList.add('show-menu');
	            this.getBackdropElement().classList.add('show-backdrop');
	            this._prevent();
	            this._keyboard.close();
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._after = function (isOpen) {
	        // keep opening/closing the menu disabled for a touch more yet
	        // only add listeners/css if it's enabled and isOpen
	        // and only remove listeners/css if it's not open
	        if ((this._isEnabled && isOpen) || !isOpen) {
	            this._prevent();
	            this.isOpen = isOpen;
	            this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
	            this._cntEle.removeEventListener('click', this.onContentClick);
	            if (isOpen) {
	                this._cntEle.addEventListener('click', this.onContentClick);
	            }
	            else {
	                this.getNativeElement().classList.remove('show-menu');
	                this.getBackdropElement().classList.remove('show-backdrop');
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._prevent = function () {
	        // used to prevent unwanted opening/closing after swiping open/close
	        // or swiping open the menu while pressing down on the menuToggle
	        this._preventTime = Date.now() + 20;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype._isPrevented = function () {
	        return this._preventTime > Date.now();
	    };
	    /**
	     * Progamatically open the Menu.
	     * @return {Promise} returns a promise when the menu is fully opened.
	     */
	    Menu.prototype.open = function () {
	        return this.setOpen(true);
	    };
	    /**
	     * Progamatically close the Menu.
	     * @return {Promise} returns a promise when the menu is fully closed.
	     */
	    Menu.prototype.close = function () {
	        return this.setOpen(false);
	    };
	    /**
	     * Toggle the menu. If it's closed, it will open, and if opened, it will close.
	     * @return {Promise} returns a promise when the menu has been toggled.
	     */
	    Menu.prototype.toggle = function () {
	        return this.setOpen(!this.isOpen);
	    };
	    /**
	     * Used to enable or disable a menu. For example, there could be multiple
	     * left menus, but only one of them should be able to be opened at the same
	     * time. If there are multiple menus on the same side, then enabling one menu
	     * will also automatically disable all the others that are on the same side.
	     * @param {boolean} shouldEnable  True if it should be enabled, false if not.
	     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
	     */
	    Menu.prototype.enable = function (shouldEnable) {
	        var _this = this;
	        this.enabled = shouldEnable;
	        if (!shouldEnable && this.isOpen) {
	            // close if this menu is open, and should not be enabled
	            this.close();
	        }
	        if (shouldEnable) {
	            // if this menu should be enabled
	            // then find all the other menus on this same side
	            // and automatically disable other same side menus
	            var sameSideMenus = this._menuCtrl
	                .getMenus()
	                .filter(function (m) { return m.side === _this.side && m !== _this; })
	                .map(function (m) { return m.enabled = false; });
	        }
	        return this;
	    };
	    /**
	     * Used to enable or disable the ability to swipe open the menu.
	     * @param {boolean} shouldEnable  True if it should be swipe-able, false if not.
	     * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
	     */
	    Menu.prototype.swipeEnable = function (shouldEnable) {
	        this.swipeEnabled = shouldEnable;
	        return this;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.getMenuElement = function () {
	        return this.getNativeElement();
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.getContentElement = function () {
	        return this._cntEle;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.getBackdropElement = function () {
	        return this.backdrop.elementRef.nativeElement;
	    };
	    /**
	     * @private
	     */
	    Menu.prototype.ngOnDestroy = function () {
	        this._menuCtrl.unregister(this);
	        this._cntGesture && this._cntGesture.destroy();
	        this._menuGesture && this._menuGesture.destroy();
	        this._type && this._type.destroy();
	        this._resizeUnreg && this._resizeUnreg();
	        this._cntEle = null;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Menu.prototype, "content", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Menu.prototype, "id", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Menu.prototype, "side", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Menu.prototype, "type", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Menu.prototype, "enabled", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Menu.prototype, "swipeEnabled", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Menu.prototype, "persistent", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Menu.prototype, "maxEdgeStart", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Menu.prototype, "opening", void 0);
	    Menu = __decorate([
	        core_1.Component({
	            selector: 'ion-menu',
	            host: {
	                'role': 'navigation'
	            },
	            template: '<ng-content></ng-content>' +
	                '<div tappable disable-activated class="backdrop"></div>',
	            directives: [core_1.forwardRef(function () { return MenuBackdrop; })]
	        }), 
	        __metadata('design:paramtypes', [menu_controller_1.MenuController, core_1.ElementRef, config_1.Config, platform_1.Platform, core_1.Renderer, keyboard_1.Keyboard, core_1.NgZone])
	    ], Menu);
	    return Menu;
	})(ion_1.Ion);
	exports.Menu = Menu;
	/**
	 * @private
	 */
	var MenuBackdrop = (function () {
	    function MenuBackdrop(_menuCtrl, elementRef) {
	        this._menuCtrl = _menuCtrl;
	        this.elementRef = elementRef;
	        _menuCtrl.backdrop = this;
	    }
	    /**
	     * @private
	     */
	    MenuBackdrop.prototype.clicked = function (ev) {
	        void 0;
	        ev.preventDefault();
	        ev.stopPropagation();
	        this._menuCtrl.close();
	    };
	    MenuBackdrop = __decorate([
	        core_1.Directive({
	            selector: '.backdrop',
	            host: {
	                '(click)': 'clicked($event)',
	            }
	        }),
	        __param(0, core_1.Host()), 
	        __metadata('design:paramtypes', [Menu, core_1.ElementRef])
	    ], MenuBackdrop);
	    return MenuBackdrop;
	})();
	exports.MenuBackdrop = MenuBackdrop;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var dom = __webpack_require__(164);
	var ids = 0;
	/**
	 * Base class for all Ionic components. Exposes some common functionality
	 * that all Ionic components need, such as accessing underlying native elements and
	 * sending/receiving app-level events.
	 */
	var Ion = (function () {
	    function Ion(elementRef) {
	        this.elementRef = elementRef;
	        this._id = 'i' + ids++;
	    }
	    Ion.prototype.getElementRef = function () {
	        return this.elementRef;
	    };
	    Ion.prototype.getNativeElement = function () {
	        return this.elementRef.nativeElement;
	    };
	    Ion.prototype.getDimensions = function () {
	        return dom.getDimensions(this.elementRef.nativeElement, this._id);
	    };
	    Ion.prototype.width = function () {
	        return dom.getDimensions(this.elementRef.nativeElement, this._id).width;
	    };
	    Ion.prototype.height = function () {
	        return dom.getDimensions(this.elementRef.nativeElement, this._id).height;
	    };
	    Ion.prototype.ngOnDestroy = function () {
	        dom.clearDimensions(this._id);
	    };
	    return Ion;
	})();
	exports.Ion = Ion;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var slide_edge_gesture_1 = __webpack_require__(289);
	var util_1 = __webpack_require__(163);
	/**
	 * Gesture attached to the content which the menu is assigned to
	 */
	var MenuContentGesture = (function (_super) {
	    __extends(MenuContentGesture, _super);
	    function MenuContentGesture(menu, contentEle, options) {
	        if (options === void 0) { options = {}; }
	        _super.call(this, contentEle, util_1.assign({
	            direction: 'x',
	            edge: menu.side,
	            threshold: 0,
	            maxEdgeStart: menu.maxEdgeStart || 75
	        }, options));
	        this.menu = menu;
	    }
	    MenuContentGesture.prototype.canStart = function (ev) {
	        var menu = this.menu;
	        if (!menu.enabled || !menu.swipeEnabled) {
	            void 0;
	            return false;
	        }
	        if (ev.distance > 50) {
	            // the distance is longer than you'd expect a side menu swipe to be
	            void 0;
	            return false;
	        }
	        void 0;
	        if (menu.side === 'right') {
	            // right side
	            if (menu.isOpen) {
	                // right side, opened
	                return true;
	            }
	            else {
	                // right side, closed
	                if ((ev.angle > 140 && ev.angle <= 180) || (ev.angle > -140 && ev.angle <= -180)) {
	                    return _super.prototype.canStart.call(this, ev);
	                }
	            }
	        }
	        else {
	            // left side
	            if (menu.isOpen) {
	                // left side, opened
	                return true;
	            }
	            else {
	                // left side, closed
	                if (ev.angle > -40 && ev.angle < 40) {
	                    return _super.prototype.canStart.call(this, ev);
	                }
	            }
	        }
	        // didn't pass the test, don't open this menu
	        return false;
	    };
	    // Set CSS, then wait one frame for it to apply before sliding starts
	    MenuContentGesture.prototype.onSlideBeforeStart = function (slide, ev) {
	        void 0;
	        this.menu.swipeStart();
	    };
	    MenuContentGesture.prototype.onSlide = function (slide, ev) {
	        var z = (this.menu.side === 'right' ? slide.min : slide.max);
	        var stepValue = (slide.distance / z);
	        void 0;
	        this.menu.swipeProgress(stepValue);
	    };
	    MenuContentGesture.prototype.onSlideEnd = function (slide, ev) {
	        var z = (this.menu.side === 'right' ? slide.min : slide.max);
	        var shouldComplete = (Math.abs(ev.velocityX) > 0.2) ||
	            (Math.abs(slide.delta) > Math.abs(z) * 0.5);
	        var currentStepValue = (slide.distance / z);
	        void 0;
	        this.menu.swipeEnd(shouldComplete, currentStepValue);
	    };
	    MenuContentGesture.prototype.getElementStartPos = function (slide, ev) {
	        if (this.menu.side === 'right') {
	            // right menu
	            return this.menu.isOpen ? slide.min : slide.max;
	        }
	        // left menu
	        return this.menu.isOpen ? slide.max : slide.min;
	    };
	    MenuContentGesture.prototype.getSlideBoundaries = function () {
	        if (this.menu.side === 'right') {
	            // right menu
	            return {
	                min: -this.menu.width(),
	                max: 0
	            };
	        }
	        // left menu
	        return {
	            min: 0,
	            max: this.menu.width()
	        };
	    };
	    return MenuContentGesture;
	})(slide_edge_gesture_1.SlideEdgeGesture);
	exports.MenuContentGesture = MenuContentGesture;
	/**
	 * Gesture attached to the actual menu itself
	 */
	var MenuTargetGesture = (function (_super) {
	    __extends(MenuTargetGesture, _super);
	    function MenuTargetGesture(menu, menuEle) {
	        _super.call(this, menu, menuEle, {
	            maxEdgeStart: 0
	        });
	    }
	    return MenuTargetGesture;
	})(MenuContentGesture);
	exports.MenuTargetGesture = MenuTargetGesture;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var slide_gesture_1 = __webpack_require__(290);
	var util_1 = __webpack_require__(163);
	var dom_1 = __webpack_require__(164);
	var SlideEdgeGesture = (function (_super) {
	    __extends(SlideEdgeGesture, _super);
	    function SlideEdgeGesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        util_1.defaults(opts, {
	            edge: 'left',
	            maxEdgeStart: 50
	        });
	        _super.call(this, element, opts);
	        // Can check corners through use of eg 'left top'
	        this.edges = opts.edge.split(' ');
	        this.maxEdgeStart = opts.maxEdgeStart;
	    }
	    SlideEdgeGesture.prototype.canStart = function (ev) {
	        var _this = this;
	        this._d = this.getContainerDimensions();
	        return this.edges.every(function (edge) { return _this._checkEdge(edge, ev.center); });
	    };
	    SlideEdgeGesture.prototype.getContainerDimensions = function () {
	        return {
	            left: 0,
	            top: 0,
	            width: dom_1.windowDimensions().width,
	            height: dom_1.windowDimensions().height
	        };
	    };
	    SlideEdgeGesture.prototype._checkEdge = function (edge, pos) {
	        switch (edge) {
	            case 'left': return pos.x <= this._d.left + this.maxEdgeStart;
	            case 'right': return pos.x >= this._d.width - this.maxEdgeStart;
	            case 'top': return pos.y <= this._d.top + this.maxEdgeStart;
	            case 'bottom': return pos.y >= this._d.height - this.maxEdgeStart;
	        }
	    };
	    return SlideEdgeGesture;
	})(slide_gesture_1.SlideGesture);
	exports.SlideEdgeGesture = SlideEdgeGesture;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var drag_gesture_1 = __webpack_require__(291);
	var util_1 = __webpack_require__(293);
	var SlideGesture = (function (_super) {
	    __extends(SlideGesture, _super);
	    function SlideGesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        _super.call(this, element, opts);
	        this.slide = null;
	        this.element = element;
	    }
	    /*
	     * Get the min and max for the slide. pageX/pageY.
	     * Only called on dragstart.
	     */
	    SlideGesture.prototype.getSlideBoundaries = function (slide, ev) {
	        return {
	            min: 0,
	            max: this.element.offsetWidth
	        };
	    };
	    /*
	     * Get the element's pos when the drag starts.
	     * For example, an open side menu starts at 100% and a closed
	     * sidemenu starts at 0%.
	     */
	    SlideGesture.prototype.getElementStartPos = function (slide, ev) {
	        return 0;
	    };
	    SlideGesture.prototype.canStart = function (ev) {
	        return true;
	    };
	    SlideGesture.prototype.onDragStart = function (ev) {
	        if (!this.canStart(ev)) {
	            return false;
	        }
	        this.slide = {};
	        this.onSlideBeforeStart(this.slide, ev);
	        var _a = this.getSlideBoundaries(this.slide, ev), min = _a.min, max = _a.max;
	        this.slide.min = min;
	        this.slide.max = max;
	        this.slide.elementStartPos = this.getElementStartPos(this.slide, ev);
	        this.slide.pointerStartPos = ev.center[this.direction];
	        this.slide.started = true;
	        this.onSlideStart(this.slide, ev);
	        return true;
	    };
	    SlideGesture.prototype.onDrag = function (ev) {
	        if (!this.slide || !this.slide.started) {
	            return false;
	        }
	        this.slide.pos = ev.center[this.direction];
	        this.slide.distance = util_1.clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
	        this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
	        this.onSlide(this.slide, ev);
	        return true;
	    };
	    SlideGesture.prototype.onDragEnd = function (ev) {
	        if (!this.slide || !this.slide.started)
	            return;
	        this.onSlideEnd(this.slide, ev);
	        this.slide = null;
	    };
	    SlideGesture.prototype.onSlideBeforeStart = function (slide, ev) { };
	    SlideGesture.prototype.onSlideStart = function (slide, ev) { };
	    SlideGesture.prototype.onSlide = function (slide, ev) { };
	    SlideGesture.prototype.onSlideEnd = function (slide, ev) { };
	    return SlideGesture;
	})(drag_gesture_1.DragGesture);
	exports.SlideGesture = SlideGesture;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var gesture_1 = __webpack_require__(292);
	var util_1 = __webpack_require__(293);
	var DragGesture = (function (_super) {
	    __extends(DragGesture, _super);
	    function DragGesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        util_1.defaults(opts, {});
	        _super.call(this, element, opts);
	    }
	    DragGesture.prototype.listen = function () {
	        var _this = this;
	        _super.prototype.listen.call(this);
	        this.on('panstart', function (ev) {
	            if (_this.onDragStart(ev) !== false) {
	                _this.dragging = true;
	            }
	        });
	        this.on('panmove', function (ev) {
	            if (!_this.dragging)
	                return;
	            if (_this.onDrag(ev) === false) {
	                _this.dragging = false;
	            }
	        });
	        this.on('panend', function (ev) {
	            if (!_this.dragging)
	                return;
	            _this.onDragEnd(ev);
	            _this.dragging = false;
	        });
	    };
	    DragGesture.prototype.onDrag = function (ev) { return true; };
	    DragGesture.prototype.onDragStart = function (ev) { return true; };
	    DragGesture.prototype.onDragEnd = function (ev) { };
	    return DragGesture;
	})(gesture_1.Gesture);
	exports.DragGesture = DragGesture;


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var util_1 = __webpack_require__(293);
	var hammer_1 = __webpack_require__(294);
	/**
	 * A gesture recognizer class.
	 *
	 * TODO(mlynch): Re-enable the DOM event simulation that was causing issues (or verify hammer does this already, it might);
	 */
	var Gesture = (function () {
	    function Gesture(element, opts) {
	        if (opts === void 0) { opts = {}; }
	        this._callbacks = {};
	        this.isListening = false;
	        util_1.defaults(opts, {
	            domEvents: true
	        });
	        this.element = element;
	        // Map 'x' or 'y' string to hammerjs opts
	        this.direction = opts.direction || 'x';
	        opts.direction = this.direction === 'x' ?
	            hammer_1.DIRECTION_HORIZONTAL :
	            hammer_1.DIRECTION_VERTICAL;
	        this._options = opts;
	    }
	    Gesture.prototype.options = function (opts) {
	        util_1.assign(this._options, opts);
	    };
	    Gesture.prototype.on = function (type, cb) {
	        if (type == 'pinch' || type == 'rotate') {
	            this._hammer.get('pinch').set({ enable: true });
	        }
	        this._hammer.on(type, cb);
	        (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
	    };
	    Gesture.prototype.off = function (type, cb) {
	        this._hammer.off(type, this._callbacks[type] ? cb : null);
	    };
	    Gesture.prototype.listen = function () {
	        if (!this.isListening) {
	            this._hammer = hammer_1.Hammer(this.element, this._options);
	        }
	        this.isListening = true;
	    };
	    Gesture.prototype.unlisten = function () {
	        var type, i;
	        if (this._hammer && this.isListening) {
	            for (type in this._callbacks) {
	                for (i = 0; i < this._callbacks[type].length; i++) {
	                    this._hammer.off(type, this._callbacks[type]);
	                }
	            }
	            this._hammer.destroy();
	        }
	        this._callbacks = {};
	        this._hammer = null;
	        this.isListening = false;
	    };
	    Gesture.prototype.destroy = function () {
	        this.unlisten();
	        this.element = this._options = null;
	    };
	    return Gesture;
	})();
	exports.Gesture = Gesture;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var domUtil = __webpack_require__(164);
	exports.dom = domUtil;
	__export(__webpack_require__(163));


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	var util_1 = __webpack_require__(163);
	var win = window;
	var doc = document;
	/*! Hammer.JS - v2.0.6 - 2015-12-23
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2015 Jorik Tangelder;
	 * Licensed under the  license */
	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = doc.createElement('div');
	var TYPE_FUNCTION = 'function';
	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;
	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}
	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}
	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;
	    if (!obj) {
	        return;
	    }
	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    }
	    else if (obj.length !== undefined) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    }
	    else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}
	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype, childP;
	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;
	    if (properties) {
	        util_1.assign(childP, properties);
	    }
	}
	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}
	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined : undefined, args);
	    }
	    return val;
	}
	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return (val1 === undefined) ? val2 : val1;
	}
	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        target.addEventListener(type, handler, false);
	    });
	}
	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        target.removeEventListener(type, handler, false);
	    });
	}
	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}
	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}
	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}
	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    }
	    else {
	        var i = 0;
	        while (i < src.length) {
	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}
	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}
	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;
	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }
	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        }
	        else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key] ? 1 : 0;
	            });
	        }
	    }
	    return results;
	}
	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);
	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = (prefix) ? prefix + camelProp : property;
	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined;
	}
	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}
	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument || element;
	    return (doc.defaultView || doc.parentWindow || window);
	}
	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';
	var COMPUTE_INTERVAL = 25;
	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;
	var DIRECTION_NONE = 1;
	exports.DIRECTION_LEFT = 2;
	exports.DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;
	exports.DIRECTION_HORIZONTAL = exports.DIRECTION_LEFT | exports.DIRECTION_RIGHT;
	exports.DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL;
	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];
	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;
	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function (ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };
	    this.init();
	}
	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function () { },
	    /**
	     * bind the events
	     */
	    init: function () {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },
	    /**
	     * unbind the events
	     */
	    destroy: function () {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};
	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;
	    if (inputClass) {
	        Type = inputClass;
	    }
	    else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    }
	    else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    }
	    else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    }
	    else {
	        Type = TouchMouseInput;
	    }
	    return new (Type)(manager, inputHandler);
	}
	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));
	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;
	    if (isFirst) {
	        manager.session = {};
	    }
	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;
	    // compute scale, rotation etc
	    computeInputData(manager, input);
	    // emit secret event
	    manager.emit('hammer.input', input);
	    manager.recognize(input);
	    manager.session.prevInput = input;
	}
	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;
	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }
	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    }
	    else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }
	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;
	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);
	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	    input.overallVelocityX = overallVelocity.x;
	    input.overallVelocityY = overallVelocity.y;
	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;
	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);
	    computeIntervalInputData(session, input);
	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}
	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};
	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };
	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }
	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}
	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;
	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	        var deltaX = input.deltaX - last.deltaX;
	        var deltaY = input.deltaY - last.deltaY;
	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);
	        session.lastInterval = input;
	    }
	    else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }
	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}
	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }
	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}
	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;
	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }
	    var x = 0, y = 0, i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }
	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}
	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}
	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }
	    if (abs(x) >= abs(y)) {
	        return x < 0 ? exports.DIRECTION_LEFT : exports.DIRECTION_RIGHT;
	    }
	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}
	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
	    return Math.sqrt((x * x) + (y * y));
	}
	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}
	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}
	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}
	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};
	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput(manager, handler) {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;
	    this.allow = true; // used by Input.TouchMouse to disable mouse events
	    this.pressed = false; // mousedown state
	    Input.apply(this, arguments);
	}
	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];
	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }
	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }
	        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
	        if (!this.pressed || !this.allow) {
	            return;
	        }
	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }
	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});
	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};
	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};
	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
	// IE10 has prefixed support, and case-sensitive
	if (win.MSPointerEvent && !win.PointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}
	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;
	    Input.apply(this, arguments);
	    this.store = (this.manager.session.pointerEvents = []);
	}
	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;
	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);
	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');
	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        }
	        else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }
	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }
	        // update the event in the store
	        store[storeIndex] = ev;
	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });
	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});
	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;
	    Input.apply(this, arguments);
	}
	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }
	        if (!this.started) {
	            return;
	        }
	        var touches = normalizeSingleTouches.call(this, ev, type);
	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);
	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }
	    return [all, changed];
	}
	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput(manager, handler) {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};
	    Input.apply(this, arguments);
	}
	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;
	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }
	    var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;
	    // get target touches from touches
	    targetTouches = allTouches.filter(function (touch) {
	        return hasParent(touch.target, target);
	    });
	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }
	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }
	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }
	    if (!changedTargetTouches.length) {
	        return;
	    }
	    return [
	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	        changedTargetTouches
	    ];
	}
	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */
	function TouchMouseInput() {
	    Input.apply(this, arguments);
	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);
	}
	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH), isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);
	        // when we're in a touch event, so  block all upcoming mouse events
	        // most mobile browser also emit mouseevents, right after touchstart
	        if (isTouch) {
	            this.mouse.allow = false;
	        }
	        else if (isMouse && !this.mouse.allow) {
	            return;
	        }
	        // reset the allowMouse when we're done
	        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
	            this.mouse.allow = true;
	        }
	        this.callback(manager, inputEvent, inputData);
	    },
	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});
	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}
	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function (value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }
	        if (NATIVE_TOUCH_ACTION && this.manager.element.style) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },
	    /**
	     * just re-set the touchAction value
	     */
	    update: function () {
	        this.set(this.manager.options.touchAction);
	    },
	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function () {
	        var actions = [];
	        each(this.manager.recognizers, function (recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },
	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function (input) {
	        // not needed with native support for the touchAction property
	        if (NATIVE_TOUCH_ACTION) {
	            return;
	        }
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;
	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }
	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	        if (hasNone) {
	            //do not prevent defaults if this is a tap gesture
	            var isTapPointer = input.pointers.length === 1;
	            var isTapMovement = input.distance < 2;
	            var isTapTouchTime = input.deltaTime < 250;
	            if (isTapPointer && isTapMovement && isTapTouchTime) {
	                return;
	            }
	        }
	        if (hasPanX && hasPanY) {
	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	            return;
	        }
	        if (hasNone ||
	            (hasPanY && direction & exports.DIRECTION_HORIZONTAL) ||
	            (hasPanX && direction & exports.DIRECTION_VERTICAL)) {
	            return this.preventSrc(srcEvent);
	        }
	    },
	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function (srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};
	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }
	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	    // if both pan-x and pan-y are set (different recognizers
	    // for different directions, e.g. horizontal pan but vertical swipe?)
	    // we need none (as otherwise with pan-x pan-y combined none of these
	    // recognizers will work, since the browser would handle all panning
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_NONE;
	    }
	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }
	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }
	    return TOUCH_ACTION_AUTO;
	}
	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;
	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.options = util_1.assign({}, this.defaults, options || {});
	    this.id = uniqueId();
	    this.manager = null;
	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);
	    this.state = STATE_POSSIBLE;
	    this.simultaneous = {};
	    this.requireFail = [];
	}
	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},
	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function (options) {
	        util_1.assign(this.options, options);
	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },
	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }
	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },
	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },
	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }
	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },
	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function (otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },
	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function () {
	        return this.requireFail.length > 0;
	    },
	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function (otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },
	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function (input) {
	        var self = this;
	        var state = this.state;
	        function emit(event) {
	            self.manager.emit(event, input);
	        }
	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	        emit(self.options.event); // simple 'eventName' events
	        if (input.additionalEvent) {
	            emit(input.additionalEvent);
	        }
	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	    },
	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function (input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },
	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function () {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },
	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function (inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = util_1.assign({}, inputData);
	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }
	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }
	        this.state = this.process(inputDataClone);
	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },
	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function (inputData) { },
	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function () { },
	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function () { }
	};
	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    }
	    else if (state & STATE_ENDED) {
	        return 'end';
	    }
	    else if (state & STATE_CHANGED) {
	        return 'move';
	    }
	    else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}
	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    }
	    else if (direction == DIRECTION_UP) {
	        return 'up';
	    }
	    else if (direction == exports.DIRECTION_LEFT) {
	        return 'left';
	    }
	    else if (direction == exports.DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}
	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}
	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}
	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },
	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function (input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },
	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function (input) {
	        var state = this.state;
	        var eventType = input.eventType;
	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);
	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        }
	        else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            }
	            else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});
	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	    this.pX = null;
	    this.pY = null;
	}
	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },
	    getTouchAction: function () {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & exports.DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & exports.DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },
	    directionTest: function (input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;
	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & exports.DIRECTION_HORIZONTAL) {
	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? exports.DIRECTION_LEFT : exports.DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            }
	            else {
	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },
	    attrTest: function (input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	    },
	    emit: function (input) {
	        this.pX = input.deltaX;
	        this.pY = input.deltaY;
	        var direction = directionStr(input.direction);
	        if (direction) {
	            input.additionalEvent = this.options.event + direction;
	        }
	        this._super.emit.call(this, input);
	    }
	});
	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_NONE];
	    },
	    attrTest: function (input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },
	    emit: function (input) {
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            input.additionalEvent = this.options.event + inOut;
	        }
	        this._super.emit.call(this, input);
	    }
	});
	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);
	    this._timer = null;
	    this._input = null;
	}
	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 251,
	        threshold: 9 // a minimal movement is ok, but keep it low
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_AUTO];
	    },
	    process: function (input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;
	        this._input = input;
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	            this.reset();
	        }
	        else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function () {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        }
	        else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },
	    reset: function () {
	        clearTimeout(this._timer);
	    },
	    emit: function (input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }
	        if (input && (input.eventType & INPUT_END)) {
	            this.manager.emit(this.options.event + 'up', input);
	        }
	        else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_NONE];
	    },
	    attrTest: function (input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});
	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.3,
	        direction: exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL,
	        pointers: 1
	    },
	    getTouchAction: function () {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },
	    attrTest: function (input) {
	        var direction = this.options.direction;
	        var velocity;
	        if (direction & (exports.DIRECTION_HORIZONTAL | exports.DIRECTION_VERTICAL)) {
	            velocity = input.overallVelocity;
	        }
	        else if (direction & exports.DIRECTION_HORIZONTAL) {
	            velocity = input.overallVelocityX;
	        }
	        else if (direction & exports.DIRECTION_VERTICAL) {
	            velocity = input.overallVelocityY;
	        }
	        return this._super.attrTest.call(this, input) &&
	            direction & input.offsetDirection &&
	            input.distance > this.options.threshold &&
	            input.maxPointers == this.options.pointers &&
	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },
	    emit: function (input) {
	        var direction = directionStr(input.offsetDirection);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }
	        this.manager.emit(this.options.event, input);
	    }
	});
	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);
	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;
	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}
	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300,
	        time: 250,
	        threshold: 9,
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },
	    getTouchAction: function () {
	        return [TOUCH_ACTION_MANIPULATION];
	    },
	    process: function (input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;
	        this.reset();
	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
	            return this.failTimeout();
	        }
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }
	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;
	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            }
	            else {
	                this.count += 1;
	            }
	            this._input = input;
	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                }
	                else {
	                    this._timer = setTimeoutContext(function () {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },
	    failTimeout: function () {
	        this._timer = setTimeoutContext(function () {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },
	    reset: function () {
	        clearTimeout(this._timer);
	    },
	    emit: function () {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	/**
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, _defaults.preset);
	    return new Manager(element, options);
	}
	exports.Hammer = Hammer;
	/**
	 * @const {string}
	 */
	var VERSION = '2.0.6';
	/**
	 * default settings
	 * @namespace
	 */
	var _defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,
	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,
	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,
	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,
	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,
	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	        [RotateRecognizer, { enable: false }],
	        [PinchRecognizer, { enable: false }, ['rotate']],
	        [SwipeRecognizer, { direction: exports.DIRECTION_HORIZONTAL }],
	        [PanRecognizer, { direction: exports.DIRECTION_HORIZONTAL }, ['swipe']],
	        [TapRecognizer],
	        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],
	        [PressRecognizer]
	    ],
	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',
	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',
	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',
	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',
	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',
	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};
	var STOP = 1;
	var FORCED_STOP = 2;
	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    this.options = util_1.assign({}, _defaults, options || {});
	    this.options.inputTarget = this.options.inputTarget || element;
	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);
	    toggleCssProps(this, true);
	    each(this.options.recognizers, function (item) {
	        var recognizer = this.add(new (item[0])(item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}
	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function (options) {
	        util_1.assign(this.options, options);
	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },
	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function (force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },
	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function (inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }
	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);
	        var recognizer;
	        var recognizers = this.recognizers;
	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;
	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	            curRecognizer = session.curRecognizer = null;
	        }
	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];
	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer ||
	                recognizer.canRecognizeWith(curRecognizer))) {
	                recognizer.recognize(inputData);
	            }
	            else {
	                recognizer.reset();
	            }
	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },
	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function (recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }
	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },
	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function (recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }
	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }
	        this.recognizers.push(recognizer);
	        recognizer.manager = this;
	        this.touchAction.update();
	        return recognizer;
	    },
	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function (recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }
	        recognizer = this.get(recognizer);
	        // let's make sure this recognizer exists
	        if (recognizer) {
	            var recognizers = this.recognizers;
	            var index = inArray(recognizers, recognizer);
	            if (index !== -1) {
	                recognizers.splice(index, 1);
	                this.touchAction.update();
	            }
	        }
	        return this;
	    },
	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function (events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },
	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function (events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            if (!handler) {
	                delete handlers[event];
	            }
	            else {
	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },
	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function (event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }
	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }
	        data.type = event;
	        data.preventDefault = function () {
	            data.srcEvent.preventDefault();
	        };
	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },
	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function () {
	        this.element && toggleCssProps(this, false);
	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};
	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    if (!element.style) {
	        return;
	    }
	    each(manager.options.cssProps, function (value, name) {
	        element.style[prefixed(element.style, name)] = add ? value : '';
	    });
	}
	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = doc.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}
	util_1.assign(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,
	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,
	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: exports.DIRECTION_LEFT,
	    DIRECTION_RIGHT: exports.DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: exports.DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: exports.DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,
	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,
	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,
	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,
	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});
	win.Hammer = Hammer;


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var view_controller_1 = __webpack_require__(296);
	var navbar_1 = __webpack_require__(298);
	var menu_controller_1 = __webpack_require__(277);
	/**
	 * @name MenuToggle
	 * @description
	 * The `menuToggle` directive can be placed on any button to
	 * automatically close an open menu.
	 *
	 * @usage
	 * ```html
	 * <button menuToggle>Toggle Menu</button>
	 * ```
	 *
	 * To toggle a certain menu by its id or side, give the `menuToggle`
	 * directive a value.
	 *
	 * ```html
	 * <button menuToggle="right">Toggle Right Menu</button>
	 * ```
	 *
	 * @demo /docs/v2/demos/menu/
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link ../../menu/Menu Menu API Docs}
	 */
	var MenuToggle = (function () {
	    function MenuToggle(_menu, elementRef, _viewCtrl, _navbar) {
	        this._menu = _menu;
	        this._viewCtrl = _viewCtrl;
	        this._navbar = _navbar;
	        this._inNavbar = !!_navbar;
	    }
	    /**
	    * @private
	    */
	    MenuToggle.prototype.toggle = function () {
	        var menu = this._menu.get(this.menuToggle);
	        menu && menu.toggle();
	    };
	    Object.defineProperty(MenuToggle.prototype, "isHidden", {
	        /**
	        * @private
	        */
	        get: function () {
	            if (this._inNavbar && this._viewCtrl) {
	                if (this._viewCtrl.isFirst()) {
	                    // this is the first view, so it should always show
	                    return false;
	                }
	                var menu = this._menu.get(this.menuToggle);
	                if (menu) {
	                    // this is not the root view, so see if this menu
	                    // is configured to still be enabled if it's not the root view
	                    return !menu.persistent;
	                }
	            }
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], MenuToggle.prototype, "menuToggle", void 0);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], MenuToggle.prototype, "toggle", null);
	    MenuToggle = __decorate([
	        core_1.Directive({
	            selector: '[menuToggle]',
	            host: {
	                '[hidden]': 'isHidden',
	                'menuToggle': '' //ensures the attr is there for css when using [menuToggle]
	            }
	        }),
	        __param(2, core_1.Optional()),
	        __param(3, core_1.Optional()), 
	        __metadata('design:paramtypes', [menu_controller_1.MenuController, core_1.ElementRef, view_controller_1.ViewController, navbar_1.Navbar])
	    ], MenuToggle);
	    return MenuToggle;
	})();
	exports.MenuToggle = MenuToggle;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var nav_params_1 = __webpack_require__(297);
	var util_1 = __webpack_require__(163);
	/**
	 * @name ViewController
	 * @description
	 * Access various features and information about the current view
	 * @usage
	 *  ```ts
	 *  import {Page, ViewController} from 'ionic-angular';
	 *  @Page....
	 *  export class MyPage{
	 *   constructor(viewCtrl: ViewController){
	 *     this.viewCtrl = viewCtrl;
	 *   }
	 *  }
	 *  ```
	 */
	var ViewController = (function () {
	    function ViewController(componentType, data) {
	        this.componentType = componentType;
	        this._destroys = [];
	        this._hdAttr = null;
	        this._leavingOpts = null;
	        this._loaded = false;
	        this._onDismiss = null;
	        /**
	         * @private
	         */
	        this.instance = {};
	        /**
	         * @private
	         */
	        this.state = '';
	        /**
	         * @private
	         */
	        this.viewType = '';
	        /**
	         * @private
	         * If this is currently the active view, then set to false
	         * if it does not want the other views to fire their own lifecycles.
	         */
	        this.fireOtherLifecycles = true;
	        /**
	         * @private
	         */
	        this.isOverlay = false;
	        /**
	         * @private
	         */
	        this._emitter = new core_1.EventEmitter();
	        // passed in data could be NavParams, but all we care about is its data object
	        this.data = (data instanceof nav_params_1.NavParams ? data.data : util_1.isPresent(data) ? data : {});
	    }
	    ViewController.prototype.subscribe = function (generatorOrNext) {
	        return this._emitter.subscribe(generatorOrNext);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.emit = function (data) {
	        this._emitter.emit(data);
	    };
	    ViewController.prototype.onDismiss = function (callback) {
	        this._onDismiss = callback;
	    };
	    ViewController.prototype.dismiss = function (data, role) {
	        this._onDismiss && this._onDismiss(data, role);
	        return this._nav.remove(this._nav.indexOf(this), 1, this._leavingOpts);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setNav = function (navCtrl) {
	        this._nav = navCtrl;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getTransitionName = function (direction) {
	        return this._nav && this._nav.config.get('pageTransition');
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNavParams = function () {
	        return new nav_params_1.NavParams(this.data);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setLeavingOpts = function (opts) {
	        this._leavingOpts = opts;
	    };
	    /**
	     * Check to see if you can go back in the navigation stack
	     * @param {boolean} Check whether or not you can go back from this page
	     * @returns {boolean} Returns if it's possible to go back from this Page.
	     */
	    ViewController.prototype.enableBack = function () {
	        // update if it's possible to go back from this nav item
	        if (this._nav) {
	            var previousItem = this._nav.getPrevious(this);
	            // the previous view may exist, but if it's about to be destroyed
	            // it shouldn't be able to go back to
	            return !!(previousItem);
	        }
	        return false;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setInstance = function (instance) {
	        this.instance = instance;
	    };
	    Object.defineProperty(ViewController.prototype, "name", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this.componentType ? this.componentType['name'] : '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewController.prototype, "index", {
	        /**
	         * You can find out the index of the current view is in the current navigation stack
	         *
	         * ```typescript
	         *  export class Page1 {
	         *    constructor(view: ViewController){
	         *      this.view = view;
	         *      // Just log out the index
	         *      console.log(this.view.index);
	         *    }
	         *  }
	         * ```
	         *
	         * @returns {number} Returns the index of this page within its NavController.
	         */
	        get: function () {
	            return (this._nav ? this._nav.indexOf(this) : -1);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    ViewController.prototype.isRoot = function () {
	        // deprecated warning
	        void 0;
	        return this.isFirst();
	    };
	    /**
	     * @returns {boolean} Returns if this Page is the first in the stack of pages within its NavController.
	     */
	    ViewController.prototype.isFirst = function () {
	        return (this._nav ? this._nav.first() === this : false);
	    };
	    /**
	     * @returns {boolean} Returns if this Page is the last in the stack of pages within its NavController.
	     */
	    ViewController.prototype.isLast = function () {
	        return (this._nav ? this._nav.last() === this : false);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.domShow = function (shouldShow, renderer) {
	        // using hidden element attribute to display:none and not render views
	        // renderAttr of '' means the hidden attribute will be added
	        // renderAttr of null means the hidden attribute will be removed
	        // doing checks to make sure we only make an update to the element when needed
	        if (this._pgRef &&
	            (shouldShow && this._hdAttr === '' ||
	                !shouldShow && this._hdAttr !== '')) {
	            this._hdAttr = (shouldShow ? null : '');
	            renderer.setElementAttribute(this._pgRef.nativeElement, 'hidden', this._hdAttr);
	            var navbarRef = this.navbarRef();
	            if (navbarRef) {
	                renderer.setElementAttribute(navbarRef.nativeElement, 'hidden', this._hdAttr);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setZIndex = function (zIndex, renderer) {
	        if (this._pgRef && zIndex !== this.zIndex) {
	            this.zIndex = zIndex;
	            renderer.setElementStyle(this._pgRef.nativeElement, 'z-index', zIndex.toString());
	        }
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setNavbarTemplateRef = function (templateRef) {
	        this._nbTmpRef = templateRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNavbarTemplateRef = function () {
	        return this._nbTmpRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNavbarViewRef = function () {
	        return this._nbVwRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setNavbarViewRef = function (viewContainerRef) {
	        this._nbVwRef = viewContainerRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setPageRef = function (elementRef) {
	        this._pgRef = elementRef;
	    };
	    /**
	     * @private
	     * @returns {elementRef} Returns the Page's ElementRef
	     */
	    ViewController.prototype.pageRef = function () {
	        return this._pgRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setContentRef = function (elementRef) {
	        this._cntRef = elementRef;
	    };
	    /**
	     * @private
	     * @returns {elementRef} Returns the Page's Content ElementRef
	     */
	    ViewController.prototype.contentRef = function () {
	        return this._cntRef;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setContent = function (directive) {
	        this._cntDir = directive;
	    };
	    /**
	     * @private
	     * @returns {component} Returns the Page's Content component reference.
	     */
	    ViewController.prototype.getContent = function () {
	        return this._cntDir;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.setNavbar = function (directive) {
	        this._nbDir = directive;
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.getNavbar = function () {
	        return this._nbDir;
	    };
	    /**
	     * You can find out of the current view has a Navbar or not. Be sure to wrap this in an `onPageWillEnter` method in order to make sure the view has rendered fully.
	     *
	     * ```typescript
	     * export class Page1 {
	     *  constructor(view: ViewController) {
	     *    this.view = view
	     *  }
	     *  onPageWillEnter(){
	     *    console.log('Do we have a Navbar?', this.view.hasNavbar());
	     *  }
	     *}
	     * ```
	     *
	     * @returns {boolean} Returns a boolean if this Page has a navbar or not.
	     */
	    ViewController.prototype.hasNavbar = function () {
	        return !!this.getNavbar();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.navbarRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getElementRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.titleRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getTitleRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.navbarItemRefs = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getItemRefs();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.backBtnRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getBackButtonRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.backBtnTextRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getBackButtonTextRef();
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.navbarBgRef = function () {
	        var navbar = this.getNavbar();
	        return navbar && navbar.getBackgroundRef();
	    };
	    /**
	     * You can change the text of the back button on a view-by-view basis.
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(viewCtrl: ViewController){
	     *    this.viewCtrl = viewCtrl
	     *  }
	     *  onPageWillEnter() {
	     *    this.viewCtrl.setBackButtonText('Previous');
	     *  }
	     * }
	     * ```
	     * Make sure you use the view events when calling this method, otherwise the back-button will not have been created
	     *
	     * @param {string} backButtonText Set the back button text.
	     */
	    ViewController.prototype.setBackButtonText = function (val) {
	        var navbar = this.getNavbar();
	        if (navbar) {
	            navbar.setBackButtonText(val);
	        }
	    };
	    /**
	     * Set if the back button for the current view is visible or not. Be sure to wrap this in `onPageWillEnter` to make sure the has been compleltly rendered.
	     * @param {boolean} Set if this Page's back button should show or not.
	     */
	    ViewController.prototype.showBackButton = function (shouldShow) {
	        var navbar = this.getNavbar();
	        if (navbar) {
	            navbar.hideBackButton = !shouldShow;
	        }
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.isLoaded = function () {
	        return this._loaded;
	    };
	    /**
	     * @private
	     * The view has loaded. This event only happens once per view being
	     * created. If a view leaves but is cached, then this will not
	     * fire again on a subsequent viewing. This method is a good place
	     * to put your setup code for the view; however, it is not the
	     * recommended method to use when a view becomes active.
	     */
	    ViewController.prototype.loaded = function () {
	        this._loaded = true;
	        ctrlFn(this, 'onPageLoaded');
	    };
	    /**
	     * @private
	     * The view is about to enter and become the active view.
	     */
	    ViewController.prototype.willEnter = function () {
	        ctrlFn(this, 'onPageWillEnter');
	    };
	    /**
	     * @private
	     * The view has fully entered and is now the active view. This
	     * will fire, whether it was the first load or loaded from the cache.
	     */
	    ViewController.prototype.didEnter = function () {
	        var navbar = this.getNavbar();
	        navbar && navbar.didEnter();
	        ctrlFn(this, 'onPageDidEnter');
	    };
	    /**
	     * @private
	     * The view has is about to leave and no longer be the active view.
	     */
	    ViewController.prototype.willLeave = function () {
	        ctrlFn(this, 'onPageWillLeave');
	    };
	    /**
	     * @private
	     * The view has finished leaving and is no longer the active view. This
	     * will fire, whether it is cached or unloaded.
	     */
	    ViewController.prototype.didLeave = function () {
	        ctrlFn(this, 'onPageDidLeave');
	    };
	    /**
	     * @private
	     * The view is about to be destroyed and have its elements removed.
	     */
	    ViewController.prototype.willUnload = function () {
	        ctrlFn(this, 'onPageWillUnload');
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.addDestroy = function (destroyFn) {
	        this._destroys.push(destroyFn);
	    };
	    /**
	     * @private
	     */
	    ViewController.prototype.destroy = function () {
	        ctrlFn(this, 'onPageDidUnload');
	        for (var i = 0; i < this._destroys.length; i++) {
	            this._destroys[i]();
	        }
	        this._destroys = [];
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ViewController.prototype, "_emitter", void 0);
	    return ViewController;
	})();
	exports.ViewController = ViewController;
	function ctrlFn(viewCtrl, fnName) {
	    if (viewCtrl.instance && viewCtrl.instance[fnName]) {
	        try {
	            viewCtrl.instance[fnName]();
	        }
	        catch (e) {
	            void 0;
	        }
	    }
	}


/***/ },
/* 297 */
/***/ function(module, exports) {

	/**
	 * @name NavParams
	 * @description
	 * NavParams are an object that exists on a page and can contain data for that particular view.
	 * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible
	 * option with a simple `get` method.
	 *
	 * @usage
	 * ```ts
	 * export class MyClass{
	 *  constructor(params: NavParams){
	 *    this.params = params;
	 *    // userParams is an object we have in our nav-parameters
	 *    this.params.get('userParams');
	 *  }
	 * }
	 * ```
	 * @demo /docs/v2/demos/nav-params/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../NavController/ NavController API Docs}
	 * @see {@link ../Nav/ Nav API Docs}
	 * @see {@link ../NavPush/ NavPush API Docs}
	 */
	var NavParams = (function () {
	    /**
	     * @private
	     * @param {TODO} data  TODO
	     */
	    function NavParams(data) {
	        if (data === void 0) { data = {}; }
	        this.data = data;
	    }
	    /**
	     * Get the value of a nav-parameter for the current view
	     *
	     * ```ts
	     * export class MyClass{
	     *  constructor(params: NavParams){
	     *    this.params = params;
	     *    // userParams is an object we have in our nav-parameters
	     *    this.params.get('userParams');
	     *  }
	     * }
	     * ```
	     *
	     *
	     * @param {string} parameter Which param you want to look up
	     */
	    NavParams.prototype.get = function (param) {
	        return this.data[param];
	    };
	    return NavParams;
	})();
	exports.NavParams = NavParams;


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var ion_1 = __webpack_require__(287);
	var icon_1 = __webpack_require__(299);
	var toolbar_1 = __webpack_require__(300);
	var config_1 = __webpack_require__(161);
	var app_1 = __webpack_require__(168);
	var util_1 = __webpack_require__(163);
	var view_controller_1 = __webpack_require__(296);
	var nav_controller_1 = __webpack_require__(302);
	var BackButton = (function (_super) {
	    __extends(BackButton, _super);
	    function BackButton(_nav, elementRef, navbar) {
	        _super.call(this, elementRef);
	        this._nav = _nav;
	        navbar && navbar.setBackButtonRef(elementRef);
	    }
	    BackButton.prototype.goBack = function (ev) {
	        ev.stopPropagation();
	        ev.preventDefault();
	        this._nav && this._nav.pop();
	    };
	    BackButton = __decorate([
	        core_1.Directive({
	            selector: '.back-button',
	            host: {
	                '(click)': 'goBack($event)'
	            }
	        }),
	        __param(0, core_1.Optional()),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Inject(core_1.forwardRef(function () { return Navbar; }))), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController, core_1.ElementRef, Navbar])
	    ], BackButton);
	    return BackButton;
	})(ion_1.Ion);
	var BackButtonText = (function () {
	    function BackButtonText(elementRef, navbar) {
	        navbar.setBackButtonTextRef(elementRef);
	    }
	    BackButtonText = __decorate([
	        core_1.Directive({
	            selector: '.back-button-text'
	        }),
	        __param(1, core_1.Inject(core_1.forwardRef(function () { return Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Navbar])
	    ], BackButtonText);
	    return BackButtonText;
	})();
	var ToolbarBackground = (function () {
	    function ToolbarBackground(elementRef, navbar) {
	        navbar.setBackgroundRef(elementRef);
	    }
	    ToolbarBackground = __decorate([
	        core_1.Directive({
	            selector: '.toolbar-background'
	        }),
	        __param(1, core_1.Inject(core_1.forwardRef(function () { return Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Navbar])
	    ], ToolbarBackground);
	    return ToolbarBackground;
	})();
	/**
	 * @name Navbar
	 * @description
	 * Navbar is a global level toolbar that gets updated every time a page gets
	 * loaded. You can pass the navbar an `ion-title`, any number of buttons, a segment, or a searchbar.
	 *
	 * @usage
	 * ```html
	 * <ion-navbar *navbar>
	 *   <button menuToggle>
	 *     <ion-icon name="menu"></ion-icon>
	 *   </button>
	 *
	 *   <ion-title>
	 *     Page Title
	 *   </ion-title>
	 *
	 *   <ion-buttons end>
	 *     <button (click)="openModal()">
	 *       <ion-icon name="options"></ion-icon>
	 *     </button>
	 *   </ion-buttons>
	 * </ion-navbar>
	 * ```
	 *
	 * @demo /docs/v2/demos/navbar/
	 * @see {@link ../../toolbar/Toolbar/ Toolbar API Docs}
	 */
	var Navbar = (function (_super) {
	    __extends(Navbar, _super);
	    function Navbar(_app, viewCtrl, elementRef, config, _renderer) {
	        _super.call(this, elementRef);
	        this._app = _app;
	        this._renderer = _renderer;
	        this._hidden = false;
	        this._hideBb = false;
	        viewCtrl && viewCtrl.setNavbar(this);
	        this._bbIcon = config.get('backButtonIcon');
	        this._bbText = config.get('backButtonText');
	    }
	    Object.defineProperty(Navbar.prototype, "hideBackButton", {
	        /**
	         * @input {boolean} whether the back button should be shown or not
	         */
	        get: function () {
	            return this._hideBb;
	        },
	        set: function (val) {
	            this._hideBb = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackButtonText = function (text) {
	        this._bbText = text;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.getBackButtonRef = function () {
	        return this._bbRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackButtonRef = function (backButtonElementRef) {
	        this._bbRef = backButtonElementRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.getBackButtonTextRef = function () {
	        return this._bbtRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackButtonTextRef = function (backButtonTextElementRef) {
	        this._bbtRef = backButtonTextElementRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setBackgroundRef = function (backgrouneElementRef) {
	        this._bgRef = backgrouneElementRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.getBackgroundRef = function () {
	        return this._bgRef;
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.didEnter = function () {
	        try {
	            this._app.setTitle(this.getTitleText());
	        }
	        catch (e) {
	            void 0;
	        }
	    };
	    /**
	     * @private
	     */
	    Navbar.prototype.setHidden = function (isHidden) {
	        // used to display none/block the navbar
	        this._hidden = isHidden;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Navbar.prototype, "hideBackButton", null);
	    Navbar = __decorate([
	        core_1.Component({
	            selector: 'ion-navbar',
	            template: '<div class="toolbar-background"></div>' +
	                '<button class="back-button bar-button bar-button-default" [hidden]="_hideBb">' +
	                '<span class="button-inner">' +
	                '<ion-icon class="back-button-icon" [name]="_bbIcon"></ion-icon>' +
	                '<span class="back-button-text">' +
	                '<span class="back-default">{{_bbText}}</span>' +
	                '</span>' +
	                '</span>' +
	                '<ion-button-effect></ion-button-effect>' +
	                '</button>' +
	                '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' +
	                '<ng-content select="ion-buttons[start]"></ng-content>' +
	                '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' +
	                '<div class="toolbar-content">' +
	                '<ng-content></ng-content>' +
	                '</div>',
	            host: {
	                '[hidden]': '_hidden',
	                'class': 'toolbar'
	            },
	            directives: [BackButton, BackButtonText, icon_1.Icon, ToolbarBackground]
	        }),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [app_1.IonicApp, view_controller_1.ViewController, core_1.ElementRef, config_1.Config, core_1.Renderer])
	    ], Navbar);
	    return Navbar;
	})(toolbar_1.ToolbarBase);
	exports.Navbar = Navbar;
	/**
	 * @private
	 * Used to find and register headers in a view, and this directive's
	 * content will be moved up to the common navbar location, and created
	 * using the same context as the view's content area.
	*/
	var NavbarTemplate = (function () {
	    function NavbarTemplate(viewContainerRef, templateRef, viewCtrl) {
	        if (viewCtrl) {
	            viewCtrl.setNavbarTemplateRef(templateRef);
	            viewCtrl.setNavbarViewRef(viewContainerRef);
	        }
	    }
	    NavbarTemplate = __decorate([
	        core_1.Directive({
	            selector: 'template[navbar]'
	        }),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, view_controller_1.ViewController])
	    ], NavbarTemplate);
	    return NavbarTemplate;
	})();
	exports.NavbarTemplate = NavbarTemplate;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var config_1 = __webpack_require__(161);
	/**
	 * @name Icon
	 * @description
	 * Icons can be used on their own, or inside of a number of Ionic components.
	 * For a full list of available icons, check out the
	 * [Ionicons resource docs](../../../../resources/ionicons).
	 *
	 * One feature of Ionicons in Ionic is when icon names are set, the actual icon
	 * which is rendered can change slightly depending on the mode the app is
	 * running from. For example, by setting the icon name of `alarm`, on iOS the
	 * icon will automatically apply `ios-alarm`, and on Material Design it will
	 * automatically apply `md-alarm`. This allows the developer to write the
	 * markup once while Ionic applies the appropriate icon based on the mode.
	 *
	 * @usage
	 * ```html
	 * <!-- automatically uses the correct "star" icon depending on the mode -->
	 * <ion-icon name="star"></ion-icon>
	 *
	 * <!-- explicity set the icon for each mode -->
	 * <ion-icon ios="ios-home" md="md-home"></ion-icon>
	 *
	 * <!-- always use the same icon, no matter what the mode -->
	 * <ion-icon name="ios-clock"></ion-icon>
	 * <ion-icon name="logo-twitter"></ion-icon>
	 * ```
	 *
	 * @demo /docs/v2/demos/icon/
	 * @see {@link /docs/v2/components#icons Icon Component Docs}
	 *
	 */
	var Icon = (function () {
	    function Icon(config, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._name = '';
	        this._ios = '';
	        this._md = '';
	        this._css = '';
	        this.mode = config.get('iconMode');
	        if (_elementRef.nativeElement.tagName === 'ICON') {
	            // deprecated warning
	            void 0;
	            void 0;
	            void 0;
	        }
	    }
	    /**
	     * @private
	     */
	    Icon.prototype.ngOnDestroy = function () {
	        if (this._css) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
	        }
	    };
	    Object.defineProperty(Icon.prototype, "name", {
	        /**
	         * @input {string} Icon to use. Will load the appropriate icon for each mode
	         */
	        get: function () {
	            return this._name;
	        },
	        set: function (val) {
	            if (!(/^md-|^ios-|^logo-/.test(val))) {
	                // this does not have one of the defaults
	                // so lets auto add in the mode prefix for them
	                val = this.mode + '-' + val;
	            }
	            this._name = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Icon.prototype, "ios", {
	        /**
	         * @input {string} Explicitly set the icon to use on iOS
	         */
	        get: function () {
	            return this._ios;
	        },
	        set: function (val) {
	            this._ios = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Icon.prototype, "md", {
	        /**
	         * @input {string} Explicitly set the icon to use on MD
	         */
	        get: function () {
	            return this._md;
	        },
	        set: function (val) {
	            this._md = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Icon.prototype, "isActive", {
	        /**
	         * @input {bool} Whether or not the icon has an "active" appearance. On iOS an active icon is filled in or full appearance, and an inactive icon on iOS will use an outlined version of the icon same icon. Material Design icons do not change appearance depending if they're active or not. The `isActive` property is largely used by the tabbar.
	         */
	        get: function () {
	            return (this._isActive === undefined || this._isActive === true || this._isActive === 'true');
	        },
	        set: function (val) {
	            this._isActive = val;
	            this.update();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Icon.prototype.update = function () {
	        var css = 'ion-';
	        if (this._ios && this.mode === 'ios') {
	            css += this._ios;
	        }
	        else if (this._md && this.mode === 'md') {
	            css += this._md;
	        }
	        else {
	            css += this._name;
	        }
	        if (this.mode == 'ios' && !this.isActive) {
	            css += '-outline';
	        }
	        if (this._css !== css) {
	            if (this._css) {
	                this._renderer.setElementClass(this._elementRef.nativeElement, this._css, false);
	            }
	            this._css = css;
	            this._renderer.setElementClass(this._elementRef.nativeElement, css, true);
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', css.replace('ion-', '').replace('ios-', '').replace('md-', '').replace('-', ' '));
	        }
	    };
	    /**
	     * @private
	     * @param {string} add class name
	     */
	    Icon.prototype.addClass = function (className) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Icon.prototype, "name", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Icon.prototype, "ios", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Icon.prototype, "md", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Icon.prototype, "isActive", null);
	    Icon = __decorate([
	        core_1.Directive({
	            selector: 'ion-icon,icon',
	            host: {
	                'role': 'img'
	            }
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, core_1.Renderer])
	    ], Icon);
	    return Icon;
	})();
	exports.Icon = Icon;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var ion_1 = __webpack_require__(287);
	var navbar_1 = __webpack_require__(298);
	var button_1 = __webpack_require__(301);
	/**
	 * @private
	 */
	var ToolbarBase = (function (_super) {
	    __extends(ToolbarBase, _super);
	    function ToolbarBase(elementRef) {
	        _super.call(this, elementRef);
	        this.itemRefs = [];
	        this.titleRef = null;
	    }
	    /**
	     * @private
	     */
	    ToolbarBase.prototype.setTitleCmp = function (titleCmp) {
	        this.titleCmp = titleCmp;
	    };
	    /**
	     * @private
	     * Returns the toolbar title text if it exists or an empty string
	     */
	    ToolbarBase.prototype.getTitleText = function () {
	        return (this.titleCmp && this.titleCmp.getTitleText()) || '';
	    };
	    /**
	     * @private
	     */
	    ToolbarBase.prototype.getTitleRef = function () {
	        return this.titleCmp && this.titleCmp.elementRef;
	    };
	    /**
	     * @private
	     * A toolbar items include the left and right side `ion-buttons`,
	     * and every `menu-toggle`. It does not include the `ion-title`.
	     * @returns {TODO} Array of this toolbar's item ElementRefs.
	     */
	    ToolbarBase.prototype.getItemRefs = function () {
	        return this.itemRefs;
	    };
	    /**
	     * @private
	     */
	    ToolbarBase.prototype.addItemRef = function (itemElementRef) {
	        this.itemRefs.push(itemElementRef);
	    };
	    return ToolbarBase;
	})(ion_1.Ion);
	exports.ToolbarBase = ToolbarBase;
	/**
	 * @name Toolbar
	 * @description
	 * The toolbar is generic bar that sits above or below content.
	 * Unlike an `Navbar`, `Toolbar` can be used for a subheader as well.
	 * Since it's based on flexbox, you can place the toolbar where you
	 * need it and flexbox will handle everything else. Toolbars will automatically
	 * assume they should be placed before an `ion-content`, so to specify that you want it
	 * below, you can add the property `position="bottom"`. This will change the flex order
	 * property.
	 *
	 * @usage
	 * ```html
	 * <ion-toolbar>
	 *   <ion-title>My Toolbar Title</ion-title>
	 * </ion-toolbar>
	 *
	 * <ion-toolbar>
	 *   <ion-title>I'm a subheader</ion-title>
	 * </ion-toolbar>
	 *
	 *  <ion-content></ion-content>
	 *
	 * <ion-toolbar position="bottom">
	 *   <ion-title>I'm a subfooter</ion-title>
	 * </ion-toolbar>
	 *
	 * <ion-toolbar position="bottom">
	 *   <ion-title>I'm a footer</ion-title>
	 * </ion-toolbar>
	 *
	 *  ```
	 *
	 * @property {any} [position] - set position of the toolbar, top or bottom. If not set, defautls to top.
	 * @demo /docs/v2/demos/toolbar/
	 * @see {@link ../../navbar/Navbar/ Navbar API Docs}
	 */
	var Toolbar = (function (_super) {
	    __extends(Toolbar, _super);
	    function Toolbar(elementRef) {
	        _super.call(this, elementRef);
	    }
	    Toolbar = __decorate([
	        core_1.Component({
	            selector: 'ion-toolbar',
	            template: '<div class="toolbar-background"></div>' +
	                '<ng-content select="[menuToggle],ion-buttons[left]"></ng-content>' +
	                '<ng-content select="ion-buttons[start]"></ng-content>' +
	                '<ng-content select="ion-buttons[end],ion-buttons[right]"></ng-content>' +
	                '<div class="toolbar-content">' +
	                '<ng-content></ng-content>' +
	                '</div>',
	            host: {
	                'class': 'toolbar'
	            }
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Toolbar);
	    return Toolbar;
	})(ToolbarBase);
	exports.Toolbar = Toolbar;
	/**
	 * @name Title
	 * @description
	 * `ion-title` is a component that sets the title of the `Toolbar` or `Navbar`
	 * @usage
	 * ```html
	 * <ion-navbar *navbar>
	 *    <ion-title>Tab 1</ion-title>
	 * </ion-navbar>
	 *
	 *<!-- or if you wanted to create a subheader title-->
	 * <ion-navbar *navbar>
	 *    <ion-title>Tab 1</ion-title>
	 * </ion-navbar>
	 * <ion-toolbar>
	 *   <ion-title>SubHeader</ion-title>
	 * </ion-toolbar>
	 *  ```
	 * @demo /docs/v2/demos/title/
	 */
	var ToolbarTitle = (function (_super) {
	    __extends(ToolbarTitle, _super);
	    function ToolbarTitle(elementRef, toolbar, navbar) {
	        _super.call(this, elementRef);
	        toolbar && toolbar.setTitleCmp(this);
	        navbar && navbar.setTitleCmp(this);
	    }
	    /**
	     * @private
	     */
	    ToolbarTitle.prototype.getTitleText = function () {
	        return this.getNativeElement().textContent;
	    };
	    ToolbarTitle = __decorate([
	        core_1.Component({
	            selector: 'ion-title',
	            template: '<div class="toolbar-title">' +
	                '<ng-content></ng-content>' +
	                '</div>'
	        }),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Inject(core_1.forwardRef(function () { return navbar_1.Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Toolbar, navbar_1.Navbar])
	    ], ToolbarTitle);
	    return ToolbarTitle;
	})(ion_1.Ion);
	exports.ToolbarTitle = ToolbarTitle;
	/**
	 * @private
	 */
	var ToolbarItem = (function () {
	    function ToolbarItem(elementRef, toolbar, navbar) {
	        toolbar && toolbar.addItemRef(elementRef);
	        navbar && navbar.addItemRef(elementRef);
	        this.inToolbar = !!(toolbar || navbar);
	        // Deprecation warning
	        if (elementRef.nativeElement.tagName === 'ION-NAV-ITEMS') {
	            if (elementRef.nativeElement.hasAttribute('primary')) {
	                void 0;
	                elementRef.nativeElement.setAttribute('start', '');
	            }
	            else if (elementRef.nativeElement.hasAttribute('secondary')) {
	                void 0;
	                elementRef.nativeElement.setAttribute('end', '');
	            }
	            else {
	                void 0;
	            }
	        }
	    }
	    Object.defineProperty(ToolbarItem.prototype, "_buttons", {
	        set: function (buttons) {
	            if (this.inToolbar) {
	                button_1.Button.setRoles(buttons, 'bar-button');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.ContentChildren(button_1.Button), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], ToolbarItem.prototype, "_buttons", null);
	    ToolbarItem = __decorate([
	        core_1.Directive({
	            selector: 'ion-buttons,[menuToggle],ion-nav-items'
	        }),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()),
	        __param(2, core_1.Inject(core_1.forwardRef(function () { return navbar_1.Navbar; }))), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Toolbar, navbar_1.Navbar])
	    ], ToolbarItem);
	    return ToolbarItem;
	})();
	exports.ToolbarItem = ToolbarItem;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var config_1 = __webpack_require__(161);
	var util_1 = __webpack_require__(163);
	/**
	  * @name Button
	  * @module ionic
	  *
	  * @description
	  * Buttons are simple components in Ionic. They can consist of text and icons
	  * and be enhanced by a wide range of attributes.
	  *
	  * @property [outline] - A transparent button with a border.
	  * @property [clear] - A transparent button without a border.
	  * @property [round] - A button with rounded corners.
	  * @property [block] - A button that fills its parent container with a border-radius.
	  * @property [full] - A button that fills its parent container without a border-radius or borders on the left/right.
	  * @property [small] - A button with size small.
	  * @property [large] - A button with size large.
	  * @property [disabled] - A disabled button.
	  * @property [fab] - A floating action button.
	  * @property [fab-left] - Position a fab button to the left.
	  * @property [fab-right] - Position a fab button to the right.
	  * @property [fab-center] - Position a fab button towards the center.
	  * @property [fab-top] - Position a fab button towards the top.
	  * @property [fab-bottom] - Position a fab button towards the bottom.
	  * @property [color] - Dynamically set which color attribute this button should use.
	  *
	  * @demo /docs/v2/demos/button/
	  * @see {@link /docs/v2/components#buttons Button Component Docs}
	 */
	var Button = (function () {
	    function Button(config, _elementRef, _renderer, ionItem) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._role = 'button'; // bar-button/item-button
	        this._size = null; // large/small/default
	        this._style = 'default'; // outline/clear/solid
	        this._shape = null; // round/fab
	        this._display = null; // block/full
	        this._colors = []; // primary/secondary
	        this._icon = null; // left/right/only
	        this._disabled = false; // disabled
	        this.isItem = (ionItem === '');
	        var element = _elementRef.nativeElement;
	        if (config.get('hoverCSS') === false) {
	            _renderer.setElementClass(_elementRef.nativeElement, 'disable-hover', true);
	        }
	        if (element.hasAttribute('ion-item')) {
	            // no need to put on these classes for an ion-item
	            this._role = null;
	            return;
	        }
	        if (element.hasAttribute('disabled')) {
	            this._disabled = true;
	        }
	        this._readAttrs(element);
	    }
	    Object.defineProperty(Button.prototype, "large", {
	        /**
	         * @input {string} Large button.
	         */
	        set: function (val) {
	            this._attr('_size', 'large', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "small", {
	        /**
	         * @input {string} Small button.
	         */
	        set: function (val) {
	            this._attr('_size', 'small', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "default", {
	        /**
	         * @input {string} Default button.
	         */
	        set: function (val) {
	            this._attr('_size', 'default', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "outline", {
	        /**
	         * @input {string} A transparent button with a border.
	         */
	        set: function (val) {
	            this._attr('_style', 'outline', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "clear", {
	        /**
	         * @input {string} A transparent button without a border.
	         */
	        set: function (val) {
	            this._attr('_style', 'clear', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "solid", {
	        /**
	         * @input {string} Force a solid button. Useful for buttons within an item.
	         */
	        set: function (val) {
	            this._attr('_style', 'solid', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "round", {
	        /**
	         * @input {string} A button with rounded corners.
	         */
	        set: function (val) {
	            this._attr('_shape', 'round', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "block", {
	        /**
	         * @input {string} A button that fills its parent container with a border-radius.
	         */
	        set: function (val) {
	            this._attr('_display', 'block', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Button.prototype, "full", {
	        /**
	         * @input {string} A button that fills its parent container without a border-radius or borders on the left/right.
	         */
	        set: function (val) {
	            this._attr('_display', 'full', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Button.prototype._attr = function (type, attrName, attrValue) {
	        this._setClass(this[type], false);
	        if (util_1.isTrueProperty(attrValue)) {
	            this[type] = attrName;
	            this._setClass(attrName, true);
	        }
	        else {
	            this[type] = null;
	        }
	    };
	    Object.defineProperty(Button.prototype, "color", {
	        /**
	         * @input {string} Dynamically set which color attribute this button should use.
	         */
	        set: function (val) {
	            this._assignCss(false);
	            this._colors = [val];
	            this._assignCss(true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Button.prototype.ngAfterContentInit = function () {
	        this._init = true;
	        this._readIcon(this._elementRef.nativeElement);
	        this._assignCss(true);
	    };
	    /**
	     * @private
	     */
	    Button.prototype.addClass = function (className) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
	    };
	    /**
	     * @private
	     */
	    Button.prototype.setRole = function (val) {
	        this._role = val;
	    };
	    /**
	     * @private
	     */
	    Button.prototype._readIcon = function (element) {
	        // figure out if and where the icon lives in the button
	        var childNodes = element.childNodes;
	        if (childNodes.length > 0) {
	            childNodes = childNodes[0].childNodes;
	        }
	        var childNode;
	        var nodes = [];
	        for (var i = 0, l = childNodes.length; i < l; i++) {
	            childNode = childNodes[i];
	            if (childNode.nodeType === 3) {
	                // text node
	                if (childNode.textContent.trim() !== '') {
	                    nodes.push(TEXT);
	                }
	            }
	            else if (childNode.nodeType === 1) {
	                if (childNode.nodeName === 'ION-ICON') {
	                    // icon element node
	                    nodes.push(ICON);
	                }
	                else {
	                    // element other than an <ion-icon>
	                    nodes.push(TEXT);
	                }
	            }
	        }
	        if (nodes.length > 1) {
	            if (nodes[0] === ICON && nodes[1] === TEXT) {
	                this._icon = 'icon-left';
	            }
	            else if (nodes[0] === TEXT && nodes[1] === ICON) {
	                this._icon = 'icon-right';
	            }
	        }
	        else if (nodes.length === 1 && nodes[0] === ICON) {
	            this._icon = 'icon-only';
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._readAttrs = function (element) {
	        var elementAttrs = element.attributes;
	        var attrName;
	        for (var i = 0, l = elementAttrs.length; i < l; i++) {
	            if (elementAttrs[i].value !== '')
	                continue;
	            attrName = elementAttrs[i].name;
	            if (BUTTON_STYLE_ATTRS.indexOf(attrName) > -1) {
	                this._style = attrName;
	            }
	            else if (BUTTON_DISPLAY_ATTRS.indexOf(attrName) > -1) {
	                this._display = attrName;
	            }
	            else if (BUTTON_SHAPE_ATTRS.indexOf(attrName) > -1) {
	                this._shape = attrName;
	            }
	            else if (BUTTON_SIZE_ATTRS.indexOf(attrName) > -1) {
	                this._size = attrName;
	            }
	            else if (!(IGNORE_ATTRS.test(attrName))) {
	                this._colors.push(attrName);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._assignCss = function (assignCssClass) {
	        var _this = this;
	        var role = this._role;
	        if (role) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, role, assignCssClass); // button
	            this._setClass(this._style, assignCssClass); // button-clear
	            this._setClass(this._shape, assignCssClass); // button-round
	            this._setClass(this._display, assignCssClass); // button-full
	            this._setClass(this._size, assignCssClass); // button-small
	            this._setClass(this._icon, assignCssClass); // button-icon-left
	            var colorStyle = (this._style !== 'default' ? this._style + '-' : '');
	            this._colors.forEach(function (colorName) {
	                _this._setClass(colorStyle + colorName, assignCssClass); // button-secondary, button-clear-secondary
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    Button.prototype._setClass = function (type, assignCssClass) {
	        if (type && this._init) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, this._role + '-' + type, assignCssClass);
	        }
	    };
	    /**
	     * @private
	     */
	    Button.setRoles = function (contentButtonChildren, role) {
	        var buttons = contentButtonChildren.toArray();
	        buttons.forEach(function (button) {
	            button.setRole(role);
	        });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "large", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "small", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "default", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "outline", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "clear", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "solid", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "round", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "block", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], Button.prototype, "full", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String), 
	        __metadata('design:paramtypes', [String])
	    ], Button.prototype, "color", null);
	    Button = __decorate([
	        core_1.Component({
	            selector: 'button:not([ion-item]),[button]',
	            template: '<span class="button-inner">' +
	                '<ng-content></ng-content>' +
	                '</span>' +
	                '<ion-button-effect></ion-button-effect>'
	        }),
	        __param(3, core_1.Attribute('ion-item')), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, core_1.Renderer, String])
	    ], Button);
	    return Button;
	})();
	exports.Button = Button;
	var BUTTON_SIZE_ATTRS = ['large', 'small', 'default'];
	var BUTTON_STYLE_ATTRS = ['clear', 'outline', 'solid'];
	var BUTTON_SHAPE_ATTRS = ['round', 'fab'];
	var BUTTON_DISPLAY_ATTRS = ['block', 'full'];
	var IGNORE_ATTRS = /_ng|button|left|right/;
	var TEXT = 1;
	var ICON = 2;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var instrumentation_1 = __webpack_require__(303);
	var ion_1 = __webpack_require__(287);
	var nav_params_1 = __webpack_require__(297);
	var util_1 = __webpack_require__(163);
	var swipe_back_1 = __webpack_require__(304);
	var transition_1 = __webpack_require__(305);
	var view_controller_1 = __webpack_require__(296);
	/**
	 * @name NavController
	 * @description
	 * _For examples on the basic usage of NavController, check out the
	 * [Navigation section](../../../../components/#navigation) of the Component
	 * docs._
	 *
	 * NavController is the base class for navigation controller components like
	 * [`Nav`](../Nav/) and [`Tab`](../../Tabs/Tab/). You use navigation controllers
	 * to navigate to [pages](#creating_pages) in your app. At a basic level, a
	 * navigation controller is an array of pages representing a particular history
	 * (of a Tab for example). This array can be manipulated to navigate throughout
	 * an app by pushing and popping pages or inserting and removing them at
	 * arbitrary locations in history.
	 *
	 * The current page is the last one in the array, or the top of the stack if we
	 * think of it that way.  [Pushing](#push) a new page onto the top of the
	 * navigation stack causes the new page to be animated in, while [popping](#pop)
	 * the current page will navigate to the previous page in the stack.
	 *
	 * Unless you are using a directive like [NavPush](../NavPush/), or need a
	 * specific NavController, most times you will inject and use a reference to the
	 * nearest NavController to manipulate the navigation stack.
	 *
	 * <h3 id="injecting_nav_controller">Injecting NavController</h3>
	 * Injecting NavController will always get you an instance of the nearest
	 * NavController, regardless of whether it is a Tab or a Nav.
	 *
	 * Behind the scenes, when Ionic instantiates a new NavController, it creates an
	 * injector with NavController bound to that instance (usually either a Nav or
	 * Tab) and adds the injector to its own providers.  For more information on
	 * providers and dependency injection, see [Providers and DI]().
	 *
	 * Instead, you can inject NavController and know that it is the correct
	 * navigation controller for most situations (for more advanced situations, see
	 * [Menu](../../Menu/Menu/) and [Tab](../../Tab/Tab/)).
	 *
	 * ```ts
	 *  class MyComponent {
	 *    constructor(nav: NavController) {
	 *      this.nav = nav;
	 *    }
	 *  }
	 * ```
	 *
	 * <h2 id="creating_pages">Page creation</h2>
	 * _For more information on the `@Page` decorator see the [@Page API
	 * reference](../../../decorators/Page/)._
	 *
	 * Pages are created when they are added to the navigation stack.  For methods
	 * like [push()](#push), the NavController takes any component class that is
	 * decorated with `@Page` as its first argument.  The NavController then
	 * compiles that component, adds it to the app and animates it into view.
	 *
	 * By default, pages are cached and left in the DOM if they are navigated away
	 * from but still in the navigation stack (the exiting page on a `push()` for
	 * example).  They are destroyed when removed from the navigation stack (on
	 * [pop()](#pop) or [setRoot()](#setRoot)).
	 *
	 *
	 * <h2 id="Lifecycle">Lifecycle events</h2>
	 * Lifecycle events are fired during various stages of navigation.  They can be
	 * defined in any `@Page` decorated component class.
	 *
	 * ```ts
	 * @Page({
	 *   template: 'Hello World'
	 * })
	 * class HelloWorld {
	 *   onPageLoaded() {
	 *     console.log("I'm alive!");
	 *   }
	 *   onPageWillLeave() {
	 *     console.log("Looks like I'm about to leave :(");
	 *   }
	 * }
	 * ```
	 *
	 *
	 *
	 * - `onPageLoaded` - Runs when the page has loaded. This event only happens once per page being created and added to the DOM. If a page leaves but is cached, then this event will not fire again on a subsequent viewing. The `onPageLoaded` event is good place to put your setup code for the page.
	 * - `onPageWillEnter` - Runs when the page is about to enter and become the active page.
	 * - `onPageDidEnter` - Runs when the page has fully entered and is now the active page. This event will fire, whether it was the first load or a cached page.
	 * - `onPageWillLeave` - Runs when the page is about to leave and no longer be the active page.
	 * - `onPageDidLeave` - Runs when the page has finished leaving and is no longer the active page.
	 * - `onPageWillUnload` - Runs when the page is about to be destroyed and have its elements removed.
	 * - `onPageDidUnload` - Runs after the page has been destroyed and its elements have been removed.
	 *
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 */
	var NavController = (function (_super) {
	    __extends(NavController, _super);
	    function NavController(parent, _app, config, _keyboard, elementRef, _anchorName, _compiler, _viewManager, _zone, _renderer) {
	        _super.call(this, elementRef);
	        this._app = _app;
	        this._keyboard = _keyboard;
	        this._anchorName = _anchorName;
	        this._compiler = _compiler;
	        this._viewManager = _viewManager;
	        this._zone = _zone;
	        this._renderer = _renderer;
	        this._transIds = 0;
	        this._init = false;
	        this._ids = -1;
	        this._trnsTime = 0;
	        this._views = [];
	        this.parent = parent;
	        this.config = config;
	        this._trnsDelay = config.get('pageTransitionDelay');
	        this._sbEnabled = config.getBoolean('swipeBackEnabled') || false;
	        this._sbThreshold = config.get('swipeBackThreshold') || 40;
	        this.id = (++ctrlIds).toString();
	        // build a new injector for child ViewControllers to use
	        this.providers = core_1.Injector.resolve([
	            core_1.provide(NavController, { useValue: this })
	        ]);
	    }
	    /**
	     * Set the root for the current navigation stack
	     * @param {Type} page  The name of the component you want to push on the navigation stack
	     * @param {object} [params={}] Any nav-params you want to pass along to the next view
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     * @returns {Promise} Returns a promise when done
	     */
	    NavController.prototype.setRoot = function (page, params, opts) {
	        return this.setPages([{ page: page, params: params }], opts);
	    };
	    /**
	     * You can set the views of the current navigation stack and navigate to the last view past
	     *
	     *
	     *```typescript
	     * import {Page, NavController} from 'ionic-angular'
	     * import {Detail} from '../detail/detail'
	     * import {Info} from '../info/info'
	     *
	     *  export class Home {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    setPages() {
	     *      this.nav.setPages([ {page: List}, {page: Detail}, {page:Info} ]);
	     *    }
	     *  }
	     *```
	     *
	     *
	     *In this example, we're giving the current nav stack an array of pages. Then the navigation stack will navigate to the last view in the array and remove the orignal view you came from.
	     *
	     * By default, animations are disabled, but they can be enabled by passing options to the navigation controller
	     *
	     *
	     *```typescript
	     * import {Page, NavController} from 'ionic-angular'
	     * import {Detail} from '../detail/detail'
	     *
	     *  export class Home {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    setPages() {
	     *      this.nav.setPages([ {page: List}, {page: Detail} ], {
	     *        animate: true
	     *      });
	     *    }
	     *  }
	     *```
	     *
	     *
	     *You can also pass any navigation params to the individual pages in the array.
	     *
	     *
	     *```typescript
	     * import {Page, NavController} from 'ionic-angular';
	     * import {Info} from '../info/info';
	     * import {List} from '../list/list';
	     * import {Detail} from '../detail/detail';
	     *
	     *  export class Home {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    setPages() {
	     *      this.nav.setPages([{
	     *        page: Info
	     *      }, {
	     *        page: List,
	     *        params: {tags: 'css'}
	     *      }, {
	     *        page: Detail,
	     *        params: {id: 325}
	     *      }]);
	     *    }
	     *  }
	     *```
	     *
	     * @param {array<Type>} pages  An arry of page components and their params to load in the stack
	     * @param {object} [opts={}] Any options you want to use pass
	     * @returns {Promise} Returns a promise when the pages are set
	     */
	    NavController.prototype.setPages = function (pages, opts) {
	        if (!pages || !pages.length) {
	            return Promise.resolve(false);
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // deprecated warning
	        pages.forEach(function (pg) {
	            if (pg['componentType']) {
	                pg.page = pg['componentType'];
	                void 0;
	            }
	            else if (!pg['page']) {
	                void 0;
	            }
	        });
	        // remove existing views
	        var leavingView = this._remove(0, this._views.length);
	        // create view controllers out of the pages and insert the new views
	        var views = pages.map(function (p) { return new view_controller_1.ViewController(p.page, p.params); });
	        var enteringView = this._insert(0, views);
	        // if animation wasn't set to true then default it to NOT animate
	        if (opts.animate !== true) {
	            opts.animate = false;
	        }
	        // set the nav direction to "back" if it wasn't set
	        opts.direction = opts.direction || 'back';
	        var resolve;
	        var promise = new Promise(function (res) { resolve = res; });
	        // start the transition, fire resolve when done...
	        this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	            // transition has completed!!
	            resolve(hasCompleted);
	        });
	        return promise;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.setViews = function (components, opts) {
	        void 0;
	        return this.setPages(components, opts);
	    };
	    /**
	     * Push is how we can pass components and navigate to them. We push the component we want to navigate to on to the navigation stack.
	     *
	     * ```typescript
	     * class MyClass{
	     *    constructor(nav:NavController){
	     *      this.nav = nav;
	     *    }
	     *
	     *    pushPage(){
	     *      this.nav.push(SecondView);
	     *    }
	     * }
	     * ```
	     *
	     * We can also pass along parameters to the next view, such as data that we have on the current view. This is a similar concept to to V1 apps with `$stateParams`.
	     *
	     * ```typescript
	     * class MyClass{
	     *    constructor(nav:NavController){
	     *      this.nav = nav;
	     *    }
	     *
	     *    pushPage(user){
	     *      this.nav.push(SecondView,{
	     *       // user is an object we have in our view
	     *       // typically this comes from an ngFor or some array
	     *       // here we can create an object with a property of
	     *       // paramUser, and set it's value to the user object we passed in
	     *       paramUser: user
	     *      });
	     *    }
	     * }
	     * ```
	     *
	     * We'll look at how we can access that data in the `SecondView` in the navParam docs
	     *
	     * We can also pass any options to the transtion from that same method
	     *
	     * ```typescript
	     * class MyClass{
	     *    constructor(nav: NavController){
	     *      this.nav = nav;
	     *    }
	     *
	     *    pushPage(user){
	     *      this.nav.push(SecondView,{
	     *       // user is an object we have in our view
	     *       // typically this comes from an ngFor or some array
	     *       // here we can create an object with a property of
	     *       // paramUser, and set it's value to the user object we passed in
	     *       paramUser: user
	     *      },{
	     *       // here we can configure things like the animations direction or
	     *       // or if the view should animate at all.
	     *       direction: 'back'
	     *      });
	     *    }
	     * }
	     * ```
	     * @param {Type} page  The page component class you want to push on to the navigation stack
	     * @param {object} [params={}] Any nav-params you want to pass along to the next view
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     * @returns {Promise} Returns a promise, which resolves when the transition has completed
	     */
	    NavController.prototype.push = function (page, params, opts) {
	        return this.insertPages(-1, [{ page: page, params: params }], opts);
	    };
	    /**
	     * Present is how we display overlays on top of the content, from within the
	     * root level `NavController`. The `present` method is used by overlays, such
	     * as `ActionSheet`, `Alert`, and `Modal`. The main difference between `push`
	     * and `present`, is that `present` takes a `ViewController` instance, whereas
	     * `push` takes a `Page` component class. Additionally, `present` will place
	     * the overlay in the root NavController's stack.
	     *
	     * ```typescript
	     * class MyClass{
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *
	     *    presentModal() {
	     *      let modal = Modal.create(ProfilePage);
	     *      this.nav.present(modal);
	     *    }
	     * }
	     * ```
	     *
	     * @param {ViewController} enteringView The name of the component you want to push on the navigation stack
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     * @returns {Promise} Returns a promise, which resolves when the transition has completed
	     */
	    NavController.prototype.present = function (enteringView, opts) {
	        var rootNav = this.rootNav;
	        if (rootNav['_tabs']) {
	            // TODO: must have until this goes in
	            // https://github.com/angular/angular/issues/5481
	            void 0;
	            return;
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        enteringView.setNav(rootNav);
	        opts.keyboardClose = false;
	        opts.direction = 'forward';
	        if (!opts.animation) {
	            opts.animation = enteringView.getTransitionName('forward');
	        }
	        enteringView.setLeavingOpts({
	            keyboardClose: false,
	            direction: 'back',
	            animation: enteringView.getTransitionName('back')
	        });
	        // start the transition
	        return rootNav._insertViews(-1, [enteringView], opts);
	    };
	    /**
	     * Inserts a view into the nav stack at the specified index.
	     * This is useful if you need to add a view at any point in your navigation stack
	     *
	     * ```typescript
	     * export class Detail {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    insertPage(){
	     *      this.nav.insert(1, Info);
	     *    }
	     *  }
	     * ```
	     *
	     * This will insert the `Info` page into the second slot of our navigation stack
	     *
	     * @param {number} insertIndex  The index where you want to insert the page
	     * @param {Type} page  The name of the component you want to insert into the nav stack
	     * @param {object} [params={}] Any nav-params you want to pass along to the next page
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     * @returns {Promise} Returns a promise when the page has been inserted into the navigation stack
	     */
	    NavController.prototype.insert = function (insertIndex, page, params, opts) {
	        return this.insertPages(insertIndex, [{ page: page, params: params }], opts);
	    };
	    /**
	     * Inserts multiple pages into the nav stack at the specified index.
	     *
	     * ```typescript
	     * export class Detail {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    insertPages(){
	     *      let pages = [
	     *        { page: Info },
	     *        { page: ProfileList },
	     *        { page: ProfileDetail, params: {userId:5} }
	     *      ];
	     *      this.nav.insertPages(2, pages);
	     *    }
	     *  }
	     * ```
	     *
	     * This will insert each of the pages in the array, starting at the third slot
	     * (second index) of the nav stack. The last page in the array will animate
	     * in and become the active page.
	     *
	     * @param {number} insertIndex  The index where you want to insert the page
	     * @param {array<{page: Type, params=: any}>} insertPages  An array of objects, each with a `page` and optionally `params` property
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     * @returns {Promise} Returns a promise when the pages have been inserted into the navigation stack
	     */
	    NavController.prototype.insertPages = function (insertIndex, insertPages, opts) {
	        var views = insertPages.map(function (p) { return new view_controller_1.ViewController(p.page, p.params); });
	        return this._insertViews(insertIndex, views, opts);
	    };
	    NavController.prototype._insertViews = function (insertIndex, insertViews, opts) {
	        if (!insertViews || !insertViews.length) {
	            return Promise.reject('invalid pages');
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // insert the new page into the stack
	        // returns the newly created entering view
	        var enteringView = this._insert(insertIndex, insertViews);
	        // set the nav direction to "forward" if it wasn't set
	        opts.direction = opts.direction || 'forward';
	        // set which animation it should use if it wasn't set yet
	        if (!opts.animation) {
	            opts.animation = enteringView.getTransitionName(opts.direction);
	        }
	        var resolve;
	        var promise = new Promise(function (res) { resolve = res; });
	        // it's possible that the newly added view doesn't need to
	        // transition in, but was simply inserted somewhere in the stack
	        // go backwards through the stack and find the first active view
	        // which could be active or one ready to enter
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            if (this._views[i].state === STATE_ACTIVE || this._views[i].state === STATE_INIT_ENTER) {
	                // found the view at the end of the stack that's either
	                // already active or it is about to enter
	                if (this._views[i] === enteringView) {
	                    // cool, so the last valid view is also our entering view!!
	                    // this means we should animate that bad boy in so its the active view
	                    // return a promise and resolve when the transition has completed
	                    // get the leaving view which the _insert() already set
	                    var leavingView = this.getByState(STATE_INIT_LEAVE);
	                    // start the transition, fire resolve when done...
	                    this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	                        // transition has completed!!
	                        resolve(hasCompleted);
	                    });
	                    return promise;
	                }
	                break;
	            }
	        }
	        // the page was not pushed onto the end of the stack
	        // but rather inserted somewhere in the middle or beginning
	        // Since there are views after this new one, don't transition in
	        // auto resolve cuz there was is no need for an animation
	        return Promise.resolve(enteringView);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._insert = function (insertIndex, insertViews) {
	        // when this is done, there should only be at most
	        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
	        // there should not be any that are STATE_ACTIVE after this is done
	        var _this = this;
	        // allow -1 to be passed in to auto push it on the end
	        // and clean up the index if it's larger then the size of the stack
	        if (insertIndex < 0 || insertIndex > this._views.length) {
	            insertIndex = this._views.length;
	        }
	        // first see if there's an active view
	        var view = this.getActive();
	        if (view) {
	            // there's an active view, set that it's initialized to leave
	            view.state = STATE_INIT_LEAVE;
	        }
	        else if (view = this.getByState(STATE_INIT_ENTER)) {
	            // oh no, there's already a transition initalized ready to enter!
	            // but it actually hasn't entered yet at all so lets
	            // just keep it in the array, but not render or animate it in
	            view.state = STATE_INACTIVE;
	        }
	        // insert each of the views in the pages array
	        var insertView = null;
	        insertViews.forEach(function (view, i) {
	            insertView = view;
	            // create the new entering view
	            view.setNav(_this);
	            view.state = STATE_INACTIVE;
	            // give this inserted view an ID
	            _this._incId(view);
	            // insert the entering view into the correct index in the stack
	            _this._views.splice(insertIndex + i, 0, view);
	        });
	        if (insertView) {
	            insertView.state = STATE_INIT_ENTER;
	        }
	        return insertView;
	    };
	    /**
	     * If you wanted to navigate back from a current view, you can use the back-button or programatically call `pop()`
	     * Similar to `push()`, you can pass animation options.
	     *
	     * ```typescript
	     * class SecondView{
	     *    constructor(nav:NavController){
	     *      this.nav = nav;
	     *    }
	     *    goBack(){
	     *      this.nav.pop();
	     *    }
	     * }
	     * ```
	     *
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     * @returns {Promise} Returns a promise when the transition is completed
	     */
	    NavController.prototype.pop = function (opts) {
	        // get the index of the active view
	        // which will become the view to be leaving
	        var activeView = this.getByState(STATE_TRANS_ENTER) ||
	            this.getByState(STATE_INIT_ENTER) ||
	            this.getActive();
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // if not set, by default climb up the nav controllers if
	        // there isn't a previous view in this nav controller
	        if (util_1.isBlank(opts.climbNav)) {
	            opts.climbNav = true;
	        }
	        return this.remove(this.indexOf(activeView), 1, opts);
	    };
	    /**
	     * Similar to `pop()`, this method let's you navigate back to the root of the stack, no matter how many views that is
	     * @param {object} [opts={}] Any options you want to use pass to transtion
	     */
	    NavController.prototype.popToRoot = function (opts) {
	        return this.popTo(this.first(), opts);
	    };
	    /**
	     * Pop to a specific view in the history stack
	     * @param {ViewController} view  to pop to
	     * @param {object} [opts={}]  Any options you want to use pass to transtion
	     */
	    NavController.prototype.popTo = function (view, opts) {
	        var startIndex = this.indexOf(view);
	        var activeView = this.getByState(STATE_TRANS_ENTER) ||
	            this.getByState(STATE_INIT_ENTER) ||
	            this.getActive();
	        var removeCount = this.indexOf(activeView) - startIndex;
	        return this.remove(startIndex + 1, removeCount, opts);
	    };
	    /**
	     * Removes a view from the nav stack at the specified index.
	     *
	     * ```typescript
	     * export class Detail {
	     *    constructor(nav: NavController) {
	     *      this.nav = nav;
	     *    }
	     *    removeView(){
	     *      this.nav.remove(1);
	     *    }
	     *  }
	     * ```
	     *
	     * @param {number} [startIndex]  The starting index to remove pages from the stack. Default is the index of the last page.
	     * @param {number} [removeCount]  The number of pages to remove, defaults to remove `1`.
	     * @param {object} [opts={}] Any options you want to use pass to transtion.
	     * @returns {Promise} Returns a promise when the page has been removed.
	     */
	    NavController.prototype.remove = function (startIndex, removeCount, opts) {
	        if (startIndex === void 0) { startIndex = -1; }
	        if (removeCount === void 0) { removeCount = 1; }
	        if (startIndex === -1) {
	            startIndex = this._views.length - 1;
	        }
	        else if (startIndex < 0 || startIndex >= this._views.length) {
	            return Promise.reject("remove index out of range");
	        }
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        // default the direction to "back"
	        opts.direction = opts.direction || 'back';
	        // figure out the states of each view in the stack
	        var leavingView = this._remove(startIndex, removeCount);
	        if (!leavingView) {
	            var forcedActive = this.getByState(STATE_FORCE_ACTIVE);
	            if (forcedActive) {
	                // this scenario happens when a remove is going on
	                // during a transition
	                if (this._trans) {
	                    this._trans.stop();
	                    this._trans.destroy();
	                    this._trans = null;
	                    this._cleanup();
	                }
	                return Promise.resolve(false);
	            }
	        }
	        if (leavingView) {
	            // there is a view ready to leave, meaning that a transition needs
	            // to happen and the previously active view is going to animate out
	            // get the view thats ready to enter
	            var enteringView = this.getByState(STATE_INIT_ENTER);
	            if (!enteringView) {
	                // oh knows! no entering view to go to!
	                // if there is no previous view that would enter in this nav stack
	                // and the option is set to climb up the nav parent looking
	                // for the next nav we could transition to instead
	                if (opts.climbNav) {
	                    var parentNav = this.parent;
	                    while (parentNav) {
	                        if (!parentNav['_tabs']) {
	                            // Tabs can be a parent, but it is not a collection of views
	                            // only we're looking for an actual NavController w/ stack of views
	                            leavingView.willLeave();
	                            return parentNav.pop(opts).then(function (rtnVal) {
	                                leavingView.didLeave();
	                                return rtnVal;
	                            });
	                        }
	                        parentNav = parentNav.parent;
	                    }
	                }
	                // there's no previous view and there's no valid parent nav
	                // to climb to so this shouldn't actually remove the leaving
	                // view because there's nothing that would enter, eww
	                leavingView.state = STATE_ACTIVE;
	                return Promise.resolve(false);
	            }
	            var resolve;
	            var promise = new Promise(function (res) { resolve = res; });
	            if (!opts.animation) {
	                opts.animation = leavingView.getTransitionName(opts.direction);
	            }
	            // start the transition, fire resolve when done...
	            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	                // transition has completed!!
	                resolve(hasCompleted);
	            });
	            return promise;
	        }
	        // no need to transition when the active view isn't being removed
	        // there's still an active view after _remove() figured out states
	        // so this means views that were only removed before the active
	        // view, so auto-resolve since no transition needs to happen
	        return Promise.resolve(false);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._remove = function (startIndex, removeCount) {
	        var _this = this;
	        // when this is done, there should only be at most
	        // 1 STATE_INIT_ENTER and 1 STATE_INIT_LEAVE
	        // there should not be any that are STATE_ACTIVE after this is done
	        var view = null;
	        // loop through each view that is set to be removed
	        for (var i = startIndex, ii = removeCount + startIndex; i < ii; i++) {
	            view = this.getByIndex(i);
	            if (!view)
	                break;
	            if (view.state === STATE_TRANS_ENTER || view.state === STATE_TRANS_LEAVE) {
	                // oh no!!! this view should be removed, but it's
	                // actively transitioning in at the moment!!
	                // since it's viewable right now, let's just set that
	                // it should be removed after the transition
	                view.state = STATE_REMOVE_AFTER_TRANS;
	            }
	            else {
	                // if this view is already leaving then no need to immediately
	                // remove it, otherwise set the remove state
	                // this is useful if the view being removed isn't going to
	                // animate out, but just removed from the stack, no transition
	                view.state = STATE_REMOVE;
	            }
	        }
	        if (view = this.getByState(STATE_INIT_LEAVE)) {
	            // looks like there's already an active leaving view
	            // reassign previous entering view to just be inactive
	            var enteringView = this.getByState(STATE_INIT_ENTER);
	            if (enteringView) {
	                enteringView.state = STATE_INACTIVE;
	            }
	            // from the index of the leaving view, go backwards and
	            // find the first view that is inactive
	            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
	                if (this._views[i].state === STATE_INACTIVE) {
	                    this._views[i].state = STATE_INIT_ENTER;
	                    break;
	                }
	            }
	        }
	        else if (view = this.getByState(STATE_TRANS_LEAVE)) {
	            // an active transition is happening, but a new transition
	            // still needs to happen force this view to be the active one
	            view.state = STATE_FORCE_ACTIVE;
	        }
	        else if (view = this.getByState(STATE_REMOVE)) {
	            // there is no active transition about to happen
	            // find the first view that is supposed to be removed and
	            // set that it is the init leaving view
	            // the first view to be removed, it should init leave
	            view.state = STATE_INIT_LEAVE;
	            view.willUnload();
	            // from the index of the leaving view, go backwards and
	            // find the first view that is inactive so it can be the entering
	            for (var i = this.indexOf(view) - 1; i >= 0; i--) {
	                if (this._views[i].state === STATE_INACTIVE) {
	                    this._views[i].state = STATE_INIT_ENTER;
	                    break;
	                }
	            }
	        }
	        // if there is still an active view, then it wasn't one that was
	        // set to be removed, so there actually won't be a transition at all
	        view = this.getActive();
	        if (view) {
	            // the active view remains untouched, so all the removes
	            // must have happened before it, so really no need for transition
	            view = this.getByState(STATE_INIT_ENTER);
	            if (view) {
	                // if it was going to enter, then just make inactive
	                view.state = STATE_INACTIVE;
	            }
	            view = this.getByState(STATE_INIT_LEAVE);
	            if (view) {
	                // this was going to leave, so just remove it completely
	                view.state = STATE_REMOVE;
	            }
	        }
	        // remove views that have been set to be removed, but not
	        // apart of any transitions that will eventually happen
	        this._views.filter(function (v) { return v.state === STATE_REMOVE; }).forEach(function (view) {
	            view.willLeave();
	            view.didLeave();
	            _this._views.splice(_this.indexOf(view), 1);
	            view.destroy();
	        });
	        return this.getByState(STATE_INIT_LEAVE);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._transition = function (enteringView, leavingView, opts, done) {
	        var _this = this;
	        var transId = ++this._transIds;
	        if (enteringView === leavingView) {
	            // if the entering view and leaving view are the same thing don't continue
	            this._transFinish(transId, enteringView, leavingView, null, false);
	            return done(false);
	        }
	        // lets time this sucker, ready go
	        var wtfScope = instrumentation_1.wtfStartTimeRange('NavController#_transition', (enteringView && enteringView.name));
	        if (util_1.isBlank(opts)) {
	            opts = {};
	        }
	        if (this.config.get('animate') === false || (this._views.length === 1 && !this._init)) {
	            opts.animate = false;
	        }
	        if (!leavingView) {
	            // if no leaving view then create a bogus one
	            leavingView = new view_controller_1.ViewController();
	        }
	        if (!enteringView) {
	            // if no entering view then create a bogus one
	            enteringView = new view_controller_1.ViewController();
	            enteringView.loaded();
	        }
	        /* Async steps to complete a transition
	          1. _render: compile the view and render it in the DOM. Load page if it hasn't loaded already. When done call postRender
	          2. _postRender: Run willEnter/willLeave, then wait a frame (change detection happens), then call beginTransition
	          3. _beforeTrans: Create the transition's animation, play the animation, wait for it to end
	          4. _afterTrans: Run didEnter/didLeave, call _transComplete()
	          5. _transComplete: Cleanup, remove cache views, then call the final callback
	        */
	        // begin the multiple async process of transitioning to the entering view
	        this._render(transId, enteringView, leavingView, opts, function (hasCompleted) {
	            _this._transFinish(transId, enteringView, leavingView, opts.direction, hasCompleted);
	            instrumentation_1.wtfEndTimeRange(wtfScope);
	            done(hasCompleted);
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._render = function (transId, enteringView, leavingView, opts, done) {
	        // compile/load the view into the DOM
	        var _this = this;
	        if (enteringView.state === STATE_INACTIVE) {
	            // this entering view is already set to inactive, so this
	            // transition must be canceled, so don't continue
	            return done();
	        }
	        enteringView.state = STATE_INIT_ENTER;
	        leavingView.state = STATE_INIT_LEAVE;
	        // remember if this nav is already transitioning or not
	        var isAlreadyTransitioning = this.isTransitioning();
	        if (enteringView.isLoaded()) {
	            // already compiled this view, do not load again and continue
	            this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
	        }
	        else {
	            // view has not been compiled/loaded yet
	            // continue once the view has finished compiling
	            // DOM WRITE
	            this.setTransitioning(true, 500);
	            this.loadPage(enteringView, null, opts, function () {
	                if (enteringView.onReady) {
	                    // this entering view needs to wait for it to be ready
	                    // this is used by Tabs to wait for the first page of
	                    // the first selected tab to be loaded
	                    enteringView.onReady(function () {
	                        enteringView.loaded();
	                        _this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
	                    });
	                }
	                else {
	                    enteringView.loaded();
	                    _this._postRender(transId, enteringView, leavingView, isAlreadyTransitioning, opts, done);
	                }
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._postRender = function (transId, enteringView, leavingView, isAlreadyTransitioning, opts, done) {
	        // called after _render has completed and the view is compiled/loaded
	        if (enteringView.state === STATE_INACTIVE) {
	            // this entering view is already set to inactive, so this
	            // transition must be canceled, so don't continue
	            return done();
	        }
	        if (!opts.preload) {
	            // the enteringView will become the active view, and is not being preloaded
	            // set the correct zIndex for the entering and leaving views
	            // if there's already another trans_enter happening then
	            // the zIndex for the entering view should go off of that one
	            // DOM WRITE
	            var lastestLeavingView = this.getByState(STATE_TRANS_ENTER) || leavingView;
	            this._setZIndex(enteringView, lastestLeavingView, opts.direction);
	            // make sure the entering and leaving views are showing
	            // DOM WRITE
	            if (isAlreadyTransitioning) {
	                // the previous transition was still going when this one started
	                // so to be safe, only update showing the entering/leaving
	                // don't hide the others when they could still be transitioning
	                enteringView.domShow(true, this._renderer);
	                leavingView.domShow(true, this._renderer);
	            }
	            else {
	                // there are no other transitions happening but this one
	                // only entering/leaving should show, all others hidden
	                // also if a view is an overlay or the previous view is an
	                // overlay then always show the overlay and the view before it
	                var view;
	                var shouldShow;
	                for (var i = 0, ii = this._views.length; i < ii; i++) {
	                    view = this._views[i];
	                    shouldShow = (view === enteringView) ||
	                        (view === leavingView) ||
	                        view.isOverlay ||
	                        (i < ii - 1 ? this._views[i + 1].isOverlay : false);
	                    view.domShow(shouldShow, this._renderer);
	                }
	            }
	            // call each view's lifecycle events
	            if (leavingView.fireOtherLifecycles) {
	                // only fire entering lifecycle if the leaving
	                // view hasn't explicitly set not to
	                enteringView.willEnter();
	            }
	            if (enteringView.fireOtherLifecycles) {
	                // only fire leaving lifecycle if the entering
	                // view hasn't explicitly set not to
	                leavingView.willLeave();
	            }
	        }
	        else {
	            // this view is being preloaded, don't call lifecycle events
	            // transition does not need to animate
	            opts.animate = false;
	        }
	        this._beforeTrans(enteringView, leavingView, opts, done);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._beforeTrans = function (enteringView, leavingView, opts, done) {
	        // called after one raf from postRender()
	        // create the transitions animation, play the animation
	        // when the transition ends call wait for it to end
	        var _this = this;
	        if (enteringView.state === STATE_INACTIVE) {
	            // this entering view is already set to inactive, so this
	            // transition must be canceled, so don't continue
	            return done();
	        }
	        enteringView.state = STATE_TRANS_ENTER;
	        leavingView.state = STATE_TRANS_LEAVE;
	        // everything during the transition should runOutsideAngular
	        this._zone.runOutsideAngular(function () {
	            // init the transition animation
	            var transitionOpts = {
	                animation: opts.animation,
	                direction: opts.direction,
	                duration: opts.duration,
	                easing: opts.easing,
	                renderDelay: opts.transitionDelay || _this._trnsDelay,
	                isRTL: _this.config.platform.isRTL()
	            };
	            var transAnimation = transition_1.Transition.createTransition(enteringView, leavingView, transitionOpts);
	            _this._trans && _this._trans.destroy();
	            _this._trans = transAnimation;
	            if (opts.animate === false) {
	                // force it to not animate the elements, just apply the "to" styles
	                transAnimation.duration(0);
	            }
	            var duration = transAnimation.getDuration();
	            var enableApp = (duration < 64);
	            // block any clicks during the transition and provide a
	            // fallback to remove the clickblock if something goes wrong
	            _this._app.setEnabled(enableApp, duration);
	            _this.setTransitioning(!enableApp, duration);
	            if (enteringView.viewType) {
	                transAnimation.before.addClass(enteringView.viewType);
	            }
	            // create a callback for when the animation is done
	            transAnimation.onFinish(function (trans) {
	                // transition animation has ended
	                // destroy the animation and it's element references
	                trans.destroy();
	                _this._afterTrans(enteringView, leavingView, opts, trans.hasCompleted, done);
	            });
	            // cool, let's do this, start the transition
	            if (opts.progressAnimation) {
	                // this is a swipe to go back, just get the transition progress ready
	                // kick off the swipe animation start
	                transAnimation.progressStart();
	            }
	            else {
	                // this is a normal animation
	                // kick it off and let it play through
	                transAnimation.play();
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._afterTrans = function (enteringView, leavingView, opts, hasCompleted, done) {
	        // transition has completed, update each view's state
	        // place back into the zone, run didEnter/didLeave
	        // call the final callback when done
	        var _this = this;
	        // run inside of the zone again
	        this._zone.run(function () {
	            if (!opts.preload && hasCompleted) {
	                if (leavingView.fireOtherLifecycles) {
	                    // only fire entering lifecycle if the leaving
	                    // view hasn't explicitly set not to
	                    enteringView.didEnter();
	                }
	                if (enteringView.fireOtherLifecycles) {
	                    // only fire leaving lifecycle if the entering
	                    // view hasn't explicitly set not to
	                    leavingView.didLeave();
	                }
	            }
	            if (enteringView.state === STATE_INACTIVE) {
	                // this entering view is already set to inactive, so this
	                // transition must be canceled, so don't continue
	                return done(hasCompleted);
	            }
	            if (opts.keyboardClose !== false && _this._keyboard.isOpen()) {
	                // the keyboard is still open!
	                // no problem, let's just close for them
	                _this._keyboard.close();
	                _this._keyboard.onClose(function () {
	                    // keyboard has finished closing, transition complete
	                    done(hasCompleted);
	                }, 32);
	            }
	            else {
	                // all good, transition complete
	                done(hasCompleted);
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._transFinish = function (transId, enteringView, leavingView, direction, hasCompleted) {
	        // a transition has completed, but not sure if it's the last one or not
	        // check if this transition is the most recent one or not
	        var _this = this;
	        if (transId === this._transIds) {
	            // ok, good news, there were no other transitions that kicked
	            // off during the time this transition started and ended
	            if (hasCompleted) {
	                // this transition has completed as normal
	                // so the entering one is now the active view
	                // and the leaving view is now just inactive
	                if (enteringView.state !== STATE_REMOVE_AFTER_TRANS) {
	                    enteringView.state = STATE_ACTIVE;
	                }
	                if (leavingView.state !== STATE_REMOVE_AFTER_TRANS) {
	                    leavingView.state = STATE_INACTIVE;
	                }
	                // only need to do all this clean up if the transition
	                // completed, otherwise nothing actually changed
	                // destroy all of the views that come after the active view
	                this._cleanup();
	                // make sure only this entering view and PREVIOUS view are the
	                // only two views that are not display:none
	                // do not make any changes to the stack's current visibility
	                // if there is an overlay somewhere in the stack
	                leavingView = this.getPrevious(enteringView);
	                if (this.hasOverlay()) {
	                    // ensure the entering view is showing
	                    enteringView.domShow(true, this._renderer);
	                }
	                else {
	                    // only possibly hide a view if there are no overlays in the stack
	                    this._views.forEach(function (view) {
	                        var shouldShow = (view === enteringView) || (view === leavingView);
	                        view.domShow(shouldShow, _this._renderer);
	                    });
	                }
	                // this check only needs to happen once, which will add the css
	                // class to the nav when it's finished its first transition
	                if (!this._init) {
	                    this._init = true;
	                    this._renderer.setElementClass(this.elementRef.nativeElement, 'has-views', true);
	                }
	            }
	            else {
	                // this transition has not completed, meaning the
	                // entering view did not end up as the active view
	                // this would happen when swipe to go back started
	                // but the user did not complete the swipe and the
	                // what was the active view stayed as the active view
	                leavingView.state = STATE_ACTIVE;
	                enteringView.state = STATE_INACTIVE;
	            }
	            // allow clicks and enable the app again
	            this._app && this._app.setEnabled(true);
	            this.setTransitioning(false);
	            if (this.router && direction !== null && hasCompleted) {
	                // notify router of the state change if a direction was provided
	                this.router.stateChange(direction, enteringView);
	            }
	            // see if we should add the swipe back gesture listeners or not
	            this._sbCheck();
	        }
	        else {
	            // darn, so this wasn't the most recent transition
	            // so while this one did end, there's another more recent one
	            // still going on. Because a new transition is happening,
	            // then this entering view isn't actually going to be the active
	            // one, so only update the state to active/inactive if the state
	            // wasn't already updated somewhere else during its transition
	            if (enteringView.state === STATE_TRANS_ENTER) {
	                enteringView.state = STATE_INACTIVE;
	            }
	            if (leavingView.state === STATE_TRANS_LEAVE) {
	                leavingView.state = STATE_INACTIVE;
	            }
	        }
	    };
	    NavController.prototype._cleanup = function () {
	        var _this = this;
	        // ok, cleanup time!! Destroy all of the views that are
	        // INACTIVE and come after the active view
	        var activeViewIndex = this.indexOf(this.getActive());
	        var destroys = this._views.filter(function (v) { return v.state === STATE_REMOVE_AFTER_TRANS; });
	        for (var i = activeViewIndex + 1; i < this._views.length; i++) {
	            if (this._views[i].state === STATE_INACTIVE) {
	                destroys.push(this._views[i]);
	            }
	        }
	        // all pages being destroyed should be removed from the list of
	        // pages and completely removed from the dom
	        destroys.forEach(function (view) {
	            _this._views.splice(_this.indexOf(view), 1);
	            view.destroy();
	        });
	        // if any z-index goes under 0, then reset them all
	        var shouldResetZIndex = this._views.some(function (v) { return v.zIndex < 0; });
	        if (shouldResetZIndex) {
	            this._views.forEach(function (view) {
	                view.setZIndex(view.zIndex + INIT_ZINDEX + 1, _this._renderer);
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.ngOnDestroy = function () {
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            this._views[i].destroy();
	        }
	        this._views = [];
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.loadPage = function (view, navbarContainerRef, opts, done) {
	        var _this = this;
	        var wtfTimeRangeScope = instrumentation_1.wtfStartTimeRange('NavController#loadPage', view.name);
	        // guts of DynamicComponentLoader#loadIntoLocation
	        this._compiler && this._compiler.compileInHost(view.componentType).then(function (hostProtoViewRef) {
	            var wtfScope = instrumentation_1.wtfCreateScope('NavController#loadPage_After_Compile')();
	            var providers = _this.providers.concat(core_1.Injector.resolve([
	                core_1.provide(view_controller_1.ViewController, { useValue: view }),
	                core_1.provide(nav_params_1.NavParams, { useValue: view.getNavParams() })
	            ]));
	            var location = _this.elementRef;
	            if (_this._anchorName) {
	                location = _this._viewManager.getNamedElementInComponentView(location, _this._anchorName);
	            }
	            var viewContainer = _this._viewManager.getViewContainer(location);
	            var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, providers);
	            var pageElementRef = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(pageElementRef);
	            // auto-add page css className created from component JS class name
	            var cssClassName = util_1.pascalCaseToDashCase(view.componentType['name']);
	            _this._renderer.setElementClass(pageElementRef.nativeElement, cssClassName, true);
	            view.addDestroy(function () {
	                // ensure the element is cleaned up for when the view pool reuses this element
	                _this._renderer.setElementAttribute(pageElementRef.nativeElement, 'class', null);
	                _this._renderer.setElementAttribute(pageElementRef.nativeElement, 'style', null);
	                // remove the page from its container
	                var index = viewContainer.indexOf(hostViewRef);
	                if (!hostViewRef.destroyed && index !== -1) {
	                    viewContainer.remove(index);
	                }
	                view.setInstance(null);
	            });
	            // a new ComponentRef has been created
	            // set the ComponentRef's instance to this ViewController
	            view.setInstance(component);
	            // remember the ElementRef to the ion-page elementRef that was just created
	            view.setPageRef(pageElementRef);
	            if (!navbarContainerRef) {
	                navbarContainerRef = view.getNavbarViewRef();
	            }
	            var navbarTemplateRef = view.getNavbarTemplateRef();
	            if (navbarContainerRef && navbarTemplateRef) {
	                var navbarViewRef = navbarContainerRef.createEmbeddedView(navbarTemplateRef);
	                view.addDestroy(function () {
	                    var index = navbarContainerRef.indexOf(navbarViewRef);
	                    if (!navbarViewRef.destroyed && index > -1) {
	                        navbarContainerRef.remove(index);
	                    }
	                });
	            }
	            opts.postLoad && opts.postLoad(view);
	            instrumentation_1.wtfEndTimeRange(wtfTimeRangeScope);
	            instrumentation_1.wtfLeave(wtfScope);
	            done(view);
	        });
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.swipeBackStart = function () {
	        // default the direction to "back"
	        var opts = {
	            direction: 'back',
	            progressAnimation: true
	        };
	        // figure out the states of each view in the stack
	        var leavingView = this._remove(this._views.length - 1, 1);
	        if (leavingView) {
	            opts.animation = leavingView.getTransitionName(opts.direction);
	            // get the view thats ready to enter
	            var enteringView = this.getByState(STATE_INIT_ENTER);
	            // start the transition, fire callback when done...
	            this._transition(enteringView, leavingView, opts, function (hasCompleted) {
	                // swipe back has finished!!
	                void 0;
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.swipeBackProgress = function (stepValue) {
	        if (this._trans && this._sbGesture) {
	            // continue to disable the app while actively dragging
	            this._app.setEnabled(false, 4000);
	            this.setTransitioning(true, 4000);
	            // set the transition animation's progress
	            this._trans.progressStep(stepValue);
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype.swipeBackEnd = function (shouldComplete, currentStepValue) {
	        if (this._trans && this._sbGesture) {
	            // the swipe back gesture has ended
	            this._trans.progressEnd(shouldComplete, currentStepValue);
	        }
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._sbCheck = function () {
	        var _this = this;
	        if (this._sbEnabled) {
	            // this nav controller can have swipe to go back
	            if (!this._sbGesture) {
	                // create the swipe back gesture if we haven't already
	                var opts = {
	                    edge: 'left',
	                    threshold: this._sbThreshold
	                };
	                this._sbGesture = new swipe_back_1.SwipeBackGesture(this.getNativeElement(), opts, this);
	            }
	            if (this.canSwipeBack()) {
	                // it is be possible to swipe back
	                if (!this._sbGesture.isListening) {
	                    this._zone.runOutsideAngular(function () {
	                        // start listening if it's not already
	                        void 0;
	                        _this._sbGesture.listen();
	                    });
	                }
	            }
	            else if (this._sbGesture.isListening) {
	                // it should not be possible to swipe back
	                // but the gesture is still listening
	                void 0;
	                this._sbGesture.unlisten();
	            }
	        }
	    };
	    Object.defineProperty(NavController.prototype, "swipeBackEnabled", {
	        /**
	         * @input {boolean} Whether it's possible to swipe-to-go-back on this nav controller or not.
	         */
	        get: function () {
	            return this._sbEnabled;
	        },
	        set: function (val) {
	            this._sbEnabled = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * If it's possible to use swipe back or not. If it's not possible
	     * to go back, or swipe back is not enable then this will return false.
	     * If it is possible to go back, and swipe back is enabled, then this
	     * will return true.
	     * @returns {boolean} Whether you can swipe to go back
	     */
	    NavController.prototype.canSwipeBack = function () {
	        return (this._sbEnabled && !this.isTransitioning() && this._app.isEnabled() && this.canGoBack());
	    };
	    /**
	     * Returns `true` if there's a valid previous page that we can pop back to.
	     * Otherwise returns false.
	     * @returns {boolean} Whether there is a page to go back to
	     */
	    NavController.prototype.canGoBack = function () {
	        var activeView = this.getActive();
	        if (activeView) {
	            return activeView.enableBack();
	        }
	        return false;
	    };
	    /**
	     * Boolean if the nav controller is actively transitioning or not.
	     * @private
	     * @return {boolean}
	     */
	    NavController.prototype.isTransitioning = function () {
	        return (this._trnsTime > Date.now());
	    };
	    /**
	     * @private
	     * @return {boolean}
	     */
	    NavController.prototype.setTransitioning = function (isTransitioning, fallback) {
	        if (fallback === void 0) { fallback = 700; }
	        this._trnsTime = (isTransitioning ? Date.now() + fallback : 0);
	    };
	    /**
	     * @private
	     * @returns {boolean}
	     */
	    NavController.prototype.hasOverlay = function () {
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            if (this._views[i].isOverlay) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @private
	     * @returns {ViewController}
	     */
	    NavController.prototype.getByState = function (state) {
	        for (var i = this._views.length - 1; i >= 0; i--) {
	            if (this._views[i].state === state) {
	                return this._views[i];
	            }
	        }
	        return null;
	    };
	    /**
	     * @param {number} index  The index of the page you want to get
	     * @returns {ViewController} Returns the component that matches the index given
	     */
	    NavController.prototype.getByIndex = function (index) {
	        return (index < this._views.length && index > -1 ? this._views[index] : null);
	    };
	    /**
	     * @returns {ViewController} Returns the active page's view controller.
	     */
	    NavController.prototype.getActive = function () {
	        return this.getByState(STATE_ACTIVE);
	    };
	    /**
	     * @param {ViewController} view
	     * @returns {boolean}
	     */
	    NavController.prototype.isActive = function (view) {
	        return !!(view && view.state === STATE_ACTIVE);
	    };
	    /**
	     * @param {ViewController} view  The ViewController to get the previous view to
	     * @returns {viewController}
	     */
	    NavController.prototype.getPrevious = function (view) {
	        return this.getByIndex(this.indexOf(view) - 1);
	    };
	    /**
	     * First page in this nav controller's stack.
	     * @returns {ViewController} Returns the first component page in the current stack
	     */
	    NavController.prototype.first = function () {
	        return (this._views.length ? this._views[0] : null);
	    };
	    /**
	     * Last page in this nav controller's stack. This would not return a page which is about to be destroyed.
	     * @returns {ViewController} Returns the last component page in the current stack
	     */
	    NavController.prototype.last = function () {
	        return (this._views.length ? this._views[this._views.length - 1] : null);
	    };
	    /**
	     * @param {ViewController} view
	     * @returns {number} Returns the index number of the view
	     */
	    NavController.prototype.indexOf = function (view) {
	        return this._views.indexOf(view);
	    };
	    /**
	     * Number of sibling views in the nav controller.
	     * @returns {number} The number of views in stack, including the current view
	     */
	    NavController.prototype.length = function () {
	        return this._views.length;
	    };
	    Object.defineProperty(NavController.prototype, "rootNav", {
	        /**
	         * Returns the root NavController.
	         * @returns {NavController}
	         */
	        get: function () {
	            var nav = this;
	            while (nav.parent) {
	                nav = nav.parent;
	            }
	            return nav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * @param {TODO} router  TODO
	     */
	    NavController.prototype.registerRouter = function (router) {
	        this.router = router;
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._incId = function (view) {
	        view.id = this.id + '-' + (++this._ids);
	    };
	    /**
	     * @private
	     */
	    NavController.prototype._setZIndex = function (enteringView, leavingView, direction) {
	        if (enteringView) {
	            // get the leaving view, which could be in various states
	            if (!leavingView || !leavingView.isLoaded()) {
	                enteringView.setZIndex(INIT_ZINDEX, this._renderer);
	            }
	            else if (direction === 'back') {
	                // moving back
	                enteringView.setZIndex(leavingView.zIndex - 1, this._renderer);
	            }
	            else {
	                // moving forward
	                enteringView.setZIndex(leavingView.zIndex + 1, this._renderer);
	            }
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NavController.prototype, "swipeBackEnabled", null);
	    return NavController;
	})(ion_1.Ion);
	exports.NavController = NavController;
	var STATE_ACTIVE = 'active';
	var STATE_INACTIVE = 'inactive';
	var STATE_INIT_ENTER = 'init_enter';
	var STATE_INIT_LEAVE = 'init_leave';
	var STATE_TRANS_ENTER = 'trans_enter';
	var STATE_TRANS_LEAVE = 'trans_leave';
	var STATE_REMOVE = 'remove';
	var STATE_REMOVE_AFTER_TRANS = 'remove_after_trans';
	var STATE_FORCE_ACTIVE = 'force_active';
	var INIT_ZINDEX = 100;
	var ctrlIds = -1;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var profile_1 = __webpack_require__(50);
	exports.wtfCreateScope = profile_1.wtfCreateScope;
	exports.wtfLeave = profile_1.wtfLeave;
	exports.wtfStartTimeRange = profile_1.wtfStartTimeRange;
	exports.wtfEndTimeRange = profile_1.wtfEndTimeRange;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var slide_edge_gesture_1 = __webpack_require__(289);
	var util_1 = __webpack_require__(163);
	var SwipeBackGesture = (function (_super) {
	    __extends(SwipeBackGesture, _super);
	    function SwipeBackGesture(element, options, _nav) {
	        _super.call(this, element, util_1.assign({
	            direction: 'x',
	            maxEdgeStart: 75
	        }, options));
	        this._nav = _nav;
	    }
	    SwipeBackGesture.prototype.canStart = function (ev) {
	        // the gesture swipe angle must be mainly horizontal and the
	        // gesture distance would be relatively short for a swipe back
	        // and swipe back must be possible on this nav controller
	        if (ev.angle > -40 &&
	            ev.angle < 40 &&
	            ev.distance < 50 &&
	            this._nav.canSwipeBack()) {
	            // passed the tests, now see if the super says it's cool or not
	            return _super.prototype.canStart.call(this, ev);
	        }
	        // nerp, not today
	        return false;
	    };
	    SwipeBackGesture.prototype.onSlideBeforeStart = function () {
	        void 0;
	        this._nav.swipeBackStart();
	    };
	    SwipeBackGesture.prototype.onSlide = function (slide) {
	        var stepValue = (slide.distance / slide.max);
	        void 0;
	        this._nav.swipeBackProgress(stepValue);
	    };
	    SwipeBackGesture.prototype.onSlideEnd = function (slide, ev) {
	        var shouldComplete = (Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5);
	        var currentStepValue = (slide.distance / slide.max);
	        void 0;
	        this._nav.swipeBackEnd(shouldComplete, currentStepValue);
	    };
	    return SwipeBackGesture;
	})(slide_edge_gesture_1.SlideEdgeGesture);
	exports.SwipeBackGesture = SwipeBackGesture;


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(306);
	/**
	 * @private
	 **/
	var Transition = (function (_super) {
	    __extends(Transition, _super);
	    function Transition(opts) {
	        _super.call(this, null, {
	            renderDelay: opts.renderDelay
	        });
	    }
	    Transition.createTransition = function (enteringView, leavingView, opts) {
	        var TransitionClass = TransitionRegistry[opts.animation];
	        if (!TransitionClass) {
	            // didn't find a transition animation, default to ios-transition
	            TransitionClass = TransitionRegistry['ios-transition'];
	        }
	        return new TransitionClass(enteringView, leavingView, opts);
	    };
	    Transition.register = function (name, TransitionClass) {
	        TransitionRegistry[name] = TransitionClass;
	    };
	    return Transition;
	})(animation_1.Animation);
	exports.Transition = Transition;
	var TransitionRegistry = {};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	var dom_1 = __webpack_require__(164);
	var util_1 = __webpack_require__(163);
	/**
	 * @private
	 **/
	var Animation = (function () {
	    function Animation(ele, opts) {
	        if (opts === void 0) { opts = {}; }
	        this._wChg = false;
	        this._rv = false;
	        this._lastUpd = 0;
	        this.isPlaying = false;
	        this.hasTween = false;
	        this.hasCompleted = false;
	        this._reset();
	        this.element(ele);
	        this._opts = util_1.assign({
	            renderDelay: 24
	        }, opts);
	    }
	    Animation.prototype._reset = function () {
	        this._el = [];
	        this._c = [];
	        this._fx = {};
	        this._bfSty = {};
	        this._bfAdd = [];
	        this._bfRmv = [];
	        this._afSty = {};
	        this._afAdd = [];
	        this._afRmv = [];
	        this._pFns = [];
	        this._fFns = [];
	        this._fOnceFns = [];
	        this._easing = this._dur = null;
	    };
	    Animation.prototype.element = function (ele) {
	        var i;
	        if (ele) {
	            if (Array.isArray(ele)) {
	                for (i = 0; i < ele.length; i++) {
	                    this._addEle(ele[i]);
	                }
	            }
	            else if (typeof ele === 'string') {
	                ele = document.querySelectorAll(ele);
	                for (i = 0; i < ele.length; i++) {
	                    this._addEle(ele[i]);
	                }
	            }
	            else {
	                this._addEle(ele);
	            }
	        }
	        return this;
	    };
	    Animation.prototype._addEle = function (ele) {
	        if (ele.nativeElement) {
	            ele = ele.nativeElement;
	        }
	        if (ele.nodeType === 1) {
	            this._el.push(ele);
	            // does this element suport will-change property?
	            this._wChg = (typeof ele.style.willChange !== 'undefined');
	        }
	    };
	    Animation.prototype.parent = function (parentAnimation) {
	        this._parent = parentAnimation;
	        return this;
	    };
	    Animation.prototype.add = function (childAnimation) {
	        childAnimation.parent(this);
	        this._c.push(childAnimation);
	        return this;
	    };
	    Animation.prototype.getDuration = function () {
	        return this._dur !== null ? this._dur : (this._parent && this._parent.getDuration()) || 0;
	    };
	    Animation.prototype.duration = function (milliseconds) {
	        this._dur = milliseconds;
	        return this;
	    };
	    Animation.prototype.getEasing = function () {
	        return this._easing !== null ? this._easing : (this._parent && this._parent.getEasing()) || null;
	    };
	    Animation.prototype.easing = function (name) {
	        this._easing = name;
	        return this;
	    };
	    Animation.prototype.from = function (prop, val) {
	        this._addProp('from', prop, val);
	        return this;
	    };
	    Animation.prototype.to = function (prop, val, clearProperyAfterTransition) {
	        var fx = this._addProp('to', prop, val);
	        if (clearProperyAfterTransition) {
	            // if this effect is a transform then clear the transform effect
	            // otherwise just clear the actual property
	            this.after.clearStyles([fx.trans ? dom_1.CSS.transform : prop]);
	        }
	        return this;
	    };
	    Animation.prototype.fromTo = function (prop, fromVal, toVal, clearProperyAfterTransition) {
	        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);
	    };
	    Animation.prototype._addProp = function (state, prop, val) {
	        var fxProp = this._fx[prop];
	        if (!fxProp) {
	            // first time we've see this EffectProperty
	            fxProp = this._fx[prop] = {
	                trans: (typeof TRANSFORMS[prop] !== 'undefined'),
	                wc: ''
	            };
	            // add the will-change property fo transforms or opacity
	            if (fxProp.trans) {
	                fxProp.wc = dom_1.CSS.transform;
	            }
	            else if (prop === 'opacity') {
	                fxProp.wc = prop;
	            }
	        }
	        // add from/to EffectState to the EffectProperty
	        var fxState = fxProp[state] = {
	            val: val,
	            num: null,
	            unit: '',
	        };
	        if (typeof val === 'string' && val.indexOf(' ') < 0) {
	            var r = val.match(CSS_VALUE_REGEX);
	            var num = parseFloat(r[1]);
	            if (!isNaN(num)) {
	                fxState.num = num;
	            }
	            fxState.unit = (r[0] != r[2] ? r[2] : '');
	        }
	        else if (typeof val === 'number') {
	            fxState.num = val;
	        }
	        return fxProp;
	    };
	    Animation.prototype.fadeIn = function () {
	        return this.fromTo('opacity', 0.001, 1, true);
	    };
	    Animation.prototype.fadeOut = function () {
	        return this.fromTo('opacity', 0.999, 0);
	    };
	    Object.defineProperty(Animation.prototype, "before", {
	        get: function () {
	            var _this = this;
	            return {
	                addClass: function (className) {
	                    _this._bfAdd.push(className);
	                    return _this;
	                },
	                removeClass: function (className) {
	                    _this._bfRmv.push(className);
	                    return _this;
	                },
	                setStyles: function (styles) {
	                    _this._bfSty = styles;
	                    return _this;
	                },
	                clearStyles: function (propertyNames) {
	                    for (var i = 0; i < propertyNames.length; i++) {
	                        _this._bfSty[propertyNames[i]] = '';
	                    }
	                    return _this;
	                }
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Animation.prototype, "after", {
	        get: function () {
	            var _this = this;
	            return {
	                addClass: function (className) {
	                    _this._afAdd.push(className);
	                    return _this;
	                },
	                removeClass: function (className) {
	                    _this._afRmv.push(className);
	                    return _this;
	                },
	                setStyles: function (styles) {
	                    _this._afSty = styles;
	                    return _this;
	                },
	                clearStyles: function (propertyNames) {
	                    for (var i = 0; i < propertyNames.length; i++) {
	                        _this._afSty[propertyNames[i]] = '';
	                    }
	                    return _this;
	                }
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Animation.prototype.play = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        var self = this;
	        var i;
	        var duration = util_1.isDefined(opts.duration) ? opts.duration : self._dur;
	        void 0;
	        // always default that an animation does not tween
	        // a tween requires that an Animation class has an element
	        // and that it has at least one FROM/TO effect
	        // and that the FROM/TO effect can tween numeric values
	        self.hasTween = false;
	        self.hasCompleted = false;
	        // fire off all the onPlays
	        for (i = 0; i < self._pFns.length; i++) {
	            self._pFns[i]();
	        }
	        self.isPlaying = true;
	        // this is the top level animation and is in full control
	        // of when the async play() should actually kick off
	        // if there is no duration then it'll set the TO property immediately
	        // if there is a duration, then it'll stage all animations at the
	        // FROM property and transition duration, wait a few frames, then
	        // kick off the animation by setting the TO property for each animation
	        // stage all of the before css classes and inline styles
	        // will recursively stage all child elements
	        self._before();
	        // ensure all past transition end events have been cleared
	        self._clearAsync();
	        if (duration > 30) {
	            // this animation has a duration, so it should animate
	            // place all the elements with their FROM properties
	            // set the FROM properties
	            self._progress(0);
	            // add the will-change or translateZ properties when applicable
	            self._willChg(true);
	            // set the async TRANSITION END event
	            // and run onFinishes when the transition ends
	            self._asyncEnd(duration, true);
	            // begin each animation when everything is rendered in their place
	            // and the transition duration/easing is ready to go
	            dom_1.rafFrames(self._opts.renderDelay / 16, function () {
	                // there's been a moment and the elements are in place
	                // now set the TRANSITION duration/easing
	                self._setTrans(duration, false);
	                // wait a few moments again to wait for the transition
	                // info to take hold in the DOM
	                dom_1.rafFrames(2, function () {
	                    // browser had some time to render everything in place
	                    // and the transition duration/easing is set
	                    // now set the TO properties
	                    // which will trigger the transition to begin
	                    self._progress(1);
	                });
	            });
	        }
	        else {
	            // this animation does not have a duration, so it should not animate
	            // just go straight to the TO properties and call it done
	            self._progress(1);
	            // since there was no animation, immediately run the after
	            self._after();
	            // since there was no animation, it's done
	            // fire off all the onFinishes
	            self._didFinish(true);
	        }
	    };
	    Animation.prototype.stop = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        var self = this;
	        var duration = util_1.isDefined(opts.duration) ? opts.duration : 0;
	        var stepValue = util_1.isDefined(opts.stepValue) ? opts.stepValue : 1;
	        // ensure all past transition end events have been cleared
	        this._clearAsync();
	        // set the TO properties
	        self._progress(stepValue);
	        if (duration > 30) {
	            // this animation has a duration, so it should animate
	            // place all the elements with their TO properties
	            // now set the TRANSITION duration
	            self._setTrans(duration, true);
	            // set the async TRANSITION END event
	            // and run onFinishes when the transition ends
	            self._asyncEnd(duration, false);
	        }
	        else {
	            // this animation does not have a duration, so it should not animate
	            // just go straight to the TO properties and call it done
	            self._after();
	            // since there was no animation, it's done
	            // fire off all the onFinishes
	            self._didFinish(false);
	        }
	    };
	    Animation.prototype._asyncEnd = function (duration, shouldComplete) {
	        var self = this;
	        function onTransitionEnd(ev) {
	            void 0;
	            // ensure transition end events and timeouts have been cleared
	            self._clearAsync();
	            // set the after styles
	            self._after();
	            // remove will change properties
	            self._willChg(false);
	            // transition finished
	            self._didFinish(shouldComplete);
	        }
	        function onTransitionFallback() {
	            void 0;
	            // oh noz! the transition end event didn't fire in time!
	            // instead the fallback timer when first
	            // clear the other async end events from firing
	            self._tmr = 0;
	            self._clearAsync();
	            // too late to have a smooth animation, just finish it
	            self._setTrans(0, true);
	            // ensure the ending progress step gets rendered
	            self._progress(1);
	            // set the after styles
	            self._after();
	            // remove will change properties
	            self._willChg(false);
	            // transition finished
	            self._didFinish(shouldComplete);
	        }
	        // set the TRANSITION END event on one of the transition elements
	        self._unregTrans = dom_1.transitionEnd(self._transEl(), onTransitionEnd);
	        // set a fallback timeout if the transition end event never fires, or is too slow
	        // transition end fallback: (animation duration + XXms)
	        self._tmr = setTimeout(onTransitionFallback, duration + 400);
	    };
	    Animation.prototype._clearAsync = function () {
	        this._unregTrans && this._unregTrans();
	        if (this._tmr) {
	            clearTimeout(this._tmr);
	            this._tmr = 0;
	        }
	    };
	    Animation.prototype._progress = function (stepValue) {
	        // bread 'n butter
	        var i;
	        var prop;
	        var fx;
	        var val;
	        var transforms;
	        var tweenEffect;
	        for (i = 0; i < this._c.length; i++) {
	            this._c[i]._progress(stepValue);
	        }
	        if (this._el.length) {
	            // flip the number if we're going in reverse
	            if (this._rv) {
	                stepValue = ((stepValue * -1) + 1);
	            }
	            transforms = [];
	            for (prop in this._fx) {
	                fx = this._fx[prop];
	                if (fx.from && fx.to) {
	                    tweenEffect = (fx.from.num !== fx.to.num);
	                    if (tweenEffect) {
	                        this.hasTween = true;
	                    }
	                    if (stepValue === 0) {
	                        // FROM
	                        val = fx.from.val;
	                    }
	                    else if (stepValue === 1) {
	                        // TO
	                        val = fx.to.val;
	                    }
	                    else if (tweenEffect) {
	                        // EVERYTHING IN BETWEEN
	                        val = (((fx.to.num - fx.from.num) * stepValue) + fx.from.num) + fx.to.unit;
	                    }
	                    else {
	                        val = null;
	                    }
	                    if (val !== null) {
	                        if (fx.trans) {
	                            transforms.push(prop + '(' + val + ')');
	                        }
	                        else {
	                            for (i = 0; i < this._el.length; i++) {
	                                this._el[i].style[prop] = val;
	                            }
	                        }
	                    }
	                }
	            }
	            // place all transforms on the same property
	            if (transforms.length) {
	                if (!this._wChg) {
	                    // if the element doesn't support will-change
	                    // then auto add translateZ for transform properties
	                    transforms.push('translateZ(0px)');
	                }
	                for (i = 0; i < this._el.length; i++) {
	                    this._el[i].style[dom_1.CSS.transform] = transforms.join(' ');
	                }
	            }
	        }
	    };
	    Animation.prototype._setTrans = function (duration, forcedLinearEasing) {
	        var i;
	        var easing;
	        // set the TRANSITION properties inline on the element
	        for (i = 0; i < this._c.length; i++) {
	            this._c[i]._setTrans(duration, forcedLinearEasing);
	        }
	        if (Object.keys(this._fx).length) {
	            for (i = 0; i < this._el.length; i++) {
	                // all parent/child animations should have the same duration
	                this._el[i].style[dom_1.CSS.transitionDuration] = duration + 'ms';
	                // each animation can have a different easing
	                easing = (forcedLinearEasing ? 'linear' : this.getEasing());
	                if (easing) {
	                    this._el[i].style[dom_1.CSS.transitionTimingFn] = easing;
	                }
	            }
	        }
	    };
	    Animation.prototype._willChg = function (addWillChange) {
	        var i;
	        var wc;
	        var prop;
	        for (i = 0; i < this._c.length; i++) {
	            this._c[i]._willChg(addWillChange);
	        }
	        if (this._wChg) {
	            wc = [];
	            if (addWillChange) {
	                for (prop in this._fx) {
	                    if (this._fx[prop].wc !== '') {
	                        wc.push(this._fx[prop].wc);
	                    }
	                }
	            }
	            for (i = 0; i < this._el.length; i++) {
	                this._el[i].style['willChange'] = wc.join(',');
	            }
	        }
	    };
	    Animation.prototype._before = function () {
	        // before the RENDER_DELAY
	        // before the animations have started
	        var i;
	        var j;
	        var prop;
	        var ele;
	        // stage all of the child animations
	        for (i = 0; i < this._c.length; i++) {
	            this._c[i]._before();
	        }
	        if (!this._rv) {
	            for (i = 0; i < this._el.length; i++) {
	                ele = this._el[i];
	                // css classes to add before the animation
	                for (j = 0; j < this._bfAdd.length; j++) {
	                    ele.classList.add(this._bfAdd[j]);
	                }
	                // css classes to remove before the animation
	                for (j = 0; j < this._bfRmv.length; j++) {
	                    ele.classList.remove(this._bfRmv[j]);
	                }
	                // inline styles to add before the animation
	                for (prop in this._bfSty) {
	                    ele.style[prop] = this._bfSty[prop];
	                }
	            }
	        }
	    };
	    Animation.prototype._after = function () {
	        // after the animations have finished
	        var i;
	        var j;
	        var prop;
	        var ele;
	        for (i = 0; i < this._c.length; i++) {
	            this._c[i]._after();
	        }
	        for (i = 0; i < this._el.length; i++) {
	            ele = this._el[i];
	            // remove the transition duration/easing
	            ele.style[dom_1.CSS.transitionDuration] = '';
	            ele.style[dom_1.CSS.transitionTimingFn] = '';
	            if (this._rv) {
	                // finished in reverse direction
	                // css classes that were added before the animation should be removed
	                for (j = 0; j < this._bfAdd.length; j++) {
	                    ele.classList.remove(this._bfAdd[j]);
	                }
	                // css classes that were removed before the animation should be added
	                for (j = 0; j < this._bfRmv.length; j++) {
	                    ele.classList.add(this._bfRmv[j]);
	                }
	                // inline styles that were added before the animation should be removed
	                for (prop in this._bfSty) {
	                    ele.style[prop] = '';
	                }
	            }
	            else {
	                // finished in forward direction
	                // css classes to add after the animation
	                for (j = 0; j < this._afAdd.length; j++) {
	                    ele.classList.add(this._afAdd[j]);
	                }
	                // css classes to remove after the animation
	                for (j = 0; j < this._afRmv.length; j++) {
	                    ele.classList.remove(this._afRmv[j]);
	                }
	                // inline styles to add after the animation
	                for (prop in this._afSty) {
	                    ele.style[prop] = this._afSty[prop];
	                }
	            }
	        }
	    };
	    Animation.prototype.progressStart = function () {
	        for (var i = 0; i < this._c.length; i++) {
	            this._c[i].progressStart();
	        }
	        this._before();
	        // force no duration, linear easing
	        this._setTrans(0, true);
	    };
	    Animation.prototype.progressStep = function (stepValue) {
	        var now = Date.now();
	        // only update if the last update was more than 16ms ago
	        if (now - 16 > this._lastUpd) {
	            this._lastUpd = now;
	            stepValue = Math.min(1, Math.max(0, stepValue));
	            for (var i = 0; i < this._c.length; i++) {
	                this._c[i].progressStep(stepValue);
	            }
	            if (this._rv) {
	                // if the animation is going in reverse then
	                // flip the step value: 0 becomes 1, 1 becomes 0
	                stepValue = ((stepValue * -1) + 1);
	            }
	            this._progress(stepValue);
	        }
	    };
	    Animation.prototype.progressEnd = function (shouldComplete, currentStepValue) {
	        void 0;
	        for (var i = 0; i < this._c.length; i++) {
	            this._c[i].progressEnd(shouldComplete, currentStepValue);
	        }
	        // set all the animations to their final position
	        this._progress(shouldComplete ? 1 : 0);
	        // if it's already at the final position, or close, then it's done
	        // otherwise we need to add a transition end event listener
	        if (currentStepValue < 0.05 || currentStepValue > 0.95) {
	            // the progress was already left off at the point that is finished
	            // for example, the left menu was dragged all the way open already
	            this._after();
	            this._willChg(false);
	            this._didFinish(shouldComplete);
	        }
	        else {
	            // the stepValue was left off at a point when it needs to finish transition still
	            // for example, the left menu was opened 75% and needs to finish opening
	            this._asyncEnd(64, shouldComplete);
	            // force quick duration, linear easing
	            this._setTrans(64, true);
	        }
	    };
	    Animation.prototype.onPlay = function (callback) {
	        this._pFns.push(callback);
	        return this;
	    };
	    Animation.prototype.onFinish = function (callback, onceTimeCallback, clearOnFinishCallacks) {
	        if (onceTimeCallback === void 0) { onceTimeCallback = false; }
	        if (clearOnFinishCallacks === void 0) { clearOnFinishCallacks = false; }
	        if (clearOnFinishCallacks) {
	            this._fFns = [];
	            this._fOnceFns = [];
	        }
	        if (onceTimeCallback) {
	            this._fOnceFns.push(callback);
	        }
	        else {
	            this._fFns.push(callback);
	        }
	        return this;
	    };
	    Animation.prototype._didFinish = function (hasCompleted) {
	        this.isPlaying = false;
	        this.hasCompleted = hasCompleted;
	        var i;
	        for (i = 0; i < this._fFns.length; i++) {
	            this._fFns[i](this);
	        }
	        for (i = 0; i < this._fOnceFns.length; i++) {
	            this._fOnceFns[i](this);
	        }
	        this._fOnceFns = [];
	    };
	    Animation.prototype.reverse = function (shouldReverse) {
	        if (shouldReverse === void 0) { shouldReverse = true; }
	        for (var i = 0; i < this._c.length; i++) {
	            this._c[i].reverse(shouldReverse);
	        }
	        this._rv = shouldReverse;
	        return this;
	    };
	    Animation.prototype.destroy = function (removeElement) {
	        var i;
	        var ele;
	        for (i = 0; i < this._c.length; i++) {
	            this._c[i].destroy(removeElement);
	        }
	        if (removeElement) {
	            for (i = 0; i < this._el.length; i++) {
	                ele = this._el[i];
	                ele.parentNode && ele.parentNode.removeChild(ele);
	            }
	        }
	        this._clearAsync();
	        this._reset();
	    };
	    Animation.prototype._transEl = function () {
	        // get the lowest level element that has an Animation
	        var i;
	        var targetEl;
	        for (i = 0; i < this._c.length; i++) {
	            targetEl = this._c[i]._transEl();
	            if (targetEl) {
	                return targetEl;
	            }
	        }
	        return (this.hasTween && this._el.length ? this._el[0] : null);
	    };
	    /*
	     STATIC CLASSES
	     */
	    Animation.create = function (name, opts) {
	        if (opts === void 0) { opts = {}; }
	        var AnimationClass = AnimationRegistry[name];
	        if (!AnimationClass) {
	            // couldn't find an animation by the given name
	            // fallback to just the base Animation class
	            AnimationClass = Animation;
	        }
	        return new AnimationClass(null, opts);
	    };
	    Animation.register = function (name, AnimationClass) {
	        AnimationRegistry[name] = AnimationClass;
	    };
	    return Animation;
	})();
	exports.Animation = Animation;
	var TRANSFORMS = {
	    'translateX': 1, 'translateY': 1, 'translateZ': 1,
	    'scale': 1, 'scaleX': 1, 'scaleY': 1, 'scaleZ': 1,
	    'rotate': 1, 'rotateX': 1, 'rotateY': 1, 'rotateZ': 1,
	    'skewX': 1, 'skewY': 1, 'perspective': 1
	};
	var CSS_VALUE_REGEX = /(^-?\d*\.?\d*)(.*)/;
	var AnimationRegistry = {};


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var menu_controller_1 = __webpack_require__(277);
	/**
	 * @name MenuClose
	 * @description
	 * The `menuClose` directive can be placed on any button to
	 * automatically close an open menu.
	 *
	 * @usage
	 * ```html
	 * <button menuClose>Close Menu</button>
	 * ```
	 *
	 * To close a certain menu by its id or side, give the `menuClose`
	 * directive a value.
	 *
	 * ```html
	 * <button menuClose="left">Close Left Menu</button>
	 * ```
	 *
	 * @demo /docs/v2/demos/menu/
	 * @see {@link /docs/v2/components#menus Menu Component Docs}
	 * @see {@link ../../menu/Menu Menu API Docs}
	 */
	var MenuClose = (function () {
	    function MenuClose(_menu) {
	        this._menu = _menu;
	    }
	    /**
	    * @private
	    */
	    MenuClose.prototype.close = function () {
	        var menu = this._menu.get(this.menuClose);
	        menu && menu.close();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], MenuClose.prototype, "menuClose", void 0);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], MenuClose.prototype, "close", null);
	    MenuClose = __decorate([
	        core_1.Directive({
	            selector: '[menuClose]'
	        }), 
	        __metadata('design:paramtypes', [menu_controller_1.MenuController])
	    ], MenuClose);
	    return MenuClose;
	})();
	exports.MenuClose = MenuClose;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var config_1 = __webpack_require__(161);
	/**
	  * @name Badge
	  * @module ionic
	  * @description
	  * Badges are simple components in Ionic containing numbers or text. You can display a badge to indicate that there is new information associated with the item it is on.
	  * @see {@link /docs/v2/components/#badges Badges Component Docs}

	 */
	var Badge = (function () {
	    function Badge(config, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        var element = _elementRef.nativeElement;
	        this._readAttrs(element);
	    }
	    /**
	     * @private
	     */
	    Badge.prototype._readAttrs = function (element) {
	        var elementAttrs = element.attributes;
	        var attrName;
	        for (var i = 0, l = elementAttrs.length; i < l; i++) {
	            if (elementAttrs[i].value !== '')
	                continue;
	            attrName = elementAttrs[i].name;
	            // Ignore attributes item-left, item-right
	            if (attrName.indexOf('item') == -1) {
	                this._setClass(attrName);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Badge.prototype._setClass = function (color) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, 'badge-' + color, true);
	    };
	    Badge = __decorate([
	        core_1.Directive({
	            selector: 'ion-badge'
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef, core_1.Renderer])
	    ], Badge);
	    return Badge;
	})();
	exports.Badge = Badge;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	/**
	 * @name Blur
	 * @description
	 * The blur attribute applies the CSS blur attribute to an element. Safari only.
	 *
	 * @usage
	 * ```html
	 * <ion-card blur>
	 *    This card will blur the content behind it.
	 * </ion-card>
	 * ```
	 *
	 * @demo /docs/v2/demos/blur/
	 * @private
	 */
	var Blur = (function () {
	    function Blur(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        _renderer.setElementStyle(_elementRef.nativeElement, '-webkit-backdrop-filter', 'blur(10px)');
	    }
	    Blur = __decorate([
	        core_1.Directive({
	            selector: '[blur]'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
	    ], Blur);
	    return Blur;
	})();
	exports.Blur = Blur;


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var ion_1 = __webpack_require__(287);
	var app_1 = __webpack_require__(168);
	var config_1 = __webpack_require__(161);
	var dom_1 = __webpack_require__(164);
	var view_controller_1 = __webpack_require__(296);
	var scroll_to_1 = __webpack_require__(279);
	/**
	 * @name Content
	 * @description
	 * The Content component provides an easy to use content area with some useful
	 * methods to control the scrollable area.
	 *
	 * The content area can also implement pull-to-refresh with the
	 * [Refresher](../../scroll/Refresher) component.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *   Add your content here!
	 * </ion-content>
	 * ```
	 *
	 */
	var Content = (function (_super) {
	    __extends(Content, _super);
	    function Content(_elementRef, _config, _app, _zone, viewCtrl) {
	        _super.call(this, _elementRef);
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this._app = _app;
	        this._zone = _zone;
	        this._padding = 0;
	        if (viewCtrl) {
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(_elementRef);
	        }
	    }
	    /**
	     * @private
	     */
	    Content.prototype.ngOnInit = function () {
	        var self = this;
	        self.scrollElement = self._elementRef.nativeElement.children[0];
	        if (self._config.get('tapPolyfill') === true) {
	            self._zone.runOutsideAngular(function () {
	                self._scLsn = self.addScrollListener(function () {
	                    self._app.setScrolling();
	                });
	            });
	        }
	    };
	    /**
	     * @private
	     */
	    Content.prototype.ngOnDestroy = function () {
	        this._scLsn && this._scLsn();
	        this.scrollElement = this._scLsn = null;
	    };
	    /**
	     * @private
	     * Adds the specified scroll handler to the content' scroll element.
	     *
	     * ```ts
	     * @Page({
	     *   template: `<ion-content id="my-content"></ion-content>`
	     * )}
	     * export class MyPage{
	     *    constructor(app: IonicApp){
	     *        this.app = app;
	     *    }
	     *   // Need to wait until the component has been initialized
	     *   ngAfterViewInit() {
	     *     // Here 'my-content' is the ID of my ion-content
	     *     this.content = this.app.getComponent('my-content');
	     *     this.content.addScrollListener(this.myScroll);
	     *   }
	     *     myScroll() {
	     *      console.info('They see me scrolling...');
	     *    }
	     * }
	     * ```
	     * @param {Function} handler  The method you want perform when scrolling
	     * @returns {Function} A function that removes the scroll handler.
	     */
	    Content.prototype.addScrollListener = function (handler) {
	        return this._addListener('scroll', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addTouchStartListener = function (handler) {
	        return this._addListener('touchstart', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addTouchMoveListener = function (handler) {
	        return this._addListener('touchmove', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addTouchEndListener = function (handler) {
	        return this._addListener('touchend', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addMouseDownListener = function (handler) {
	        return this._addListener('mousedown', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addMouseUpListener = function (handler) {
	        return this._addListener('mouseup', handler);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addMouseMoveListener = function (handler) {
	        return this._addListener('mousemove', handler);
	    };
	    Content.prototype._addListener = function (type, handler) {
	        var _this = this;
	        if (!this.scrollElement) {
	            return;
	        }
	        // ensure we're not creating duplicates
	        this.scrollElement.removeEventListener(type, handler);
	        this.scrollElement.addEventListener(type, handler);
	        return function () {
	            _this.scrollElement.removeEventListener(type, handler);
	        };
	    };
	    /**
	     * @private
	     * Call a method when scrolling has stopped
	     * @param {Function} callback The method you want perform when scrolling has ended
	     */
	    Content.prototype.onScrollEnd = function (callback) {
	        var lastScrollTop = null;
	        var framesUnchanged = 0;
	        var _scrollEle = this.scrollElement;
	        function next() {
	            var currentScrollTop = _scrollEle.scrollTop;
	            if (lastScrollTop !== null) {
	                if (Math.round(lastScrollTop) === Math.round(currentScrollTop)) {
	                    framesUnchanged++;
	                }
	                else {
	                    framesUnchanged = 0;
	                }
	                if (framesUnchanged > 9) {
	                    return callback();
	                }
	            }
	            lastScrollTop = currentScrollTop;
	            dom_1.raf(function () {
	                dom_1.raf(next);
	            });
	        }
	        setTimeout(next, 100);
	    };
	    Content.prototype.onScrollElementTransitionEnd = function (callback) {
	        dom_1.transitionEnd(this.scrollElement, callback);
	    };
	    /**
	     * Scroll to the specified position.
	     *
	     * ```ts
	     * @Page({
	     *   template: `<ion-content id="my-content">
	     *      <button (click)="scrollTo()"> Down 500px</button>
	     *   </ion-content>`
	     * )}
	     * export class MyPage{
	     *    constructor(app: IonicApp){
	     *        this.app = app;
	     *    }
	     *   // Need to wait until the component has been initialized
	     *   ngAfterViewInit() {
	     *     // Here 'my-content' is the ID of my ion-content
	     *     this.content = this.app.getComponent('my-content');
	     *   }
	     *    scrollTo() {
	     *      this.content.scrollTo(0, 500, 200);
	     *    }
	     * }
	     * ```
	     * @param {number} x  The x-value to scroll to.
	     * @param {number} y  The y-value to scroll to.
	     * @param {number} duration  Duration of the scroll animation in ms.
	     * @param {TODO} tolerance  TODO
	     * @returns {Promise} Returns a promise when done
	     */
	    Content.prototype.scrollTo = function (x, y, duration, tolerance) {
	        if (this._scrollTo) {
	            this._scrollTo.dispose();
	        }
	        this._scrollTo = new scroll_to_1.ScrollTo(this.scrollElement);
	        return this._scrollTo.start(x, y, duration, tolerance);
	    };
	    /**
	     * Scroll to the specified position.
	     *
	     * ```ts
	     * @Page({
	     *   template: `<ion-content id="my-content">
	     *      <button (click)="scrollTop()"> Down 500px</button>
	     *   </ion-content>`
	     * )}
	     * export class MyPage{
	     *    constructor(app: IonicApp){
	     *        this.app = app;
	     *    }
	     *   // Need to wait until the component has been initialized
	     *   ngAfterViewInit() {
	     *     // Here 'my-content' is the ID of my ion-content
	     *     this.content = this.app.getComponent('my-content');
	     *   }
	     *    scrollTop() {
	     *      this.content.scrollTop();
	     *    }
	     * }
	     * ```
	     * @returns {Promise} Returns a promise when done
	     */
	    Content.prototype.scrollToTop = function () {
	        if (this._scrollTo) {
	            this._scrollTo.dispose();
	        }
	        this._scrollTo = new scroll_to_1.ScrollTo(this.scrollElement);
	        return this._scrollTo.start(0, 0, 300, 0);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.getScrollTop = function () {
	        return this.getNativeElement().scrollTop;
	    };
	    /**
	     * @private
	     */
	    Content.prototype.addCssClass = function (className) {
	        this.getNativeElement().classList.add(className);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.removeCssClass = function (className) {
	        this.getNativeElement().classList.remove(className);
	    };
	    /**
	     * @private
	     */
	    Content.prototype.setScrollElementStyle = function (prop, val) {
	        this.scrollElement.style[prop] = val;
	    };
	    /**
	     * Returns the content and scroll elements' dimensions.
	     * @returns {object} dimensions  The content and scroll elements' dimensions
	     * {number} dimensions.contentHeight  content offsetHeight
	     * {number} dimensions.contentTop  content offsetTop
	     * {number} dimensions.contentBottom  content offsetTop+offsetHeight
	     * {number} dimensions.contentWidth  content offsetWidth
	     * {number} dimensions.contentLeft  content offsetLeft
	     * {number} dimensions.contentRight  content offsetLeft + offsetWidth
	     * {number} dimensions.scrollHeight  scroll scrollHeight
	     * {number} dimensions.scrollTop  scroll scrollTop
	     * {number} dimensions.scrollBottom  scroll scrollTop + scrollHeight
	     * {number} dimensions.scrollWidth  scroll scrollWidth
	     * {number} dimensions.scrollLeft  scroll scrollLeft
	     * {number} dimensions.scrollRight  scroll scrollLeft + scrollWidth
	     */
	    Content.prototype.getContentDimensions = function () {
	        var _scrollEle = this.scrollElement;
	        var parentElement = _scrollEle.parentElement;
	        return {
	            contentHeight: parentElement.offsetHeight,
	            contentTop: parentElement.offsetTop,
	            contentBottom: parentElement.offsetTop + parentElement.offsetHeight,
	            contentWidth: parentElement.offsetWidth,
	            contentLeft: parentElement.offsetLeft,
	            contentRight: parentElement.offsetLeft + parentElement.offsetWidth,
	            scrollHeight: _scrollEle.scrollHeight,
	            scrollTop: _scrollEle.scrollTop,
	            scrollBottom: _scrollEle.scrollTop + _scrollEle.scrollHeight,
	            scrollWidth: _scrollEle.scrollWidth,
	            scrollLeft: _scrollEle.scrollLeft,
	            scrollRight: _scrollEle.scrollLeft + _scrollEle.scrollWidth,
	        };
	    };
	    /**
	     * @private
	     * Adds padding to the bottom of the scroll element when the keyboard is open
	     * so content below the keyboard can be scrolled into view.
	     */
	    Content.prototype.addScrollPadding = function (newPadding) {
	        if (newPadding > this._padding) {
	            void 0;
	            this._padding = newPadding;
	            this.scrollElement.style.paddingBottom = newPadding + 'px';
	        }
	    };
	    Content = __decorate([
	        core_1.Component({
	            selector: 'ion-content',
	            template: '<scroll-content>' +
	                '<ng-content></ng-content>' +
	                '</scroll-content>' +
	                '<ng-content select="ion-refresher"></ng-content>'
	        }),
	        __param(4, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, config_1.Config, app_1.IonicApp, core_1.NgZone, view_controller_1.ViewController])
	    ], Content);
	    return Content;
	})(ion_1.Ion);
	exports.Content = Content;


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var ion_1 = __webpack_require__(287);
	/**
	 * @name Scroll
	 * @description
	 * Scroll is a non-flexboxed scroll area that can scroll horizontally or vertically. `ion-Scroll` Can be used in places were you may not need a full page scroller, but a highly customized one, such as image scubber or comment scroller.
	 * @usage
	 * ```html
	 * <ion-scroll scrollX="true">
	 * </ion-scroll>
	 *
	 * <ion-scroll scrollY="true">
	 * </ion-scroll>
	 *
	 * <ion-scroll scrollX="true" scrollY="true">
	 * </ion-scroll>
	 * ```
	 *@property {boolean} [scrollX] - whether to enable scrolling along the X axis
	 *@property {boolean} [scrollY] - whether to enable scrolling along the Y axis
	 *@property {boolean} [zoom] - whether to enable zooming
	 *@property {number} [maxZoom] - set the max zoom amount for ion-scroll
	 * @demo /docs/v2/demos/scroll/
	 */
	var Scroll = (function (_super) {
	    __extends(Scroll, _super);
	    function Scroll(elementRef) {
	        _super.call(this, elementRef);
	        /**
	         * @private
	         */
	        this.maxScale = 3;
	        /**
	         * @private
	         */
	        this.zoomDuration = 250;
	    }
	    /**
	     * @private
	     */
	    Scroll.prototype.ngOnInit = function () {
	        this.scrollElement = this.getNativeElement().children[0];
	    };
	    /**
	     * @private
	     * Add a scroll event handler to the scroll element if it exists.
	     * @param {Function} handler  The scroll handler to add to the scroll element.
	     * @returns {?Function} a function to remove the specified handler, otherwise
	     * undefined if the scroll element doesn't exist.
	     */
	    Scroll.prototype.addScrollEventListener = function (handler) {
	        var _this = this;
	        if (!this.scrollElement) {
	            return;
	        }
	        this.scrollElement.addEventListener('scroll', handler);
	        return function () {
	            _this.scrollElement.removeEventListener('scroll', handler);
	        };
	    };
	    Scroll = __decorate([
	        core_1.Component({
	            selector: 'ion-scroll',
	            inputs: [
	                'scrollX', 'scrollY', 'zoom', 'maxZoom'
	            ],
	            host: {
	                '[class.scroll-x]': 'scrollX',
	                '[class.scroll-y]': 'scrollY'
	            },
	            template: '<scroll-content>' +
	                '<div class="scroll-zoom-wrapper">' +
	                '<ng-content></ng-content>' +
	                '</div>' +
	                '</scroll-content>'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Scroll);
	    return Scroll;
	})(ion_1.Ion);
	exports.Scroll = Scroll;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var content_1 = __webpack_require__(310);
	/**
	 * @name InfiniteScroll
	 * @description
	 * The Infinite Scroll allows you to perform an action when the user
	 * scrolls a specified distance from the bottom of the page.
	 *
	 * The expression assigned to the `infinite` event is called when
	 * the user scrolls to the specified distance. When this expression
	 * has finished its tasks, it should call the `complete()` method
	 * on the infinite scroll instance.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *
	 *  <ion-list>
	 *    <ion-item *ngFor="#i of items">{{i}}</ion-item>
	 *  </ion-list>
	 *
	 *  <ion-infinite-scroll (infinite)="doInfinite($event)">
	 *    <ion-infinite-scroll-content></ion-infinite-scroll-content>
	 *  </ion-infinite-scroll>
	 *
	 * </ion-content>
	 * ```
	 *
	 * ```ts
	 * @Page({...})
	 * export class NewsFeedPage {
	 *
	 *   constructor() {
	 *     this.items = [];
	 *     for (var i = 0; i < 30; i++) {
	 *       this.items.push( this.items.length );
	 *     }
	 *   }
	 *
	 *   doInfinite(infiniteScroll) {
	 *     console.log('Begin async operation');
	 *
	 *     setTimeout(() => {
	 *       for (var i = 0; i < 30; i++) {
	 *         this.items.push( this.items.length );
	 *       }
	 *
	 *       console.log('Async operation has ended');
	 *       infiniteScroll.complete();
	 *     }, 500);
	 *   }
	 *
	 * }
	 * ```
	 *
	 *
	 * ## Infinite Scroll Content
	 *
	 * By default, Ionic uses the infinite scroll spinner that looks
	 * best for the platform the user is on. However, you can change the
	 * default spinner or add text by adding properties to the
	 * `ion-infinite-scroll-content` component.
	 *
	 *  ```html
	 *  <ion-content>
	 *
	 *    <ion-infinite-scroll (infinite)="doInfinite($event)">
	 *      <ion-infinite-scroll-content
	 *        loadingSpinner="bubbles"
	 *        loadingText="Loading more data...">
	 *      </ion-infinite-scroll-content>
	 *    </ion-infinite-scroll>
	 *
	 *  </ion-content>
	 *  ```
	 *
	 *
	 * ## Further Customizing Infinite Scroll Content
	 *
	 * The `ion-infinite-scroll` component holds the infinite scroll logic.
	 * It requires a child component in order to display the content.
	 * Ionic uses `ion-infinite-scroll-content` by default. This component
	 * displays the infinite scroll and changes the look depending
	 * on the infinite scroll's state. Separating these components allows
	 * developers to create their own infinite scroll content components.
	 * You could replace our default content with custom SVG or CSS animations.
	 *
	 * @demo /docs/v2/demos/infinite-scroll/
	 *
	 */
	var InfiniteScroll = (function () {
	    function InfiniteScroll(_content, _zone, _elementRef) {
	        this._content = _content;
	        this._zone = _zone;
	        this._elementRef = _elementRef;
	        this._lastCheck = 0;
	        this._highestY = 0;
	        this._thr = '15%';
	        this._thrPx = 0;
	        this._thrPc = 0.15;
	        this._init = false;
	        this.state = STATE_ENABLED;
	        /**
	         * @output {event} The expression to call when the scroll reaches
	         * the threshold distance. From within your infinite handler,
	         * you must call the infinite scroll's `complete()` method when
	         * your async operation has completed.
	         */
	        this.infinite = new core_1.EventEmitter();
	        _content.addCssClass('has-infinite-scroll');
	    }
	    Object.defineProperty(InfiniteScroll.prototype, "threshold", {
	        /**
	         * @input {string} The threshold distance from the bottom
	         * of the content to call the `infinite` output event when scrolled.
	         * The threshold value can be either a percent, or
	         * in pixels. For example, use the value of `10%` for the `infinite`
	         * output event to get called when the user has scrolled 10%
	         * from the bottom of the page. Use the value `100px` when the
	         * scroll is within 100 pixels from the bottom of the page.
	         * Default is `15%`.
	         */
	        get: function () {
	            return this._thr;
	        },
	        set: function (val) {
	            this._thr = val;
	            if (val.indexOf('%') > -1) {
	                this._thrPx = 0;
	                this._thrPc = (parseFloat(val) / 100);
	            }
	            else {
	                this._thrPx = parseFloat(val);
	                this._thrPc = 0;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    InfiniteScroll.prototype._onScroll = function (ev) {
	        var _this = this;
	        if (this.state === STATE_LOADING || this.state === STATE_DISABLED) {
	            return 1;
	        }
	        var now = Date.now();
	        if (this._lastCheck + 32 > now) {
	            // no need to check less than every XXms
	            return 2;
	        }
	        this._lastCheck = now;
	        var infiniteHeight = this._elementRef.nativeElement.scrollHeight;
	        if (!infiniteHeight) {
	            // if there is no height of this element then do nothing
	            return 3;
	        }
	        var d = this._content.getContentDimensions();
	        if (d.scrollTop <= this._highestY) {
	            // don't bother if scrollY is less than the highest Y seen
	            return 4;
	        }
	        this._highestY = d.scrollTop;
	        var reloadY = d.contentHeight;
	        if (this._thrPc) {
	            reloadY += (reloadY * this._thrPc);
	        }
	        else {
	            reloadY += this._thrPx;
	        }
	        var distanceFromInfinite = ((d.scrollHeight - infiniteHeight) - d.scrollTop) - reloadY;
	        if (distanceFromInfinite < 0) {
	            this._zone.run(function () {
	                void 0;
	                _this.state = STATE_LOADING;
	                _this.infinite.emit(_this);
	            });
	            return 5;
	        }
	        return 6;
	    };
	    /**
	     * Call `complete()` within the `infinite` output event handler when
	     * your async operation has completed. For example, the `loading`
	     * state is while the app is performing an asynchronous operation,
	     * such as receiving more data from an AJAX request to add more items
	     * to a data list. Once the data has been received and UI updated, you
	     * then call this method to signify that the loading has completed.
	     * This method will change the infinite scroll's state from `loading`
	     * to `enabled`.
	     */
	    InfiniteScroll.prototype.complete = function () {
	        this.state = STATE_ENABLED;
	    };
	    /**
	     * Call `enable(false)` to disable the infinite scroll from actively
	     * trying to receive new data while scrolling. This method is useful
	     * when it is known that there is no more data that can be added, and
	     * the infinite scroll is no longer needed.
	     * @param {boolean} shouldEnable  If the infinite scroll should be enabled or not. Setting to `false` will remove scroll event listeners and hide the display.
	     */
	    InfiniteScroll.prototype.enable = function (shouldEnable) {
	        this.state = (shouldEnable ? STATE_ENABLED : STATE_DISABLED);
	        this._setListeners(shouldEnable);
	    };
	    InfiniteScroll.prototype._setListeners = function (shouldListen) {
	        var _this = this;
	        if (this._init) {
	            if (shouldListen) {
	                if (!this._scLsn) {
	                    this._zone.runOutsideAngular(function () {
	                        _this._scLsn = _this._content.addScrollListener(_this._onScroll.bind(_this));
	                    });
	                }
	            }
	            else {
	                this._scLsn && this._scLsn();
	                this._scLsn = null;
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    InfiniteScroll.prototype.ngAfterContentInit = function () {
	        this._init = true;
	        this._setListeners(this.state !== STATE_DISABLED);
	    };
	    /**
	     * @private
	     */
	    InfiniteScroll.prototype.ngOnDestroy = function () {
	        this._setListeners(false);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InfiniteScroll.prototype, "threshold", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], InfiniteScroll.prototype, "infinite", void 0);
	    InfiniteScroll = __decorate([
	        core_1.Directive({
	            selector: 'ion-infinite-scroll'
	        }),
	        __param(0, core_1.Host()), 
	        __metadata('design:paramtypes', [content_1.Content, core_1.NgZone, core_1.ElementRef])
	    ], InfiniteScroll);
	    return InfiniteScroll;
	})();
	exports.InfiniteScroll = InfiniteScroll;
	var STATE_ENABLED = 'enabled';
	var STATE_DISABLED = 'disabled';
	var STATE_LOADING = 'loading';


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var config_1 = __webpack_require__(161);
	var infinite_scroll_1 = __webpack_require__(312);
	var spinner_1 = __webpack_require__(314);
	/**
	 * @private
	 */
	var InfiniteScrollContent = (function () {
	    function InfiniteScrollContent(inf, _config) {
	        this.inf = inf;
	        this._config = _config;
	    }
	    /**
	     * @private
	     */
	    InfiniteScrollContent.prototype.ngOnInit = function () {
	        if (!this.loadingSpinner) {
	            this.loadingSpinner = this._config.get('infiniteLoadingSpinner', this._config.get('spinner', 'ios'));
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InfiniteScrollContent.prototype, "loadingSpinner", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InfiniteScrollContent.prototype, "loadingText", void 0);
	    InfiniteScrollContent = __decorate([
	        core_1.Component({
	            selector: 'ion-infinite-scroll-content',
	            template: '<div class="infinite-loading">' +
	                '<div class="infinite-loading-spinner" *ngIf="loadingSpinner">' +
	                '<ion-spinner [name]="loadingSpinner"></ion-spinner>' +
	                '</div>' +
	                '<div class="infinite-loading-text" [innerHTML]="loadingText" *ngIf="loadingText"></div>' +
	                '</div>',
	            directives: [common_1.NgIf, spinner_1.Spinner],
	            host: {
	                '[attr.state]': 'inf.state'
	            }
	        }), 
	        __metadata('design:paramtypes', [infinite_scroll_1.InfiniteScroll, config_1.Config])
	    ], InfiniteScrollContent);
	    return InfiniteScrollContent;
	})();
	exports.InfiniteScrollContent = InfiniteScrollContent;


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var config_1 = __webpack_require__(161);
	/**
	 * @name Spinner
	 * @description
	 * The `ion-spinner` component provides a variety of animated SVG spinners.
	 * Spinners enables you to give users feedback that the app is actively
	 * processing/thinking/waiting/chillin’ out, or whatever you’d like it to indicate.
	 * By default, the `ion-refresher` feature uses this spinner component while it's
	 * the refresher is in the `refreshing` state.
	 *
	 * Ionic offers a handful of spinners out of the box, and by default, it will use
	 * the appropriate spinner for the platform on which it’s running.
	 *
	 * <table class="table spinner-table">
	 *  <tr>
	 *    <th>
	 *      <code>ios</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="ios"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>ios-small</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="ios-small"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>bubbles</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="bubbles"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>circles</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="circles"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>crescent</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="crescent"></ion-spinner>
	 *    </td>
	 *  </tr>
	 *  <tr>
	 *    <th>
	 *      <code>dots</code>
	 *    </th>
	 *    <td>
	 *      <ion-spinner name="dots"></ion-spinner>
	 *    </td>
	 *  </tr>
	 * </table>
	 *
	 * @usage
	 * The following code would use the default spinner for the platform it's
	 * running from. If it's neither iOS or Android, it'll default to use `ios`.
	 *
	 * ```html
	 * <ion-spinner></ion-spinner>
	 * ```
	 *
	 * By setting the `name` property, you can specify which predefined spinner to
	 * use, no matter what the platform is.
	 *
	 * ```html
	 * <ion-spinner name="bubbles"></ion-spinner>
	 * ```
	 *
	 * ## Styling SVG with CSS
	 * One cool thing about SVG is its ability to be styled with CSS! One thing to note
	 * is that some of the CSS properties on an SVG element have different names. For
	 * example, SVG uses the term `stroke` instead of `border`, and `fill` instead
	 * of `background-color`.
	 *
	 * ```css
	 * ion-spinner svg {
	 *   width: 28px;
	 *   height: 28px;
	 *   stroke: #444;
	 *   fill: #222;
	 * }
	 * ```
	 */
	var Spinner = (function () {
	    function Spinner(_config) {
	        this._config = _config;
	        this._dur = null;
	        /**
	         * @input {string} If the animation is paused or not. Defaults to `false`.
	         */
	        this.paused = false;
	    }
	    Object.defineProperty(Spinner.prototype, "name", {
	        /**
	         * @input {string} SVG spinner name.
	         */
	        get: function () {
	            return this._name;
	        },
	        set: function (val) {
	            this._name = val;
	            this.load();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Spinner.prototype, "duration", {
	        /**
	         * @input {string} How long it takes it to do one loop.
	         */
	        get: function () {
	            return this._dur;
	        },
	        set: function (val) {
	            this._dur = val;
	            this.load();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Spinner.prototype.ngOnInit = function () {
	        this._init = true;
	        this.load();
	    };
	    Spinner.prototype.load = function () {
	        if (this._init) {
	            this._l = [];
	            this._c = [];
	            var name = this._name || this._config.get('spinner', 'ios');
	            var spinner = SPINNERS[name];
	            if (spinner) {
	                this._applied = 'spinner-' + name;
	                if (spinner.lines) {
	                    for (var i = 0, l = spinner.lines; i < l; i++) {
	                        this._l.push(this._loadEle(spinner, i, l));
	                    }
	                }
	                else if (spinner.circles) {
	                    for (var i = 0, l = spinner.circles; i < l; i++) {
	                        this._c.push(this._loadEle(spinner, i, l));
	                    }
	                }
	            }
	        }
	    };
	    Spinner.prototype._loadEle = function (spinner, index, total) {
	        var duration = this._dur || spinner.dur;
	        var data = spinner.fn(duration, index, total);
	        data.style.animationDuration = duration + 'ms';
	        return data;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Spinner.prototype, "name", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Spinner.prototype, "duration", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Spinner.prototype, "paused", void 0);
	    Spinner = __decorate([
	        core_1.Component({
	            selector: 'ion-spinner',
	            template: '<svg viewBox="0 0 64 64" *ngFor="#i of _c" [ngStyle]="i.style">' +
	                '<circle [attr.r]="i.r" transform="translate(32,32)"></circle>' +
	                '</svg>' +
	                '<svg viewBox="0 0 64 64" *ngFor="#i of _l" [ngStyle]="i.style">' +
	                '<line [attr.y1]="i.y1" [attr.y2]="i.y2" transform="translate(32,32)"></line>' +
	                '</svg>',
	            directives: [common_1.NgStyle],
	            host: {
	                '[class]': '_applied',
	                '[class.spinner-paused]': 'paused'
	            }
	        }), 
	        __metadata('design:paramtypes', [config_1.Config])
	    ], Spinner);
	    return Spinner;
	})();
	exports.Spinner = Spinner;
	var SPINNERS = {
	    ios: {
	        dur: 1000,
	        lines: 12,
	        fn: function (dur, index, total) {
	            return {
	                y1: 17,
	                y2: 29,
	                style: {
	                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    'ios-small': {
	        dur: 1000,
	        lines: 12,
	        fn: function (dur, index, total) {
	            return {
	                y1: 12,
	                y2: 20,
	                style: {
	                    transform: 'rotate(' + (30 * index + (index < 6 ? 180 : -180)) + 'deg)',
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    bubbles: {
	        dur: 1000,
	        circles: 9,
	        fn: function (dur, index, total) {
	            return {
	                r: 5,
	                style: {
	                    top: 9 * Math.sin(2 * Math.PI * index / total),
	                    left: 9 * Math.cos(2 * Math.PI * index / total),
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    circles: {
	        dur: 1000,
	        circles: 8,
	        fn: function (dur, index, total) {
	            return {
	                r: 5,
	                style: {
	                    top: 9 * Math.sin(2 * Math.PI * index / total),
	                    left: 9 * Math.cos(2 * Math.PI * index / total),
	                    animationDelay: -(dur - ((dur / total) * index)) + 'ms'
	                }
	            };
	        }
	    },
	    crescent: {
	        dur: 750,
	        circles: 1,
	        fn: function (dur) {
	            return {
	                r: 26,
	                style: {}
	            };
	        }
	    },
	    dots: {
	        dur: 750,
	        circles: 3,
	        fn: function (dur, index, total) {
	            return {
	                r: 6,
	                style: {
	                    left: (9 - (9 * index)),
	                    animationDelay: -(110 * index) + 'ms'
	                }
	            };
	        }
	    }
	};


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var content_1 = __webpack_require__(310);
	var util_1 = __webpack_require__(163);
	var dom_1 = __webpack_require__(164);
	/**
	 * @name Refresher
	 * @description
	 * The Refresher provides pull-to-refresh functionality on a content component.
	 * Place the `ion-refresher` as the first child of your `ion-content` element.
	 *
	 * Pages can then listen to the refresher's various output events. The
	 * `refresh` output event is fired when the user has pulled down far
	 * enough to kick off the refreshing process. Once the async operation
	 * has completed and the refreshing should end, call `complete()`.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *
	 *   <ion-refresher (refresh)="doRefresh($event)">
	 *     <ion-refresher-content></ion-refresher-content>
	 *   </ion-refresher>
	 *
	 * </ion-content>
	 * ```
	 *
	 * ```ts
	 * @Page({...})
	 * export class NewsFeedPage {
	 *
	 *   doRefresh(refresher) {
	 *     console.log('Begin async operation', refresher);
	 *
	 *     setTimeout(() => {
	 *       console.log('Async operation has ended');
	 *       refresher.complete();
	 *     }, 2000);
	 *   }
	 *
	 * }
	 * ```
	 *
	 *
	 * ## Refresher Content
	 *
	 * By default, Ionic provides the pulling icon and refreshing spinner that
	 * looks best for the platform the user is on. However, you can change the
	 * default icon and spinner, along with adding text for each state by
	 * adding properties to the child `ion-refresher-content` component.
	 *
	 *  ```html
	 *  <ion-content>
	 *
	 *    <ion-refresher (refresh)="doRefresh($event)">
	 *      <ion-refresher-content
	 *        pullingIcon="arrow-dropdown"
	 *        pullingText="Pull to refresh"
	 *        refreshingSpinner="circles"
	 *        refreshingText="Refreshing...">
	 *      </ion-refresher-content>
	 *    </ion-refresher>
	 *
	 *  </ion-content>
	 *  ```
	 *
	 *
	 * ## Further Customizing Refresher Content
	 *
	 * The `ion-refresher` component holds the refresh logic.
	 * It requires a child component in order to display the content.
	 * Ionic uses `ion-refresher-content` by default. This component
	 * displays the refresher and changes the look depending
	 * on the refresher's state. Separating these components
	 * allows developers to create their own refresher content
	 * components. You could replace our default content with
	 * custom SVG or CSS animations.
	 *
	 * @demo /docs/v2/demos/refresher/
	 *
	 */
	var Refresher = (function () {
	    function Refresher(_content, _zone, elementRef) {
	        this._content = _content;
	        this._zone = _zone;
	        this._appliedStyles = false;
	        this._lastStart = 0;
	        this._lastCheck = 0;
	        this._isEnabled = true;
	        /**
	         * The current state which the refresher is in. The refresher's states include:
	         *
	         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.
	         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.
	         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.
	         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.
	         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.
	         * - `completing` - The `refreshing` state has finished and the refresher is in the process of closing itself. Once closed, the refresher will go back to the `inactive` state.
	         */
	        this.state = STATE_INACTIVE;
	        /**
	         * The Y coordinate of where the user started to the pull down the content.
	         */
	        this.startY = null;
	        /**
	         * The current touch or mouse event's Y coordinate.
	         */
	        this.currentY = null;
	        /**
	         * The distance between the start of the pull and the current touch or
	         * mouse event's Y coordinate.
	         */
	        this.deltaY = null;
	        /**
	         * A number representing how far down the user has pulled.
	         * The number `0` represents the user hasn't pulled down at all. The
	         * number `1`, and anything greater than `1`, represents that the user
	         * has pulled far enough down that when they let go then the refresh will
	         * happen. If they let go and the number is less than `1`, then the
	         * refresh will not happen, and the content will return to it's original
	         * position.
	         */
	        this.progress = 0;
	        /**
	         * @input {number} The min distance the user must pull down until the
	         * refresher can go into the `refreshing` state. Default is `60`.
	         */
	        this.pullMin = 60;
	        /**
	         * @input {number} The maximum distance of the pull until the refresher
	         * will automatically go into the `refreshing` state. By default, the pull
	         * maximum will be the result of `pullMin + 60`.
	         */
	        this.pullMax = null;
	        /**
	         * @input {number} How many milliseconds it takes to close the refresher. Default is `280`.
	         */
	        this.closeDuration = 280;
	        /**
	         * @input {number} How many milliseconds it takes the refresher to to snap back to the `refreshing` state. Default is `280`.
	         */
	        this.snapbackDuration = 280;
	        /**
	         * @output {event} When the user lets go and has pulled down far enough, which would be
	         * farther than the `pullMin`, then your refresh hander if fired and the state is
	         * updated to `refreshing`. From within your refresh handler, you must call the
	         * `complete()` method when your async operation has completed.
	         */
	        this.refresh = new core_1.EventEmitter();
	        /**
	         * @output {event} While the user is pulling down the content and exposing the refresher.
	         */
	        this.pulling = new core_1.EventEmitter();
	        /**
	         * @output {event} When the user begins to start pulling down.
	         */
	        this.start = new core_1.EventEmitter();
	        _content.addCssClass('has-refresher');
	        // deprecated warning
	        var ele = elementRef.nativeElement;
	        var deprecatedAttrs = ['pullingIcon', 'pullingText', 'refreshingIcon', 'refreshingText', 'spinner'];
	        deprecatedAttrs.forEach(function (attrName) {
	            if (ele.hasAttribute(attrName)) {
	                void 0;
	            }
	        });
	        if (!ele.children.length) {
	            void 0;
	        }
	    }
	    Object.defineProperty(Refresher.prototype, "enabled", {
	        /**
	         * @input {boolean} If the refresher is enabled or not. Default is `true`.
	         */
	        get: function () {
	            return this._isEnabled;
	        },
	        set: function (val) {
	            this._isEnabled = util_1.isTrueProperty(val);
	            this._setListeners(this._isEnabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Refresher.prototype._onStart = function (ev) {
	        // if multitouch then get out immediately
	        if (ev.touches && ev.touches.length > 1) {
	            return 1;
	        }
	        var coord = dom_1.pointerCoord(ev);
	        void 0;
	        var now = Date.now();
	        if (this._lastStart + 100 > now) {
	            return 2;
	        }
	        this._lastStart = now;
	        if (ev.type === 'mousedown' && !this._mMove) {
	            this._mMove = this._content.addMouseMoveListener(this._onMove.bind(this));
	        }
	        this.startY = this.currentY = coord.y;
	        this.progress = 0;
	        if (!this.pullMax) {
	            this.pullMax = (this.pullMin + 60);
	        }
	    };
	    Refresher.prototype._onMove = function (ev) {
	        var _this = this;
	        // this method can get called like a bazillion times per second,
	        // so it's built to be as efficient as possible, and does its
	        // best to do any DOM read/writes only when absolutely necessary
	        void 0;
	        // if multitouch then get out immediately
	        if (ev.touches && ev.touches.length > 1) {
	            return 1;
	        }
	        // do nothing if it's actively refreshing
	        // or it's in the process of closing
	        // or this was never a startY
	        if (this.startY === null || this.state === STATE_REFRESHING || this.state === STATE_CANCELLING || this.state === STATE_COMPLETING) {
	            return 2;
	        }
	        // if we just updated stuff less than 16ms ago
	        // then don't check again, just chillout plz
	        var now = Date.now();
	        if (this._lastCheck + 16 > now) {
	            return 3;
	        }
	        // remember the last time we checked all this
	        this._lastCheck = now;
	        // get the current pointer coordinates
	        var coord = dom_1.pointerCoord(ev);
	        this.currentY = coord.y;
	        // it's now possible they could be pulling down the content
	        // how far have they pulled so far?
	        this.deltaY = (coord.y - this.startY);
	        // don't bother if they're scrolling up
	        // and have not already started dragging
	        if (this.deltaY <= 0) {
	            // the current Y is higher than the starting Y
	            // so they scrolled up enough to be ignored
	            this.progress = 0;
	            if (this.state !== STATE_INACTIVE) {
	                this._zone.run(function () {
	                    _this.state = STATE_INACTIVE;
	                });
	            }
	            if (this._appliedStyles) {
	                // reset the styles only if they were applied
	                this._setCss(0, '', false, '');
	                return 5;
	            }
	            return 6;
	        }
	        if (this.state === STATE_INACTIVE) {
	            // this refresh is not already actively pulling down
	            // get the content's scrollTop
	            var scrollHostScrollTop = this._content.getContentDimensions().scrollTop;
	            // if the scrollTop is greater than zero then it's
	            // not possible to pull the content down yet
	            if (scrollHostScrollTop > 0) {
	                this.progress = 0;
	                this.startY = null;
	                return 7;
	            }
	            // content scrolled all the way to the top, and dragging down
	            this.state = STATE_PULLING;
	        }
	        // prevent native scroll events
	        ev.preventDefault();
	        // the refresher is actively pulling at this point
	        // move the scroll element within the content element
	        this._setCss(this.deltaY, '0ms', true, '');
	        if (!this.deltaY) {
	            // don't continue if there's no delta yet
	            this.progress = 0;
	            return 8;
	        }
	        // so far so good, let's run this all back within zone now
	        this._zone.run(function () {
	            _this._onMoveInZone();
	        });
	    };
	    Refresher.prototype._onMoveInZone = function () {
	        // set pull progress
	        this.progress = (this.deltaY / this.pullMin);
	        // emit "start" if it hasn't started yet
	        if (!this._didStart) {
	            this._didStart = true;
	            this.start.emit(this);
	        }
	        // emit "pulling" on every move
	        this.pulling.emit(this);
	        // do nothing if the delta is less than the pull threshold
	        if (this.deltaY < this.pullMin) {
	            // ensure it stays in the pulling state, cuz its not ready yet
	            this.state = STATE_PULLING;
	            return 2;
	        }
	        if (this.deltaY > this.pullMax) {
	            // they pulled farther than the max, so kick off the refresh
	            this._beginRefresh();
	            return 3;
	        }
	        // pulled farther than the pull min!!
	        // it is now in the `ready` state!!
	        // if they let go then it'll refresh, kerpow!!
	        this.state = STATE_READY;
	        return 4;
	    };
	    Refresher.prototype._onEnd = function (ev) {
	        // only run in a zone when absolutely necessary
	        var _this = this;
	        if (this.state === STATE_READY) {
	            this._zone.run(function () {
	                // they pulled down far enough, so it's ready to refresh
	                _this._beginRefresh();
	            });
	        }
	        else if (this.state === STATE_PULLING) {
	            this._zone.run(function () {
	                // they were pulling down, but didn't pull down far enough
	                // set the content back to it's original location
	                // and close the refresher
	                // set that the refresh is actively cancelling
	                _this.cancel();
	            });
	        }
	        // reset on any touchend/mouseup
	        this.startY = null;
	        if (this._mMove) {
	            // we don't want to always listen to mousemoves
	            // remove it if we're still listening
	            this._mMove();
	            this._mMove = null;
	        }
	    };
	    Refresher.prototype._beginRefresh = function () {
	        // assumes we're already back in a zone
	        // they pulled down far enough, so it's ready to refresh
	        this.state = STATE_REFRESHING;
	        // place the content in a hangout position while it thinks
	        this._setCss(this.pullMin, (this.snapbackDuration + 'ms'), true, '');
	        // emit "refresh" because it was pulled down far enough
	        // and they let go to begin refreshing
	        this.refresh.emit(this);
	    };
	    /**
	     * Call `complete()` when your async operation has completed.
	     * For example, the `refreshing` state is while the app is performing
	     * an asynchronous operation, such as receiving more data from an
	     * AJAX request. Once the data has been received, you then call this
	     * method to signify that the refreshing has completed and to close
	     * the refresher. This method also changes the refresher's state from
	     * `refreshing` to `completing`.
	     */
	    Refresher.prototype.complete = function () {
	        this._close(STATE_COMPLETING, '120ms');
	    };
	    /**
	     * Changes the refresher's state from `refreshing` to `cancelling`.
	     */
	    Refresher.prototype.cancel = function () {
	        this._close(STATE_CANCELLING, '');
	    };
	    Refresher.prototype._close = function (state, delay) {
	        var timer;
	        function close(ev) {
	            // closing is done, return to inactive state
	            if (ev) {
	                clearTimeout(timer);
	            }
	            this.state = STATE_INACTIVE;
	            this.progress = 0;
	            this._didStart = this.startY = this.currentY = this.deltaY = null;
	            this._setCss(0, '0ms', false, '');
	        }
	        // create fallback timer incase something goes wrong with transitionEnd event
	        timer = setTimeout(close.bind(this), 600);
	        // create transition end event on the content's scroll element
	        this._content.onScrollElementTransitionEnd(close.bind(this));
	        // reset set the styles on the scroll element
	        // set that the refresh is actively cancelling/completing
	        this.state = state;
	        this._setCss(0, '', true, delay);
	        if (this._mMove) {
	            // always remove the mousemove event
	            this._mMove();
	            this._mMove = null;
	        }
	    };
	    Refresher.prototype._setCss = function (y, duration, overflowVisible, delay) {
	        this._appliedStyles = (y > 0);
	        var content = this._content;
	        content.setScrollElementStyle(dom_1.CSS.transform, ((y > 0) ? 'translateY(' + y + 'px) translateZ(0px)' : 'translateZ(0px)'));
	        content.setScrollElementStyle(dom_1.CSS.transitionDuration, duration);
	        content.setScrollElementStyle(dom_1.CSS.transitionDelay, delay);
	        content.setScrollElementStyle('overflow', (overflowVisible ? 'hidden' : ''));
	    };
	    Refresher.prototype._setListeners = function (shouldListen) {
	        var self = this;
	        var content = self._content;
	        if (shouldListen) {
	            // add listener outside of zone
	            // touch handlers
	            self._zone.runOutsideAngular(function () {
	                if (!self._tStart) {
	                    self._tStart = content.addTouchStartListener(self._onStart.bind(self));
	                }
	                if (!self._tMove) {
	                    self._tMove = content.addTouchMoveListener(self._onMove.bind(self));
	                }
	                if (!self._tEnd) {
	                    self._tEnd = content.addTouchEndListener(self._onEnd.bind(self));
	                }
	                // mouse handlers
	                // mousemove does not get added until mousedown fires
	                if (!self._mDown) {
	                    self._mDown = content.addMouseDownListener(self._onStart.bind(self));
	                }
	                if (!self._mUp) {
	                    self._mUp = content.addMouseUpListener(self._onEnd.bind(self));
	                }
	            });
	        }
	        else {
	            // unregister event listeners from content element
	            self._mDown && self._mDown();
	            self._mMove && self._mMove();
	            self._mUp && self._mUp();
	            self._tStart && self._tStart();
	            self._tMove && self._tMove();
	            self._tEnd && self._tEnd();
	            self._mDown = self._mMove = self._mUp = self._tStart = self._tMove = self._tEnd = null;
	        }
	    };
	    /**
	     * @private
	     */
	    Refresher.prototype.ngOnInit = function () {
	        // bind event listeners
	        // save the unregister listener functions to use onDestroy
	        this._setListeners(this._isEnabled);
	    };
	    /**
	     * @private
	     */
	    Refresher.prototype.ngOnDestroy = function () {
	        this._setListeners(false);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "pullMin", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "pullMax", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "closeDuration", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Refresher.prototype, "snapbackDuration", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Refresher.prototype, "enabled", null);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Refresher.prototype, "refresh", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Refresher.prototype, "pulling", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Refresher.prototype, "start", void 0);
	    Refresher = __decorate([
	        core_1.Directive({
	            selector: 'ion-refresher',
	            host: {
	                '[class.refresher-active]': 'state !== "inactive"'
	            }
	        }),
	        __param(0, core_1.Host()), 
	        __metadata('design:paramtypes', [content_1.Content, core_1.NgZone, core_1.ElementRef])
	    ], Refresher);
	    return Refresher;
	})();
	exports.Refresher = Refresher;
	var STATE_INACTIVE = 'inactive';
	var STATE_PULLING = 'pulling';
	var STATE_READY = 'ready';
	var STATE_REFRESHING = 'refreshing';
	var STATE_CANCELLING = 'cancelling';
	var STATE_COMPLETING = 'completing';


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var config_1 = __webpack_require__(161);
	var icon_1 = __webpack_require__(299);
	var refresher_1 = __webpack_require__(315);
	var spinner_1 = __webpack_require__(314);
	/**
	 * @private
	 */
	var RefresherContent = (function () {
	    function RefresherContent(r, _config) {
	        this.r = r;
	        this._config = _config;
	    }
	    /**
	     * @private
	     */
	    RefresherContent.prototype.ngOnInit = function () {
	        if (!this.pullingIcon) {
	            this.pullingIcon = this._config.get('refresherPullingIcon', 'arrow-down');
	        }
	        if (!this.refreshingSpinner) {
	            this.refreshingSpinner = this._config.get('refresherRefreshingSpinner', this._config.get('spinner', 'ios'));
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "pullingIcon", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "pullingText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "refreshingSpinner", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], RefresherContent.prototype, "refreshingText", void 0);
	    RefresherContent = __decorate([
	        core_1.Component({
	            selector: 'ion-refresher-content',
	            template: '<div class="refresher-pulling">' +
	                '<div class="refresher-pulling-icon" *ngIf="pullingIcon">' +
	                '<ion-icon [name]="pullingIcon"></ion-icon>' +
	                '</div>' +
	                '<div class="refresher-pulling-text" [innerHTML]="pullingText" *ngIf="pullingText"></div>' +
	                '</div>' +
	                '<div class="refresher-refreshing">' +
	                '<div class="refresher-refreshing-icon">' +
	                '<ion-spinner [name]="refreshingSpinner"></ion-spinner>' +
	                '</div>' +
	                '<div class="refresher-refreshing-text" [innerHTML]="refreshingText" *ngIf="refreshingText"></div>' +
	                '</div>',
	            directives: [common_1.NgIf, icon_1.Icon, spinner_1.Spinner],
	            host: {
	                '[attr.state]': 'r.state'
	            }
	        }), 
	        __metadata('design:paramtypes', [refresher_1.Refresher, config_1.Config])
	    ], RefresherContent);
	    return RefresherContent;
	})();
	exports.RefresherContent = RefresherContent;


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var ion_1 = __webpack_require__(287);
	var animation_1 = __webpack_require__(306);
	var gesture_1 = __webpack_require__(292);
	var util_1 = __webpack_require__(293);
	var dom_1 = __webpack_require__(164);
	var util_2 = __webpack_require__(163);
	var swiper_widget_1 = __webpack_require__(318);
	/**
	 * @name Slides
	 * @description
	 * Slides is a slide box implementation based on Swiper.js
	 *
	 * @usage
	 * ```ts
	 * @Page({
	 *  template: `
	 *     <ion-slides pager (change)="onSlideChanged($event)" (move)="onSlideMove($event)">
	 *      <ion-slide>
	 *        <h3>Thank you for choosing the Awesome App!</h3>
	 *        <p>
	 *          The number one app for everything awesome.
	 *        </p>
	 *      </ion-slide>
	 *      <ion-slide>
	 *        <h3>Using Awesome</h3>
	 *         <div id="list">
	 *           <h5>Just three steps:</h5>
	 *           <ol>
	 *             <li>Be awesome</li>
	 *             <li>Stay awesome</li>
	 *             <li>There is no step 3</li>
	 *           </ol>
	 *         </div>
	 *      </ion-slide>
	 *      <ion-slide>
	 *        <h3>Any questions?</h3>
	 *      </ion-slide>
	 *    </ion-slides>
	 *    `
	 *})
	 *
	 *```
	 * @demo /docs/v2/demos/slides/
	 * @see {@link /docs/v2/components#slides Slides Component Docs}
	 *
	 * Swiper.js:
	 * The most modern mobile touch slider and framework with hardware accelerated transitions
	 *
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2015, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 */
	var Slides = (function (_super) {
	    __extends(Slides, _super);
	    /**
	     * @private
	     * @param {ElementRef} elementRef  TODO
	     */
	    function Slides(elementRef) {
	        var _this = this;
	        _super.call(this, elementRef);
	        /**
	         * @output {any} expression to evaluate when a slide has been changed
	         */
	        this.change = new core_1.EventEmitter();
	        /**
	         * @output {any} expression to evaluate when a slide change starts
	         */
	        this.slideChangeStart = new core_1.EventEmitter();
	        /**
	         * @output {any} expression to evaluate when a slide moves
	         */
	        this.move = new core_1.EventEmitter();
	        this.rapidUpdate = util_2.debounce(function () {
	            _this.update();
	        }, 10);
	    }
	    /**
	     * @private
	     */
	    Slides.prototype.ngOnInit = function () {
	        var _this = this;
	        if (!this.options) {
	            this.options = {};
	        }
	        this.showPager = util_2.isTrueProperty(this.pager);
	        var options = util_2.defaults({
	            pagination: '.swiper-pagination',
	        }, this.options);
	        options.onTap = function (swiper, e) {
	            _this.onTap(swiper, e);
	            return _this.options.onTap && _this.options.onTap(swiper, e);
	        };
	        options.onClick = function (swiper, e) {
	            _this.onClick(swiper, e);
	            return _this.options.onClick && _this.options.onClick(swiper, e);
	        };
	        options.onDoubleTap = function (swiper, e) {
	            _this.onDoubleTap(swiper, e);
	            return _this.options.onDoubleTap && _this.options.onDoubleTap(swiper, e);
	        };
	        options.onTransitionStart = function (swiper, e) {
	            _this.onTransitionStart(swiper, e);
	            return _this.options.onTransitionStart && _this.options.onTransitionStart(swiper, e);
	        };
	        options.onTransitionEnd = function (swiper, e) {
	            _this.onTransitionEnd(swiper, e);
	            return _this.options.onTransitionEnd && _this.options.onTransitionEnd(swiper, e);
	        };
	        options.onSlideChangeStart = function (swiper) {
	            _this.slideChangeStart.emit(swiper);
	            return _this.options.onSlideChangeStart && _this.options.onSlideChangeStart(swiper);
	        };
	        options.onSlideChangeEnd = function (swiper) {
	            _this.change.emit(swiper);
	            return _this.options.onSlideChangeEnd && _this.options.onSlideChangeEnd(swiper);
	        };
	        options.onLazyImageLoad = function (swiper, slide, img) {
	            return _this.options.onLazyImageLoad && _this.options.onLazyImageLoad(swiper, slide, img);
	        };
	        options.onLazyImageReady = function (swiper, slide, img) {
	            return _this.options.onLazyImageReady && _this.options.onLazyImageReady(swiper, slide, img);
	        };
	        options.onSliderMove = function (swiper, e) {
	            _this.move.emit(swiper);
	            return _this.options.onSliderMove && _this.options.onSliderMove(swiper, e);
	        };
	        setTimeout(function () {
	            var swiper = new swiper_widget_1.Swiper(_this.getNativeElement().children[0], options);
	            _this.slider = swiper;
	        });
	        /*
	        * TODO: Finish this
	        if (util.isTrueProperty(this.zoom)) {
	          this.enableZoom = true;
	          setTimeout(() => {
	            this.initZoom();
	          })
	        }
	        */
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTap = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onClick = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onDoubleTap = function (swiper, e) {
	        this.toggleZoom(swiper, e);
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onLazyImageLoad = function (swiper, slide, img) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onLazyImageReady = function (swiper, slide, img) {
	    };
	    /*
	    nextButton(swiper, e) {
	    }
	    prevButton() {
	    }
	    indexButton() {
	    }
	    */
	    /**
	     * @private
	     */
	    Slides.prototype.initZoom = function () {
	        var _this = this;
	        this.zoomDuration = this.zoomDuration || 230;
	        this.maxScale = this.zoomMax || 3;
	        this.zoomElement = this.getNativeElement().children[0].children[0];
	        this.zoomElement && this.zoomElement.classList.add('ion-scroll-zoom');
	        this.zoomGesture = new gesture_1.Gesture(this.zoomElement);
	        this.zoomGesture.listen();
	        this.scale = 1;
	        this.zoomLastPosX = 0;
	        this.zoomLastPosY = 0;
	        var last_scale, startX, startY, posX = 0, posY = 0, zoomRect;
	        this.viewportWidth = this.getNativeElement().offsetWidth;
	        this.viewportHeight = this.getNativeElement().offsetHeight;
	        this.zoomElement.addEventListener('touchstart', function (e) {
	            _this.onTouchStart(e);
	        });
	        this.zoomElement.addEventListener('touchmove', function (e) {
	            _this.onTouchMove(e);
	        });
	        this.zoomElement.addEventListener('touchend', function (e) {
	            _this.onTouchEnd(e);
	        });
	        this.zoomGesture.on('pinchstart', function (e) {
	            last_scale = _this.scale;
	            void 0;
	        });
	        this.zoomGesture.on('pinch', function (e) {
	            _this.scale = Math.max(1, Math.min(last_scale * e.scale, 10));
	            void 0;
	            _this.zoomElement.style[dom_1.CSS.transform] = 'scale(' + _this.scale + ')';
	            zoomRect = _this.zoomElement.getBoundingClientRect();
	        });
	        this.zoomGesture.on('pinchend', function (e) {
	            //last_scale = Math.max(1, Math.min(last_scale * e.scale, 10));
	            if (_this.scale > _this.maxScale) {
	                var za = new animation_1.Animation(_this.zoomElement)
	                    .duration(_this.zoomDuration)
	                    .easing('linear')
	                    .from('scale', _this.scale)
	                    .to('scale', _this.maxScale);
	                za.play();
	                _this.scale = _this.maxScale;
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.resetZoom = function () {
	        if (this.zoomElement) {
	            this.zoomElement.parentElement.style[dom_1.CSS.transform] = '';
	            this.zoomElement.style[dom_1.CSS.transform] = 'scale(1)';
	        }
	        this.scale = 1;
	        this.zoomLastPosX = 0;
	        this.zoomLastPosY = 0;
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.toggleZoom = function (swiper, e) {
	        void 0;
	        if (!this.enableZoom) {
	            return;
	        }
	        void 0;
	        /*
	        let x = e.pointers[0].clientX;
	        let y = e.pointers[0].clientY;
	    
	        let mx = this.viewportWidth / 2;
	        let my = this.viewportHeight / 2;
	    
	        let tx, ty;
	    
	        if (x > mx) {
	          // Greater than half
	          tx = -x;
	        } else {
	          // Less than or equal to half
	          tx = (this.viewportWidth - x);
	        }
	        if (y > my) {
	          ty = -y;
	        } else {
	          ty = y-my;
	        }
	    
	        console.debug(y);
	        */
	        var zi = new animation_1.Animation(this.touch.target.children[0])
	            .duration(this.zoomDuration)
	            .easing('linear');
	        var zw = new animation_1.Animation(this.touch.target.children[0])
	            .duration(this.zoomDuration)
	            .easing('linear');
	        var za = new animation_1.Animation();
	        za.add(zi);
	        if (this.scale > 1) {
	            // Zoom out
	            //zw.fromTo('translateX', posX + 'px', '0px');
	            //zw.fromTo('translateY', posY + 'px', '0px');
	            zi.from('scale', this.scale);
	            zi.to('scale', 1);
	            za.play();
	            //posX = 0;
	            //posY = 0;
	            this.scale = 1;
	        }
	        else {
	            // Zoom in
	            //zw.fromTo('translateX', posX + 'px', tx + 'px');
	            //zw.fromTo('translateY', posY + 'px', ty + 'px');
	            zi.from('scale', this.scale);
	            zi.to('scale', this.maxScale);
	            za.play();
	            //posX = tx;
	            //posY = ty;
	            this.scale = this.maxScale;
	        }
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTransitionStart = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTransitionEnd = function (swiper, e) {
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTouchStart = function (e) {
	        void 0;
	        //TODO: Support mice as well
	        var target = util_1.dom.closest(e.target, '.slide').children[0].children[0];
	        this.touch = {
	            x: null,
	            y: null,
	            startX: e.touches[0].clientX,
	            startY: e.touches[0].clientY,
	            deltaX: 0,
	            deltaY: 0,
	            lastX: 0,
	            lastY: 0,
	            target: target.parentElement,
	            zoomable: target,
	            zoomableWidth: target.offsetWidth,
	            zoomableHeight: target.offsetHeight
	        };
	        void 0;
	        //TODO: android prevent default
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTouchMove = function (e) {
	        this.touch.deltaX = e.touches[0].clientX - this.touch.startX;
	        this.touch.deltaY = e.touches[0].clientY - this.touch.startY;
	        // TODO: Make sure we need to transform (image is bigger than viewport)
	        var zoomableScaledWidth = this.touch.zoomableWidth * this.scale;
	        var zoomableScaledHeight = this.touch.zoomableHeight * this.scale;
	        var x1 = Math.min((this.viewportWidth / 2) - zoomableScaledWidth / 2, 0);
	        var x2 = -x1;
	        var y1 = Math.min((this.viewportHeight / 2) - zoomableScaledHeight / 2, 0);
	        var y2 = -y1;
	        void 0;
	        if (this.scale <= 1) {
	            return;
	        }
	        void 0;
	        // Move image
	        this.touch.x = this.touch.deltaX + this.touch.lastX;
	        this.touch.y = this.touch.deltaY + this.touch.lastY;
	        if (this.touch.x < x1) {
	            void 0;
	        }
	        if (this.touch.x > x2) {
	            void 0;
	        }
	        if (this.touch.x > this.viewportWidth) {
	        }
	        else if (-this.touch.x > this.viewportWidth) {
	        }
	        else {
	            void 0;
	            //this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
	            this.touch.target.style[dom_1.CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
	            e.preventDefault();
	            e.stopPropagation();
	            return false;
	        }
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.onTouchEnd = function (e) {
	        void 0;
	        if (this.scale > 1) {
	            if (Math.abs(this.touch.x) > this.viewportWidth) {
	                // TODO what is posX?
	                var posX = posX > 0 ? this.viewportWidth - 1 : -(this.viewportWidth - 1);
	                void 0;
	            }
	            /*
	            if (posY > this.viewportHeight/2) {
	              let z = new Animation(this.zoomElement.parentElement);
	              z.fromTo('translateY', posY + 'px', Math.min(this.viewportHeight/2 + 30, posY));
	              z.play();
	            } else {
	              let z = new Animation(this.zoomElement.parentElement);
	              z.fromTo('translateY', posY + 'px', Math.max(this.viewportHeight/2 - 30, posY));
	              z.play();
	            }
	            */
	            this.touch.lastX = this.touch.x;
	            this.touch.lastY = this.touch.y;
	        }
	    };
	    /**
	     * @private
	     * Update the underlying slider implementation. Call this if you've added or removed
	     * child slides.
	     */
	    Slides.prototype.update = function () {
	        var _this = this;
	        setTimeout(function () {
	            _this.slider.update();
	            // Don't allow pager to show with > 10 slides
	            if (_this.slider.slides.length > 10) {
	                _this.showPager = false;
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.next = function () {
	        this.slider.slideNext();
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.prev = function () {
	        this.slider.slidePrev();
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.getIndex = function () {
	        return this.slider.activeIndex;
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.getNumSlides = function () {
	        return this.slider.slides.length;
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.isAtEnd = function () {
	        return this.slider.isEnd;
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.isAtBeginning = function () {
	        return this.slider.isBeginning;
	    };
	    /**
	     * @private
	     */
	    Slides.prototype.getSliderWidget = function () {
	        return this.slider;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "pager", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "options", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "zoom", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "zoomDuration", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slides.prototype, "zoomMax", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Slides.prototype, "change", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Slides.prototype, "slideChangeStart", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Slides.prototype, "move", void 0);
	    Slides = __decorate([
	        core_1.Component({
	            selector: 'ion-slides',
	            template: '<div class="swiper-container">' +
	                '<div class="swiper-wrapper">' +
	                '<ng-content></ng-content>' +
	                '</div>' +
	                '<div [class.hide]="!showPager" class="swiper-pagination"></div>' +
	                '</div>',
	            directives: [common_1.NgClass]
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Slides);
	    return Slides;
	})(ion_1.Ion);
	exports.Slides = Slides;
	/**
	 * @name Slide
	 * @description
	 * `ion-slide` is a child component of `ion-slides` and is where all your individule slide content will be rendered too.
	 *
	 * @demo /docs/v2/demos/slides/
	 * @see {@link /docs/v2/api/components/slides/Slides/ Slides API Docs}
	 */
	var Slide = (function () {
	    function Slide(elementRef, slides) {
	        this.ele = elementRef.nativeElement;
	        this.ele.classList.add('swiper-slide');
	        slides.rapidUpdate();
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Slide.prototype, "zoom", void 0);
	    Slide = __decorate([
	        core_1.Component({
	            selector: 'ion-slide',
	            template: '<div class="slide-zoom"><ng-content></ng-content></div>'
	        }),
	        __param(1, core_1.Host()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, Slides])
	    ], Slide);
	    return Slide;
	})();
	exports.Slide = Slide;
	/**
	 * @private
	 */
	var SlideLazy = (function () {
	    function SlideLazy() {
	    }
	    SlideLazy = __decorate([
	        core_1.Directive({
	            selector: 'slide-lazy',
	            host: {
	                'class': 'swiper-lazy'
	            }
	        }), 
	        __metadata('design:paramtypes', [])
	    ], SlideLazy);
	    return SlideLazy;
	})();
	exports.SlideLazy = SlideLazy;


/***/ },
/* 318 */
/***/ function(module, exports) {

	/**
	 * Swiper 3.1.2
	 * Most modern mobile touch slider and framework with hardware accelerated transitions
	 *
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2015, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 *
	 * Released on: August 22, 2015
	 */
	  'use strict';
	  var $;
	  /*===========================
	  Swiper
	  ===========================*/
	module.exports.Swiper = Swiper;

	function Swiper(container, params) {


	      if (!(this instanceof Swiper)) return new Swiper(container, params);

	      var defaults = {
	          direction: 'horizontal',
	          touchEventsTarget: 'container',
	          initialSlide: 0,
	          speed: 300,
	          // autoplay
	          autoplay: false,
	          autoplayDisableOnInteraction: true,
	          // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
	          iOSEdgeSwipeDetection: false,
	          iOSEdgeSwipeThreshold: 20,
	          // Free mode
	          freeMode: false,
	          freeModeMomentum: true,
	          freeModeMomentumRatio: 1,
	          freeModeMomentumBounce: true,
	          freeModeMomentumBounceRatio: 1,
	          freeModeSticky: false,
	          // Set wrapper width
	          setWrapperSize: false,
	          // Virtual Translate
	          virtualTranslate: false,
	          // Effects
	          effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow'
	          coverflow: {
	              rotate: 50,
	              stretch: 0,
	              depth: 100,
	              modifier: 1,
	              slideShadows : true
	          },
	          cube: {
	              slideShadows: true,
	              shadow: true,
	              shadowOffset: 20,
	              shadowScale: 0.94
	          },
	          fade: {
	              crossFade: false
	          },
	          // Parallax
	          parallax: false,
	          // Scrollbar
	          scrollbar: null,
	          scrollbarHide: true,
	          // Keyboard Mousewheel
	          keyboardControl: false,
	          mousewheelControl: false,
	          mousewheelReleaseOnEdges: false,
	          mousewheelInvert: false,
	          mousewheelForceToAxis: false,
	          mousewheelSensitivity: 1,
	          // Hash Navigation
	          hashnav: false,
	          // Slides grid
	          spaceBetween: 0,
	          slidesPerView: 1,
	          slidesPerColumn: 1,
	          slidesPerColumnFill: 'column',
	          slidesPerGroup: 1,
	          centeredSlides: false,
	          slidesOffsetBefore: 0, // in px
	          slidesOffsetAfter: 0, // in px
	          // Round length
	          roundLengths: false,
	          // Touches
	          touchRatio: 1,
	          touchAngle: 45,
	          simulateTouch: true,
	          shortSwipes: true,
	          longSwipes: true,
	          longSwipesRatio: 0.5,
	          longSwipesMs: 300,
	          followFinger: true,
	          onlyExternal: false,
	          threshold: 0,
	          touchMoveStopPropagation: true,
	          // Pagination
	          pagination: null,
	          paginationElement: 'span',
	          paginationClickable: false,
	          paginationHide: false,
	          paginationBulletRender: null,
	          // Resistance
	          resistance: true,
	          resistanceRatio: 0.85,
	          // Next/prev buttons
	          nextButton: null,
	          prevButton: null,
	          // Progress
	          watchSlidesProgress: false,
	          watchSlidesVisibility: false,
	          // Cursor
	          grabCursor: false,
	          // Clicks
	          preventClicks: true,
	          preventClicksPropagation: true,
	          slideToClickedSlide: false,
	          // Lazy Loading
	          lazyLoading: false,
	          lazyLoadingInPrevNext: false,
	          lazyLoadingOnTransitionStart: false,
	          // Images
	          preloadImages: true,
	          updateOnImagesReady: true,
	          // loop
	          loop: false,
	          loopAdditionalSlides: 0,
	          loopedSlides: null,
	          // Control
	          control: undefined,
	          controlInverse: false,
	          controlBy: 'slide', //or 'container'
	          // Swiping/no swiping
	          allowSwipeToPrev: true,
	          allowSwipeToNext: true,
	          swipeHandler: null, //'.swipe-handler',
	          noSwiping: true,
	          noSwipingClass: 'swiper-no-swiping',
	          // NS
	          slideClass: 'swiper-slide',
	          slideActiveClass: 'swiper-slide-active',
	          slideVisibleClass: 'swiper-slide-visible',
	          slideDuplicateClass: 'swiper-slide-duplicate',
	          slideNextClass: 'swiper-slide-next',
	          slidePrevClass: 'swiper-slide-prev',
	          wrapperClass: 'swiper-wrapper',
	          bulletClass: 'swiper-pagination-bullet',
	          bulletActiveClass: 'swiper-pagination-bullet-active',
	          buttonDisabledClass: 'swiper-button-disabled',
	          paginationHiddenClass: 'swiper-pagination-hidden',
	          // Observer
	          observer: false,
	          observeParents: false,
	          // Accessibility
	          a11y: false,
	          prevSlideMessage: 'Previous slide',
	          nextSlideMessage: 'Next slide',
	          firstSlideMessage: 'This is the first slide',
	          lastSlideMessage: 'This is the last slide',
	          paginationBulletMessage: 'Go to slide {{index}}',
	          // Callbacks
	          runCallbacksOnInit: true
	          /*
	          Callbacks:
	          onInit: function (swiper)
	          onDestroy: function (swiper)
	          onClick: function (swiper, e)
	          onTap: function (swiper, e)
	          onDoubleTap: function (swiper, e)
	          onSliderMove: function (swiper, e)
	          onSlideChangeStart: function (swiper)
	          onSlideChangeEnd: function (swiper)
	          onTransitionStart: function (swiper)
	          onTransitionEnd: function (swiper)
	          onImagesReady: function (swiper)
	          onProgress: function (swiper, progress)
	          onTouchStart: function (swiper, e)
	          onTouchMove: function (swiper, e)
	          onTouchMoveOpposite: function (swiper, e)
	          onTouchEnd: function (swiper, e)
	          onReachBeginning: function (swiper)
	          onReachEnd: function (swiper)
	          onSetTransition: function (swiper, duration)
	          onSetTranslate: function (swiper, translate)
	          onAutoplayStart: function (swiper)
	          onAutoplayStop: function (swiper),
	          onLazyImageLoad: function (swiper, slide, image)
	          onLazyImageReady: function (swiper, slide, image)
	          */

	      };
	      var initialVirtualTranslate = params && params.virtualTranslate;

	      params = params || {};
	      for (var def in defaults) {
	          if (typeof params[def] === 'undefined') {
	              params[def] = defaults[def];
	          }
	          else if (typeof params[def] === 'object') {
	              for (var deepDef in defaults[def]) {
	                  if (typeof params[def][deepDef] === 'undefined') {
	                      params[def][deepDef] = defaults[def][deepDef];
	                  }
	              }
	          }
	      }

	      // Swiper
	      var s = this;

	      // Version
	      s.version = '3.1.0';

	      // Params
	      s.params = params;

	      // Classname
	      s.classNames = [];
	      /*=========================
	        Dom Library and plugins
	        ===========================*/
	      if (typeof $ !== 'undefined' && typeof Dom7 !== 'undefined'){
	          $ = Dom7;
	      }
	      if (typeof $ === 'undefined') {
	          if (typeof Dom7 === 'undefined') {
	              $ = window.Dom7 || window.Zepto || window.jQuery;
	          }
	          else {
	              $ = Dom7;
	          }
	          if (!$) return;
	      }
	      // Export it to Swiper instance
	      s.$ = $;

	      /*=========================
	        Preparation - Define Container, Wrapper and Pagination
	        ===========================*/
	      s.container = $(container);
	      if (s.container.length === 0) return;
	      if (s.container.length > 1) {
	          s.container.each(function () {
	              new Swiper(this, params);
	          });
	          return;
	      }

	      // Save instance in container HTML Element and in data
	      s.container[0].swiper = s;
	      s.container.data('swiper', s);

	      s.classNames.push('swiper-container-' + s.params.direction);

	      if (s.params.freeMode) {
	          s.classNames.push('swiper-container-free-mode');
	      }
	      if (!s.support.flexbox) {
	          s.classNames.push('swiper-container-no-flexbox');
	          s.params.slidesPerColumn = 1;
	      }
	      // Enable slides progress when required
	      if (s.params.parallax || s.params.watchSlidesVisibility) {
	          s.params.watchSlidesProgress = true;
	      }
	      // Coverflow / 3D
	      if (['cube', 'coverflow'].indexOf(s.params.effect) >= 0) {
	          if (s.support.transforms3d) {
	              s.params.watchSlidesProgress = true;
	              s.classNames.push('swiper-container-3d');
	          }
	          else {
	              s.params.effect = 'slide';
	          }
	      }
	      if (s.params.effect !== 'slide') {
	          s.classNames.push('swiper-container-' + s.params.effect);
	      }
	      if (s.params.effect === 'cube') {
	          s.params.resistanceRatio = 0;
	          s.params.slidesPerView = 1;
	          s.params.slidesPerColumn = 1;
	          s.params.slidesPerGroup = 1;
	          s.params.centeredSlides = false;
	          s.params.spaceBetween = 0;
	          s.params.virtualTranslate = true;
	          s.params.setWrapperSize = false;
	      }
	      if (s.params.effect === 'fade') {
	          s.params.slidesPerView = 1;
	          s.params.slidesPerColumn = 1;
	          s.params.slidesPerGroup = 1;
	          s.params.watchSlidesProgress = true;
	          s.params.spaceBetween = 0;
	          if (typeof initialVirtualTranslate === 'undefined') {
	              s.params.virtualTranslate = true;
	          }
	      }

	      // Grab Cursor
	      if (s.params.grabCursor && s.support.touch) {
	          s.params.grabCursor = false;
	      }

	      // Wrapper
	      s.wrapper = s.container.children('.' + s.params.wrapperClass);

	      // Pagination
	      if (s.params.pagination) {
	          s.paginationContainer = $(s.params.pagination);
	          if (s.params.paginationClickable) {
	              s.paginationContainer.addClass('swiper-pagination-clickable');
	          }
	      }

	      // Is Horizontal
	      function isH() {
	          return s.params.direction === 'horizontal';
	      }

	      // RTL
	      s.rtl = isH() && (s.container[0].dir.toLowerCase() === 'rtl' || s.container.css('direction') === 'rtl');
	      if (s.rtl) {
	          s.classNames.push('swiper-container-rtl');
	      }

	      // Wrong RTL support
	      if (s.rtl) {
	          s.wrongRTL = s.wrapper.css('display') === '-webkit-box';
	      }

	      // Columns
	      if (s.params.slidesPerColumn > 1) {
	          s.classNames.push('swiper-container-multirow');
	      }

	      // Check for Android
	      if (s.device.android) {
	          s.classNames.push('swiper-container-android');
	      }

	      // Add classes
	      s.container.addClass(s.classNames.join(' '));

	      // Translate
	      s.translate = 0;

	      // Progress
	      s.progress = 0;

	      // Velocity
	      s.velocity = 0;

	      /*=========================
	        Locks, unlocks
	        ===========================*/
	      s.lockSwipeToNext = function () {
	          s.params.allowSwipeToNext = false;
	      };
	      s.lockSwipeToPrev = function () {
	          s.params.allowSwipeToPrev = false;
	      };
	      s.lockSwipes = function () {
	          s.params.allowSwipeToNext = s.params.allowSwipeToPrev = false;
	      };
	      s.unlockSwipeToNext = function () {
	          s.params.allowSwipeToNext = true;
	      };
	      s.unlockSwipeToPrev = function () {
	          s.params.allowSwipeToPrev = true;
	      };
	      s.unlockSwipes = function () {
	          s.params.allowSwipeToNext = s.params.allowSwipeToPrev = true;
	      };

	      /*=========================
	        Round helper
	        ===========================*/
	      function round(a) {
	          return Math.floor(a);
	      }
	      /*=========================
	        Set grab cursor
	        ===========================*/
	      if (s.params.grabCursor) {
	          s.container[0].style.cursor = 'move';
	          s.container[0].style.cursor = '-webkit-grab';
	          s.container[0].style.cursor = '-moz-grab';
	          s.container[0].style.cursor = 'grab';
	      }
	      /*=========================
	        Update on Images Ready
	        ===========================*/
	      s.imagesToLoad = [];
	      s.imagesLoaded = 0;

	      s.loadImage = function (imgElement, src, checkForComplete, callback) {
	          var image;
	          function onReady () {
	              if (callback) callback();
	          }
	          if (!imgElement.complete || !checkForComplete) {
	              if (src) {
	                  image = new window.Image();
	                  image.onload = onReady;
	                  image.onerror = onReady;
	                  image.src = src;
	              } else {
	                  onReady();
	              }

	          } else {//image already loaded...
	              onReady();
	          }
	      };
	      s.preloadImages = function () {
	          s.imagesToLoad = s.container.find('img');
	          function _onReady() {
	              if (typeof s === 'undefined' || s === null) return;
	              if (s.imagesLoaded !== undefined) s.imagesLoaded++;
	              if (s.imagesLoaded === s.imagesToLoad.length) {
	                  if (s.params.updateOnImagesReady) s.update();
	                  s.emit('onImagesReady', s);
	              }
	          }
	          for (var i = 0; i < s.imagesToLoad.length; i++) {
	              s.loadImage(s.imagesToLoad[i], (s.imagesToLoad[i].currentSrc || s.imagesToLoad[i].getAttribute('src')), true, _onReady);
	          }
	      };

	      /*=========================
	        Autoplay
	        ===========================*/
	      s.autoplayTimeoutId = undefined;
	      s.autoplaying = false;
	      s.autoplayPaused = false;
	      function autoplay() {
	          s.autoplayTimeoutId = setTimeout(function () {
	              if (s.params.loop) {
	                  s.fixLoop();
	                  s._slideNext();
	              }
	              else {
	                  if (!s.isEnd) {
	                      s._slideNext();
	                  }
	                  else {
	                      if (!params.autoplayStopOnLast) {
	                          s._slideTo(0);
	                      }
	                      else {
	                          s.stopAutoplay();
	                      }
	                  }
	              }
	          }, s.params.autoplay);
	      }
	      s.startAutoplay = function () {
	          if (typeof s.autoplayTimeoutId !== 'undefined') return false;
	          if (!s.params.autoplay) return false;
	          if (s.autoplaying) return false;
	          s.autoplaying = true;
	          s.emit('onAutoplayStart', s);
	          autoplay();
	      };
	      s.stopAutoplay = function (internal) {
	          if (!s.autoplayTimeoutId) return;
	          if (s.autoplayTimeoutId) clearTimeout(s.autoplayTimeoutId);
	          s.autoplaying = false;
	          s.autoplayTimeoutId = undefined;
	          s.emit('onAutoplayStop', s);
	      };
	      s.pauseAutoplay = function (speed) {
	          if (s.autoplayPaused) return;
	          if (s.autoplayTimeoutId) clearTimeout(s.autoplayTimeoutId);
	          s.autoplayPaused = true;
	          if (speed === 0) {
	              s.autoplayPaused = false;
	              autoplay();
	          }
	          else {
	              s.wrapper.transitionEnd(function () {
	                  if (!s) return;
	                  s.autoplayPaused = false;
	                  if (!s.autoplaying) {
	                      s.stopAutoplay();
	                  }
	                  else {
	                      autoplay();
	                  }
	              });
	          }
	      };
	      /*=========================
	        Min/Max Translate
	        ===========================*/
	      s.minTranslate = function () {
	          return (-s.snapGrid[0]);
	      };
	      s.maxTranslate = function () {
	          return (-s.snapGrid[s.snapGrid.length - 1]);
	      };
	      /*=========================
	        Slider/slides sizes
	        ===========================*/
	      s.updateContainerSize = function () {
	          var width, height;
	          if (typeof s.params.width !== 'undefined') {
	              width = s.params.width;
	          }
	          else {
	              width = s.container[0].clientWidth;
	          }
	          if (typeof s.params.height !== 'undefined') {
	              height = s.params.height;
	          }
	          else {
	              height = s.container[0].clientHeight;
	          }
	          if (width === 0 && isH() || height === 0 && !isH()) {
	              return;
	          }

	          //Subtract paddings
	          width = width - parseInt(s.container.css('padding-left'), 10) - parseInt(s.container.css('padding-right'), 10);
	          height = height - parseInt(s.container.css('padding-top'), 10) - parseInt(s.container.css('padding-bottom'), 10);

	          // Store values
	          s.width = width;
	          s.height = height;
	          s.size = isH() ? s.width : s.height;
	      };

	      s.updateSlidesSize = function () {
	          s.slides = s.wrapper.children('.' + s.params.slideClass);
	          s.snapGrid = [];
	          s.slidesGrid = [];
	          s.slidesSizesGrid = [];

	          var spaceBetween = s.params.spaceBetween,
	              slidePosition = -s.params.slidesOffsetBefore,
	              i,
	              prevSlideSize = 0,
	              index = 0;
	          if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
	              spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * s.size;
	          }

	          s.virtualSize = -spaceBetween;
	          // reset margins
	          if (s.rtl) s.slides.css({marginLeft: '', marginTop: ''});
	          else s.slides.css({marginRight: '', marginBottom: ''});

	          var slidesNumberEvenToRows;
	          if (s.params.slidesPerColumn > 1) {
	              if (Math.floor(s.slides.length / s.params.slidesPerColumn) === s.slides.length / s.params.slidesPerColumn) {
	                  slidesNumberEvenToRows = s.slides.length;
	              }
	              else {
	                  slidesNumberEvenToRows = Math.ceil(s.slides.length / s.params.slidesPerColumn) * s.params.slidesPerColumn;
	              }
	          }

	          // Calc slides
	          var slideSize;
	          var slidesPerColumn = s.params.slidesPerColumn;
	          var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
	          var numFullColumns = slidesPerRow - (s.params.slidesPerColumn * slidesPerRow - s.slides.length);
	          for (i = 0; i < s.slides.length; i++) {
	              slideSize = 0;
	              var slide = s.slides.eq(i);
	              if (s.params.slidesPerColumn > 1) {
	                  // Set slides order
	                  var newSlideOrderIndex;
	                  var column, row;
	                  if (s.params.slidesPerColumnFill === 'column') {
	                      column = Math.floor(i / slidesPerColumn);
	                      row = i - column * slidesPerColumn;
	                      if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn-1)) {
	                          if (++row >= slidesPerColumn) {
	                              row = 0;
	                              column++;
	                          }
	                      }
	                      newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
	                      slide
	                          .css({
	                              '-webkit-box-ordinal-group': newSlideOrderIndex,
	                              '-moz-box-ordinal-group': newSlideOrderIndex,
	                              '-ms-flex-order': newSlideOrderIndex,
	                              '-webkit-order': newSlideOrderIndex,
	                              'order': newSlideOrderIndex
	                          });
	                  }
	                  else {
	                      row = Math.floor(i / slidesPerRow);
	                      column = i - row * slidesPerRow;
	                  }
	                  slide
	                      .css({
	                          'margin-top': (row !== 0 && s.params.spaceBetween) && (s.params.spaceBetween + 'px')
	                      })
	                      .attr('data-swiper-column', column)
	                      .attr('data-swiper-row', row);

	              }
	              if (slide.css('display') === 'none') continue;
	              if (s.params.slidesPerView === 'auto') {
	                  slideSize = isH() ? slide.outerWidth(true) : slide.outerHeight(true);
	                  if (s.params.roundLengths) slideSize = round(slideSize);
	              }
	              else {
	                  slideSize = (s.size - (s.params.slidesPerView - 1) * spaceBetween) / s.params.slidesPerView;
	                  if (s.params.roundLengths) slideSize = round(slideSize);

	                  if (isH()) {
	                      s.slides[i].style.width = slideSize + 'px';
	                  }
	                  else {
	                      s.slides[i].style.height = slideSize + 'px';
	                  }
	              }
	              s.slides[i].swiperSlideSize = slideSize;
	              s.slidesSizesGrid.push(slideSize);


	              if (s.params.centeredSlides) {
	                  slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
	                  if (i === 0) slidePosition = slidePosition - s.size / 2 - spaceBetween;
	                  if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
	                  if ((index) % s.params.slidesPerGroup === 0) s.snapGrid.push(slidePosition);
	                  s.slidesGrid.push(slidePosition);
	              }
	              else {
	                  if ((index) % s.params.slidesPerGroup === 0) s.snapGrid.push(slidePosition);
	                  s.slidesGrid.push(slidePosition);
	                  slidePosition = slidePosition + slideSize + spaceBetween;
	              }

	              s.virtualSize += slideSize + spaceBetween;

	              prevSlideSize = slideSize;

	              index ++;
	          }
	          s.virtualSize = Math.max(s.virtualSize, s.size) + s.params.slidesOffsetAfter;

	          var newSlidesGrid;

	          if (
	              s.rtl && s.wrongRTL && (s.params.effect === 'slide' || s.params.effect === 'coverflow')) {
	              s.wrapper.css({width: s.virtualSize + s.params.spaceBetween + 'px'});
	          }
	          if (!s.support.flexbox || s.params.setWrapperSize) {
	              if (isH()) s.wrapper.css({width: s.virtualSize + s.params.spaceBetween + 'px'});
	              else s.wrapper.css({height: s.virtualSize + s.params.spaceBetween + 'px'});
	          }

	          if (s.params.slidesPerColumn > 1) {
	              s.virtualSize = (slideSize + s.params.spaceBetween) * slidesNumberEvenToRows;
	              s.virtualSize = Math.ceil(s.virtualSize / s.params.slidesPerColumn) - s.params.spaceBetween;
	              s.wrapper.css({width: s.virtualSize + s.params.spaceBetween + 'px'});
	              if (s.params.centeredSlides) {
	                  newSlidesGrid = [];
	                  for (i = 0; i < s.snapGrid.length; i++) {
	                      if (s.snapGrid[i] < s.virtualSize + s.snapGrid[0]) newSlidesGrid.push(s.snapGrid[i]);
	                  }
	                  s.snapGrid = newSlidesGrid;
	              }
	          }

	          // Remove last grid elements depending on width
	          if (!s.params.centeredSlides) {
	              newSlidesGrid = [];
	              for (i = 0; i < s.snapGrid.length; i++) {
	                  if (s.snapGrid[i] <= s.virtualSize - s.size) {
	                      newSlidesGrid.push(s.snapGrid[i]);
	                  }
	              }
	              s.snapGrid = newSlidesGrid;
	              if (Math.floor(s.virtualSize - s.size) > Math.floor(s.snapGrid[s.snapGrid.length - 1])) {
	                  s.snapGrid.push(s.virtualSize - s.size);
	              }
	          }
	          if (s.snapGrid.length === 0) s.snapGrid = [0];

	          if (s.params.spaceBetween !== 0) {
	              if (isH()) {
	                  if (s.rtl) s.slides.css({marginLeft: spaceBetween + 'px'});
	                  else s.slides.css({marginRight: spaceBetween + 'px'});
	              }
	              else s.slides.css({marginBottom: spaceBetween + 'px'});
	          }
	          if (s.params.watchSlidesProgress) {
	              s.updateSlidesOffset();
	          }
	      };
	      s.updateSlidesOffset = function () {
	          for (var i = 0; i < s.slides.length; i++) {
	              s.slides[i].swiperSlideOffset = isH() ? s.slides[i].offsetLeft : s.slides[i].offsetTop;
	          }
	      };

	      /*=========================
	        Slider/slides progress
	        ===========================*/
	      s.updateSlidesProgress = function (translate) {
	          if (typeof translate === 'undefined') {
	              translate = s.translate || 0;
	          }
	          if (s.slides.length === 0) return;
	          if (typeof s.slides[0].swiperSlideOffset === 'undefined') s.updateSlidesOffset();

	          var offsetCenter = -translate;
	          if (s.rtl) offsetCenter = translate;

	          // Visible Slides
	          var containerBox = s.container[0].getBoundingClientRect();
	          var sideBefore = isH() ? 'left' : 'top';
	          var sideAfter = isH() ? 'right' : 'bottom';
	          s.slides.removeClass(s.params.slideVisibleClass);
	          for (var i = 0; i < s.slides.length; i++) {
	              var slide = s.slides[i];
	              var slideProgress = (offsetCenter - slide.swiperSlideOffset) / (slide.swiperSlideSize + s.params.spaceBetween);
	              if (s.params.watchSlidesVisibility) {
	                  var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
	                  var slideAfter = slideBefore + s.slidesSizesGrid[i];
	                  var isVisible =
	                      (slideBefore >= 0 && slideBefore < s.size) ||
	                      (slideAfter > 0 && slideAfter <= s.size) ||
	                      (slideBefore <= 0 && slideAfter >= s.size);
	                  if (isVisible) {
	                      s.slides.eq(i).addClass(s.params.slideVisibleClass);
	                  }
	              }
	              slide.progress = s.rtl ? -slideProgress : slideProgress;
	          }
	      };
	      s.updateProgress = function (translate) {
	          if (typeof translate === 'undefined') {
	              translate = s.translate || 0;
	          }
	          var translatesDiff = s.maxTranslate() - s.minTranslate();
	          if (translatesDiff === 0) {
	              s.progress = 0;
	              s.isBeginning = s.isEnd = true;
	          }
	          else {
	              s.progress = (translate - s.minTranslate()) / (translatesDiff);
	              s.isBeginning = s.progress <= 0;
	              s.isEnd = s.progress >= 1;
	          }
	          if (s.isBeginning) s.emit('onReachBeginning', s);
	          if (s.isEnd) s.emit('onReachEnd', s);

	          if (s.params.watchSlidesProgress) s.updateSlidesProgress(translate);
	          s.emit('onProgress', s, s.progress);
	      };
	      s.updateActiveIndex = function () {
	          var translate = s.rtl ? s.translate : -s.translate;
	          var newActiveIndex, i, snapIndex;
	          for (i = 0; i < s.slidesGrid.length; i ++) {
	              if (typeof s.slidesGrid[i + 1] !== 'undefined') {
	                  if (translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1] - (s.slidesGrid[i + 1] - s.slidesGrid[i]) / 2) {
	                      newActiveIndex = i;
	                  }
	                  else if (translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1]) {
	                      newActiveIndex = i + 1;
	                  }
	              }
	              else {
	                  if (translate >= s.slidesGrid[i]) {
	                      newActiveIndex = i;
	                  }
	              }
	          }
	          // Normalize slideIndex
	          if (newActiveIndex < 0 || typeof newActiveIndex === 'undefined') newActiveIndex = 0;
	          // for (i = 0; i < s.slidesGrid.length; i++) {
	              // if (- translate >= s.slidesGrid[i]) {
	                  // newActiveIndex = i;
	              // }
	          // }
	          snapIndex = Math.floor(newActiveIndex / s.params.slidesPerGroup);
	          if (snapIndex >= s.snapGrid.length) snapIndex = s.snapGrid.length - 1;

	          if (newActiveIndex === s.activeIndex) {
	              return;
	          }
	          s.snapIndex = snapIndex;
	          s.previousIndex = s.activeIndex;
	          s.activeIndex = newActiveIndex;
	          s.updateClasses();
	      };

	      /*=========================
	        Classes
	        ===========================*/
	      s.updateClasses = function () {
	          s.slides.removeClass(s.params.slideActiveClass + ' ' + s.params.slideNextClass + ' ' + s.params.slidePrevClass);
	          var activeSlide = s.slides.eq(s.activeIndex);
	          // Active classes
	          activeSlide.addClass(s.params.slideActiveClass);
	          activeSlide.next('.' + s.params.slideClass).addClass(s.params.slideNextClass);
	          activeSlide.prev('.' + s.params.slideClass).addClass(s.params.slidePrevClass);

	          // Pagination
	          if (s.bullets && s.bullets.length > 0) {
	              s.bullets.removeClass(s.params.bulletActiveClass);
	              var bulletIndex;
	              if (s.params.loop) {
	                  bulletIndex = Math.ceil(s.activeIndex - s.loopedSlides)/s.params.slidesPerGroup;
	                  if (bulletIndex > s.slides.length - 1 - s.loopedSlides * 2) {
	                      bulletIndex = bulletIndex - (s.slides.length - s.loopedSlides * 2);
	                  }
	                  if (bulletIndex > s.bullets.length - 1) bulletIndex = bulletIndex - s.bullets.length;
	              }
	              else {
	                  if (typeof s.snapIndex !== 'undefined') {
	                      bulletIndex = s.snapIndex;
	                  }
	                  else {
	                      bulletIndex = s.activeIndex || 0;
	                  }
	              }
	              if (s.paginationContainer.length > 1) {
	                  s.bullets.each(function () {
	                      if ($(this).index() === bulletIndex) $(this).addClass(s.params.bulletActiveClass);
	                  });
	              }
	              else {
	                  s.bullets.eq(bulletIndex).addClass(s.params.bulletActiveClass);
	              }
	          }

	          // Next/active buttons
	          if (!s.params.loop) {
	              if (s.params.prevButton) {
	                  if (s.isBeginning) {
	                      $(s.params.prevButton).addClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.disable($(s.params.prevButton));
	                  }
	                  else {
	                      $(s.params.prevButton).removeClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.enable($(s.params.prevButton));
	                  }
	              }
	              if (s.params.nextButton) {
	                  if (s.isEnd) {
	                      $(s.params.nextButton).addClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.disable($(s.params.nextButton));
	                  }
	                  else {
	                      $(s.params.nextButton).removeClass(s.params.buttonDisabledClass);
	                      if (s.params.a11y && s.a11y) s.a11y.enable($(s.params.nextButton));
	                  }
	              }
	          }
	      };

	      /*=========================
	        Pagination
	        ===========================*/
	      s.updatePagination = function () {
	          if (!s.params.pagination) return;
	          if (s.paginationContainer && s.paginationContainer.length > 0) {
	              var bulletsHTML = '';
	              var numberOfBullets = s.params.loop ? Math.ceil((s.slides.length - s.loopedSlides * 2) / s.params.slidesPerGroup) : s.snapGrid.length;
	              for (var i = 0; i < numberOfBullets; i++) {
	                  if (s.params.paginationBulletRender) {
	                      bulletsHTML += s.params.paginationBulletRender(i, s.params.bulletClass);
	                  }
	                  else {
	                      bulletsHTML += '<' + s.params.paginationElement+' class="' + s.params.bulletClass + '"></' + s.params.paginationElement + '>';
	                  }
	              }
	              s.paginationContainer.html(bulletsHTML);
	              s.bullets = s.paginationContainer.find('.' + s.params.bulletClass);
	              if (s.params.paginationClickable && s.params.a11y && s.a11y) {
	                  s.a11y.initPagination();
	              }
	          }
	      };
	      /*=========================
	        Common update method
	        ===========================*/
	      s.update = function (updateTranslate) {
	          s.updateContainerSize();
	          s.updateSlidesSize();
	          s.updateProgress();
	          s.updatePagination();
	          s.updateClasses();
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.set();
	          }
	          function forceSetTranslate() {
	              newTranslate = Math.min(Math.max(s.translate, s.maxTranslate()), s.minTranslate());
	              s.setWrapperTranslate(newTranslate);
	              s.updateActiveIndex();
	              s.updateClasses();
	          }
	          if (updateTranslate) {
	              var translated, newTranslate;
	              if (s.controller && s.controller.spline) {
	                  s.controller.spline = undefined;
	              }
	              if (s.params.freeMode) {
	                  forceSetTranslate();
	              }
	              else {
	                  if ((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides) {
	                      translated = s.slideTo(s.slides.length - 1, 0, false, true);
	                  }
	                  else {
	                      translated = s.slideTo(s.activeIndex, 0, false, true);
	                  }
	                  if (!translated) {
	                      forceSetTranslate();
	                  }
	              }

	          }
	      };

	      /*=========================
	        Resize Handler
	        ===========================*/
	      s.onResize = function (forceUpdatePagination) {
	          // Disable locks on resize
	          var allowSwipeToPrev = s.params.allowSwipeToPrev;
	          var allowSwipeToNext = s.params.allowSwipeToNext;
	          s.params.allowSwipeToPrev = s.params.allowSwipeToNext = true;

	          s.updateContainerSize();
	          s.updateSlidesSize();
	          if (s.params.slidesPerView === 'auto' || s.params.freeMode || forceUpdatePagination) s.updatePagination();
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.set();
	          }
	          if (s.controller && s.controller.spline) {
	              s.controller.spline = undefined;
	          }
	          if (s.params.freeMode) {
	              var newTranslate = Math.min(Math.max(s.translate, s.maxTranslate()), s.minTranslate());
	              s.setWrapperTranslate(newTranslate);
	              s.updateActiveIndex();
	              s.updateClasses();
	          }
	          else {
	              s.updateClasses();
	              if ((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides) {
	                  s.slideTo(s.slides.length - 1, 0, false, true);
	              }
	              else {
	                  s.slideTo(s.activeIndex, 0, false, true);
	              }
	          }
	          // Return locks after resize
	          s.params.allowSwipeToPrev = allowSwipeToPrev;
	          s.params.allowSwipeToNext = allowSwipeToNext;
	      };

	      /*=========================
	        Events
	        ===========================*/

	      //Define Touch Events
	      var desktopEvents = ['mousedown', 'mousemove', 'mouseup'];
	      if (window.navigator.pointerEnabled) desktopEvents = ['pointerdown', 'pointermove', 'pointerup'];
	      else if (window.navigator.msPointerEnabled) desktopEvents = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
	      s.touchEvents = {
	          start : s.support.touch || !s.params.simulateTouch  ? 'touchstart' : desktopEvents[0],
	          move : s.support.touch || !s.params.simulateTouch ? 'touchmove' : desktopEvents[1],
	          end : s.support.touch || !s.params.simulateTouch ? 'touchend' : desktopEvents[2]
	      };


	      // WP8 Touch Events Fix
	      if (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) {
	          (s.params.touchEventsTarget === 'container' ? s.container : s.wrapper).addClass('swiper-wp8-' + s.params.direction);
	      }

	      // Attach/detach events
	      s.initEvents = function (detach) {
	          console.debug('swiper initEvents', detach ? 'detach' : 'attach');
	          var actionDom = detach ? 'off' : 'on';
	          var action = detach ? 'removeEventListener' : 'addEventListener';
	          var touchEventsTarget = s.params.touchEventsTarget === 'container' ? s.container[0] : s.wrapper[0];
	          var target = s.support.touch ? touchEventsTarget : document;

	          var moveCapture = s.params.nested ? true : false;

	          //Touch Events
	          if (s.browser.ie) {
	              touchEventsTarget[action](s.touchEvents.start, s.onTouchStart, false);
	              target[action](s.touchEvents.move, s.onTouchMove, moveCapture);
	              target[action](s.touchEvents.end, s.onTouchEnd, false);
	          }
	          else {
	              if (s.support.touch) {
	                  touchEventsTarget[action](s.touchEvents.start, s.onTouchStart, false);
	                  touchEventsTarget[action](s.touchEvents.move, s.onTouchMove, moveCapture);
	                  touchEventsTarget[action](s.touchEvents.end, s.onTouchEnd, false);
	              }
	              if (params.simulateTouch && !s.device.ios && !s.device.android) {
	                  touchEventsTarget[action]('mousedown', s.onTouchStart, false);
	                  document[action]('mousemove', s.onTouchMove, moveCapture);
	                  document[action]('mouseup', s.onTouchEnd, false);
	              }
	          }
	          window[action]('resize', s.onResize);

	          // Next, Prev, Index
	          if (s.params.nextButton) {
	              $(s.params.nextButton)[actionDom]('click', s.onClickNext);
	              if (s.params.a11y && s.a11y) $(s.params.nextButton)[actionDom]('keydown', s.a11y.onEnterKey);
	          }
	          if (s.params.prevButton) {
	              $(s.params.prevButton)[actionDom]('click', s.onClickPrev);
	              if (s.params.a11y && s.a11y) $(s.params.prevButton)[actionDom]('keydown', s.a11y.onEnterKey);
	          }
	          if (s.params.pagination && s.params.paginationClickable) {
	              $(s.paginationContainer)[actionDom]('click', '.' + s.params.bulletClass, s.onClickIndex);
	              if (s.params.a11y && s.a11y) $(s.paginationContainer)[actionDom]('keydown', '.' + s.params.bulletClass, s.a11y.onEnterKey);
	          }

	          // Prevent Links Clicks
	          if (s.params.preventClicks || s.params.preventClicksPropagation) touchEventsTarget[action]('click', s.preventClicks, true);
	      };
	      s.attachEvents = function (detach) {
	          s.initEvents();
	      };
	      s.detachEvents = function () {
	          s.initEvents(true);
	      };

	      /*=========================
	        Handle Clicks
	        ===========================*/
	      // Prevent Clicks
	      s.allowClick = true;
	      s.preventClicks = function (e) {
	          if (!s.allowClick) {
	              if (s.params.preventClicks) e.preventDefault();
	              if (s.params.preventClicksPropagation && s.animating) {
	                  e.stopPropagation();
	                  e.stopImmediatePropagation();
	              }
	          }
	      };
	      // Clicks
	      s.onClickNext = function (e) {
	          e.preventDefault();
	          if (s.isEnd && !s.params.loop) return;
	          s.slideNext();
	      };
	      s.onClickPrev = function (e) {
	          e.preventDefault();
	          if (s.isBeginning && !s.params.loop) return;
	          s.slidePrev();
	      };
	      s.onClickIndex = function (e) {
	          e.preventDefault();
	          var index = $(this).index() * s.params.slidesPerGroup;
	          if (s.params.loop) index = index + s.loopedSlides;
	          s.slideTo(index);
	      };

	      /*=========================
	        Handle Touches
	        ===========================*/
	      function findElementInEvent(e, selector) {
	          var el = $(e.target);
	          if (!el.is(selector)) {
	              if (typeof selector === 'string') {
	                  el = el.parents(selector);
	              }
	              else if (selector.nodeType) {
	                  var found;
	                  el.parents().each(function (index, _el) {
	                      if (_el === selector) found = selector;
	                  });
	                  if (!found) return undefined;
	                  else return selector;
	              }
	          }
	          if (el.length === 0) {
	              return undefined;
	          }
	          return el[0];
	      }
	      s.updateClickedSlide = function (e) {
	          var slide = findElementInEvent(e, '.' + s.params.slideClass);
	          var slideFound = false;
	          if (slide) {
	              for (var i = 0; i < s.slides.length; i++) {
	                  if (s.slides[i] === slide) slideFound = true;
	              }
	          }

	          if (slide && slideFound) {
	              s.clickedSlide = slide;
	              s.clickedIndex = $(slide).index();
	          }
	          else {
	              s.clickedSlide = undefined;
	              s.clickedIndex = undefined;
	              return;
	          }
	          if (s.params.slideToClickedSlide && s.clickedIndex !== undefined && s.clickedIndex !== s.activeIndex) {
	              var slideToIndex = s.clickedIndex,
	                  realIndex;
	              if (s.params.loop) {
	                  realIndex = $(s.clickedSlide).attr('data-swiper-slide-index');
	                  if (slideToIndex > s.slides.length - s.params.slidesPerView) {
	                      s.fixLoop();
	                      slideToIndex = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]').eq(0).index();
	                      setTimeout(function () {
	                          s.slideTo(slideToIndex);
	                      }, 0);
	                  }
	                  else if (slideToIndex < s.params.slidesPerView - 1) {
	                      s.fixLoop();
	                      var duplicatedSlides = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]');
	                      slideToIndex = duplicatedSlides.eq(duplicatedSlides.length - 1).index();
	                      setTimeout(function () {
	                          s.slideTo(slideToIndex);
	                      }, 0);
	                  }
	                  else {
	                      s.slideTo(slideToIndex);
	                  }
	              }
	              else {
	                  s.slideTo(slideToIndex);
	              }
	          }
	      };

	      var isTouched,
	          isMoved,
	          touchStartTime,
	          isScrolling,
	          currentTranslate,
	          startTranslate,
	          allowThresholdMove,
	          // Form elements to match
	          formElements = 'input, select, textarea, button',
	          // Last click time
	          lastClickTime = Date.now(), clickTimeout,
	          //Velocities
	          velocities = [],
	          allowMomentumBounce;

	      // Animating Flag
	      s.animating = false;

	      // Touches information
	      s.touches = {
	          startX: 0,
	          startY: 0,
	          currentX: 0,
	          currentY: 0,
	          diff: 0
	      };

	      // Touch handlers
	      var isTouchEvent, startMoving;
	      s.onTouchStart = function (e) {
	          if (e.originalEvent) e = e.originalEvent;
	          isTouchEvent = e.type === 'touchstart';
	          if (!isTouchEvent && 'which' in e && e.which === 3) return;
	          if (s.params.noSwiping && findElementInEvent(e, '.' + s.params.noSwipingClass)) {
	              s.allowClick = true;
	              return;
	          }
	          if (s.params.swipeHandler) {
	              if (!findElementInEvent(e, s.params.swipeHandler)) return;
	          }

	          var startX = s.touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
	          var startY = s.touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;

	          // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
	          if(s.device.ios && s.params.iOSEdgeSwipeDetection && startX <= s.params.iOSEdgeSwipeThreshold) {
	              return;
	          }

	          isTouched = true;
	          isMoved = false;
	          isScrolling = undefined;
	          startMoving = undefined;
	          s.touches.startX = startX;
	          s.touches.startY = startY;
	          touchStartTime = Date.now();
	          s.allowClick = true;
	          s.updateContainerSize();
	          s.swipeDirection = undefined;
	          if (s.params.threshold > 0) allowThresholdMove = false;
	          if (e.type !== 'touchstart') {
	              var preventDefault = true;
	              if ($(e.target).is(formElements)) preventDefault = false;
	              if (document.activeElement && $(document.activeElement).is(formElements)) {
	                  document.activeElement.blur();
	              }
	              if (preventDefault) {
	                  e.preventDefault();
	              }
	          }
	          s.emit('onTouchStart', s, e);
	      };

	      s.onTouchMove = function (e) {
	          if (e.originalEvent) e = e.originalEvent;
	          if (isTouchEvent && e.type === 'mousemove') return;
	          if (e.preventedByNestedSwiper) return;
	          if (s.params.onlyExternal) {
	              // isMoved = true;
	              s.allowClick = false;
	              if (isTouched) {
	                  s.touches.startX = s.touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
	                  s.touches.startY = s.touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
	                  touchStartTime = Date.now();
	              }
	              return;
	          }
	          if (isTouchEvent && document.activeElement) {
	              if (e.target === document.activeElement && $(e.target).is(formElements)) {
	                  isMoved = true;
	                  s.allowClick = false;
	                  return;
	              }
	          }

	          s.emit('onTouchMove', s, e);

	          if (e.targetTouches && e.targetTouches.length > 1) return;

	          s.touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
	          s.touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

	          if (typeof isScrolling === 'undefined') {
	              var touchAngle = Math.atan2(Math.abs(s.touches.currentY - s.touches.startY), Math.abs(s.touches.currentX - s.touches.startX)) * 180 / Math.PI;
	              isScrolling = isH() ? touchAngle > s.params.touchAngle : (90 - touchAngle > s.params.touchAngle);
	          }
	          if (isScrolling) {
	              s.emit('onTouchMoveOpposite', s, e);
	          }
	          if (typeof startMoving === 'undefined' && s.browser.ieTouch) {
	              if (s.touches.currentX !== s.touches.startX || s.touches.currentY !== s.touches.startY) {
	                  startMoving = true;
	              }
	          }
	          if (!isTouched) return;
	          if (isScrolling)  {
	              isTouched = false;
	              return;
	          }
	          if (!startMoving && s.browser.ieTouch) {
	              return;
	          }
	          s.allowClick = false;
	          s.emit('onSliderMove', s, e);
	          e.preventDefault();
	          if (s.params.touchMoveStopPropagation && !s.params.nested) {
	              e.stopPropagation();
	          }

	          if (!isMoved) {
	              if (params.loop) {
	                  s.fixLoop();
	              }
	              startTranslate = s.getWrapperTranslate();
	              s.setWrapperTransition(0);
	              if (s.animating) {
	                  s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');
	              }
	              if (s.params.autoplay && s.autoplaying) {
	                  if (s.params.autoplayDisableOnInteraction) {
	                      s.stopAutoplay();
	                  }
	                  else {
	                      s.pauseAutoplay();
	                  }
	              }
	              allowMomentumBounce = false;
	              //Grab Cursor
	              if (s.params.grabCursor) {
	                  s.container[0].style.cursor = 'move';
	                  s.container[0].style.cursor = '-webkit-grabbing';
	                  s.container[0].style.cursor = '-moz-grabbin';
	                  s.container[0].style.cursor = 'grabbing';
	              }
	          }
	          isMoved = true;

	          var diff = s.touches.diff = isH() ? s.touches.currentX - s.touches.startX : s.touches.currentY - s.touches.startY;

	          diff = diff * s.params.touchRatio;
	          if (s.rtl) diff = -diff;

	          s.swipeDirection = diff > 0 ? 'prev' : 'next';
	          currentTranslate = diff + startTranslate;

	          var disableParentSwiper = true;
	          if ((diff > 0 && currentTranslate > s.minTranslate())) {
	              disableParentSwiper = false;
	              if (s.params.resistance) currentTranslate = s.minTranslate() - 1 + Math.pow(-s.minTranslate() + startTranslate + diff, s.params.resistanceRatio);
	          }
	          else if (diff < 0 && currentTranslate < s.maxTranslate()) {
	              disableParentSwiper = false;
	              if (s.params.resistance) currentTranslate = s.maxTranslate() + 1 - Math.pow(s.maxTranslate() - startTranslate - diff, s.params.resistanceRatio);
	          }

	          if (disableParentSwiper) {
	              e.preventedByNestedSwiper = true;
	          }

	          // Directions locks
	          if (!s.params.allowSwipeToNext && s.swipeDirection === 'next' && currentTranslate < startTranslate) {
	              currentTranslate = startTranslate;
	          }
	          if (!s.params.allowSwipeToPrev && s.swipeDirection === 'prev' && currentTranslate > startTranslate) {
	              currentTranslate = startTranslate;
	          }

	          if (!s.params.followFinger) return;

	          // Threshold
	          if (s.params.threshold > 0) {
	              if (Math.abs(diff) > s.params.threshold || allowThresholdMove) {
	                  if (!allowThresholdMove) {
	                      allowThresholdMove = true;
	                      s.touches.startX = s.touches.currentX;
	                      s.touches.startY = s.touches.currentY;
	                      currentTranslate = startTranslate;
	                      s.touches.diff = isH() ? s.touches.currentX - s.touches.startX : s.touches.currentY - s.touches.startY;
	                      return;
	                  }
	              }
	              else {
	                  currentTranslate = startTranslate;
	                  return;
	              }
	          }
	          // Update active index in free mode
	          if (s.params.freeMode || s.params.watchSlidesProgress) {
	              s.updateActiveIndex();
	          }
	          if (s.params.freeMode) {
	              //Velocity
	              if (velocities.length === 0) {
	                  velocities.push({
	                      position: s.touches[isH() ? 'startX' : 'startY'],
	                      time: touchStartTime
	                  });
	              }
	              velocities.push({
	                  position: s.touches[isH() ? 'currentX' : 'currentY'],
	                  time: (new window.Date()).getTime()
	              });
	          }
	          // Update progress
	          s.updateProgress(currentTranslate);
	          // Update translate
	          s.setWrapperTranslate(currentTranslate);
	      };
	      s.onTouchEnd = function (e) {
	          if (e.originalEvent) e = e.originalEvent;
	          s.emit('onTouchEnd', s, e);
	          if (!isTouched) return;
	          //Return Grab Cursor
	          if (s.params.grabCursor && isMoved && isTouched) {
	              s.container[0].style.cursor = 'move';
	              s.container[0].style.cursor = '-webkit-grab';
	              s.container[0].style.cursor = '-moz-grab';
	              s.container[0].style.cursor = 'grab';
	          }

	          // Time diff
	          var touchEndTime = Date.now();
	          var timeDiff = touchEndTime - touchStartTime;

	          // Tap, doubleTap, Click
	          if (s.allowClick) {
	              s.updateClickedSlide(e);
	              s.emit('onTap', s, e);
	              if (timeDiff < 300 && (touchEndTime - lastClickTime) > 300) {
	                  if (clickTimeout) clearTimeout(clickTimeout);
	                  clickTimeout = setTimeout(function () {
	                      if (!s) return;
	                      if (s.params.paginationHide && s.paginationContainer.length > 0 && !$(e.target).hasClass(s.params.bulletClass)) {
	                          s.paginationContainer.toggleClass(s.params.paginationHiddenClass);
	                      }
	                      s.emit('onClick', s, e);
	                  }, 300);

	              }
	              if (timeDiff < 300 && (touchEndTime - lastClickTime) < 300) {
	                  if (clickTimeout) clearTimeout(clickTimeout);
	                  s.emit('onDoubleTap', s, e);
	              }
	          }

	          lastClickTime = Date.now();
	          setTimeout(function () {
	              if (s) s.allowClick = true;
	          }, 0);

	          if (!isTouched || !isMoved || !s.swipeDirection || s.touches.diff === 0 || currentTranslate === startTranslate) {
	              isTouched = isMoved = false;
	              return;
	          }
	          isTouched = isMoved = false;

	          var currentPos;
	          if (s.params.followFinger) {
	              currentPos = s.rtl ? s.translate : -s.translate;
	          }
	          else {
	              currentPos = -currentTranslate;
	          }
	          if (s.params.freeMode) {
	              if (currentPos < -s.minTranslate()) {
	                  s.slideTo(s.activeIndex);
	                  return;
	              }
	              else if (currentPos > -s.maxTranslate()) {
	                  if (s.slides.length < s.snapGrid.length) {
	                      s.slideTo(s.snapGrid.length - 1);
	                  }
	                  else {
	                      s.slideTo(s.slides.length - 1);
	                  }
	                  return;
	              }

	              if (s.params.freeModeMomentum) {
	                  if (velocities.length > 1) {
	                      var lastMoveEvent = velocities.pop(), velocityEvent = velocities.pop();

	                      var distance = lastMoveEvent.position - velocityEvent.position;
	                      var time = lastMoveEvent.time - velocityEvent.time;
	                      s.velocity = distance / time;
	                      s.velocity = s.velocity / 2;
	                      if (Math.abs(s.velocity) < 0.02) {
	                          s.velocity = 0;
	                      }
	                      // this implies that the user stopped moving a finger then released.
	                      // There would be no events with distance zero, so the last event is stale.
	                      if (time > 150 || (new window.Date().getTime() - lastMoveEvent.time) > 300) {
	                          s.velocity = 0;
	                      }
	                  } else {
	                      s.velocity = 0;
	                  }

	                  velocities.length = 0;
	                  var momentumDuration = 1000 * s.params.freeModeMomentumRatio;
	                  var momentumDistance = s.velocity * momentumDuration;

	                  var newPosition = s.translate + momentumDistance;
	                  if (s.rtl) newPosition = - newPosition;
	                  var doBounce = false;
	                  var afterBouncePosition;
	                  var bounceAmount = Math.abs(s.velocity) * 20 * s.params.freeModeMomentumBounceRatio;
	                  if (newPosition < s.maxTranslate()) {
	                      if (s.params.freeModeMomentumBounce) {
	                          if (newPosition + s.maxTranslate() < -bounceAmount) {
	                              newPosition = s.maxTranslate() - bounceAmount;
	                          }
	                          afterBouncePosition = s.maxTranslate();
	                          doBounce = true;
	                          allowMomentumBounce = true;
	                      }
	                      else {
	                          newPosition = s.maxTranslate();
	                      }
	                  }
	                  else if (newPosition > s.minTranslate()) {
	                      if (s.params.freeModeMomentumBounce) {
	                          if (newPosition - s.minTranslate() > bounceAmount) {
	                              newPosition = s.minTranslate() + bounceAmount;
	                          }
	                          afterBouncePosition = s.minTranslate();
	                          doBounce = true;
	                          allowMomentumBounce = true;
	                      }
	                      else {
	                          newPosition = s.minTranslate();
	                      }
	                  }
	                  else if (s.params.freeModeSticky) {
	                      var j = 0,
	                          nextSlide;
	                      for (j = 0; j < s.snapGrid.length; j += 1) {
	                          if (s.snapGrid[j] > -newPosition) {
	                              nextSlide = j;
	                              break;
	                          }

	                      }
	                      if (Math.abs(s.snapGrid[nextSlide] - newPosition) < Math.abs(s.snapGrid[nextSlide - 1] - newPosition) || s.swipeDirection === 'next') {
	                          newPosition = s.snapGrid[nextSlide];
	                      } else {
	                          newPosition = s.snapGrid[nextSlide - 1];
	                      }
	                      if (!s.rtl) newPosition = - newPosition;
	                  }
	                  //Fix duration
	                  if (s.velocity !== 0) {
	                      if (s.rtl) {
	                          momentumDuration = Math.abs((-newPosition - s.translate) / s.velocity);
	                      }
	                      else {
	                          momentumDuration = Math.abs((newPosition - s.translate) / s.velocity);
	                      }
	                  }
	                  else if (s.params.freeModeSticky) {
	                      s.slideReset();
	                      return;
	                  }

	                  if (s.params.freeModeMomentumBounce && doBounce) {
	                      s.updateProgress(afterBouncePosition);
	                      s.setWrapperTransition(momentumDuration);
	                      s.setWrapperTranslate(newPosition);
	                      s.onTransitionStart();
	                      s.animating = true;
	                      s.wrapper.transitionEnd(function () {
	                          if (!s || !allowMomentumBounce) return;
	                          s.emit('onMomentumBounce', s);

	                          s.setWrapperTransition(s.params.speed);
	                          s.setWrapperTranslate(afterBouncePosition);
	                          s.wrapper.transitionEnd(function () {
	                              if (!s) return;
	                              s.onTransitionEnd();
	                          });
	                      });
	                  } else if (s.velocity) {
	                      s.updateProgress(newPosition);
	                      s.setWrapperTransition(momentumDuration);
	                      s.setWrapperTranslate(newPosition);
	                      s.onTransitionStart();
	                      if (!s.animating) {
	                          s.animating = true;
	                          s.wrapper.transitionEnd(function () {
	                              if (!s) return;
	                              s.onTransitionEnd();
	                          });
	                      }

	                  } else {
	                      s.updateProgress(newPosition);
	                  }

	                  s.updateActiveIndex();
	              }
	              if (!s.params.freeModeMomentum || timeDiff >= s.params.longSwipesMs) {
	                  s.updateProgress();
	                  s.updateActiveIndex();
	              }
	              return;
	          }

	          // Find current slide
	          var i, stopIndex = 0, groupSize = s.slidesSizesGrid[0];
	          for (i = 0; i < s.slidesGrid.length; i += s.params.slidesPerGroup) {
	              if (typeof s.slidesGrid[i + s.params.slidesPerGroup] !== 'undefined') {
	                  if (currentPos >= s.slidesGrid[i] && currentPos < s.slidesGrid[i + s.params.slidesPerGroup]) {
	                      stopIndex = i;
	                      groupSize = s.slidesGrid[i + s.params.slidesPerGroup] - s.slidesGrid[i];
	                  }
	              }
	              else {
	                  if (currentPos >= s.slidesGrid[i]) {
	                      stopIndex = i;
	                      groupSize = s.slidesGrid[s.slidesGrid.length - 1] - s.slidesGrid[s.slidesGrid.length - 2];
	                  }
	              }
	          }

	          // Find current slide size
	          var ratio = (currentPos - s.slidesGrid[stopIndex]) / groupSize;

	          if (timeDiff > s.params.longSwipesMs) {
	              // Long touches
	              if (!s.params.longSwipes) {
	                  s.slideTo(s.activeIndex);
	                  return;
	              }
	              if (s.swipeDirection === 'next') {
	                  if (ratio >= s.params.longSwipesRatio) s.slideTo(stopIndex + s.params.slidesPerGroup);
	                  else s.slideTo(stopIndex);

	              }
	              if (s.swipeDirection === 'prev') {
	                  if (ratio > (1 - s.params.longSwipesRatio)) s.slideTo(stopIndex + s.params.slidesPerGroup);
	                  else s.slideTo(stopIndex);
	              }
	          }
	          else {
	              // Short swipes
	              if (!s.params.shortSwipes) {
	                  s.slideTo(s.activeIndex);
	                  return;
	              }
	              if (s.swipeDirection === 'next') {
	                  s.slideTo(stopIndex + s.params.slidesPerGroup);

	              }
	              if (s.swipeDirection === 'prev') {
	                  s.slideTo(stopIndex);
	              }
	          }
	      };
	      /*=========================
	        Transitions
	        ===========================*/
	      s._slideTo = function (slideIndex, speed) {
	          return s.slideTo(slideIndex, speed, true, true);
	      };
	      s.slideTo = function (slideIndex, speed, runCallbacks, internal) {
	          if (typeof runCallbacks === 'undefined') runCallbacks = true;
	          if (typeof slideIndex === 'undefined') slideIndex = 0;
	          if (slideIndex < 0) slideIndex = 0;
	          s.snapIndex = Math.floor(slideIndex / s.params.slidesPerGroup);
	          if (s.snapIndex >= s.snapGrid.length) s.snapIndex = s.snapGrid.length - 1;

	          var translate = - s.snapGrid[s.snapIndex];

	          // Stop autoplay
	          if (s.params.autoplay && s.autoplaying) {
	              if (internal || !s.params.autoplayDisableOnInteraction) {
	                  s.pauseAutoplay(speed);
	              }
	              else {
	                  s.stopAutoplay();
	              }
	          }
	          // Update progress
	          s.updateProgress(translate);

	          // Normalize slideIndex
	          for (var i = 0; i < s.slidesGrid.length; i++) {
	              if (- Math.floor(translate * 100) >= Math.floor(s.slidesGrid[i] * 100)) {
	                  slideIndex = i;
	              }
	          }

	          // Directions locks
	          if (!s.params.allowSwipeToNext && translate < s.translate && translate < s.minTranslate()) {
	              return false;
	          }
	          if (!s.params.allowSwipeToPrev && translate > s.translate && translate > s.maxTranslate()) {
	              if ((s.activeIndex || 0) !== slideIndex ) return false;
	          }

	          // Update Index
	          if (typeof speed === 'undefined') speed = s.params.speed;
	          s.previousIndex = s.activeIndex || 0;
	          s.activeIndex = slideIndex;

	          if (translate === s.translate) {
	              s.updateClasses();
	              return false;
	          }
	          s.updateClasses();
	          s.onTransitionStart(runCallbacks);
	          var translateX = isH() ? translate : 0, translateY = isH() ? 0 : translate;
	          if (speed === 0) {
	              s.setWrapperTransition(0);
	              s.setWrapperTranslate(translate);
	              s.onTransitionEnd(runCallbacks);
	          }
	          else {
	              s.setWrapperTransition(speed);
	              s.setWrapperTranslate(translate);
	              if (!s.animating) {
	                  s.animating = true;
	                  s.wrapper.transitionEnd(function () {
	                      if (!s) return;
	                      s.onTransitionEnd(runCallbacks);
	                  });
	              }

	          }

	          return true;
	      };

	      s.onTransitionStart = function (runCallbacks) {
	          if (typeof runCallbacks === 'undefined') runCallbacks = true;
	          if (s.lazy) s.lazy.onTransitionStart();
	          if (runCallbacks) {
	              s.emit('onTransitionStart', s);
	              if (s.activeIndex !== s.previousIndex) {
	                  s.emit('onSlideChangeStart', s);
	              }
	          }
	      };
	      s.onTransitionEnd = function (runCallbacks) {
	          s.animating = false;
	          s.setWrapperTransition(0);
	          if (typeof runCallbacks === 'undefined') runCallbacks = true;
	          if (s.lazy) s.lazy.onTransitionEnd();
	          if (runCallbacks) {
	              s.emit('onTransitionEnd', s);
	              if (s.activeIndex !== s.previousIndex) {
	                  s.emit('onSlideChangeEnd', s);
	              }
	          }
	          if (s.params.hashnav && s.hashnav) {
	              s.hashnav.setHash();
	          }

	      };
	      s.slideNext = function (runCallbacks, speed, internal) {
	          if (s.params.loop) {
	              if (s.animating) return false;
	              s.fixLoop();
	              var clientLeft = s.container[0].clientLeft;
	              return s.slideTo(s.activeIndex + s.params.slidesPerGroup, speed, runCallbacks, internal);
	          }
	          else return s.slideTo(s.activeIndex + s.params.slidesPerGroup, speed, runCallbacks, internal);
	      };
	      s._slideNext = function (speed) {
	          return s.slideNext(true, speed, true);
	      };
	      s.slidePrev = function (runCallbacks, speed, internal) {
	          if (s.params.loop) {
	              if (s.animating) return false;
	              s.fixLoop();
	              var clientLeft = s.container[0].clientLeft;
	              return s.slideTo(s.activeIndex - 1, speed, runCallbacks, internal);
	          }
	          else return s.slideTo(s.activeIndex - 1, speed, runCallbacks, internal);
	      };
	      s._slidePrev = function (speed) {
	          return s.slidePrev(true, speed, true);
	      };
	      s.slideReset = function (runCallbacks, speed, internal) {
	          return s.slideTo(s.activeIndex, speed, runCallbacks);
	      };

	      /*=========================
	        Translate/transition helpers
	        ===========================*/
	      s.setWrapperTransition = function (duration, byController) {
	          s.wrapper.transition(duration);
	          if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {
	              s.effects[s.params.effect].setTransition(duration);
	          }
	          if (s.params.parallax && s.parallax) {
	              s.parallax.setTransition(duration);
	          }
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.setTransition(duration);
	          }
	          if (s.params.control && s.controller) {
	              s.controller.setTransition(duration, byController);
	          }
	          s.emit('onSetTransition', s, duration);
	      };
	      s.setWrapperTranslate = function (translate, updateActiveIndex, byController) {
	          var x = 0, y = 0, z = 0;
	          if (isH()) {
	              x = s.rtl ? -translate : translate;
	          }
	          else {
	              y = translate;
	          }
	          if (!s.params.virtualTranslate) {
	              if (s.support.transforms3d) s.wrapper.transform('translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');
	              else s.wrapper.transform('translate(' + x + 'px, ' + y + 'px)');
	          }

	          s.translate = isH() ? x : y;

	          if (updateActiveIndex) s.updateActiveIndex();
	          if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {
	              s.effects[s.params.effect].setTranslate(s.translate);
	          }
	          if (s.params.parallax && s.parallax) {
	              s.parallax.setTranslate(s.translate);
	          }
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.setTranslate(s.translate);
	          }
	          if (s.params.control && s.controller) {
	              s.controller.setTranslate(s.translate, byController);
	          }
	          s.emit('onSetTranslate', s, s.translate);
	      };

	      s.getTranslate = function (el, axis) {
	          var matrix, curTransform, curStyle, transformMatrix;

	          // automatic axis detection
	          if (typeof axis === 'undefined') {
	              axis = 'x';
	          }

	          if (s.params.virtualTranslate) {
	              return s.rtl ? -s.translate : s.translate;
	          }

	          curStyle = window.getComputedStyle(el, null);
	          if (window.WebKitCSSMatrix) {
	              // Some old versions of Webkit choke when 'none' is passed; pass
	              // empty string instead in this case
	              transformMatrix = new window.WebKitCSSMatrix(curStyle.webkitTransform === 'none' ? '' : curStyle.webkitTransform);
	          }
	          else {
	              transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform  || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
	              matrix = transformMatrix.toString().split(',');
	          }

	          if (axis === 'x') {
	              //Latest Chrome and webkits Fix
	              if (window.WebKitCSSMatrix)
	                  curTransform = transformMatrix.m41;
	              //Crazy IE10 Matrix
	              else if (matrix.length === 16)
	                  curTransform = parseFloat(matrix[12]);
	              //Normal Browsers
	              else
	                  curTransform = parseFloat(matrix[4]);
	          }
	          if (axis === 'y') {
	              //Latest Chrome and webkits Fix
	              if (window.WebKitCSSMatrix)
	                  curTransform = transformMatrix.m42;
	              //Crazy IE10 Matrix
	              else if (matrix.length === 16)
	                  curTransform = parseFloat(matrix[13]);
	              //Normal Browsers
	              else
	                  curTransform = parseFloat(matrix[5]);
	          }
	          if (s.rtl && curTransform) curTransform = -curTransform;
	          return curTransform || 0;
	      };
	      s.getWrapperTranslate = function (axis) {
	          if (typeof axis === 'undefined') {
	              axis = isH() ? 'x' : 'y';
	          }
	          return s.getTranslate(s.wrapper[0], axis);
	      };

	      /*=========================
	        Observer
	        ===========================*/
	      s.observers = [];
	      function initObserver(target, options) {
	          options = options || {};
	          // create an observer instance
	          var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
	          var observer = new ObserverFunc(function (mutations) {
	              mutations.forEach(function (mutation) {
	                  s.onResize(true);
	                  s.emit('onObserverUpdate', s, mutation);
	              });
	          });

	          observer.observe(target, {
	              attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
	              childList: typeof options.childList === 'undefined' ? true : options.childList,
	              characterData: typeof options.characterData === 'undefined' ? true : options.characterData
	          });

	          s.observers.push(observer);
	      }
	      s.initObservers = function () {
	          if (s.params.observeParents) {
	              var containerParents = s.container.parents();
	              for (var i = 0; i < containerParents.length; i++) {
	                  initObserver(containerParents[i]);
	              }
	          }

	          // Observe container
	          initObserver(s.container[0], {childList: false});

	          // Observe wrapper
	          initObserver(s.wrapper[0], {attributes: false});
	      };
	      s.disconnectObservers = function () {
	          for (var i = 0; i < s.observers.length; i++) {
	              s.observers[i].disconnect();
	          }
	          s.observers = [];
	      };
	      /*=========================
	        Loop
	        ===========================*/
	      // Create looped slides
	      s.createLoop = function () {
	          // Remove duplicated slides
	          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();

	          var slides = s.wrapper.children('.' + s.params.slideClass);

	          if(s.params.slidesPerView === 'auto' && !s.params.loopedSlides) s.params.loopedSlides = slides.length;

	          s.loopedSlides = parseInt(s.params.loopedSlides || s.params.slidesPerView, 10);
	          s.loopedSlides = s.loopedSlides + s.params.loopAdditionalSlides;
	          if (s.loopedSlides > slides.length) {
	              s.loopedSlides = slides.length;
	          }

	          var prependSlides = [], appendSlides = [], i;
	          slides.each(function (index, el) {
	              var slide = $(this);
	              if (index < s.loopedSlides) appendSlides.push(el);
	              if (index < slides.length && index >= slides.length - s.loopedSlides) prependSlides.push(el);
	              slide.attr('data-swiper-slide-index', index);
	          });
	          for (i = 0; i < appendSlides.length; i++) {
	              s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));
	          }
	          for (i = prependSlides.length - 1; i >= 0; i--) {
	              s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));
	          }
	      };
	      s.destroyLoop = function () {
	          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();
	          s.slides.removeAttr('data-swiper-slide-index');
	      };
	      s.fixLoop = function () {
	          var newIndex;
	          //Fix For Negative Oversliding
	          if (s.activeIndex < s.loopedSlides) {
	              newIndex = s.slides.length - s.loopedSlides * 3 + s.activeIndex;
	              newIndex = newIndex + s.loopedSlides;
	              s.slideTo(newIndex, 0, false, true);
	          }
	          //Fix For Positive Oversliding
	          else if ((s.params.slidesPerView === 'auto' && s.activeIndex >= s.loopedSlides * 2) || (s.activeIndex > s.slides.length - s.params.slidesPerView * 2)) {
	              newIndex = -s.slides.length + s.activeIndex + s.loopedSlides;
	              newIndex = newIndex + s.loopedSlides;
	              s.slideTo(newIndex, 0, false, true);
	          }
	      };
	      /*=========================
	        Append/Prepend/Remove Slides
	        ===========================*/
	      s.appendSlide = function (slides) {
	          if (s.params.loop) {
	              s.destroyLoop();
	          }
	          if (typeof slides === 'object' && slides.length) {
	              for (var i = 0; i < slides.length; i++) {
	                  if (slides[i]) s.wrapper.append(slides[i]);
	              }
	          }
	          else {
	              s.wrapper.append(slides);
	          }
	          if (s.params.loop) {
	              s.createLoop();
	          }
	          if (!(s.params.observer && s.support.observer)) {
	              s.update(true);
	          }
	      };
	      s.prependSlide = function (slides) {
	          if (s.params.loop) {
	              s.destroyLoop();
	          }
	          var newActiveIndex = s.activeIndex + 1;
	          if (typeof slides === 'object' && slides.length) {
	              for (var i = 0; i < slides.length; i++) {
	                  if (slides[i]) s.wrapper.prepend(slides[i]);
	              }
	              newActiveIndex = s.activeIndex + slides.length;
	          }
	          else {
	              s.wrapper.prepend(slides);
	          }
	          if (s.params.loop) {
	              s.createLoop();
	          }
	          if (!(s.params.observer && s.support.observer)) {
	              s.update(true);
	          }
	          s.slideTo(newActiveIndex, 0, false);
	      };
	      s.removeSlide = function (slidesIndexes) {
	          if (s.params.loop) {
	              s.destroyLoop();
	              s.slides = s.wrapper.children('.' + s.params.slideClass);
	          }
	          var newActiveIndex = s.activeIndex,
	              indexToRemove;
	          if (typeof slidesIndexes === 'object' && slidesIndexes.length) {
	              for (var i = 0; i < slidesIndexes.length; i++) {
	                  indexToRemove = slidesIndexes[i];
	                  if (s.slides[indexToRemove]) s.slides.eq(indexToRemove).remove();
	                  if (indexToRemove < newActiveIndex) newActiveIndex--;
	              }
	              newActiveIndex = Math.max(newActiveIndex, 0);
	          }
	          else {
	              indexToRemove = slidesIndexes;
	              if (s.slides[indexToRemove]) s.slides.eq(indexToRemove).remove();
	              if (indexToRemove < newActiveIndex) newActiveIndex--;
	              newActiveIndex = Math.max(newActiveIndex, 0);
	          }

	          if (s.params.loop) {
	              s.createLoop();
	          }

	          if (!(s.params.observer && s.support.observer)) {
	              s.update(true);
	          }
	          if (s.params.loop) {
	              s.slideTo(newActiveIndex + s.loopedSlides, 0, false);
	          }
	          else {
	              s.slideTo(newActiveIndex, 0, false);
	          }

	      };
	      s.removeAllSlides = function () {
	          var slidesIndexes = [];
	          for (var i = 0; i < s.slides.length; i++) {
	              slidesIndexes.push(i);
	          }
	          s.removeSlide(slidesIndexes);
	      };


	      /*=========================
	        Effects
	        ===========================*/
	      s.effects = {
	          fade: {
	              setTranslate: function () {
	                  for (var i = 0; i < s.slides.length; i++) {
	                      var slide = s.slides.eq(i);
	                      var offset = slide[0].swiperSlideOffset;
	                      var tx = -offset;
	                      if (!s.params.virtualTranslate) tx = tx - s.translate;
	                      var ty = 0;
	                      if (!isH()) {
	                          ty = tx;
	                          tx = 0;
	                      }
	                      var slideOpacity = s.params.fade.crossFade ?
	                              Math.max(1 - Math.abs(slide[0].progress), 0) :
	                              1 + Math.min(Math.max(slide[0].progress, -1), 0);
	                      slide
	                          .css({
	                              opacity: slideOpacity
	                          })
	                          .transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px)');

	                  }

	              },
	              setTransition: function (duration) {
	                  s.slides.transition(duration);
	                  if (s.params.virtualTranslate && duration !== 0) {
	                      var eventTriggered = false;
	                      s.slides.transitionEnd(function () {
	                          if (eventTriggered) return;
	                          if (!s) return;
	                          eventTriggered = true;
	                          s.animating = false;
	                          var triggerEvents = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'];
	                          for (var i = 0; i < triggerEvents.length; i++) {
	                              s.wrapper.trigger(triggerEvents[i]);
	                          }
	                      });
	                  }
	              }
	          },
	          cube: {
	              setTranslate: function () {
	                  var wrapperRotate = 0, cubeShadow;
	                  if (s.params.cube.shadow) {
	                      if (isH()) {
	                          cubeShadow = s.wrapper.find('.swiper-cube-shadow');
	                          if (cubeShadow.length === 0) {
	                              cubeShadow = $('<div class="swiper-cube-shadow"></div>');
	                              s.wrapper.append(cubeShadow);
	                          }
	                          cubeShadow.css({height: s.width + 'px'});
	                      }
	                      else {
	                          cubeShadow = s.container.find('.swiper-cube-shadow');
	                          if (cubeShadow.length === 0) {
	                              cubeShadow = $('<div class="swiper-cube-shadow"></div>');
	                              s.container.append(cubeShadow);
	                          }
	                      }
	                  }
	                  for (var i = 0; i < s.slides.length; i++) {
	                      var slide = s.slides.eq(i);
	                      var slideAngle = i * 90;
	                      var round = Math.floor(slideAngle / 360);
	                      if (s.rtl) {
	                          slideAngle = -slideAngle;
	                          round = Math.floor(-slideAngle / 360);
	                      }
	                      var progress = Math.max(Math.min(slide[0].progress, 1), -1);
	                      var tx = 0, ty = 0, tz = 0;
	                      if (i % 4 === 0) {
	                          tx = - round * 4 * s.size;
	                          tz = 0;
	                      }
	                      else if ((i - 1) % 4 === 0) {
	                          tx = 0;
	                          tz = - round * 4 * s.size;
	                      }
	                      else if ((i - 2) % 4 === 0) {
	                          tx = s.size + round * 4 * s.size;
	                          tz = s.size;
	                      }
	                      else if ((i - 3) % 4 === 0) {
	                          tx = - s.size;
	                          tz = 3 * s.size + s.size * 4 * round;
	                      }
	                      if (s.rtl) {
	                          tx = -tx;
	                      }

	                      if (!isH()) {
	                          ty = tx;
	                          tx = 0;
	                      }

	                      var transform = 'rotateX(' + (isH() ? 0 : -slideAngle) + 'deg) rotateY(' + (isH() ? slideAngle : 0) + 'deg) translate3d(' + tx + 'px, ' + ty + 'px, ' + tz + 'px)';
	                      if (progress <= 1 && progress > -1) {
	                          wrapperRotate = i * 90 + progress * 90;
	                          if (s.rtl) wrapperRotate = -i * 90 - progress * 90;
	                      }
	                      slide.transform(transform);
	                      if (s.params.cube.slideShadows) {
	                          //Set shadows
	                          var shadowBefore = isH() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');
	                          var shadowAfter = isH() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');
	                          if (shadowBefore.length === 0) {
	                              shadowBefore = $('<div class="swiper-slide-shadow-' + (isH() ? 'left' : 'top') + '"></div>');
	                              slide.append(shadowBefore);
	                          }
	                          if (shadowAfter.length === 0) {
	                              shadowAfter = $('<div class="swiper-slide-shadow-' + (isH() ? 'right' : 'bottom') + '"></div>');
	                              slide.append(shadowAfter);
	                          }
	                          var shadowOpacity = slide[0].progress;
	                          if (shadowBefore.length) shadowBefore[0].style.opacity = -slide[0].progress;
	                          if (shadowAfter.length) shadowAfter[0].style.opacity = slide[0].progress;
	                      }
	                  }
	                  s.wrapper.css({
	                      '-webkit-transform-origin': '50% 50% -' + (s.size / 2) + 'px',
	                      '-moz-transform-origin': '50% 50% -' + (s.size / 2) + 'px',
	                      '-ms-transform-origin': '50% 50% -' + (s.size / 2) + 'px',
	                      'transform-origin': '50% 50% -' + (s.size / 2) + 'px'
	                  });

	                  if (s.params.cube.shadow) {
	                      if (isH()) {
	                          cubeShadow.transform('translate3d(0px, ' + (s.width / 2 + s.params.cube.shadowOffset) + 'px, ' + (-s.width / 2) + 'px) rotateX(90deg) rotateZ(0deg) scale(' + (s.params.cube.shadowScale) + ')');
	                      }
	                      else {
	                          var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
	                          var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
	                          var scale1 = s.params.cube.shadowScale,
	                              scale2 = s.params.cube.shadowScale / multiplier,
	                              offset = s.params.cube.shadowOffset;
	                          cubeShadow.transform('scale3d(' + scale1 + ', 1, ' + scale2 + ') translate3d(0px, ' + (s.height / 2 + offset) + 'px, ' + (-s.height / 2 / scale2) + 'px) rotateX(-90deg)');
	                      }
	                  }
	                  var zFactor = (s.isSafari || s.isUiWebView) ? (-s.size / 2) : 0;
	                  s.wrapper.transform('translate3d(0px,0,' + zFactor + 'px) rotateX(' + (isH() ? 0 : wrapperRotate) + 'deg) rotateY(' + (isH() ? -wrapperRotate : 0) + 'deg)');
	              },
	              setTransition: function (duration) {
	                  s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
	                  if (s.params.cube.shadow && !isH()) {
	                      s.container.find('.swiper-cube-shadow').transition(duration);
	                  }
	              }
	          },
	          coverflow: {
	              setTranslate: function () {
	                  var transform = s.translate;
	                  var center = isH() ? -transform + s.width / 2 : -transform + s.height / 2;
	                  var rotate = isH() ? s.params.coverflow.rotate: -s.params.coverflow.rotate;
	                  var translate = s.params.coverflow.depth;
	                  //Each slide offset from center
	                  for (var i = 0, length = s.slides.length; i < length; i++) {
	                      var slide = s.slides.eq(i);
	                      var slideSize = s.slidesSizesGrid[i];
	                      var slideOffset = slide[0].swiperSlideOffset;
	                      var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * s.params.coverflow.modifier;

	                      var rotateY = isH() ? rotate * offsetMultiplier : 0;
	                      var rotateX = isH() ? 0 : rotate * offsetMultiplier;
	                      // var rotateZ = 0
	                      var translateZ = -translate * Math.abs(offsetMultiplier);

	                      var translateY = isH() ? 0 : s.params.coverflow.stretch * (offsetMultiplier);
	                      var translateX = isH() ? s.params.coverflow.stretch * (offsetMultiplier) : 0;

	                      //Fix for ultra small values
	                      if (Math.abs(translateX) < 0.001) translateX = 0;
	                      if (Math.abs(translateY) < 0.001) translateY = 0;
	                      if (Math.abs(translateZ) < 0.001) translateZ = 0;
	                      if (Math.abs(rotateY) < 0.001) rotateY = 0;
	                      if (Math.abs(rotateX) < 0.001) rotateX = 0;

	                      var slideTransform = 'translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px)  rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)';

	                      slide.transform(slideTransform);
	                      slide[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
	                      if (s.params.coverflow.slideShadows) {
	                          //Set shadows
	                          var shadowBefore = isH() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');
	                          var shadowAfter = isH() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');
	                          if (shadowBefore.length === 0) {
	                              shadowBefore = $('<div class="swiper-slide-shadow-' + (isH() ? 'left' : 'top') + '"></div>');
	                              slide.append(shadowBefore);
	                          }
	                          if (shadowAfter.length === 0) {
	                              shadowAfter = $('<div class="swiper-slide-shadow-' + (isH() ? 'right' : 'bottom') + '"></div>');
	                              slide.append(shadowAfter);
	                          }
	                          if (shadowBefore.length) shadowBefore[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
	                          if (shadowAfter.length) shadowAfter[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0;
	                      }
	                  }

	                  //Set correct perspective for IE10
	                  if (s.browser.ie) {
	                      var ws = s.wrapper[0].style;
	                      ws.perspectiveOrigin = center + 'px 50%';
	                  }
	              },
	              setTransition: function (duration) {
	                  s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);
	              }
	          }
	      };

	      /*=========================
	        Images Lazy Loading
	        ===========================*/
	      s.lazy = {
	          initialImageLoaded: false,
	          loadImageInSlide: function (index, loadInDuplicate) {
	              if (typeof index === 'undefined') return;
	              if (typeof loadInDuplicate === 'undefined') loadInDuplicate = true;
	              if (s.slides.length === 0) return;

	              var slide = s.slides.eq(index);
	              var img = slide.find('.swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)');
	              if (slide.hasClass('swiper-lazy') && !slide.hasClass('swiper-lazy-loaded') && !slide.hasClass('swiper-lazy-loading')) {
	                  img.add(slide[0]);
	              }
	              if (img.length === 0) return;

	              img.each(function () {
	                  var _img = $(this);
	                  _img.addClass('swiper-lazy-loading');
	                  var background = _img.attr('data-background');
	                  var src = _img.attr('data-src');
	                  s.loadImage(_img[0], (src || background), false, function () {
	                      if (background) {
	                          _img.css('background-image', 'url(' + background + ')');
	                          _img.removeAttr('data-background');
	                      }
	                      else {
	                          _img.attr('src', src);
	                          _img.removeAttr('data-src');
	                      }

	                      _img.addClass('swiper-lazy-loaded').removeClass('swiper-lazy-loading');
	                      slide.find('.swiper-lazy-preloader, .preloader').remove();
	                      if (s.params.loop && loadInDuplicate) {
	                          var slideOriginalIndex = slide.attr('data-swiper-slide-index');
	                          if (slide.hasClass(s.params.slideDuplicateClass)) {
	                              var originalSlide = s.wrapper.children('[data-swiper-slide-index="' + slideOriginalIndex + '"]:not(.' + s.params.slideDuplicateClass + ')');
	                              s.lazy.loadImageInSlide(originalSlide.index(), false);
	                          }
	                          else {
	                              var duplicatedSlide = s.wrapper.children('.' + s.params.slideDuplicateClass + '[data-swiper-slide-index="' + slideOriginalIndex + '"]');
	                              s.lazy.loadImageInSlide(duplicatedSlide.index(), false);
	                          }
	                      }
	                      s.emit('onLazyImageReady', s, slide[0], _img[0]);
	                  });

	                  s.emit('onLazyImageLoad', s, slide[0], _img[0]);
	              });

	          },
	          load: function () {
	              var i;
	              if (s.params.watchSlidesVisibility) {
	                  s.wrapper.children('.' + s.params.slideVisibleClass).each(function () {
	                      s.lazy.loadImageInSlide($(this).index());
	                  });
	              }
	              else {
	                  if (s.params.slidesPerView > 1) {
	                      for (i = s.activeIndex; i < s.activeIndex + s.params.slidesPerView ; i++) {
	                          if (s.slides[i]) s.lazy.loadImageInSlide(i);
	                      }
	                  }
	                  else {
	                      s.lazy.loadImageInSlide(s.activeIndex);
	                  }
	              }
	              if (s.params.lazyLoadingInPrevNext) {
	                  if (s.params.slidesPerView > 1) {
	                      // Next Slides
	                      for (i = s.activeIndex + s.params.slidesPerView; i < s.activeIndex + s.params.slidesPerView + s.params.slidesPerView; i++) {
	                          if (s.slides[i]) s.lazy.loadImageInSlide(i);
	                      }
	                      // Prev Slides
	                      for (i = s.activeIndex - s.params.slidesPerView; i < s.activeIndex ; i++) {
	                          if (s.slides[i]) s.lazy.loadImageInSlide(i);
	                      }
	                  }
	                  else {
	                      var nextSlide = s.wrapper.children('.' + s.params.slideNextClass);
	                      if (nextSlide.length > 0) s.lazy.loadImageInSlide(nextSlide.index());

	                      var prevSlide = s.wrapper.children('.' + s.params.slidePrevClass);
	                      if (prevSlide.length > 0) s.lazy.loadImageInSlide(prevSlide.index());
	                  }
	              }
	          },
	          onTransitionStart: function () {
	              if (s.params.lazyLoading) {
	                  if (s.params.lazyLoadingOnTransitionStart || (!s.params.lazyLoadingOnTransitionStart && !s.lazy.initialImageLoaded)) {
	                      s.lazy.load();
	                  }
	              }
	          },
	          onTransitionEnd: function () {
	              if (s.params.lazyLoading && !s.params.lazyLoadingOnTransitionStart) {
	                  s.lazy.load();
	              }
	          }
	      };


	      /*=========================
	        Scrollbar
	        ===========================*/
	      s.scrollbar = {
	          set: function () {
	              if (!s.params.scrollbar) return;
	              var sb = s.scrollbar;
	              sb.track = $(s.params.scrollbar);
	              sb.drag = sb.track.find('.swiper-scrollbar-drag');
	              if (sb.drag.length === 0) {
	                  sb.drag = $('<div class="swiper-scrollbar-drag"></div>');
	                  sb.track.append(sb.drag);
	              }
	              sb.drag[0].style.width = '';
	              sb.drag[0].style.height = '';
	              sb.trackSize = isH() ? sb.track[0].offsetWidth : sb.track[0].offsetHeight;

	              sb.divider = s.size / s.virtualSize;
	              sb.moveDivider = sb.divider * (sb.trackSize / s.size);
	              sb.dragSize = sb.trackSize * sb.divider;

	              if (isH()) {
	                  sb.drag[0].style.width = sb.dragSize + 'px';
	              }
	              else {
	                  sb.drag[0].style.height = sb.dragSize + 'px';
	              }

	              if (sb.divider >= 1) {
	                  sb.track[0].style.display = 'none';
	              }
	              else {
	                  sb.track[0].style.display = '';
	              }
	              if (s.params.scrollbarHide) {
	                  sb.track[0].style.opacity = 0;
	              }
	          },
	          setTranslate: function () {
	              if (!s.params.scrollbar) return;
	              var diff;
	              var sb = s.scrollbar;
	              var translate = s.translate || 0;
	              var newPos;

	              var newSize = sb.dragSize;
	              newPos = (sb.trackSize - sb.dragSize) * s.progress;
	              if (s.rtl && isH()) {
	                  newPos = -newPos;
	                  if (newPos > 0) {
	                      newSize = sb.dragSize - newPos;
	                      newPos = 0;
	                  }
	                  else if (-newPos + sb.dragSize > sb.trackSize) {
	                      newSize = sb.trackSize + newPos;
	                  }
	              }
	              else {
	                  if (newPos < 0) {
	                      newSize = sb.dragSize + newPos;
	                      newPos = 0;
	                  }
	                  else if (newPos + sb.dragSize > sb.trackSize) {
	                      newSize = sb.trackSize - newPos;
	                  }
	              }
	              if (isH()) {
	                  if (s.support.transforms3d) {
	                      sb.drag.transform('translate3d(' + (newPos) + 'px, 0, 0)');
	                  }
	                  else {
	                      sb.drag.transform('translateX(' + (newPos) + 'px)');
	                  }
	                  sb.drag[0].style.width = newSize + 'px';
	              }
	              else {
	                  if (s.support.transforms3d) {
	                      sb.drag.transform('translate3d(0px, ' + (newPos) + 'px, 0)');
	                  }
	                  else {
	                      sb.drag.transform('translateY(' + (newPos) + 'px)');
	                  }
	                  sb.drag[0].style.height = newSize + 'px';
	              }
	              if (s.params.scrollbarHide) {
	                  clearTimeout(sb.timeout);
	                  sb.track[0].style.opacity = 1;
	                  sb.timeout = setTimeout(function () {
	                      sb.track[0].style.opacity = 0;
	                      sb.track.transition(400);
	                  }, 1000);
	              }
	          },
	          setTransition: function (duration) {
	              if (!s.params.scrollbar) return;
	              s.scrollbar.drag.transition(duration);
	          }
	      };

	      /*=========================
	        Controller
	        ===========================*/
	      s.controller = {
	          LinearSpline: function (x, y) {
	              this.x = x;
	              this.y = y;
	              this.lastIndex = x.length - 1;
	              // Given an x value (x2), return the expected y2 value:
	              // (x1,y1) is the known point before given value,
	              // (x3,y3) is the known point after given value.
	              var i1, i3;
	              var l = this.x.length;

	              this.interpolate = function (x2) {
	                  if (!x2) return 0;

	                  // Get the indexes of x1 and x3 (the array indexes before and after given x2):
	                  i3 = binarySearch(this.x, x2);
	                  i1 = i3 - 1;

	                  // We have our indexes i1 & i3, so we can calculate already:
	                  // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
	                  return ((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1]) + this.y[i1];
	              };

	              var binarySearch = (function() {
	                  var maxIndex, minIndex, guess;
	                  return function(array, val) {
	                      minIndex = -1;
	                      maxIndex = array.length;
	                      while (maxIndex - minIndex > 1)
	                          if (array[guess = maxIndex + minIndex >> 1] <= val) {
	                              minIndex = guess;
	                          } else {
	                              maxIndex = guess;
	                          }
	                      return maxIndex;
	                  };
	              })();
	          },
	          //xxx: for now i will just save one spline function to to
	          getInterpolateFunction: function(c){
	              if(!s.controller.spline) s.controller.spline = s.params.loop ?
	                  new s.controller.LinearSpline(s.slidesGrid, c.slidesGrid) :
	                  new s.controller.LinearSpline(s.snapGrid, c.snapGrid);
	          },
	          setTranslate: function (translate, byController) {
	             var controlled = s.params.control;
	             var multiplier, controlledTranslate;
	             function setControlledTranslate(c) {
	                  // this will create an Interpolate function based on the snapGrids
	                  // x is the Grid of the scrolled scroller and y will be the controlled scroller
	                  // it makes sense to create this only once and recall it for the interpolation
	                  // the function does a lot of value caching for performance
	                  translate = c.rtl && c.params.direction === 'horizontal' ? -s.translate : s.translate;
	                  if (s.params.controlBy === 'slide') {
	                      s.controller.getInterpolateFunction(c);
	                      // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
	                      // but it did not work out
	                      controlledTranslate = -s.controller.spline.interpolate(-translate);
	                  }

	                  if(!controlledTranslate || s.params.controlBy === 'container'){
	                      multiplier = (c.maxTranslate() - c.minTranslate()) / (s.maxTranslate() - s.minTranslate());
	                      controlledTranslate = (translate - s.minTranslate()) * multiplier + c.minTranslate();
	                  }

	                  if (s.params.controlInverse) {
	                      controlledTranslate = c.maxTranslate() - controlledTranslate;
	                  }
	                  c.updateProgress(controlledTranslate);
	                  c.setWrapperTranslate(controlledTranslate, false, s);
	                  c.updateActiveIndex();
	             }
	             if (s.isArray(controlled)) {
	                 for (var i = 0; i < controlled.length; i++) {
	                     if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
	                         setControlledTranslate(controlled[i]);
	                     }
	                 }
	             }
	             else if (controlled instanceof Swiper && byController !== controlled) {

	                 setControlledTranslate(controlled);
	             }
	          },
	          setTransition: function (duration, byController) {
	              var controlled = s.params.control;
	              var i;
	              function setControlledTransition(c) {
	                  c.setWrapperTransition(duration, s);
	                  if (duration !== 0) {
	                      c.onTransitionStart();
	                      c.wrapper.transitionEnd(function(){
	                          if (!controlled) return;
	                          if (c.params.loop && s.params.controlBy === 'slide') {
	                              c.fixLoop();
	                          }
	                          c.onTransitionEnd();

	                      });
	                  }
	              }
	              if (s.isArray(controlled)) {
	                  for (i = 0; i < controlled.length; i++) {
	                      if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
	                          setControlledTransition(controlled[i]);
	                      }
	                  }
	              }
	              else if (controlled instanceof Swiper && byController !== controlled) {
	                  setControlledTransition(controlled);
	              }
	          }
	      };

	      /*=========================
	        Hash Navigation
	        ===========================*/
	      s.hashnav = {
	          init: function () {
	              if (!s.params.hashnav) return;
	              s.hashnav.initialized = true;
	              var hash = document.location.hash.replace('#', '');
	              if (!hash) return;
	              var speed = 0;
	              for (var i = 0, length = s.slides.length; i < length; i++) {
	                  var slide = s.slides.eq(i);
	                  var slideHash = slide.attr('data-hash');
	                  if (slideHash === hash && !slide.hasClass(s.params.slideDuplicateClass)) {
	                      var index = slide.index();
	                      s.slideTo(index, speed, s.params.runCallbacksOnInit, true);
	                  }
	              }
	          },
	          setHash: function () {
	              if (!s.hashnav.initialized || !s.params.hashnav) return;
	              document.location.hash = s.slides.eq(s.activeIndex).attr('data-hash') || '';
	          }
	      };

	      /*=========================
	        Keyboard Control
	        ===========================*/
	      function handleKeyboard(e) {
	          if (e.originalEvent) e = e.originalEvent; //jquery fix
	          var kc = e.keyCode || e.charCode;
	          // Directions locks
	          if (!s.params.allowSwipeToNext && (isH() && kc === 39 || !isH() && kc === 40)) {
	              return false;
	          }
	          if (!s.params.allowSwipeToPrev && (isH() && kc === 37 || !isH() && kc === 38)) {
	              return false;
	          }
	          if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
	              return;
	          }
	          if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {
	              return;
	          }
	          if (kc === 37 || kc === 39 || kc === 38 || kc === 40) {
	              var inView = false;
	              //Check that swiper should be inside of visible area of window
	              if (s.container.parents('.swiper-slide').length > 0 && s.container.parents('.swiper-slide-active').length === 0) {
	                  return;
	              }
	              var windowScroll = {
	                  left: window.pageXOffset,
	                  top: window.pageYOffset
	              };
	              var windowWidth = window.innerWidth;
	              var windowHeight = window.innerHeight;
	              var swiperOffset = s.container.offset();
	              if (s.rtl) swiperOffset.left = swiperOffset.left - s.container[0].scrollLeft;
	              var swiperCoord = [
	                  [swiperOffset.left, swiperOffset.top],
	                  [swiperOffset.left + s.width, swiperOffset.top],
	                  [swiperOffset.left, swiperOffset.top + s.height],
	                  [swiperOffset.left + s.width, swiperOffset.top + s.height]
	              ];
	              for (var i = 0; i < swiperCoord.length; i++) {
	                  var point = swiperCoord[i];
	                  if (
	                      point[0] >= windowScroll.left && point[0] <= windowScroll.left + windowWidth &&
	                      point[1] >= windowScroll.top && point[1] <= windowScroll.top + windowHeight
	                  ) {
	                      inView = true;
	                  }

	              }
	              if (!inView) return;
	          }
	          if (isH()) {
	              if (kc === 37 || kc === 39) {
	                  if (e.preventDefault) e.preventDefault();
	                  else e.returnValue = false;
	              }
	              if ((kc === 39 && !s.rtl) || (kc === 37 && s.rtl)) s.slideNext();
	              if ((kc === 37 && !s.rtl) || (kc === 39 && s.rtl)) s.slidePrev();
	          }
	          else {
	              if (kc === 38 || kc === 40) {
	                  if (e.preventDefault) e.preventDefault();
	                  else e.returnValue = false;
	              }
	              if (kc === 40) s.slideNext();
	              if (kc === 38) s.slidePrev();
	          }
	      }
	      s.disableKeyboardControl = function () {
	          $(document).off('keydown', handleKeyboard);
	      };
	      s.enableKeyboardControl = function () {
	          $(document).on('keydown', handleKeyboard);
	      };


	      /*=========================
	        Mousewheel Control
	        ===========================*/
	      s.mousewheel = {
	          event: false,
	          lastScrollTime: (new window.Date()).getTime()
	      };
	      if (s.params.mousewheelControl) {
	          try {
	              new window.WheelEvent('wheel');
	              s.mousewheel.event = 'wheel';
	          } catch (e) {}

	          if (!s.mousewheel.event && document.onmousewheel !== undefined) {
	              s.mousewheel.event = 'mousewheel';
	          }
	          if (!s.mousewheel.event) {
	              s.mousewheel.event = 'DOMMouseScroll';
	          }
	      }
	      function handleMousewheel(e) {
	          if (e.originalEvent) e = e.originalEvent; //jquery fix
	          var we = s.mousewheel.event;
	          var delta = 0;
	          //Opera & IE
	          if (e.detail) delta = -e.detail;
	          //WebKits
	          else if (we === 'mousewheel') {
	              if (s.params.mousewheelForceToAxis) {
	                  if (isH()) {
	                      if (Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY)) delta = e.wheelDeltaX;
	                      else return;
	                  }
	                  else {
	                      if (Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX)) delta = e.wheelDeltaY;
	                      else return;
	                  }
	              }
	              else {
	                  delta = e.wheelDelta;
	              }
	          }
	          //Old FireFox
	          else if (we === 'DOMMouseScroll') delta = -e.detail;
	          //New FireFox
	          else if (we === 'wheel') {
	              if (s.params.mousewheelForceToAxis) {
	                  if (isH()) {
	                      if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) delta = -e.deltaX;
	                      else return;
	                  }
	                  else {
	                      if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) delta = -e.deltaY;
	                      else return;
	                  }
	              }
	              else {
	                  delta = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? - e.deltaX : - e.deltaY;
	              }
	          }

	          if (s.params.mousewheelInvert) delta = -delta;

	          if (!s.params.freeMode) {
	              if ((new window.Date()).getTime() - s.mousewheel.lastScrollTime > 60) {
	                  if (delta < 0) {
	                      if ((!s.isEnd || s.params.loop) && !s.animating) s.slideNext();
	                      else if (s.params.mousewheelReleaseOnEdges) return true;
	                  }
	                  else {
	                      if ((!s.isBeginning || s.params.loop) && !s.animating) s.slidePrev();
	                      else if (s.params.mousewheelReleaseOnEdges) return true;
	                  }
	              }
	              s.mousewheel.lastScrollTime = (new window.Date()).getTime();

	          }
	          else {
	              //Freemode or scrollContainer:

	              var position = s.getWrapperTranslate() + delta * s.params.mousewheelSensitivity;

	              if (position > 0) position = 0;
	              if (position < s.maxTranslate()) position = s.maxTranslate();

	              s.setWrapperTransition(0);
	              s.setWrapperTranslate(position);
	              s.updateProgress();
	              s.updateActiveIndex();

	              if (s.params.freeModeSticky) {
	                  clearTimeout(s.mousewheel.timeout);
	                  s.mousewheel.timeout = setTimeout(function () {
	                      s.slideReset();
	                  }, 300);
	              }

	              // Return page scroll on edge positions
	              if (position === 0 || position === s.maxTranslate()) return;
	          }
	          if (s.params.autoplay) s.stopAutoplay();

	          if (e.preventDefault) e.preventDefault();
	          else e.returnValue = false;
	          return false;
	      }
	      s.disableMousewheelControl = function () {
	          if (!s.mousewheel.event) return false;
	          s.container.off(s.mousewheel.event, handleMousewheel);
	          return true;
	      };

	      s.enableMousewheelControl = function () {
	          if (!s.mousewheel.event) return false;
	          s.container.on(s.mousewheel.event, handleMousewheel);
	          return true;
	      };

	      /*=========================
	        Parallax
	        ===========================*/
	      function setParallaxTransform(el, progress) {
	          el = $(el);
	          var p, pX, pY;

	          p = el.attr('data-swiper-parallax') || '0';
	          pX = el.attr('data-swiper-parallax-x');
	          pY = el.attr('data-swiper-parallax-y');
	          if (pX || pY) {
	              pX = pX || '0';
	              pY = pY || '0';
	          }
	          else {
	              if (isH()) {
	                  pX = p;
	                  pY = '0';
	              }
	              else {
	                  pY = p;
	                  pX = '0';
	              }
	          }
	          if ((pX).indexOf('%') >= 0) {
	              pX = parseInt(pX, 10) * progress + '%';
	          }
	          else {
	              pX = pX * progress + 'px' ;
	          }
	          if ((pY).indexOf('%') >= 0) {
	              pY = parseInt(pY, 10) * progress + '%';
	          }
	          else {
	              pY = pY * progress + 'px' ;
	          }
	          el.transform('translate3d(' + pX + ', ' + pY + ',0px)');
	      }
	      s.parallax = {
	          setTranslate: function () {
	              s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){
	                  setParallaxTransform(this, s.progress);

	              });
	              s.slides.each(function () {
	                  var slide = $(this);
	                  slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function () {
	                      var progress = Math.min(Math.max(slide[0].progress, -1), 1);
	                      setParallaxTransform(this, progress);
	                  });
	              });
	          },
	          setTransition: function (duration) {
	              if (typeof duration === 'undefined') duration = s.params.speed;
	              s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){
	                  var el = $(this);
	                  var parallaxDuration = parseInt(el.attr('data-swiper-parallax-duration'), 10) || duration;
	                  if (duration === 0) parallaxDuration = 0;
	                  el.transition(parallaxDuration);
	              });
	          }
	      };


	      /*=========================
	        Plugins API. Collect all and init all plugins
	        ===========================*/
	      s._plugins = [];
	      for (var plugin in s.plugins) {
	          var p = s.plugins[plugin](s, s.params[plugin]);
	          if (p) s._plugins.push(p);
	      }
	      // Method to call all plugins event/method
	      s.callPlugins = function (eventName) {
	          for (var i = 0; i < s._plugins.length; i++) {
	              if (eventName in s._plugins[i]) {
	                  s._plugins[i][eventName](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	              }
	          }
	      };

	      /*=========================
	        Events/Callbacks/Plugins Emitter
	        ===========================*/
	      function normalizeEventName (eventName) {
	          if (eventName.indexOf('on') !== 0) {
	              if (eventName[0] !== eventName[0].toUpperCase()) {
	                  eventName = 'on' + eventName[0].toUpperCase() + eventName.substring(1);
	              }
	              else {
	                  eventName = 'on' + eventName;
	              }
	          }
	          return eventName;
	      }
	      s.emitterEventListeners = {

	      };
	      s.emit = function (eventName) {
	          // Trigger callbacks
	          if (s.params[eventName]) {
	              s.params[eventName](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	          }
	          var i;
	          // Trigger events
	          if (s.emitterEventListeners[eventName]) {
	              for (i = 0; i < s.emitterEventListeners[eventName].length; i++) {
	                  s.emitterEventListeners[eventName][i](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	              }
	          }
	          // Trigger plugins
	          if (s.callPlugins) s.callPlugins(eventName, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
	      };
	      s.on = function (eventName, handler) {
	          eventName = normalizeEventName(eventName);
	          if (!s.emitterEventListeners[eventName]) s.emitterEventListeners[eventName] = [];
	          s.emitterEventListeners[eventName].push(handler);
	          return s;
	      };
	      s.off = function (eventName, handler) {
	          var i;
	          eventName = normalizeEventName(eventName);
	          if (typeof handler === 'undefined') {
	              // Remove all handlers for such event
	              s.emitterEventListeners[eventName] = [];
	              return s;
	          }
	          if (!s.emitterEventListeners[eventName] || s.emitterEventListeners[eventName].length === 0) return;
	          for (i = 0; i < s.emitterEventListeners[eventName].length; i++) {
	              if(s.emitterEventListeners[eventName][i] === handler) s.emitterEventListeners[eventName].splice(i, 1);
	          }
	          return s;
	      };
	      s.once = function (eventName, handler) {
	          eventName = normalizeEventName(eventName);
	          var _handler = function () {
	              handler(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
	              s.off(eventName, _handler);
	          };
	          s.on(eventName, _handler);
	          return s;
	      };

	      // Accessibility tools
	      s.a11y = {
	          makeFocusable: function ($el) {
	              $el.attr('tabIndex', '0');
	              return $el;
	          },
	          addRole: function ($el, role) {
	              $el.attr('role', role);
	              return $el;
	          },

	          addLabel: function ($el, label) {
	              $el.attr('aria-label', label);
	              return $el;
	          },

	          disable: function ($el) {
	              $el.attr('aria-disabled', true);
	              return $el;
	          },

	          enable: function ($el) {
	              $el.attr('aria-disabled', false);
	              return $el;
	          },

	          onEnterKey: function (event) {
	              if (event.keyCode !== 13) return;
	              if ($(event.target).is(s.params.nextButton)) {
	                  s.onClickNext(event);
	                  if (s.isEnd) {
	                      s.a11y.notify(s.params.lastSlideMessage);
	                  }
	                  else {
	                      s.a11y.notify(s.params.nextSlideMessage);
	                  }
	              }
	              else if ($(event.target).is(s.params.prevButton)) {
	                  s.onClickPrev(event);
	                  if (s.isBeginning) {
	                      s.a11y.notify(s.params.firstSlideMessage);
	                  }
	                  else {
	                      s.a11y.notify(s.params.prevSlideMessage);
	                  }
	              }
	              if ($(event.target).is('.' + s.params.bulletClass)) {
	                  $(event.target)[0].click();
	              }
	          },

	          liveRegion: $('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),

	          notify: function (message) {
	              var notification = s.a11y.liveRegion;
	              if (notification.length === 0) return;
	              notification.html('');
	              notification.html(message);
	          },
	          init: function () {
	              // Setup accessibility
	              if (s.params.nextButton) {
	                  var nextButton = $(s.params.nextButton);
	                  s.a11y.makeFocusable(nextButton);
	                  s.a11y.addRole(nextButton, 'button');
	                  s.a11y.addLabel(nextButton, s.params.nextSlideMessage);
	              }
	              if (s.params.prevButton) {
	                  var prevButton = $(s.params.prevButton);
	                  s.a11y.makeFocusable(prevButton);
	                  s.a11y.addRole(prevButton, 'button');
	                  s.a11y.addLabel(prevButton, s.params.prevSlideMessage);
	              }

	              $(s.container).append(s.a11y.liveRegion);
	          },
	          initPagination: function () {
	              if (s.params.pagination && s.params.paginationClickable && s.bullets && s.bullets.length) {
	                  s.bullets.each(function () {
	                      var bullet = $(this);
	                      s.a11y.makeFocusable(bullet);
	                      s.a11y.addRole(bullet, 'button');
	                      s.a11y.addLabel(bullet, s.params.paginationBulletMessage.replace(/{{index}}/, bullet.index() + 1));
	                  });
	              }
	          },
	          destroy: function () {
	              if (s.a11y.liveRegion && s.a11y.liveRegion.length > 0) s.a11y.liveRegion.remove();
	          }
	      };


	      /*=========================
	        Init/Destroy
	        ===========================*/
	      s.init = function () {
	          if (s.params.loop) s.createLoop();
	          s.updateContainerSize();
	          s.updateSlidesSize();
	          s.updatePagination();
	          if (s.params.scrollbar && s.scrollbar) {
	              s.scrollbar.set();
	          }
	          if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {
	              if (!s.params.loop) s.updateProgress();
	              s.effects[s.params.effect].setTranslate();
	          }
	          if (s.params.loop) {
	              s.slideTo(s.params.initialSlide + s.loopedSlides, 0, s.params.runCallbacksOnInit);
	          }
	          else {
	              s.slideTo(s.params.initialSlide, 0, s.params.runCallbacksOnInit);
	              if (s.params.initialSlide === 0) {
	                  if (s.parallax && s.params.parallax) s.parallax.setTranslate();
	                  if (s.lazy && s.params.lazyLoading) {
	                      s.lazy.load();
	                      s.lazy.initialImageLoaded = true;
	                  }
	              }
	          }
	          s.attachEvents();
	          if (s.params.observer && s.support.observer) {
	              s.initObservers();
	          }
	          if (s.params.preloadImages && !s.params.lazyLoading) {
	              s.preloadImages();
	          }
	          if (s.params.autoplay) {
	              s.startAutoplay();
	          }
	          if (s.params.keyboardControl) {
	              if (s.enableKeyboardControl) s.enableKeyboardControl();
	          }
	          if (s.params.mousewheelControl) {
	              if (s.enableMousewheelControl) s.enableMousewheelControl();
	          }
	          if (s.params.hashnav) {
	              if (s.hashnav) s.hashnav.init();
	          }
	          if (s.params.a11y && s.a11y) s.a11y.init();
	          s.emit('onInit', s);
	      };

	      // Cleanup dynamic styles
	      s.cleanupStyles = function () {
	          // Container
	          s.container.removeClass(s.classNames.join(' ')).removeAttr('style');

	          // Wrapper
	          s.wrapper.removeAttr('style');

	          // Slides
	          if (s.slides && s.slides.length) {
	              s.slides
	                  .removeClass([
	                    s.params.slideVisibleClass,
	                    s.params.slideActiveClass,
	                    s.params.slideNextClass,
	                    s.params.slidePrevClass
	                  ].join(' '))
	                  .removeAttr('style')
	                  .removeAttr('data-swiper-column')
	                  .removeAttr('data-swiper-row');
	          }

	          // Pagination/Bullets
	          if (s.paginationContainer && s.paginationContainer.length) {
	              s.paginationContainer.removeClass(s.params.paginationHiddenClass);
	          }
	          if (s.bullets && s.bullets.length) {
	              s.bullets.removeClass(s.params.bulletActiveClass);
	          }

	          // Buttons
	          if (s.params.prevButton) $(s.params.prevButton).removeClass(s.params.buttonDisabledClass);
	          if (s.params.nextButton) $(s.params.nextButton).removeClass(s.params.buttonDisabledClass);

	          // Scrollbar
	          if (s.params.scrollbar && s.scrollbar) {
	              if (s.scrollbar.track && s.scrollbar.track.length) s.scrollbar.track.removeAttr('style');
	              if (s.scrollbar.drag && s.scrollbar.drag.length) s.scrollbar.drag.removeAttr('style');
	          }
	      };

	      // Destroy
	      s.destroy = function (deleteInstance, cleanupStyles) {
	          // Detach evebts
	          s.detachEvents();
	          // Stop autoplay
	          s.stopAutoplay();
	          // Destroy loop
	          if (s.params.loop) {
	              s.destroyLoop();
	          }
	          // Cleanup styles
	          if (cleanupStyles) {
	              s.cleanupStyles();
	          }
	          // Disconnect observer
	          s.disconnectObservers();
	          // Disable keyboard/mousewheel
	          if (s.params.keyboardControl) {
	              if (s.disableKeyboardControl) s.disableKeyboardControl();
	          }
	          if (s.params.mousewheelControl) {
	              if (s.disableMousewheelControl) s.disableMousewheelControl();
	          }
	          // Disable a11y
	          if (s.params.a11y && s.a11y) s.a11y.destroy();
	          // Destroy callback
	          s.emit('onDestroy');
	          // Delete instance
	          if (deleteInstance !== false) s = null;
	      };

	      s.init();



	      // Return swiper instance
	      return s;
	  };


	  /*==================================================
	      Prototype
	  ====================================================*/
	  Swiper.prototype = {
	      isSafari: (function () {
	          var ua = navigator.userAgent.toLowerCase();
	          return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
	      })(),
	      isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),
	      isArray: function (arr) {
	          return Object.prototype.toString.apply(arr) === '[object Array]';
	      },
	      /*==================================================
	      Browser
	      ====================================================*/
	      browser: {
	          ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled,
	          ieTouch: (window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1) || (window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1),
	      },
	      /*==================================================
	      Devices
	      ====================================================*/
	      device: (function () {
	          var ua = navigator.userAgent;
	          var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	          var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	          var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	          var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	          return {
	              ios: ipad || iphone || ipod,
	              android: android
	          };
	      })(),
	      /*==================================================
	      Feature Detection
	      ====================================================*/
	      support: {
	          touch : (window.Modernizr && Modernizr.touch === true) || (function () {
	              return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
	          })(),

	          transforms3d : (window.Modernizr && Modernizr.csstransforms3d === true) || (function () {
	              var div = document.createElement('div').style;
	              return ('webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div);
	          })(),

	          flexbox: (function () {
	              var div = document.createElement('div').style;
	              var styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
	              for (var i = 0; i < styles.length; i++) {
	                  if (styles[i] in div) return true;
	              }
	          })(),

	          observer: (function () {
	              return ('MutationObserver' in window || 'WebkitMutationObserver' in window);
	          })()
	      },
	      /*==================================================
	      Plugins
	      ====================================================*/
	      plugins: {}
	  };


	  /*===========================
	  Dom7 Library
	  ===========================*/
	  var Dom7 = (function () {
	      var Dom7 = function (arr) {
	          var _this = this, i = 0;
	          // Create array-like object
	          for (i = 0; i < arr.length; i++) {
	              _this[i] = arr[i];
	          }
	          _this.length = arr.length;
	          // Return collection with methods
	          return this;
	      };
	      var $ = function (selector, context) {
	          var arr = [], i = 0;
	          if (selector && !context) {
	              if (selector instanceof Dom7) {
	                  return selector;
	              }
	          }
	          if (selector) {
	              // String
	              if (typeof selector === 'string') {
	                  var els, tempParent, html = selector.trim();
	                  if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
	                      var toCreate = 'div';
	                      if (html.indexOf('<li') === 0) toCreate = 'ul';
	                      if (html.indexOf('<tr') === 0) toCreate = 'tbody';
	                      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
	                      if (html.indexOf('<tbody') === 0) toCreate = 'table';
	                      if (html.indexOf('<option') === 0) toCreate = 'select';
	                      tempParent = document.createElement(toCreate);
	                      tempParent.innerHTML = selector;
	                      for (i = 0; i < tempParent.childNodes.length; i++) {
	                          arr.push(tempParent.childNodes[i]);
	                      }
	                  }
	                  else {
	                      if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
	                          // Pure ID selector
	                          els = [document.getElementById(selector.split('#')[1])];
	                      }
	                      else {
	                          // Other selectors
	                          els = (context || document).querySelectorAll(selector);
	                      }
	                      for (i = 0; i < els.length; i++) {
	                          if (els[i]) arr.push(els[i]);
	                      }
	                  }
	              }
	              // Node/element
	              else if (selector.nodeType || selector === window || selector === document) {
	                  arr.push(selector);
	              }
	              //Array of elements or instance of Dom
	              else if (selector.length > 0 && selector[0].nodeType) {
	                  for (i = 0; i < selector.length; i++) {
	                      arr.push(selector[i]);
	                  }
	              }
	          }
	          return new Dom7(arr);
	      };
	      Dom7.prototype = {
	          // Classes and attriutes
	          addClass: function (className) {
	              if (typeof className === 'undefined') {
	                  return this;
	              }
	              var classes = className.split(' ');
	              for (var i = 0; i < classes.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      this[j].classList.add(classes[i]);
	                  }
	              }
	              return this;
	          },
	          removeClass: function (className) {
	              var classes = className.split(' ');
	              for (var i = 0; i < classes.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      this[j].classList.remove(classes[i]);
	                  }
	              }
	              return this;
	          },
	          hasClass: function (className) {
	              if (!this[0]) return false;
	              else return this[0].classList.contains(className);
	          },
	          toggleClass: function (className) {
	              var classes = className.split(' ');
	              for (var i = 0; i < classes.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      this[j].classList.toggle(classes[i]);
	                  }
	              }
	              return this;
	          },
	          attr: function (attrs, value) {
	              if (arguments.length === 1 && typeof attrs === 'string') {
	                  // Get attr
	                  if (this[0]) return this[0].getAttribute(attrs);
	                  else return undefined;
	              }
	              else {
	                  // Set attrs
	                  for (var i = 0; i < this.length; i++) {
	                      if (arguments.length === 2) {
	                          // String
	                          this[i].setAttribute(attrs, value);
	                      }
	                      else {
	                          // Object
	                          for (var attrName in attrs) {
	                              this[i][attrName] = attrs[attrName];
	                              this[i].setAttribute(attrName, attrs[attrName]);
	                          }
	                      }
	                  }
	                  return this;
	              }
	          },
	          removeAttr: function (attr) {
	              for (var i = 0; i < this.length; i++) {
	                  this[i].removeAttribute(attr);
	              }
	              return this;
	          },
	          data: function (key, value) {
	              if (typeof value === 'undefined') {
	                  // Get value
	                  if (this[0]) {
	                      var dataKey = this[0].getAttribute('data-' + key);
	                      if (dataKey) return dataKey;
	                      else if (this[0].dom7ElementDataStorage && (key in this[0].dom7ElementDataStorage)) return this[0].dom7ElementDataStorage[key];
	                      else return undefined;
	                  }
	                  else return undefined;
	              }
	              else {
	                  // Set value
	                  for (var i = 0; i < this.length; i++) {
	                      var el = this[i];
	                      if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
	                      el.dom7ElementDataStorage[key] = value;
	                  }
	                  return this;
	              }
	          },
	          // Transforms
	          transform : function (transform) {
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;
	              }
	              return this;
	          },
	          transition: function (duration) {
	              if (typeof duration !== 'string') {
	                  duration = duration + 'ms';
	              }
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;
	              }
	              return this;
	          },
	          //Events
	          on: function (eventName, targetSelector, listener, capture) {
	              function handleLiveEvent(e) {
	                  var target = e.target;
	                  if ($(target).is(targetSelector)) listener.call(target, e);
	                  else {
	                      var parents = $(target).parents();
	                      for (var k = 0; k < parents.length; k++) {
	                          if ($(parents[k]).is(targetSelector)) listener.call(parents[k], e);
	                      }
	                  }
	              }
	              var events = eventName.split(' ');
	              var i, j;
	              for (i = 0; i < this.length; i++) {
	                  if (typeof targetSelector === 'function' || targetSelector === false) {
	                      // Usual events
	                      if (typeof targetSelector === 'function') {
	                          listener = arguments[1];
	                          capture = arguments[2] || false;
	                      }
	                      for (j = 0; j < events.length; j++) {
	                          this[i].addEventListener(events[j], listener, capture);
	                      }
	                  }
	                  else {
	                      //Live events
	                      for (j = 0; j < events.length; j++) {
	                          if (!this[i].dom7LiveListeners) this[i].dom7LiveListeners = [];
	                          this[i].dom7LiveListeners.push({listener: listener, liveListener: handleLiveEvent});
	                          this[i].addEventListener(events[j], handleLiveEvent, capture);
	                      }
	                  }
	              }

	              return this;
	          },
	          off: function (eventName, targetSelector, listener, capture) {
	              var events = eventName.split(' ');
	              for (var i = 0; i < events.length; i++) {
	                  for (var j = 0; j < this.length; j++) {
	                      if (typeof targetSelector === 'function' || targetSelector === false) {
	                          // Usual events
	                          if (typeof targetSelector === 'function') {
	                              listener = arguments[1];
	                              capture = arguments[2] || false;
	                          }
	                          this[j].removeEventListener(events[i], listener, capture);
	                      }
	                      else {
	                          // Live event
	                          if (this[j].dom7LiveListeners) {
	                              for (var k = 0; k < this[j].dom7LiveListeners.length; k++) {
	                                  if (this[j].dom7LiveListeners[k].listener === listener) {
	                                      this[j].removeEventListener(events[i], this[j].dom7LiveListeners[k].liveListener, capture);
	                                  }
	                              }
	                          }
	                      }
	                  }
	              }
	              return this;
	          },
	          once: function (eventName, targetSelector, listener, capture) {
	              var dom = this;
	              if (typeof targetSelector === 'function') {
	                  targetSelector = false;
	                  listener = arguments[1];
	                  capture = arguments[2];
	              }
	              function proxy(e) {
	                  listener(e);
	                  dom.off(eventName, targetSelector, proxy, capture);
	              }
	              dom.on(eventName, targetSelector, proxy, capture);
	          },
	          trigger: function (eventName, eventData) {
	              for (var i = 0; i < this.length; i++) {
	                  var evt;
	                  try {
	                      evt = new window.CustomEvent(eventName, {detail: eventData, bubbles: true, cancelable: true});
	                  }
	                  catch (e) {
	                      evt = document.createEvent('Event');
	                      evt.initEvent(eventName, true, true);
	                      evt.detail = eventData;
	                  }
	                  this[i].dispatchEvent(evt);
	              }
	              return this;
	          },
	          transitionEnd: function (callback) {
	              var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],
	                  i, j, dom = this;
	              function fireCallBack(e) {
	                  /*jshint validthis:true */
	                  if (e.target !== this) return;
	                  callback.call(this, e);
	                  for (i = 0; i < events.length; i++) {
	                      dom.off(events[i], fireCallBack);
	                  }
	              }
	              if (callback) {
	                  for (i = 0; i < events.length; i++) {
	                      dom.on(events[i], fireCallBack);
	                  }
	              }
	              return this;
	          },
	          // Sizing/Styles
	          width: function () {
	              if (this[0] === window) {
	                  return window.innerWidth;
	              }
	              else {
	                  if (this.length > 0) {
	                      return parseFloat(this.css('width'));
	                  }
	                  else {
	                      return null;
	                  }
	              }
	          },
	          outerWidth: function (includeMargins) {
	              if (this.length > 0) {
	                  if (includeMargins)
	                      return this[0].offsetWidth + parseFloat(this.css('margin-right')) + parseFloat(this.css('margin-left'));
	                  else
	                      return this[0].offsetWidth;
	              }
	              else return null;
	          },
	          height: function () {
	              if (this[0] === window) {
	                  return window.innerHeight;
	              }
	              else {
	                  if (this.length > 0) {
	                      return parseFloat(this.css('height'));
	                  }
	                  else {
	                      return null;
	                  }
	              }
	          },
	          outerHeight: function (includeMargins) {
	              if (this.length > 0) {
	                  if (includeMargins)
	                      return this[0].offsetHeight + parseFloat(this.css('margin-top')) + parseFloat(this.css('margin-bottom'));
	                  else
	                      return this[0].offsetHeight;
	              }
	              else return null;
	          },
	          offset: function () {
	              if (this.length > 0) {
	                  var el = this[0];
	                  var box = el.getBoundingClientRect();
	                  var body = document.body;
	                  var clientTop  = el.clientTop  || body.clientTop  || 0;
	                  var clientLeft = el.clientLeft || body.clientLeft || 0;
	                  var scrollTop  = window.pageYOffset || el.scrollTop;
	                  var scrollLeft = window.pageXOffset || el.scrollLeft;
	                  return {
	                      top: box.top  + scrollTop  - clientTop,
	                      left: box.left + scrollLeft - clientLeft
	                  };
	              }
	              else {
	                  return null;
	              }
	          },
	          css: function (props, value) {
	              var i;
	              if (arguments.length === 1) {
	                  if (typeof props === 'string') {
	                      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
	                  }
	                  else {
	                      for (i = 0; i < this.length; i++) {
	                          for (var prop in props) {
	                              this[i].style[prop] = props[prop];
	                          }
	                      }
	                      return this;
	                  }
	              }
	              if (arguments.length === 2 && typeof props === 'string') {
	                  for (i = 0; i < this.length; i++) {
	                      this[i].style[props] = value;
	                  }
	                  return this;
	              }
	              return this;
	          },

	          //Dom manipulation
	          each: function (callback) {
	              for (var i = 0; i < this.length; i++) {
	                  callback.call(this[i], i, this[i]);
	              }
	              return this;
	          },
	          html: function (html) {
	              if (typeof html === 'undefined') {
	                  return this[0] ? this[0].innerHTML : undefined;
	              }
	              else {
	                  for (var i = 0; i < this.length; i++) {
	                      this[i].innerHTML = html;
	                  }
	                  return this;
	              }
	          },
	          is: function (selector) {
	              if (!this[0]) return false;
	              var compareWith, i;
	              if (typeof selector === 'string') {
	                  var el = this[0];
	                  if (el === document) return selector === document;
	                  if (el === window) return selector === window;

	                  if (el.matches) return el.matches(selector);
	                  else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
	                  else if (el.mozMatchesSelector) return el.mozMatchesSelector(selector);
	                  else if (el.msMatchesSelector) return el.msMatchesSelector(selector);
	                  else {
	                      compareWith = $(selector);
	                      for (i = 0; i < compareWith.length; i++) {
	                          if (compareWith[i] === this[0]) return true;
	                      }
	                      return false;
	                  }
	              }
	              else if (selector === document) return this[0] === document;
	              else if (selector === window) return this[0] === window;
	              else {
	                  if (selector.nodeType || selector instanceof Dom7) {
	                      compareWith = selector.nodeType ? [selector] : selector;
	                      for (i = 0; i < compareWith.length; i++) {
	                          if (compareWith[i] === this[0]) return true;
	                      }
	                      return false;
	                  }
	                  return false;
	              }

	          },
	          index: function () {
	              if (this[0]) {
	                  var child = this[0];
	                  var i = 0;
	                  while ((child = child.previousSibling) !== null) {
	                      if (child.nodeType === 1) i++;
	                  }
	                  return i;
	              }
	              else return undefined;
	          },
	          eq: function (index) {
	              if (typeof index === 'undefined') return this;
	              var length = this.length;
	              var returnIndex;
	              if (index > length - 1) {
	                  return new Dom7([]);
	              }
	              if (index < 0) {
	                  returnIndex = length + index;
	                  if (returnIndex < 0) return new Dom7([]);
	                  else return new Dom7([this[returnIndex]]);
	              }
	              return new Dom7([this[index]]);
	          },
	          append: function (newChild) {
	              var i, j;
	              for (i = 0; i < this.length; i++) {
	                  if (typeof newChild === 'string') {
	                      var tempDiv = document.createElement('div');
	                      tempDiv.innerHTML = newChild;
	                      while (tempDiv.firstChild) {
	                          this[i].appendChild(tempDiv.firstChild);
	                      }
	                  }
	                  else if (newChild instanceof Dom7) {
	                      for (j = 0; j < newChild.length; j++) {
	                          this[i].appendChild(newChild[j]);
	                      }
	                  }
	                  else {
	                      this[i].appendChild(newChild);
	                  }
	              }
	              return this;
	          },
	          prepend: function (newChild) {
	              var i, j;
	              for (i = 0; i < this.length; i++) {
	                  if (typeof newChild === 'string') {
	                      var tempDiv = document.createElement('div');
	                      tempDiv.innerHTML = newChild;
	                      for (j = tempDiv.childNodes.length - 1; j >= 0; j--) {
	                          this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
	                      }
	                      // this[i].insertAdjacentHTML('afterbegin', newChild);
	                  }
	                  else if (newChild instanceof Dom7) {
	                      for (j = 0; j < newChild.length; j++) {
	                          this[i].insertBefore(newChild[j], this[i].childNodes[0]);
	                      }
	                  }
	                  else {
	                      this[i].insertBefore(newChild, this[i].childNodes[0]);
	                  }
	              }
	              return this;
	          },
	          insertBefore: function (selector) {
	              var before = $(selector);
	              for (var i = 0; i < this.length; i++) {
	                  if (before.length === 1) {
	                      before[0].parentNode.insertBefore(this[i], before[0]);
	                  }
	                  else if (before.length > 1) {
	                      for (var j = 0; j < before.length; j++) {
	                          before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
	                      }
	                  }
	              }
	          },
	          insertAfter: function (selector) {
	              var after = $(selector);
	              for (var i = 0; i < this.length; i++) {
	                  if (after.length === 1) {
	                      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
	                  }
	                  else if (after.length > 1) {
	                      for (var j = 0; j < after.length; j++) {
	                          after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
	                      }
	                  }
	              }
	          },
	          next: function (selector) {
	              if (this.length > 0) {
	                  if (selector) {
	                      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) return new Dom7([this[0].nextElementSibling]);
	                      else return new Dom7([]);
	                  }
	                  else {
	                      if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);
	                      else return new Dom7([]);
	                  }
	              }
	              else return new Dom7([]);
	          },
	          nextAll: function (selector) {
	              var nextEls = [];
	              var el = this[0];
	              if (!el) return new Dom7([]);
	              while (el.nextElementSibling) {
	                  var next = el.nextElementSibling;
	                  if (selector) {
	                      if($(next).is(selector)) nextEls.push(next);
	                  }
	                  else nextEls.push(next);
	                  el = next;
	              }
	              return new Dom7(nextEls);
	          },
	          prev: function (selector) {
	              if (this.length > 0) {
	                  if (selector) {
	                      if (this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector)) return new Dom7([this[0].previousElementSibling]);
	                      else return new Dom7([]);
	                  }
	                  else {
	                      if (this[0].previousElementSibling) return new Dom7([this[0].previousElementSibling]);
	                      else return new Dom7([]);
	                  }
	              }
	              else return new Dom7([]);
	          },
	          prevAll: function (selector) {
	              var prevEls = [];
	              var el = this[0];
	              if (!el) return new Dom7([]);
	              while (el.previousElementSibling) {
	                  var prev = el.previousElementSibling;
	                  if (selector) {
	                      if($(prev).is(selector)) prevEls.push(prev);
	                  }
	                  else prevEls.push(prev);
	                  el = prev;
	              }
	              return new Dom7(prevEls);
	          },
	          parent: function (selector) {
	              var parents = [];
	              for (var i = 0; i < this.length; i++) {
	                  if (selector) {
	                      if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
	                  }
	                  else {
	                      parents.push(this[i].parentNode);
	                  }
	              }
	              return $($.unique(parents));
	          },
	          parents: function (selector) {
	              var parents = [];
	              for (var i = 0; i < this.length; i++) {
	                  var parent = this[i].parentNode;
	                  while (parent) {
	                      if (selector) {
	                          if ($(parent).is(selector)) parents.push(parent);
	                      }
	                      else {
	                          parents.push(parent);
	                      }
	                      parent = parent.parentNode;
	                  }
	              }
	              return $($.unique(parents));
	          },
	          find : function (selector) {
	              var foundElements = [];
	              for (var i = 0; i < this.length; i++) {
	                  var found = this[i].querySelectorAll(selector);
	                  for (var j = 0; j < found.length; j++) {
	                      foundElements.push(found[j]);
	                  }
	              }
	              return new Dom7(foundElements);
	          },
	          children: function (selector) {
	              var children = [];
	              for (var i = 0; i < this.length; i++) {
	                  var childNodes = this[i].childNodes;

	                  for (var j = 0; j < childNodes.length; j++) {
	                      if (!selector) {
	                          if (childNodes[j].nodeType === 1) children.push(childNodes[j]);
	                      }
	                      else {
	                          if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) children.push(childNodes[j]);
	                      }
	                  }
	              }
	              return new Dom7($.unique(children));
	          },
	          remove: function () {
	              for (var i = 0; i < this.length; i++) {
	                  if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
	              }
	              return this;
	          },
	          add: function () {
	              var dom = this;
	              var i, j;
	              for (i = 0; i < arguments.length; i++) {
	                  var toAdd = $(arguments[i]);
	                  for (j = 0; j < toAdd.length; j++) {
	                      dom[dom.length] = toAdd[j];
	                      dom.length++;
	                  }
	              }
	              return dom;
	          }
	      };
	      $.fn = Dom7.prototype;
	      $.unique = function (arr) {
	          var unique = [];
	          for (var i = 0; i < arr.length; i++) {
	              if (unique.indexOf(arr[i]) === -1) unique.push(arr[i]);
	          }
	          return unique;
	      };

	      return $;
	  })();


	  /*===========================
	   Get Dom libraries
	   ===========================*/
	  var swiperDomPlugins = ['jQuery', 'Zepto', 'Dom7'];
	  for (var i = 0; i < swiperDomPlugins.length; i++) {
	  	if (window[swiperDomPlugins[i]]) {
	  		addLibraryPlugin(window[swiperDomPlugins[i]]);
	  	}
	  }
	  // Required DOM Plugins
	  var domLib;
	  if (typeof Dom7 === 'undefined') {
	  	domLib = window.Dom7 || window.Zepto || window.jQuery;
	  }
	  else {
	  	domLib = Dom7;
	  }

	  /*===========================
	  Add .swiper plugin from Dom libraries
	  ===========================*/
	  function addLibraryPlugin(lib) {
	      lib.fn.swiper = function (params) {
	          var firstInstance;
	          lib(this).each(function () {
	              var s = new Swiper(this, params);
	              if (!firstInstance) firstInstance = s;
	          });
	          return firstInstance;
	      };
	  }

	  if (domLib) {
	      if (!('transitionEnd' in domLib.fn)) {
	          domLib.fn.transitionEnd = function (callback) {
	              var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],
	                  i, j, dom = this;
	              function fireCallBack(e) {
	                  /*jshint validthis:true */
	                  if (e.target !== this) return;
	                  callback.call(this, e);
	                  for (i = 0; i < events.length; i++) {
	                      dom.off(events[i], fireCallBack);
	                  }
	              }
	              if (callback) {
	                  for (i = 0; i < events.length; i++) {
	                      dom.on(events[i], fireCallBack);
	                  }
	              }
	              return this;
	          };
	      }
	      if (!('transform' in domLib.fn)) {
	          domLib.fn.transform = function (transform) {
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;
	              }
	              return this;
	          };
	      }
	      if (!('transition' in domLib.fn)) {
	          domLib.fn.transition = function (duration) {
	              if (typeof duration !== 'string') {
	                  duration = duration + 'ms';
	              }
	              for (var i = 0; i < this.length; i++) {
	                  var elStyle = this[i].style;
	                  elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;
	              }
	              return this;
	          };
	      }
	  }


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var app_1 = __webpack_require__(168);
	var config_1 = __webpack_require__(161);
	var tab_button_1 = __webpack_require__(320);
	var tab_highlight_1 = __webpack_require__(322);
	var ion_1 = __webpack_require__(287);
	var platform_1 = __webpack_require__(162);
	var nav_controller_1 = __webpack_require__(302);
	var view_controller_1 = __webpack_require__(296);
	var icon_1 = __webpack_require__(299);
	var util_1 = __webpack_require__(163);
	/**
	 * @name Tabs
	 * @description
	 * _For basic Tabs usage, see the [Tabs section](../../../../components/#tabs)
	 * of the Component docs._
	 *
	 * The Tabs component is a container with a TabBar and any number of
	 * individual Tab components. On iOS, the TabBar is placed on the bottom of
	 * the screen, while on Android it is at the top.
	 *
	 * @usage
	 * ```html
	 * <ion-tabs>
	 *   <ion-tab [root]="tabRoot"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * @demo /docs/v2/demos/tabs/
	 *
	 * @see {@link /docs/v2/components#tabs Tabs Component Docs}
	 * @see {@link ../Tab Tab API Docs}
	 *
	 */
	var Tabs = (function (_super) {
	    __extends(Tabs, _super);
	    function Tabs(viewCtrl, parent, _app, _config, _elementRef, _platform, _renderer) {
	        var _this = this;
	        _super.call(this, _elementRef);
	        this._app = _app;
	        this._config = _config;
	        this._elementRef = _elementRef;
	        this._platform = _platform;
	        this._renderer = _renderer;
	        this._ids = -1;
	        this._preloadTabs = null;
	        this._tabs = [];
	        this._onReady = null;
	        /**
	         * @input {any} Expression to evaluate when the tab changes.
	         */
	        this.change = new core_1.EventEmitter();
	        this.parent = parent;
	        this.id = ++tabIds;
	        this.subPages = _config.getBoolean('tabSubPages');
	        this._useHighlight = _config.getBoolean('tabbarHighlight');
	        // Tabs may also be an actual ViewController which was navigated to
	        // if Tabs is static and not navigated to within a NavController
	        // then skip this and don't treat it as it's own ViewController
	        if (viewCtrl) {
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(_elementRef);
	            viewCtrl.onReady = function (done) {
	                _this._onReady = done;
	            };
	        }
	    }
	    /**
	     * @private
	     */
	    Tabs.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        this._setConfig('tabbarPlacement', 'bottom');
	        this._setConfig('tabbarLayout', 'icon-top');
	        this._setConfig('tabbarIcons', 'top');
	        if (this.tabbarIcons) {
	            void 0;
	        }
	        if (this._useHighlight) {
	            this._platform.onResize(function () {
	                _this._highlight.select(_this.getSelected());
	            });
	        }
	        this._btns.toArray().forEach(function (tabButton) {
	            tabButton.select.subscribe(function (tab) {
	                _this.select(tab);
	            });
	        });
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        var selectedIndex = this.selectedIndex ? parseInt(this.selectedIndex, 10) : 0;
	        var preloadTabs = (util_1.isBlank(this.preloadTabs) ? this._config.getBoolean('preloadTabs') : util_1.isTrueProperty(this.preloadTabs));
	        this._tabs.forEach(function (tab, index) {
	            if (index === selectedIndex) {
	                _this.select(tab);
	            }
	            else if (preloadTabs) {
	                tab.preload(1000 * index);
	            }
	        });
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype._setConfig = function (attrKey, fallback) {
	        var val = this[attrKey];
	        if (util_1.isBlank(val)) {
	            val = this._config.get(attrKey, fallback);
	        }
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, attrKey, val);
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype.add = function (tab) {
	        tab.id = this.id + '-' + (++this._ids);
	        this._tabs.push(tab);
	    };
	    /**
	     * @param {number} index Index of the tab you want to select
	     */
	    Tabs.prototype.select = function (tabOrIndex) {
	        var _this = this;
	        var selectedTab = (typeof tabOrIndex === 'number' ? this.getByIndex(tabOrIndex) : tabOrIndex);
	        if (!selectedTab) {
	            return;
	        }
	        var deselectedTab = this.getSelected();
	        if (selectedTab === deselectedTab) {
	            // no change
	            return this._touchActive(selectedTab);
	        }
	        void 0;
	        var opts = {
	            animate: false
	        };
	        var deselectedPage;
	        if (deselectedTab) {
	            deselectedPage = deselectedTab.getActive();
	            deselectedPage && deselectedPage.willLeave();
	        }
	        var selectedPage = selectedTab.getActive();
	        selectedPage && selectedPage.willEnter();
	        selectedTab.load(opts, function () {
	            selectedTab.select.emit(selectedTab);
	            _this.change.emit(selectedTab);
	            if (selectedTab.root) {
	                // only show the selectedTab if it has a root
	                // it's possible the tab is only for opening modal's or signing out
	                // and doesn't actually have content. In the case there's no content
	                // for a tab then do nothing and leave the current view as is
	                _this._tabs.forEach(function (tab) {
	                    tab.setSelected(tab === selectedTab);
	                });
	                if (_this._useHighlight) {
	                    _this._highlight.select(selectedTab);
	                }
	            }
	            selectedPage && selectedPage.didEnter();
	            deselectedPage && deselectedPage.didLeave();
	            if (_this._onReady) {
	                _this._onReady();
	                _this._onReady = null;
	            }
	        });
	    };
	    /**
	     * @param {number} index Index of the tab you want to get
	     * @returns {Tab} Returns the tab who's index matches the one passed
	     */
	    Tabs.prototype.getByIndex = function (index) {
	        if (index < this._tabs.length && index > -1) {
	            return this._tabs[index];
	        }
	        return null;
	    };
	    /**
	     * @return {Tab} Returns the currently selected tab
	     */
	    Tabs.prototype.getSelected = function () {
	        for (var i = 0; i < this._tabs.length; i++) {
	            if (this._tabs[i].isSelected) {
	                return this._tabs[i];
	            }
	        }
	        return null;
	    };
	    /**
	     * @private
	     */
	    Tabs.prototype.getIndex = function (tab) {
	        return this._tabs.indexOf(tab);
	    };
	    /**
	     * @private
	     * "Touch" the active tab, going back to the root view of the tab
	     * or optionally letting the tab handle the event
	     */
	    Tabs.prototype._touchActive = function (tab) {
	        var active = tab.getActive();
	        if (!active) {
	            return Promise.resolve();
	        }
	        var instance = active.instance;
	        // If they have a custom tab selected handler, call it
	        if (instance.tabSelected) {
	            return instance.tabSelected();
	        }
	        // If we're a few pages deep, pop to root
	        if (tab.length() > 1) {
	            // Pop to the root view
	            return tab.popToRoot();
	        }
	        // Otherwise, if the page we're on is not our real root, reset it to our
	        // default root type
	        if (tab.root != active.componentType) {
	            return tab.setRoot(tab.root);
	        }
	        // And failing all of that, we do something safe and secure
	        return Promise.resolve();
	    };
	    Object.defineProperty(Tabs.prototype, "rootNav", {
	        /**
	         * @private
	         * Returns the root NavController. Returns `null` if Tabs is not
	         * within a NavController.
	         * @returns {NavController}
	         */
	        get: function () {
	            var nav = this.parent;
	            while (nav.parent) {
	                nav = nav.parent;
	            }
	            return nav;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tabs.prototype, "selectedIndex", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Tabs.prototype, "preloadTabs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tabs.prototype, "tabbarIcons", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tabs.prototype, "tabbarLayout", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Tabs.prototype, "tabbarPlacement", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Tabs.prototype, "change", void 0);
	    __decorate([
	        core_1.ViewChild(tab_highlight_1.TabHighlight), 
	        __metadata('design:type', tab_highlight_1.TabHighlight)
	    ], Tabs.prototype, "_highlight", void 0);
	    __decorate([
	        core_1.ViewChildren(tab_button_1.TabButton), 
	        __metadata('design:type', Object)
	    ], Tabs.prototype, "_btns", void 0);
	    Tabs = __decorate([
	        core_1.Component({
	            selector: 'ion-tabs',
	            template: '<ion-navbar-section>' +
	                '<template navbar-anchor></template>' +
	                '</ion-navbar-section>' +
	                '<ion-tabbar-section>' +
	                '<tabbar role="tablist">' +
	                '<a *ngFor="#t of _tabs" [tab]="t" class="tab-button" role="tab">' +
	                '<ion-icon *ngIf="t.tabIcon" [name]="t.tabIcon" [isActive]="t.isSelected" class="tab-button-icon"></ion-icon>' +
	                '<span *ngIf="t.tabTitle" class="tab-button-text">{{t.tabTitle}}</span>' +
	                '<ion-badge *ngIf="t.tabBadge" class="tab-badge" [ngClass]="\'badge-\' + t.tabBadgeStyle">{{t.tabBadge}}</ion-badge>' +
	                '<ion-button-effect></ion-button-effect>' +
	                '</a>' +
	                '<tab-highlight></tab-highlight>' +
	                '</tabbar>' +
	                '</ion-tabbar-section>' +
	                '<ion-content-section>' +
	                '<ng-content></ng-content>' +
	                '</ion-content-section>',
	            directives: [
	                icon_1.Icon,
	                common_1.NgFor,
	                common_1.NgIf,
	                tab_button_1.TabButton,
	                tab_highlight_1.TabHighlight,
	                core_1.forwardRef(function () { return TabNavBarAnchor; })
	            ]
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, nav_controller_1.NavController, app_1.IonicApp, config_1.Config, core_1.ElementRef, platform_1.Platform, core_1.Renderer])
	    ], Tabs);
	    return Tabs;
	})(ion_1.Ion);
	exports.Tabs = Tabs;
	var tabIds = -1;
	/**
	 * @private
	 */
	var TabNavBarAnchor = (function () {
	    function TabNavBarAnchor(tabs, viewContainerRef) {
	        tabs.navbarContainerRef = viewContainerRef;
	    }
	    TabNavBarAnchor = __decorate([
	        core_1.Directive({ selector: 'template[navbar-anchor]' }),
	        __param(0, core_1.Host()), 
	        __metadata('design:paramtypes', [Tabs, core_1.ViewContainerRef])
	    ], TabNavBarAnchor);
	    return TabNavBarAnchor;
	})();


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var tab_1 = __webpack_require__(321);
	var ion_1 = __webpack_require__(287);
	var config_1 = __webpack_require__(161);
	/**
	 * @private
	 */
	var TabButton = (function (_super) {
	    __extends(TabButton, _super);
	    function TabButton(config, elementRef) {
	        _super.call(this, elementRef);
	        this.select = new core_1.EventEmitter();
	        this.disHover = (config.get('hoverCSS') === false);
	        this._layout = config.get('tabbarLayout');
	    }
	    TabButton.prototype.ngOnInit = function () {
	        this.tab.btn = this;
	        this._layout = this.tab.parent.tabbarLayout || this._layout;
	        this.hasTitle = !!this.tab.tabTitle;
	        this.hasIcon = !!this.tab.tabIcon && this._layout != 'icon-hide';
	        this.hasTitleOnly = (this.hasTitle && !this.hasIcon);
	        this.hasIconOnly = (this.hasIcon && !this.hasTitle);
	        this.hasBadge = !!this.tab.tabBadge;
	    };
	    TabButton.prototype.onClick = function () {
	        this.select.emit(this.tab);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', tab_1.Tab)
	    ], TabButton.prototype, "tab", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], TabButton.prototype, "select", void 0);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], TabButton.prototype, "onClick", null);
	    TabButton = __decorate([
	        core_1.Directive({
	            selector: '.tab-button',
	            host: {
	                '[attr.id]': 'tab._btnId',
	                '[attr.aria-controls]': 'tab._panelId',
	                '[attr.aria-selected]': 'tab.isSelected',
	                '[class.has-title]': 'hasTitle',
	                '[class.has-icon]': 'hasIcon',
	                '[class.has-title-only]': 'hasTitleOnly',
	                '[class.icon-only]': 'hasIconOnly',
	                '[class.has-badge]': 'hasBadge',
	                '[class.disable-hover]': 'disHover'
	            }
	        }), 
	        __metadata('design:paramtypes', [config_1.Config, core_1.ElementRef])
	    ], TabButton);
	    return TabButton;
	})(ion_1.Ion);
	exports.TabButton = TabButton;


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var core_2 = __webpack_require__(7);
	var app_1 = __webpack_require__(168);
	var config_1 = __webpack_require__(161);
	var keyboard_1 = __webpack_require__(276);
	var nav_controller_1 = __webpack_require__(302);
	var tabs_1 = __webpack_require__(319);
	/**
	 * @name Tab
	 * @description
	 * _For basic Tabs usage, see the [Tabs section](../../../../components/#tabs)
	 * of the Component docs._
	 *
	 * Tab components are basic navigation controllers used with Tabs.  Much like
	 * Nav, they are a subclass of NavController and can be used to navigate
	 * to pages in and manipulate the navigation stack of a particular tab.
	 *
	 * For more information on using navigation controllers like Tab or [Nav](../../nav/Nav/),
	 * take a look at the [NavController API reference](../NavController/).
	 *
	 * See the [Tabs API reference](../Tabs/) for more details on configuring Tabs
	 * and the TabBar.
	 *
	 * @usage
	 * For most cases, you can give tab a `[root]` property along with the component you want to load.
	 *
	 * ```html
	 * <ion-tabs>
	 *  <ion-tab [root]="chatRoot" tabTitle="Chat" tabIcon="chat"><ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * ```ts
	 * import {Chat} from '../chat/chat';
	 * export class Tabs {
	 *    constructor(){
	 *      // here we'll set the property of chatRoot to
	 *      // the imported class of Chat
	 *      this.chatRoot = Chat
	 *    }
	 * }
	 * ```
	 *
	 * In other cases, you may not want to navigate to a new component, but just
	 * call a method. You can use the `(select)` event to call a method on your
	 * class. Below is an example of presenting a modal from one of the tabs.
	 *
	 * ```html
	 * <ion-tabs preloadTabs="false">
	 *   <ion-tab (select)="chat()"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * ```ts
	 * export class Tabs {
	 *   constructor(nav: NavController){
	 *     this.nav = nav;
	 *   }
	 *   chat() {
	 *     let modal = Modal.create(ChatPage);
	 *     this.nav.present(modal);
	 *   }
	 * }
	 * ```
	 *
	 *
	 *
	 * @demo /docs/v2/demos/tabs/
	 */
	var Tab = (function (_super) {
	    __extends(Tab, _super);
	    function Tab(parentTabs, app, config, keyboard, elementRef, compiler, viewManager, zone, renderer) {
	        // A Tab is a NavController for its child pages
	        _super.call(this, parentTabs, app, config, keyboard, elementRef, 'contents', compiler, viewManager, zone, renderer);
	        /**
	         * @output {Tab} Method to call when the current tab is selected
	         */
	        this.select = new core_2.EventEmitter();
	        parentTabs.add(this);
	        this._panelId = 'tabpanel-' + this.id;
	        this._btnId = 'tab-' + this.id;
	    }
	    /**
	     * @private
	     */
	    Tab.prototype.ngOnInit = function () {
	        this.tabBadgeStyle = this.tabBadgeStyle ? this.tabBadgeStyle : 'default';
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.load = function (opts, done) {
	        if (!this._loaded && this.root) {
	            this.push(this.root, this.rootParams, opts).then(function () {
	                done();
	            });
	            this._loaded = true;
	        }
	        else {
	            done();
	        }
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.preload = function (wait) {
	        var _this = this;
	        this._loadTmr = setTimeout(function () {
	            if (!_this._loaded) {
	                void 0;
	                _this.load({
	                    animate: false,
	                    preload: true,
	                    postLoad: function (viewCtrl) {
	                        var navbar = viewCtrl.getNavbar();
	                        navbar && navbar.setHidden(true);
	                    }
	                }, function () { });
	            }
	        }, wait);
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.loadPage = function (viewCtrl, navbarContainerRef, opts, done) {
	        // by default a page's navbar goes into the shared tab's navbar section
	        navbarContainerRef = this.parent.navbarContainerRef;
	        var isTabSubPage = (this.parent.subPages && viewCtrl.index > 0);
	        if (isTabSubPage) {
	            // a subpage, that's not the first index
	            // should not use the shared tabs navbar section, but use it's own
	            navbarContainerRef = null;
	        }
	        _super.prototype.loadPage.call(this, viewCtrl, navbarContainerRef, opts, function () {
	            if (viewCtrl.instance) {
	                viewCtrl.instance._tabSubPage = isTabSubPage;
	            }
	            done();
	        });
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.setSelected = function (isSelected) {
	        this.isSelected = isSelected;
	        this.hideNavbars(!isSelected);
	    };
	    /**
	     * @private
	     */
	    Tab.prototype.hideNavbars = function (shouldHideNavbars) {
	        this._views.forEach(function (viewCtrl) {
	            var navbar = viewCtrl.getNavbar();
	            navbar && navbar.setHidden(shouldHideNavbars);
	        });
	    };
	    Object.defineProperty(Tab.prototype, "index", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this.parent.getIndex(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Tab.prototype.ngOnDestroy = function () {
	        clearTimeout(this._loadTmr);
	        _super.prototype.ngOnDestroy.call(this);
	    };
	    __decorate([
	        core_2.Input(), 
	        __metadata('design:type', core_1.Type)
	    ], Tab.prototype, "root", void 0);
	    __decorate([
	        core_2.Input(), 
	        __metadata('design:type', Object)
	    ], Tab.prototype, "rootParams", void 0);
	    __decorate([
	        core_2.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabTitle", void 0);
	    __decorate([
	        core_2.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabIcon", void 0);
	    __decorate([
	        core_2.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabBadge", void 0);
	    __decorate([
	        core_2.Input(), 
	        __metadata('design:type', String)
	    ], Tab.prototype, "tabBadgeStyle", void 0);
	    __decorate([
	        core_2.Output(), 
	        __metadata('design:type', core_2.EventEmitter)
	    ], Tab.prototype, "select", void 0);
	    Tab = __decorate([
	        core_1.Component({
	            selector: 'ion-tab',
	            host: {
	                '[class.show-tab]': 'isSelected',
	                '[attr.id]': '_panelId',
	                '[attr.aria-labelledby]': '_btnId',
	                'role': 'tabpanel'
	            },
	            template: '<div #contents></div>'
	        }),
	        __param(0, core_1.Inject(core_1.forwardRef(function () { return tabs_1.Tabs; }))), 
	        __metadata('design:paramtypes', [tabs_1.Tabs, app_1.IonicApp, config_1.Config, keyboard_1.Keyboard, core_1.ElementRef, core_1.Compiler, core_1.AppViewManager, core_1.NgZone, core_1.Renderer])
	    ], Tab);
	    return Tab;
	})(nav_controller_1.NavController);
	exports.Tab = Tab;


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var dom_1 = __webpack_require__(164);
	/**
	 * @private
	 */
	var TabHighlight = (function () {
	    function TabHighlight(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    TabHighlight.prototype.select = function (tab) {
	        var _this = this;
	        dom_1.rafFrames(3, function () {
	            var d = tab.btn.getDimensions();
	            var ele = _this._elementRef.nativeElement;
	            ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
	            if (!_this._init) {
	                _this._init = true;
	                dom_1.rafFrames(6, function () {
	                    ele.classList.add('animate');
	                });
	            }
	        });
	    };
	    TabHighlight = __decorate([
	        core_1.Directive({
	            selector: 'tab-highlight'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], TabHighlight);
	    return TabHighlight;
	})();
	exports.TabHighlight = TabHighlight;


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var ion_1 = __webpack_require__(287);
	var item_sliding_gesture_1 = __webpack_require__(324);
	/**
	 * The List is a widely used interface element in almost any mobile app,
	 * and can include content ranging from basic text all the way to
	 * buttons, toggles, icons, and thumbnails.
	 *
	 * Both the list, which contains items, and the list items themselves
	 * can be any HTML element.
	 *
	 * Using the List and Item components make it easy to support various
	 * interaction modes such as swipe to edit, drag to reorder, and
	 * removing items.
	 *
	 * @demo /docs/v2/demos/list/
	 * @see {@link /docs/v2/components#lists List Component Docs}
	 *
	 */
	var List = (function (_super) {
	    __extends(List, _super);
	    function List(elementRef, _zone) {
	        _super.call(this, elementRef);
	        this._zone = _zone;
	        this._enableSliding = false;
	        this.ele = elementRef.nativeElement;
	    }
	    /**
	     * @private
	     */
	    List.prototype.ngOnDestroy = function () {
	        this.slidingGesture && this.slidingGesture.destroy();
	        this.ele = this.slidingGesture = null;
	    };
	    /**
	     * Enable sliding items if your page has them
	     *
	     * ```ts
	     * export class MyClass {
	     *    constructor(app: IonicApp){
	     *      this.app = app;
	     *      this.list = this.app.getComponent('my-list');
	     *    }
	     *    stopSliding(){
	     *      this.list.enableSlidingItems(false);
	     *    }
	     * }
	     * ```
	     * @param {boolean} shouldEnable whether the item-sliding should be enabled or not
	     */
	    List.prototype.enableSlidingItems = function (shouldEnable) {
	        var _this = this;
	        if (this._enableSliding !== shouldEnable) {
	            this._enableSliding = shouldEnable;
	            if (shouldEnable) {
	                void 0;
	                this._zone.runOutsideAngular(function () {
	                    setTimeout(function () {
	                        _this.slidingGesture = new item_sliding_gesture_1.ItemSlidingGesture(_this, _this.ele);
	                    });
	                });
	            }
	            else {
	                this.slidingGesture && this.slidingGesture.unlisten();
	            }
	        }
	    };
	    /**
	     * Enable sliding items if your page has
	     *
	     * ```ts
	     * export class MyClass {
	     *    constructor(app: IonicApp){
	     *      this.app = app;
	     *      this.list = this.app.getComponent('my-list');
	     *    }
	     *    // Here we have some method that will close the items
	     *    // when called
	     *    closeItmes(){
	     *      this.list.closeSlidingItems();
	     *    }
	     * }
	     * ```
	     */
	    List.prototype.closeSlidingItems = function () {
	        this.slidingGesture && this.slidingGesture.closeOpened();
	    };
	    List = __decorate([
	        core_1.Directive({
	            selector: 'ion-list'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.NgZone])
	    ], List);
	    return List;
	})(ion_1.Ion);
	exports.List = List;
	/**
	 * @private
	 */
	var ListHeader = (function () {
	    function ListHeader(_renderer, _elementRef, id) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._id = id;
	    }
	    Object.defineProperty(ListHeader.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        set: function (val) {
	            this._id = val;
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListHeader = __decorate([
	        core_1.Directive({
	            selector: 'ion-list-header'
	        }),
	        __param(2, core_1.Attribute('id')), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef, String])
	    ], ListHeader);
	    return ListHeader;
	})();
	exports.ListHeader = ListHeader;


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var hammer_1 = __webpack_require__(294);
	var drag_gesture_1 = __webpack_require__(291);
	var dom_1 = __webpack_require__(164);
	var ItemSlidingGesture = (function (_super) {
	    __extends(ItemSlidingGesture, _super);
	    function ItemSlidingGesture(list, listEle) {
	        var _this = this;
	        _super.call(this, listEle, {
	            direction: 'x',
	            threshold: DRAG_THRESHOLD
	        });
	        this.list = list;
	        this.listEle = listEle;
	        this.canDrag = true;
	        this.data = {};
	        this.openItems = 0;
	        this.preventDrag = false;
	        this.dragEnded = true;
	        this.listen();
	        this.onTap = function (ev) {
	            if (!isFromOptionButtons(ev.target)) {
	                var didClose = _this.closeOpened();
	                if (didClose) {
	                    void 0;
	                    preventDefault(ev);
	                }
	            }
	        };
	        this.onMouseOut = function (ev) {
	            if (ev.target.tagName === 'ION-ITEM-SLIDING') {
	                void 0;
	                _this.onDragEnd(ev);
	            }
	        };
	    }
	    ItemSlidingGesture.prototype.onDragStart = function (ev) {
	        var itemContainerEle = getItemConatiner(ev.target);
	        if (!itemContainerEle) {
	            void 0;
	            return false;
	        }
	        this.closeOpened(itemContainerEle);
	        var openAmout = this.getOpenAmount(itemContainerEle);
	        var itemData = this.get(itemContainerEle);
	        this.preventDrag = (openAmout > 0);
	        if (this.preventDrag) {
	            this.closeOpened();
	            void 0;
	            preventDefault(ev);
	            return;
	        }
	        itemContainerEle.classList.add('active-slide');
	        this.set(itemContainerEle, 'offsetX', openAmout);
	        this.set(itemContainerEle, 'startX', ev.center[this.direction]);
	        this.dragEnded = false;
	        return true;
	    };
	    ItemSlidingGesture.prototype.onDrag = function (ev) {
	        var _this = this;
	        if (this.dragEnded || this.preventDrag || Math.abs(ev.deltaY) > 30) {
	            void 0;
	            this.preventDrag = true;
	            return;
	        }
	        var itemContainerEle = getItemConatiner(ev.target);
	        if (!itemContainerEle || !isActive(itemContainerEle)) {
	            void 0;
	            return;
	        }
	        var itemData = this.get(itemContainerEle);
	        if (!itemData.optsWidth) {
	            itemData.optsWidth = getOptionsWidth(itemContainerEle);
	            if (!itemData.optsWidth) {
	                void 0;
	                return;
	            }
	        }
	        var x = ev.center[this.direction];
	        var delta = x - itemData.startX;
	        var newX = Math.max(0, itemData.offsetX - delta);
	        if (newX > itemData.optsWidth) {
	            // Calculate the new X position, capped at the top of the buttons
	            newX = -Math.min(-itemData.optsWidth, -itemData.optsWidth + (((delta + itemData.optsWidth) * 0.4)));
	        }
	        if (newX > 5 && ev.srcEvent.type.indexOf('mouse') > -1 && !itemData.hasMouseOut) {
	            itemContainerEle.addEventListener('mouseout', this.onMouseOut);
	            itemData.hasMouseOut = true;
	        }
	        dom_1.raf(function () {
	            if (!_this.dragEnded && !_this.preventDrag) {
	                isItemActive(itemContainerEle, true);
	                _this.open(itemContainerEle, newX, false);
	            }
	        });
	    };
	    ItemSlidingGesture.prototype.onDragEnd = function (ev) {
	        var _this = this;
	        this.preventDrag = false;
	        this.dragEnded = true;
	        var itemContainerEle = getItemConatiner(ev.target);
	        if (!itemContainerEle || !isActive(itemContainerEle)) {
	            void 0;
	            return;
	        }
	        // If we are currently dragging, we want to snap back into place
	        // The final resting point X will be the width of the exposed buttons
	        var itemData = this.get(itemContainerEle);
	        var restingPoint = itemData.optsWidth;
	        // Check if the drag didn't clear the buttons mid-point
	        // and we aren't moving fast enough to swipe open
	        if (this.getOpenAmount(itemContainerEle) < (restingPoint / 2)) {
	            // If we are going left but too slow, or going right, go back to resting
	            if (ev.direction & hammer_1.DIRECTION_RIGHT || Math.abs(ev.velocityX) < 0.3) {
	                restingPoint = 0;
	            }
	        }
	        itemContainerEle.removeEventListener('mouseout', this.onMouseOut);
	        itemData.hasMouseOut = false;
	        dom_1.raf(function () {
	            _this.open(itemContainerEle, restingPoint, true);
	        });
	    };
	    ItemSlidingGesture.prototype.closeOpened = function (doNotCloseEle) {
	        var didClose = false;
	        if (this.openItems) {
	            var openItemElements = this.listEle.querySelectorAll('.active-slide');
	            for (var i = 0; i < openItemElements.length; i++) {
	                if (openItemElements[i] !== doNotCloseEle) {
	                    this.open(openItemElements[i], 0, true);
	                    didClose = true;
	                }
	            }
	        }
	        return didClose;
	    };
	    ItemSlidingGesture.prototype.open = function (itemContainerEle, openAmount, isFinal) {
	        var _this = this;
	        var slidingEle = itemContainerEle.querySelector('ion-item,[ion-item]');
	        if (!slidingEle) {
	            void 0;
	            return;
	        }
	        this.set(itemContainerEle, 'openAmount', openAmount);
	        clearTimeout(this.get(itemContainerEle).timerId);
	        if (openAmount) {
	            this.openItems++;
	        }
	        else {
	            var timerId = setTimeout(function () {
	                if (slidingEle.style[dom_1.CSS.transform] === '') {
	                    isItemActive(itemContainerEle, false);
	                    _this.openItems--;
	                }
	            }, 400);
	            this.set(itemContainerEle, 'timerId', timerId);
	        }
	        slidingEle.style[dom_1.CSS.transition] = (isFinal ? '' : 'none');
	        slidingEle.style[dom_1.CSS.transform] = (openAmount ? 'translate3d(' + -openAmount + 'px,0,0)' : '');
	        if (isFinal) {
	            if (openAmount) {
	                isItemActive(itemContainerEle, true);
	                this.on('tap', this.onTap);
	            }
	            else {
	                this.off('tap', this.onTap);
	            }
	        }
	    };
	    ItemSlidingGesture.prototype.getOpenAmount = function (itemContainerEle) {
	        return this.get(itemContainerEle).openAmount || 0;
	    };
	    ItemSlidingGesture.prototype.get = function (itemContainerEle) {
	        return this.data[itemContainerEle && itemContainerEle.$ionSlide] || {};
	    };
	    ItemSlidingGesture.prototype.set = function (itemContainerEle, key, value) {
	        if (!this.data[itemContainerEle.$ionSlide]) {
	            this.data[itemContainerEle.$ionSlide] = {};
	        }
	        this.data[itemContainerEle.$ionSlide][key] = value;
	    };
	    ItemSlidingGesture.prototype.unlisten = function () {
	        _super.prototype.unlisten.call(this);
	        this.listEle = null;
	    };
	    return ItemSlidingGesture;
	})(drag_gesture_1.DragGesture);
	exports.ItemSlidingGesture = ItemSlidingGesture;
	function isItemActive(ele, isActive) {
	    ele.classList[isActive ? 'add' : 'remove']('active-slide');
	    ele.classList[isActive ? 'add' : 'remove']('active-options');
	}
	function preventDefault(ev) {
	    void 0;
	    ev.preventDefault();
	}
	function getItemConatiner(ele) {
	    return dom_1.closest(ele, 'ion-item-sliding', true);
	}
	function isFromOptionButtons(ele) {
	    return !!dom_1.closest(ele, 'ion-item-options', true);
	}
	function getOptionsWidth(itemContainerEle) {
	    var optsEle = itemContainerEle.querySelector('ion-item-options');
	    if (optsEle) {
	        return optsEle.offsetWidth;
	    }
	}
	function isActive(itemContainerEle) {
	    return itemContainerEle.classList.contains('active-slide');
	}
	var DRAG_THRESHOLD = 20;


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var button_1 = __webpack_require__(301);
	var form_1 = __webpack_require__(167);
	var icon_1 = __webpack_require__(299);
	var label_1 = __webpack_require__(326);
	/**
	 * @name Item
	 * @description
	 * Creates a list-item that can easily be swiped, deleted, reordered, edited, and more.
	 *
	 * There are three common ways to use an item:
	 * - Use `<ion-item>` for something that is only non-clickable text.
	 * - Use `<button ion-item>` for something that can be clicked/tapped. Typically this element will also have a `(click)` handler.
	 * - Use `<a ion-item>` for when the item needs to contain a `href`.
	 *
	 * By default, `<button ion-item>` and `<a ion-item>` will receive a right arrow icon on iOS to signal that tapping the item will reveal more information.
	 * To hide this icon, add the `detail-none` attribute to the item (eg: `<button ion-item detail-none>`). To add the icon when it is not displayed by default,
	 * add the `detail-push` attribute (eg: `<ion-item detail-push>`).
	 *
	 *
	 * @usage
	 * ```html
	 *
	 * <ion-list>
	 *
	 *   // default item
	 *   <ion-item>
	 *     {{item.title}}
	 *   </ion-item>
	 *
	 * </ion-list>
	 *
	 *  ```
	 * @demo /docs/v2/demos/item/
	 * @see {@link /docs/v2/components#lists List Component Docs}
	 * @see {@link ../../list/List List API Docs}
	 */
	var Item = (function () {
	    function Item(form, _renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._ids = -1;
	        this._inputs = [];
	        this._viewLabel = true;
	        /**
	         * @private
	         */
	        this.labelId = null;
	        this.id = form.nextId().toString();
	    }
	    /**
	     * @private
	     */
	    Item.prototype.registerInput = function (type) {
	        this._inputs.push(type);
	        return this.id + '-' + (++this._ids);
	    };
	    /**
	     * @private
	     */
	    Item.prototype.ngAfterContentInit = function () {
	        if (this._viewLabel && this._inputs.length) {
	            var labelText = this.getLabelText().trim();
	            this._viewLabel = (labelText.length > 0);
	        }
	        if (this._inputs.length > 1) {
	            this.setCssClass('item-multiple-inputs', true);
	        }
	    };
	    /**
	     * @private
	     */
	    Item.prototype.setCssClass = function (cssClass, shouldAdd) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, shouldAdd);
	    };
	    /**
	     * @private
	     */
	    Item.prototype.getLabelText = function () {
	        return this._label ? this._label.text : '';
	    };
	    Object.defineProperty(Item.prototype, "contentLabel", {
	        /**
	         * @private
	         */
	        set: function (label) {
	            if (label) {
	                this._label = label;
	                this.labelId = label.id = ('lbl-' + this.id);
	                if (label.type) {
	                    this.setCssClass('item-label-' + label.type, true);
	                }
	                this._viewLabel = false;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Item.prototype, "viewLabel", {
	        /**
	         * @private
	         */
	        set: function (label) {
	            if (!this._label) {
	                this._label = label;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Item.prototype, "_buttons", {
	        /**
	         * @private
	         */
	        set: function (buttons) {
	            buttons.toArray().forEach(function (button) {
	                // Don't add the item-button class if the user specifies
	                // a different size button
	                if (!button.isItem && !button._size) {
	                    button.addClass('item-button');
	                }
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Item.prototype, "_icons", {
	        /**
	         * @private
	         */
	        set: function (icons) {
	            icons.toArray().forEach(function (icon) {
	                icon.addClass('item-icon');
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.ContentChild(label_1.Label), 
	        __metadata('design:type', label_1.Label), 
	        __metadata('design:paramtypes', [label_1.Label])
	    ], Item.prototype, "contentLabel", null);
	    __decorate([
	        core_1.ViewChild(label_1.Label), 
	        __metadata('design:type', label_1.Label), 
	        __metadata('design:paramtypes', [label_1.Label])
	    ], Item.prototype, "viewLabel", null);
	    __decorate([
	        core_1.ContentChildren(button_1.Button), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Item.prototype, "_buttons", null);
	    __decorate([
	        core_1.ContentChildren(icon_1.Icon), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], Item.prototype, "_icons", null);
	    Item = __decorate([
	        core_1.Component({
	            selector: 'ion-item,[ion-item]',
	            template: '<ng-content select="[item-left],ion-checkbox"></ng-content>' +
	                '<div class="item-inner">' +
	                '<ng-content select="ion-label"></ng-content>' +
	                '<ion-label *ngIf="_viewLabel">' +
	                '<ng-content></ng-content>' +
	                '</ion-label>' +
	                '<ng-content select="[item-right],ion-radio,ion-toggle,ion-select,ion-input,ion-textarea"></ng-content>' +
	                '</div>' +
	                '<ion-button-effect></ion-button-effect>',
	            host: {
	                'class': 'item'
	            },
	            directives: [common_1.NgIf, label_1.Label]
	        }), 
	        __metadata('design:paramtypes', [form_1.Form, core_1.Renderer, core_1.ElementRef])
	    ], Item);
	    return Item;
	})();
	exports.Item = Item;


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	/**
	 * @name Label
	 * @description
	 * Labels are placed inside of an `ion-item` element and can be used
	 * to describe an `ion-input`, `ion-toggle`, `ion-checkbox`, and more.
	 *
	 * @property [fixed] - a persistant label that sits next the the input
	 * @property [floating] - a label that will float about the input if the input is empty of looses focus
	 * @property [stacked] - A stacked label will always appear on top of the input

	 *
	 * @usage
	 * ```html
	 *  <ion-item>
	 *    <ion-label>Username</ion-label>
	 *    <ion-input></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label fixed>Website</ion-label>
	 *    <ion-input type="url"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label floating>Email</ion-label>
	 *    <ion-input type="email"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label stacked>Phone</ion-label>
	 *    <ion-input type="tel"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label>Toggle</ion-label>
	 *    <ion-toggle></ion-toggle>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label>Checkbox</ion-label>
	 *    <ion-checkbox></ion-checkbox>
	 *  </ion-item>
	 * ```
	 *
	 * @demo /docs/v2/demos/label/
	 * @see {@link ../../../../components#inputs Input Component Docs}
	 * @see {@link ../Input Input API Docs}
	 *
	 */
	var Label = (function () {
	    function Label(_elementRef, _renderer, isFloating, isStacked, isFixed, isInset) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.type = (isFloating === '' ? 'floating' : (isStacked === '' ? 'stacked' : (isFixed === '' ? 'fixed' : (isInset === '' ? 'inset' : null))));
	    }
	    Object.defineProperty(Label.prototype, "id", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._id;
	        },
	        set: function (val) {
	            this._id = val;
	            if (val) {
	                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'id', val);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Label.prototype, "text", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._elementRef.nativeElement.textContent || '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * @param {string} add class name
	     */
	    Label.prototype.addClass = function (className) {
	        this._renderer.setElementClass(this._elementRef.nativeElement, className, true);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Label.prototype, "id", null);
	    Label = __decorate([
	        core_1.Directive({
	            selector: 'ion-label'
	        }),
	        __param(2, core_1.Attribute('floating')),
	        __param(3, core_1.Attribute('stacked')),
	        __param(4, core_1.Attribute('fixed')),
	        __param(5, core_1.Attribute('inset')), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, String, String, String, String])
	    ], Label);
	    return Label;
	})();
	exports.Label = Label;


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var list_1 = __webpack_require__(323);
	/**
	 * @name ItemSliding
	 *
	 * @description
	 * Creates a list-item that can easily be swiped, deleted, reordered, edited, and more.
	 *
	 * @usage
	 * ```html
	 * <ion-list>
	 *   <ion-item-sliding *ngFor="#item of items">
	 *     <button ion-item (click)="itemTapped(item)">
	 *       {{item.title}}
	 *     </button>
	 *     <ion-item-options>
	 *       <button (click)="favorite(item)">Favorite</button>
	 *       <button (click)="share(item)">Share</button>
	 *     </ion-item-options>
	 *   </ion-item-sliding>
	 * </ion-list>
	 * ```
	 * @demo /docs/v2/demos/item-sliding/
	 * @see {@link /docs/v2/components#lists List Component Docs}
	 * @see {@link ../../list/List List API Docs}
	 */
	var ItemSliding = (function () {
	    function ItemSliding(_list, elementRef) {
	        this._list = _list;
	        _list.enableSlidingItems(true);
	        elementRef.nativeElement.$ionSlide = ++slideIds;
	    }
	    /**
	     * @private
	     */
	    ItemSliding.prototype.close = function () {
	        this._list.closeSlidingItems();
	    };
	    ItemSliding = __decorate([
	        core_1.Component({
	            selector: 'ion-item-sliding',
	            template: '<ng-content select="ion-item,[ion-item]"></ng-content>' +
	                '<ng-content select="ion-item-options"></ng-content>'
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [list_1.List, core_1.ElementRef])
	    ], ItemSliding);
	    return ItemSliding;
	})();
	exports.ItemSliding = ItemSliding;
	var slideIds = 0;


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var form_1 = __webpack_require__(167);
	var item_1 = __webpack_require__(325);
	var util_1 = __webpack_require__(163);
	var CHECKBOX_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Checkbox; }), multi: true });
	/**
	 * @name Checkbox
	 * @module ionic
	 *
	 * @description
	 * The Checkbox is a simple component styled based on the mode. It can be
	 * placed in an `ion-item` or used as a stand-alone checkbox.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
	 * for more info on forms and inputs.
	 *
	 *
	 * @usage
	 * ```html
	 *
	 *  <ion-list>
	 *
	 *    <ion-item>
	 *      <ion-label>Pepperoni</ion-label>
	 *      <ion-checkbox [(ngModel)]="pepperoni"></ion-checkbox>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Sausage</ion-label>
	 *      <ion-checkbox [(ngModel)]="sausage" disabled="true"></ion-checkbox>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Mushrooms</ion-label>
	 *      <ion-checkbox [(ngModel)]="mushrooms"></ion-checkbox>
	 *    </ion-item>
	 *
	 *  </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/checkbox/
	 * @see {@link /docs/v2/components#checkbox Checkbox Component Docs}
	 */
	var Checkbox = (function () {
	    function Checkbox(_form, _item) {
	        this._form = _form;
	        this._item = _item;
	        this._checked = false;
	        this._disabled = false;
	        /**
	         * @output {Checkbox} expression to evaluate when the checkbox value changes
	         */
	        this.change = new core_1.EventEmitter();
	        _form.register(this);
	        if (_item) {
	            this.id = 'chk-' + _item.registerInput('checkbox');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-checkbox', true);
	        }
	    }
	    /**
	     * @private
	     */
	    Checkbox.prototype._click = function (ev) {
	        void 0;
	        ev.preventDefault();
	        ev.stopPropagation();
	        this.onChange(!this._checked);
	    };
	    Object.defineProperty(Checkbox.prototype, "checked", {
	        /**
	         * @input {boolean} whether or not the checkbox is checked (defaults to false)
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (val) {
	            this._setChecked(util_1.isTrueProperty(val));
	            this.onChange(this._checked);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Checkbox.prototype._setChecked = function (isChecked) {
	        if (isChecked !== this._checked) {
	            this._checked = isChecked;
	            this.change.emit(this);
	            this._item && this._item.setCssClass('item-checkbox-checked', isChecked);
	        }
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.writeValue = function (val) {
	        this._setChecked(util_1.isTrueProperty(val));
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (isChecked) {
	            void 0;
	            fn(isChecked);
	            _this._setChecked(isChecked);
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    Object.defineProperty(Checkbox.prototype, "disabled", {
	        /**
	         * @input {boolean} whether or not the checkbox is disabled or not.
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-checkbox-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Checkbox.prototype.onChange = function (isChecked) {
	        // used when this input does not have an ngModel or ngControl
	        void 0;
	        this._setChecked(isChecked);
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Checkbox.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Checkbox.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Checkbox.prototype, "change", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], Checkbox.prototype, "_click", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Checkbox.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Checkbox.prototype, "disabled", null);
	    Checkbox = __decorate([
	        core_1.Component({
	            selector: 'ion-checkbox',
	            template: '<div class="checkbox-icon" [class.checkbox-checked]="_checked">' +
	                '<div class="checkbox-inner"></div>' +
	                '</div>' +
	                '<button role="checkbox" ' +
	                '[id]="id" ' +
	                '[attr.aria-checked]="_checked" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.checkbox-disabled]': '_disabled'
	            },
	            providers: [CHECKBOX_VALUE_ACCESSOR]
	        }),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, item_1.Item])
	    ], Checkbox);
	    return Checkbox;
	})();
	exports.Checkbox = Checkbox;


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var alert_1 = __webpack_require__(330);
	var form_1 = __webpack_require__(167);
	var item_1 = __webpack_require__(325);
	var util_1 = __webpack_require__(163);
	var nav_controller_1 = __webpack_require__(302);
	var option_1 = __webpack_require__(331);
	var SELECT_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Select; }), multi: true });
	/**
	 * @name Select
	 * @description
	 * The `ion-select` component is similar to an HTML `<select>` element, however,
	 * Ionic's select component makes it easier for users to sort through and select
	 * the preferred option or options. When users tap the select component, a
	 * dialog will appear with all of the options in a large, easy to select list
	 * for users.
	 *
	 * Under-the-hood the `ion-select` actually uses the
	 * {@link ../../alert/Alert Alert API} to open up the overlay of options
	 * which the user is presented with. Select can take numerous child
	 * `ion-option` components. If `ion-option` is not given a `value` attribute
	 * then it will use its text as the value.
	 *
	 * ### Single Value: Radio Buttons
	 *
	 * The standard `ion-select` component allows the user to select only one
	 * option. When selecting only one option the alert overlay presents users with
	 * a radio button styled list of options. The `ion-select` component's value
	 * receives the value of the selected option's value.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Gender</ion-label>
	 *   <ion-select [(ngModel)]="gender">
	 *     <ion-option value="f" checked="true">Female</ion-option>
	 *     <ion-option value="m">Male</ion-option>
	 *   </ion-select>
	 * </ion-item>
	 * ```
	 *
	 * ### Multiple Value: Checkboxes
	 *
	 * By adding the `multiple="true"` attribute to `ion-select`, users are able
	 * to select multiple options. When multiple options can be selected, the alert
	 * overlay presents users with a checkbox styled list of options. The
	 * `ion-select multiple="true"` component's value receives an array of all the
	 * selected option values. In the example below, because each option is not given
	 * a `value`, then it'll use its text as the value instead.
	 *
	 * ```html
	 * <ion-item>
	 *   <ion-label>Toppings</ion-label>
	 *   <ion-select [(ngModel)]="toppings" multiple="true">
	 *     <ion-option>Bacon</ion-option>
	 *     <ion-option>Black Olives</ion-option>
	 *     <ion-option>Extra Cheese</ion-option>
	 *     <ion-option>Mushrooms</ion-option>
	 *     <ion-option>Pepperoni</ion-option>
	 *     <ion-option>Sausage</ion-option>
	 *   </ion-select>
	 * <ion-item>
	 * ```
	 *
	 * ### Alert Buttons
	 * By default, the two buttons read `Cancel` and `OK`. The each button's text
	 * can be customized using the `cancelText` and `okText` attributes:
	 *
	 * ```html
	 * <ion-select okText="Okay" cancelText="Dismiss">
	 *   ...
	 * </ion-select>
	 * ```
	 *
	 * ### Alert Options
	 *
	 * Remember how `ion-select` is really just a wrapper to `Alert`? By using
	 * the `alertOptions` property you can pass custom options to the alert
	 * overlay. This would be useful if there is a custom alert title,
	 * subtitle or message. {@link ../../alert/Alert Alert API}
	 *
	 * ```html
	 * <ion-select [alertOptions]="alertOptions">
	 *   ...
	 * </ion-select>
	 * ```
	 *
	 * ```ts
	 * this.alertOptions = {
	 *   title: 'Pizza Toppings',
	 *   subTitle: 'Select your toppings'
	 * };
	 * ```
	 *
	 * @demo /docs/v2/demos/select/
	 */
	var Select = (function () {
	    function Select(_form, _elementRef, _renderer, _item, _nav) {
	        this._form = _form;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._item = _item;
	        this._nav = _nav;
	        this._disabled = false;
	        this._multi = false;
	        this._values = [];
	        this._texts = [];
	        this._text = '';
	        this._isOpen = false;
	        /**
	         * @private
	         * @input {string}  The text of the cancel button. Defatuls to `Cancel`
	         */
	        this.cancelText = 'Cancel';
	        /**
	         * @private
	         * @input {string} The text of the ok button. Defatuls to `OK`
	         */
	        this.okText = 'OK';
	        /**
	         * @private
	         * @input {any} Any addition options that an alert can take. Title, Subtitle, etc.
	         */
	        this.alertOptions = {};
	        /**
	         * @private
	         */
	        this.checked = false;
	        /**
	         * @output {any} Any expression you want to evaluate when the selection has changed
	         */
	        this.change = new core_1.EventEmitter();
	        /**
	         * @output {any} Any expression you want to evaluate when the selection was cancelled
	         */
	        this.cancel = new core_1.EventEmitter();
	        this._form.register(this);
	        if (_item) {
	            this.id = 'sel-' + _item.registerInput('select');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-select', true);
	        }
	        if (!_nav) {
	            void 0;
	        }
	    }
	    Select.prototype._click = function (ev) {
	        if (ev.detail === 0) {
	            // do not continue if the click event came from a form submit
	            return;
	        }
	        ev.preventDefault();
	        ev.stopPropagation();
	        this._open();
	    };
	    Select.prototype._keyup = function (ev) {
	        if (!this._isOpen) {
	            this._open();
	        }
	    };
	    Select.prototype._open = function () {
	        var _this = this;
	        if (this._disabled)
	            return;
	        void 0;
	        // the user may have assigned some options specifically for the alert
	        var alertOptions = util_1.merge({}, this.alertOptions);
	        // make sure their buttons array is removed from the options
	        // and we create a new array for the alert's two buttons
	        alertOptions.buttons = [{
	                text: this.cancelText,
	                handler: function () {
	                    _this.cancel.emit(null);
	                }
	            }];
	        // if the alertOptions didn't provide an title then use the label's text
	        if (!alertOptions.title && this._item) {
	            alertOptions.title = this._item.getLabelText();
	        }
	        // user cannot provide inputs from alertOptions
	        // alert inputs must be created by ionic from ion-options
	        alertOptions.inputs = this._options.toArray().map(function (input) {
	            return {
	                type: (_this._multi ? 'checkbox' : 'radio'),
	                label: input.text,
	                value: input.value,
	                checked: input.checked
	            };
	        });
	        // create the alert instance from our built up alertOptions
	        var alert = alert_1.Alert.create(alertOptions);
	        if (this._multi) {
	            // use checkboxes
	            alert.setCssClass('select-alert multiple-select-alert');
	        }
	        else {
	            // use radio buttons
	            alert.setCssClass('select-alert single-select-alert');
	        }
	        alert.addButton({
	            text: this.okText,
	            handler: function (selectedValues) {
	                _this.onChange(selectedValues);
	                _this.change.emit(selectedValues);
	            }
	        });
	        this._nav.present(alert, alertOptions);
	        this._isOpen = true;
	        alert.onDismiss(function () {
	            _this._isOpen = false;
	        });
	    };
	    Object.defineProperty(Select.prototype, "multiple", {
	        /**
	         * @input {boolean} Whether or not the select component can accept multipl selections
	         */
	        get: function () {
	            return this._multi;
	        },
	        set: function (val) {
	            this._multi = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Select.prototype, "text", {
	        /**
	         * @private
	         */
	        get: function () {
	            return (this._multi ? this._texts : this._texts.join());
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Select.prototype, "options", {
	        /**
	         * @private
	         */
	        set: function (val) {
	            this._options = val;
	            if (!this._values.length) {
	                // there are no values set at this point
	                // so check to see who should be checked
	                this._values = val.toArray().filter(function (o) { return o.checked; }).map(function (o) { return o.value; });
	            }
	            this._updOpts();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Select.prototype._updOpts = function () {
	        var _this = this;
	        this._texts = [];
	        if (this._options) {
	            this._options.toArray().forEach(function (option) {
	                // check this option if the option's value is in the values array
	                option.checked = _this._values.some(function (selectValue) {
	                    return util_1.isCheckedProperty(selectValue, option.value);
	                });
	                if (option.checked) {
	                    _this._texts.push(option.text);
	                }
	            });
	        }
	        this._text = this._texts.join(', ');
	    };
	    Object.defineProperty(Select.prototype, "disabled", {
	        /**
	         * @input {boolean} Whether or not the select component is disabled or not
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-select-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Select.prototype.writeValue = function (val) {
	        void 0;
	        this._values = (Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val]);
	        this._updOpts();
	    };
	    /**
	     * @private
	     */
	    Select.prototype.ngAfterContentInit = function () {
	        this._updOpts();
	    };
	    /**
	     * @private
	     */
	    Select.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (val) {
	            void 0;
	            fn(val);
	            _this._values = (Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val]);
	            _this._updOpts();
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Select.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    Select.prototype.onChange = function (val) {
	        // onChange used when there is not an ngControl
	        void 0;
	        this._values = (Array.isArray(val) ? val : util_1.isBlank(val) ? [] : [val]);
	        this._updOpts();
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Select.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Select.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Select.prototype, "cancelText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Select.prototype, "okText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "alertOptions", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "checked", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Select.prototype, "change", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Select.prototype, "cancel", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], Select.prototype, "_click", null);
	    __decorate([
	        core_1.HostListener('keyup.space', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], Select.prototype, "_keyup", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "multiple", null);
	    __decorate([
	        core_1.ContentChildren(option_1.Option), 
	        __metadata('design:type', core_1.QueryList), 
	        __metadata('design:paramtypes', [core_1.QueryList])
	    ], Select.prototype, "options", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Select.prototype, "disabled", null);
	    Select = __decorate([
	        core_1.Component({
	            selector: 'ion-select',
	            template: '<div class="select-text">{{_text}}</div>' +
	                '<div class="select-icon">' +
	                '<div class="select-icon-inner"></div>' +
	                '</div>' +
	                '<button aria-haspopup="true" ' +
	                '[id]="id" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.select-disabled]': '_disabled'
	            },
	            providers: [SELECT_VALUE_ACCESSOR]
	        }),
	        __param(3, core_1.Optional()),
	        __param(4, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, core_1.ElementRef, core_1.Renderer, item_1.Item, nav_controller_1.NavController])
	    ], Select);
	    return Select;
	})();
	exports.Select = Select;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var animation_1 = __webpack_require__(306);
	var transition_1 = __webpack_require__(305);
	var config_1 = __webpack_require__(161);
	var util_1 = __webpack_require__(163);
	var nav_params_1 = __webpack_require__(297);
	var view_controller_1 = __webpack_require__(296);
	/**
	 * @name Alert
	 * @description
	 * An Alert is a dialog that presents users with information or collects
	 * information from the user using inputs. An alert appears on top
	 * of the app's content, and must be manually dismissed by the user before
	 * they can resume interaction with the app. It can also optionally have a
	 * `title`, `subTitle` and `message`.
	 *
	 * You can pass all of the alert's options in the first argument of
	 * the create method: `Alert.create(opts)`. Otherwise the alert's instance
	 * has methods to add options, such as `setTitle()` or `addButton()`.
	 *
	 *
	 * ### Alert Buttons
	 *
	 * In the array of `buttons`, each button includes properties for its `text`,
	 * and optionally a `handler`. If a handler returns `false` then the alert
	 * will not automatically be dismissed when the button is clicked. All
	 * buttons will show  up in the order they have been added to the `buttons`
	 * array, from left to right. Note: The right most button (the last one in
	 * the array) is the main button.
	 *
	 * Optionally, a `role` property can be added to a button, such as `cancel`.
	 * If a `cancel` role is on one of the buttons, then if the alert is
	 * dismissed by tapping the backdrop, then it will fire the handler from
	 * the button with a cancel role.
	 *
	 *
	 * ### Alert Inputs
	 *
	 * Alerts can also include several different inputs whose data can be passed
	 * back to the app. Inputs can be used as a simple way to prompt users for
	 * information. Radios, checkboxes and text inputs are all accepted, but they
	 * cannot be mixed. For example, an alert could have all radio button inputs,
	 * or all checkbox inputs, but the same alert cannot mix radio and checkbox
	 * inputs. Do note however, different types of "text"" inputs can be mixed,
	 * such as `url`, `email`, `text`, etc. If you require a complex form UI
	 * which doesn't fit within the guidelines of an alert then we recommend
	 * building the form within a modal instead.
	 *
	 *
	 * @usage
	 * ```ts
	 * constructor(nav: NavController) {
	 *   this.nav = nav;
	 * }
	 *
	 * presentAlert() {
	 *   let alert = Alert.create({
	 *     title: 'Low battery',
	 *     subTitle: '10% of battery remaining',
	 *     buttons: ['Dismiss']
	 *   });
	 *   this.nav.present(alert);
	 * }
	 *
	 * presentConfirm() {
	 *   let alert = Alert.create({
	 *     title: 'Confirm purchase',
	 *     message: 'Do you want to buy this book?',
	 *     buttons: [
	 *       {
	 *         text: 'Cancel',
	 *         role: 'cancel',
	 *         handler: () => {
	 *           console.log('Cancel clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Buy',
	 *         handler: () => {
	 *           console.log('Buy clicked');
	 *         }
	 *       }
	 *     ]
	 *   });
	 *   this.nav.present(alert);
	 * }
	 *
	 * presentPrompt() {
	 *   let alert = Alert.create({
	 *     title: 'Login',
	 *     inputs: [
	 *       {
	 *         name: 'username',
	 *         placeholder: 'Username'
	 *       },
	 *       {
	 *         name: 'password',
	 *         placeholder: 'Password',
	 *         type: 'password'
	 *       }
	 *     ],
	 *     buttons: [
	 *       {
	 *         text: 'Cancel',
	 *         role: 'cancel',
	 *         handler: data => {
	 *           console.log('Cancel clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Login',
	 *         handler: data => {
	 *           if (User.isValid(data.username, data.password)) {
	 *             // logged in!
	 *           } else {
	 *             // invalid login
	 *             return false;
	 *           }
	 *         }
	 *       }
	 *     ]
	 *   });
	 *   this.nav.present(alert);
	 * }
	 * ```
	 *
	 * @demo /docs/v2/demos/alert/
	 */
	var Alert = (function (_super) {
	    __extends(Alert, _super);
	    function Alert(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.inputs = opts.inputs || [];
	        opts.buttons = opts.buttons || [];
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        _super.call(this, AlertCmp, opts);
	        this.viewType = 'alert';
	        this.isOverlay = true;
	        // by default, alerts should not fire lifecycle events of other views
	        // for example, when an alert enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	    * @private
	    */
	    Alert.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'alertLeave' : 'alertEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * @param {string} title Alert title
	     */
	    Alert.prototype.setTitle = function (title) {
	        this.data.title = title;
	    };
	    /**
	     * @param {string} subTitle Alert subtitle
	     */
	    Alert.prototype.setSubTitle = function (subTitle) {
	        this.data.subTitle = subTitle;
	    };
	    /**
	     * @private
	     */
	    Alert.prototype.setBody = function (message) {
	        // deprecated warning
	        void 0;
	        this.setMessage(message);
	    };
	    /**
	     * @param {string} message  Alert message content
	     */
	    Alert.prototype.setMessage = function (message) {
	        this.data.message = message;
	    };
	    /**
	     * @param {object} input Alert input
	     */
	    Alert.prototype.addInput = function (input) {
	        this.data.inputs.push(input);
	    };
	    /**
	     * @param {any} button Alert button
	     */
	    Alert.prototype.addButton = function (button) {
	        this.data.buttons.push(button);
	    };
	    /**
	     * @param {string} cssClass CSS class name to add to the alert's outer wrapper
	     */
	    Alert.prototype.setCssClass = function (cssClass) {
	        this.data.cssClass = cssClass;
	    };
	    /**
	     * @param {object} opts Alert options
	     */
	    Alert.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new Alert(opts);
	    };
	    return Alert;
	})(view_controller_1.ViewController);
	exports.Alert = Alert;
	/**
	 * @private
	 */
	var AlertCmp = (function () {
	    function AlertCmp(_viewCtrl, _elementRef, _config, params, renderer) {
	        this._viewCtrl = _viewCtrl;
	        this._elementRef = _elementRef;
	        this._config = _config;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            this.d.cssClass.split(' ').forEach(function (cssClass) {
	                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);
	            });
	        }
	        this.id = (++alertIds);
	        this.descId = '';
	        this.hdrId = 'alert-hdr-' + this.id;
	        this.subHdrId = 'alert-subhdr-' + this.id;
	        this.msgId = 'alert-msg-' + this.id;
	        this.activeId = '';
	        if (this.d.message) {
	            this.descId = this.msgId;
	        }
	        else if (this.d.subTitle) {
	            this.descId = this.subHdrId;
	        }
	        if (!this.d.message) {
	            this.d.message = '';
	        }
	    }
	    AlertCmp.prototype.onPageLoaded = function () {
	        var _this = this;
	        // normalize the data
	        var data = this.d;
	        if (data['body']) {
	            // deprecated warning
	            void 0;
	            data.message = data['body'];
	        }
	        data.buttons = data.buttons.map(function (button) {
	            if (typeof button === 'string') {
	                return { text: button };
	            }
	            return button;
	        });
	        data.inputs = data.inputs.map(function (input, index) {
	            return {
	                type: input.type || 'text',
	                name: util_1.isPresent(input.name) ? input.name : index,
	                placeholder: util_1.isPresent(input.placeholder) ? input.placeholder : '',
	                value: util_1.isPresent(input.value) ? input.value : '',
	                label: input.label,
	                checked: !!input.checked,
	                id: 'alert-input-' + _this.id + '-' + index
	            };
	        });
	        // An alert can be created with several different inputs. Radios,
	        // checkboxes and inputs are all accepted, but they cannot be mixed.
	        var inputTypes = [];
	        data.inputs.forEach(function (input) {
	            if (inputTypes.indexOf(input.type) < 0) {
	                inputTypes.push(input.type);
	            }
	        });
	        if (inputTypes.length > 1 && (inputTypes.indexOf('checkbox') > -1 || inputTypes.indexOf('radio') > -1)) {
	            void 0;
	        }
	        this.inputType = inputTypes.length ? inputTypes[0] : null;
	        var checkedInput = this.d.inputs.find(function (input) { return input.checked; });
	        if (checkedInput) {
	            this.activeId = checkedInput.id;
	        }
	    };
	    AlertCmp.prototype._keyUp = function (ev) {
	        if (this._viewCtrl.isLast()) {
	            if (ev.keyCode === 13) {
	                void 0;
	                var button = this.d.buttons[this.d.buttons.length - 1];
	                this.btnClick(button);
	            }
	            else if (ev.keyCode === 27) {
	                void 0;
	                this.bdClick();
	            }
	        }
	    };
	    AlertCmp.prototype.onPageDidEnter = function () {
	        var activeElement = document.activeElement;
	        if (document.activeElement) {
	            activeElement.blur();
	        }
	        var focusableEle = this._elementRef.nativeElement.querySelector('input,button');
	        if (focusableEle) {
	            focusableEle.focus();
	        }
	    };
	    AlertCmp.prototype.btnClick = function (button, dismissDelay) {
	        var _this = this;
	        var shouldDismiss = true;
	        if (button.handler) {
	            // a handler has been provided, execute it
	            // pass the handler the values from the inputs
	            if (button.handler(this.getValues()) === false) {
	                // if the return value of the handler is false then do not dismiss
	                shouldDismiss = false;
	            }
	        }
	        if (shouldDismiss) {
	            setTimeout(function () {
	                _this.dismiss(button.role);
	            }, dismissDelay || this._config.get('pageTransitionDelay'));
	        }
	    };
	    AlertCmp.prototype.rbClick = function (checkedInput) {
	        this.d.inputs.forEach(function (input) {
	            input.checked = (checkedInput === input);
	        });
	        this.activeId = checkedInput.id;
	    };
	    AlertCmp.prototype.cbClick = function (checkedInput) {
	        checkedInput.checked = !checkedInput.checked;
	    };
	    AlertCmp.prototype.bdClick = function () {
	        if (this.d.enableBackdropDismiss) {
	            var cancelBtn = this.d.buttons.find(function (b) { return b.role === 'cancel'; });
	            if (cancelBtn) {
	                this.btnClick(cancelBtn, 1);
	            }
	            else {
	                this.dismiss('backdrop');
	            }
	        }
	    };
	    AlertCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(this.getValues(), role);
	    };
	    AlertCmp.prototype.getValues = function () {
	        if (this.inputType === 'radio') {
	            // this is an alert with radio buttons (single value select)
	            // return the one value which is checked, otherwise undefined
	            var checkedInput = this.d.inputs.find(function (i) { return i.checked; });
	            return checkedInput ? checkedInput.value : undefined;
	        }
	        if (this.inputType === 'checkbox') {
	            // this is an alert with checkboxes (multiple value select)
	            // return an array of all the checked values
	            return this.d.inputs.filter(function (i) { return i.checked; }).map(function (i) { return i.value; });
	        }
	        // this is an alert with text inputs
	        // return an object of all the values with the input name as the key
	        var values = {};
	        this.d.inputs.forEach(function (i) {
	            values[i.name] = i.value;
	        });
	        return values;
	    };
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], AlertCmp.prototype, "_keyUp", null);
	    AlertCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-alert',
	            template: '<div (click)="bdClick()" tappable disable-activated class="backdrop" role="presentation"></div>' +
	                '<div class="alert-wrapper">' +
	                '<div class="alert-head">' +
	                '<h2 id="{{hdrId}}" class="alert-title" *ngIf="d.title" [innerHTML]="d.title"></h2>' +
	                '<h3 id="{{subHdrId}}" class="alert-sub-title" *ngIf="d.subTitle" [innerHTML]="d.subTitle"></h3>' +
	                '</div>' +
	                '<div id="{{msgId}}" class="alert-message" [innerHTML]="d.message"></div>' +
	                '<div *ngIf="d.inputs.length" [ngSwitch]="inputType">' +
	                '<template ngSwitchWhen="radio">' +
	                '<div class="alert-radio-group" role="radiogroup" [attr.aria-labelledby]="hdrId" [attr.aria-activedescendant]="activeId">' +
	                '<button *ngFor="#i of d.inputs" (click)="rbClick(i)" [attr.aria-checked]="i.checked" [attr.id]="i.id" class="alert-tappable alert-radio" role="radio">' +
	                '<div class="alert-radio-icon"></div>' +
	                '<div class="alert-radio-label">' +
	                '{{i.label}}' +
	                '</div>' +
	                '</button>' +
	                '</div>' +
	                '</template>' +
	                '<template ngSwitchWhen="checkbox">' +
	                '<div class="alert-checkbox-group">' +
	                '<button *ngFor="#i of d.inputs" (click)="cbClick(i)" [attr.aria-checked]="i.checked" class="alert-tappable alert-checkbox" role="checkbox">' +
	                '<div class="alert-checkbox-icon"><div class="alert-checkbox-inner"></div></div>' +
	                '<div class="alert-checkbox-label">' +
	                '{{i.label}}' +
	                '</div>' +
	                '</button>' +
	                '</div>' +
	                '</template>' +
	                '<template ngSwitchDefault>' +
	                '<div class="alert-input-group">' +
	                '<div *ngFor="#i of d.inputs" class="alert-input-wrapper">' +
	                '<input [placeholder]="i.placeholder" [(ngModel)]="i.value" [type]="i.type" class="alert-input">' +
	                '</div>' +
	                '</div>' +
	                '</template>' +
	                '</div>' +
	                '<div class="alert-button-group" [ngClass]="{vertical: d.buttons.length>2}">' +
	                '<button *ngFor="#b of d.buttons" (click)="btnClick(b)" [ngClass]="b.cssClass" class="alert-button">' +
	                '{{b.text}}' +
	                '<ion-button-effect></ion-button-effect>' +
	                '</button>' +
	                '</div>' +
	                '</div>',
	            host: {
	                'role': 'dialog',
	                '[attr.aria-labelledby]': 'hdrId',
	                '[attr.aria-describedby]': 'descId'
	            },
	            directives: [common_1.NgClass, common_1.NgSwitch, common_1.NgIf, common_1.NgFor]
	        }), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, core_1.ElementRef, config_1.Config, nav_params_1.NavParams, core_1.Renderer])
	    ], AlertCmp);
	    return AlertCmp;
	})();
	/**
	 * Animations for alerts
	 */
	var AlertPopIn = (function (_super) {
	    __extends(AlertPopIn, _super);
	    function AlertPopIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', '0.01', '1').fromTo('scale', '1.1', '1');
	        backdrop.fromTo('opacity', '0.01', '0.3');
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertPopIn;
	})(transition_1.Transition);
	transition_1.Transition.register('alert-pop-in', AlertPopIn);
	var AlertPopOut = (function (_super) {
	    __extends(AlertPopOut, _super);
	    function AlertPopOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', '1', '0').fromTo('scale', '1', '0.9');
	        backdrop.fromTo('opacity', '0.3', '0');
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertPopOut;
	})(transition_1.Transition);
	transition_1.Transition.register('alert-pop-out', AlertPopOut);
	var AlertMdPopIn = (function (_super) {
	    __extends(AlertMdPopIn, _super);
	    function AlertMdPopIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', '0.01', '1').fromTo('scale', '1.1', '1');
	        backdrop.fromTo('opacity', '0.01', '0.5');
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertMdPopIn;
	})(transition_1.Transition);
	transition_1.Transition.register('alert-md-pop-in', AlertMdPopIn);
	var AlertMdPopOut = (function (_super) {
	    __extends(AlertMdPopOut, _super);
	    function AlertMdPopOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', '1', '0').fromTo('scale', '1', '0.9');
	        backdrop.fromTo('opacity', '0.5', '0');
	        this
	            .easing('ease-in-out')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertMdPopOut;
	})(transition_1.Transition);
	transition_1.Transition.register('alert-md-pop-out', AlertMdPopOut);
	var AlertWpPopIn = (function (_super) {
	    __extends(AlertWpPopIn, _super);
	    function AlertWpPopIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', '0.01', '1').fromTo('scale', '1.3', '1');
	        backdrop.fromTo('opacity', '0.01', '0.5');
	        this
	            .easing('cubic-bezier(0,0 0.05,1)')
	            .duration(200)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertWpPopIn;
	})(transition_1.Transition);
	transition_1.Transition.register('alert-wp-pop-in', AlertWpPopIn);
	var AlertWpPopOut = (function (_super) {
	    __extends(AlertWpPopOut, _super);
	    function AlertWpPopOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.alert-wrapper'));
	        wrapper.fromTo('opacity', '1', '0').fromTo('scale', '1', '1.3');
	        backdrop.fromTo('opacity', '0.5', '0');
	        this
	            .easing('ease-out')
	            .duration(150)
	            .add(backdrop)
	            .add(wrapper);
	    }
	    return AlertWpPopOut;
	})(transition_1.Transition);
	transition_1.Transition.register('alert-wp-pop-out', AlertWpPopOut);
	var alertIds = -1;


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(163);
	/**
	 * @name Option
	 * @description
	 * `ion-option` is a child component of `ion-select`. Similar to the native option element, `ion-option` can take a value and a checked property.
	 *
	 * @demo /docs/v2/demos/item-sliding/
	 */
	var Option = (function () {
	    function Option(_elementRef) {
	        this._elementRef = _elementRef;
	        this._checked = false;
	        /**
	         * @input {any} Event to evaluate when option has changed
	         */
	        this.select = new core_1.EventEmitter();
	    }
	    Object.defineProperty(Option.prototype, "checked", {
	        /**
	         * @input {boolean} Whether or not the option is already checked and selected
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (val) {
	            this._checked = util_1.isTrueProperty(val);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Option.prototype, "value", {
	        /**
	         * @input {any} The value of the option
	         */
	        get: function () {
	            if (util_1.isPresent(this._value)) {
	                return this._value;
	            }
	            return this.text;
	        },
	        set: function (val) {
	            this._value = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Option.prototype, "text", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._elementRef.nativeElement.textContent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Option.prototype, "select", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Option.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Option.prototype, "value", null);
	    Option = __decorate([
	        core_1.Directive({
	            selector: 'ion-option'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], Option);
	    return Option;
	})();
	exports.Option = Option;


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var form_1 = __webpack_require__(167);
	var util_1 = __webpack_require__(163);
	var item_1 = __webpack_require__(325);
	var dom_1 = __webpack_require__(164);
	var TOGGLE_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return Toggle; }), multi: true });
	/**
	 * @name Toggle
	 * @description
	 * A toggle technically is the same thing as an HTML checkbox input,
	 * except it looks different and is easier to use on a touch device.
	 * Toggles can also have colors assigned to them, by adding any color
	 * attribute.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
	 * for more info on forms and inputs.
	 * @property {boolean} [checked] - whether the toggle it toggled or not
	 * @property {boolean} [disabled] - whether the toggle is disabled or not
	 *
	 * @usage
	 * ```html
	 *
	 *  <ion-list>
	 *
	 *    <ion-item>
	 *      <ion-label>Pepperoni</ion-label>
	 *      <ion-toggle [(ngModel)]="pepperoni"></ion-toggle>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Sausage</ion-label>
	 *      <ion-toggle [(ngModel)]="sausage" disabled="true"></ion-toggle>
	 *    </ion-item>
	 *
	 *    <ion-item>
	 *      <ion-label>Mushrooms</ion-label>
	 *      <ion-toggle [(ngModel)]="mushrooms"></ion-toggle>
	 *    </ion-item>
	 *
	 *  </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/toggle/
	 * @see {@link /docs/v2/components#toggle Toggle Component Docs}
	 */
	var Toggle = (function () {
	    function Toggle(_form, _elementRef, _renderer, _item) {
	        this._form = _form;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._item = _item;
	        this._checked = false;
	        this._disabled = false;
	        this._activated = false;
	        this._msPrv = 0;
	        /**
	         * @output {Toggle} expression to evaluate when the toggle value changes
	         */
	        this.change = new core_1.EventEmitter();
	        this._form.register(this);
	        if (_item) {
	            this.id = 'tgl-' + _item.registerInput('toggle');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-toggle', true);
	        }
	    }
	    /**
	     * @private
	     */
	    Toggle.prototype.pointerDown = function (ev) {
	        if (this._isPrevented(ev)) {
	            return;
	        }
	        this._startX = dom_1.pointerCoord(ev).x;
	        this._activated = true;
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.pointerMove = function (ev) {
	        if (this._startX) {
	            if (this._isPrevented(ev)) {
	                return;
	            }
	            var currentX = dom_1.pointerCoord(ev).x;
	            void 0;
	            if (this._checked) {
	                if (currentX + 15 < this._startX) {
	                    this.onChange(false);
	                    this._startX = currentX;
	                    this._activated = true;
	                }
	            }
	            else if (currentX - 15 > this._startX) {
	                this.onChange(true);
	                this._startX = currentX;
	                this._activated = (currentX < this._startX + 5);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.pointerUp = function (ev) {
	        if (this._startX) {
	            if (this._isPrevented(ev)) {
	                return;
	            }
	            var endX = dom_1.pointerCoord(ev).x;
	            if (this.checked) {
	                if (this._startX + 4 > endX) {
	                    this.onChange(false);
	                }
	            }
	            else if (this._startX - 4 < endX) {
	                this.onChange(true);
	            }
	            this._activated = false;
	            this._startX = null;
	        }
	    };
	    Object.defineProperty(Toggle.prototype, "checked", {
	        get: function () {
	            return this._checked;
	        },
	        set: function (val) {
	            this._setChecked(util_1.isTrueProperty(val));
	            this.onChange(this._checked);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Toggle.prototype._setChecked = function (isChecked) {
	        if (isChecked !== this._checked) {
	            this._checked = isChecked;
	            this.change.emit(this);
	            this._item && this._item.setCssClass('item-toggle-checked', isChecked);
	        }
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.writeValue = function (val) {
	        this._setChecked(util_1.isTrueProperty(val));
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (isChecked) {
	            void 0;
	            fn(isChecked);
	            _this._setChecked(isChecked);
	            _this.onTouched();
	        };
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    Object.defineProperty(Toggle.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-toggle-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Toggle.prototype.onChange = function (isChecked) {
	        // used when this input does not have an ngModel or ngControl
	        void 0;
	        this._setChecked(isChecked);
	        this.onTouched();
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype.onTouched = function () { };
	    /**
	     * @private
	     */
	    Toggle.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    /**
	     * @private
	     */
	    Toggle.prototype._isPrevented = function (ev) {
	        if (ev.type.indexOf('touch') > -1) {
	            this._msPrv = Date.now() + 2000;
	        }
	        else if (this._msPrv > Date.now() && ev.type.indexOf('mouse') > -1) {
	            ev.preventDefault();
	            ev.stopPropagation();
	            return true;
	        }
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Toggle.prototype, "change", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Toggle.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], Toggle.prototype, "disabled", null);
	    Toggle = __decorate([
	        core_1.Component({
	            selector: 'ion-toggle',
	            template: '<div class="toggle-icon" [class.toggle-checked]="_checked" [class.toggle-activated]="_activated">' +
	                '<div class="toggle-inner"></div>' +
	                '</div>' +
	                '<button role="checkbox" ' +
	                '[id]="id" ' +
	                '[attr.aria-checked]="_checked" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                '(touchstart)=pointerDown($event) ' +
	                '(touchmove)=pointerMove($event) ' +
	                '(mousemove)=pointerMove($event) ' +
	                '(mousedown)=pointerDown($event) ' +
	                '(touchend)=pointerUp($event) ' +
	                '(mouseup)=pointerUp($event) ' +
	                '(mouseout)=pointerUp($event) ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.toggle-disabled]': '_disabled'
	            },
	            providers: [TOGGLE_VALUE_ACCESSOR]
	        }),
	        __param(3, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, core_1.ElementRef, core_1.Renderer, item_1.Item])
	    ], Toggle);
	    return Toggle;
	})();
	exports.Toggle = Toggle;


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var button_1 = __webpack_require__(301);
	var config_1 = __webpack_require__(161);
	var content_1 = __webpack_require__(310);
	var form_1 = __webpack_require__(167);
	var input_base_1 = __webpack_require__(334);
	var app_1 = __webpack_require__(168);
	var item_1 = __webpack_require__(325);
	var native_input_1 = __webpack_require__(335);
	var nav_controller_1 = __webpack_require__(302);
	var platform_1 = __webpack_require__(162);
	/**
	 * @name Input
	 * @description
	 *
	 * `ion-input` is meant for text type inputs only, such as `text`,
	 * `password`, `email`, `number`, `search`, `tel`, and `url`. Ionic
	 * still uses an actual `<input type="text">` HTML element within the
	 * component, however, with Ionic wrapping the native HTML input
	 * element it's able to better handle the user experience and
	 * interactivity.
	 *
	 * Similarily, `<ion-textarea>` should be used in place of `<textarea>`.
	 *
	 * An `ion-input` is **not** used for non-text type inputs, such as a
	 * `checkbox`, `radio`, `toggle`, `range`, `select`, etc.
	 *
	 * @property [type] - The HTML input type (text, password, email, number, search, tel, or url)
	 * @property [clearInput] - A clear icon will appear in the input which clears it
	 *
	 * @usage
	 * ```html
	 *  <ion-item>
	 *    <ion-label>Username</ion-label>
	 *    <ion-input></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label fixed>Website</ion-label>
	 *    <ion-input type="url"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label floating>Email</ion-label>
	 *    <ion-input type="email"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label stacked>Phone</ion-label>
	 *    <ion-input type="tel"></ion-input>
	 *  </ion-item>
	 *
	 *  <ion-item clearInput>
	 *    <ion-input placeholder="Username"></ion-input>
	 *  </ion-item>
	 * ```
	 *
	 * @demo /docs/v2/demos/input/
	 */
	var TextInput = (function (_super) {
	    __extends(TextInput, _super);
	    function TextInput(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
	        _super.call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl);
	    }
	    TextInput = __decorate([
	        core_1.Component({
	            selector: 'ion-input',
	            template: '<input [type]="type" [(ngModel)]="_value" [placeholder]="placeholder" class="text-input">' +
	                '<input [type]="type" aria-hidden="true" next-input *ngIf="_useAssist">' +
	                '<button clear *ngIf="clearInput && value" class="text-input-clear-icon" (click)="clearTextInput()" (mousedown)="clearTextInput()"></button>' +
	                '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
	            directives: [
	                common_1.NgIf,
	                native_input_1.NextInput,
	                native_input_1.NativeInput,
	                button_1.Button
	            ]
	        }),
	        __param(2, core_1.Optional()),
	        __param(6, core_1.Optional()),
	        __param(7, core_1.Optional()),
	        __param(8, core_1.Optional()), 
	        __metadata('design:paramtypes', [config_1.Config, form_1.Form, item_1.Item, app_1.IonicApp, platform_1.Platform, core_1.ElementRef, content_1.Content, nav_controller_1.NavController, common_1.NgControl])
	    ], TextInput);
	    return TextInput;
	})(input_base_1.InputBase);
	exports.TextInput = TextInput;
	/**
	 * @name TextArea
	 * @description
	 *
	 * `ion-textarea` is is used for multi-line text inputs. Ionic still
	 * uses an actual `<textarea>` HTML element within the component,
	 * however, with Ionic wrapping the native HTML textarea element then
	 * Ionic is able to better handle the user experience and interactivity.
	 *
	 * Not that `<ion-textarea>` must load its value from the `value` or
	 * `[(ngModel)]` attribute. Unlike the native `<textarea>` element,
	 * `<ion-textarea>` does not support loading its value from the
	 * textarea's inner content.
	 *
	 * When requiring only a single-line text input it's recommended
	 * to use `<ion-input>` instead.
	 *
	 * @usage
	 * ```html
	 *  <ion-item>
	 *    <ion-label>Comments</ion-label>
	 *    <ion-textarea></ion-textarea>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label stacked>Message</ion-label>
	 *    <ion-textarea [(ngModel)]="msg"></ion-textarea>
	 *  </ion-item>
	 *
	 *  <ion-item>
	 *    <ion-label floating>Description</ion-label>
	 *    <ion-textarea></ion-textarea>
	 *  </ion-item>
	 * ```
	 *
	 * @demo /docs/v2/demos/textarea/
	 */
	var TextArea = (function (_super) {
	    __extends(TextArea, _super);
	    function TextArea(config, form, item, app, platform, elementRef, scrollView, nav, ngControl) {
	        _super.call(this, config, form, item, app, platform, elementRef, scrollView, nav, ngControl);
	    }
	    /**
	     * @private
	     */
	    TextArea.prototype.ngOnInit = function () {
	        _super.prototype.ngOnInit.call(this);
	        if (this._item) {
	            this._item.setCssClass('item-textarea', true);
	        }
	    };
	    TextArea = __decorate([
	        core_1.Component({
	            selector: 'ion-textarea',
	            template: '<textarea [(ngModel)]="_value" [placeholder]="placeholder" class="text-input"></textarea>' +
	                '<input type="text" aria-hidden="true" next-input *ngIf="_useAssist">' +
	                '<div (touchstart)="pointerStart($event)" (touchend)="pointerEnd($event)" (mousedown)="pointerStart($event)" (mouseup)="pointerEnd($event)" class="input-cover" tappable *ngIf="_useAssist"></div>',
	            directives: [
	                common_1.NgIf,
	                native_input_1.NextInput,
	                native_input_1.NativeInput
	            ]
	        }),
	        __param(2, core_1.Optional()),
	        __param(6, core_1.Optional()),
	        __param(7, core_1.Optional()),
	        __param(8, core_1.Optional()), 
	        __metadata('design:paramtypes', [config_1.Config, form_1.Form, item_1.Item, app_1.IonicApp, platform_1.Platform, core_1.ElementRef, content_1.Content, nav_controller_1.NavController, common_1.NgControl])
	    ], TextArea);
	    return TextArea;
	})(input_base_1.InputBase);
	exports.TextArea = TextArea;


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(163);
	var dom_1 = __webpack_require__(164);
	var native_input_1 = __webpack_require__(335);
	var InputBase = (function () {
	    function InputBase(config, _form, _item, _app, _platform, _elementRef, _scrollView, _nav, ngControl) {
	        this._form = _form;
	        this._item = _item;
	        this._app = _app;
	        this._platform = _platform;
	        this._elementRef = _elementRef;
	        this._scrollView = _scrollView;
	        this._nav = _nav;
	        this._disabled = false;
	        this._type = 'text';
	        this._useAssist = true;
	        this._value = '';
	        this.placeholder = '';
	        this._useAssist = config.get('scrollAssist');
	        this._keyboardHeight = config.get('keyboardHeight');
	        this._autoFocusAssist = config.get('autoFocusAssist', 'delay');
	        this._autoComplete = config.get('autocomplete', 'off');
	        this._autoCorrect = config.get('autocorrect', 'off');
	        if (ngControl) {
	            ngControl.valueAccessor = this;
	        }
	        _form.register(this);
	    }
	    InputBase.prototype.ngOnInit = function () {
	        if (this._item) {
	            this._item.setCssClass('item-input', true);
	            this._item.registerInput(this._type);
	        }
	        var clearInput = this.clearInput;
	        if (typeof clearInput === 'string') {
	            this.clearInput = (clearInput === '' || clearInput === 'true');
	        }
	    };
	    InputBase.prototype.ngAfterContentInit = function () {
	        var self = this;
	        self._scrollMove = function (ev) {
	            // scroll move event listener this instance can reuse
	            if (!(self._nav && self._nav.isTransitioning())) {
	                self.deregScrollMove();
	                if (self.hasFocus()) {
	                    self._native.hideFocus(true);
	                    self._scrollView.onScrollEnd(function () {
	                        self._native.hideFocus(false);
	                        if (self.hasFocus()) {
	                            // if it still has focus then keep listening
	                            self.regScrollMove();
	                        }
	                    });
	                }
	            }
	        };
	        this.setItemControlCss();
	    };
	    InputBase.prototype.ngAfterContentChecked = function () {
	        this.setItemControlCss();
	    };
	    InputBase.prototype.setItemControlCss = function () {
	        var item = this._item;
	        var nativeControl = this._native && this._native.ngControl;
	        if (item && nativeControl) {
	            item.setCssClass('ng-untouched', nativeControl.untouched);
	            item.setCssClass('ng-touched', nativeControl.touched);
	            item.setCssClass('ng-pristine', nativeControl.pristine);
	            item.setCssClass('ng-dirty', nativeControl.dirty);
	            item.setCssClass('ng-valid', nativeControl.valid);
	            item.setCssClass('ng-invalid', !nativeControl.valid);
	        }
	    };
	    InputBase.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	    };
	    Object.defineProperty(InputBase.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (val) {
	            this._value = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (val) {
	            this._type = 'text';
	            if (val) {
	                val = val.toLowerCase();
	                if (/password|email|number|search|tel|url|date|month|time|week/.test(val)) {
	                    this._type = val;
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-input-disabled', this._disabled);
	            this._native && this._native.isDisabled(this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "_nativeInput", {
	        /**
	         * @private
	         */
	        set: function (nativeInput) {
	            var _this = this;
	            this._native = nativeInput;
	            if (this._item && this._item.labelId !== null) {
	                nativeInput.labelledBy(this._item.labelId);
	            }
	            nativeInput.valueChange.subscribe(function (inputValue) {
	                _this.onChange(inputValue);
	            });
	            this.focusChange(this.hasFocus());
	            nativeInput.focusChange.subscribe(function (textInputHasFocus) {
	                _this.focusChange(textInputHasFocus);
	                _this.checkHasValue(nativeInput.getValue());
	                if (!textInputHasFocus) {
	                    _this.onTouched(textInputHasFocus);
	                }
	            });
	            this.checkHasValue(nativeInput.getValue());
	            this.disabled = this._disabled;
	            var ionInputEle = this._elementRef.nativeElement;
	            var nativeInputEle = nativeInput.element();
	            // copy ion-input attributes to the native input element
	            dom_1.copyInputAttributes(ionInputEle, nativeInputEle);
	            if (ionInputEle.hasAttribute('autofocus')) {
	                // the ion-input element has the autofocus attributes
	                ionInputEle.removeAttribute('autofocus');
	                if (this._autoFocusAssist === 'immediate') {
	                    // config says to immediate focus on the input
	                    // works best on android devices
	                    nativeInputEle.focus();
	                }
	                else if (this._autoFocusAssist === 'delay') {
	                    // config says to chill out a bit and focus on the input after transitions
	                    // works best on desktop
	                    setTimeout(function () {
	                        nativeInputEle.focus();
	                    }, 650);
	                }
	            }
	            // by default set autocomplete="off" unless specified by the input
	            if (ionInputEle.hasAttribute('autocomplete')) {
	                this._autoComplete = ionInputEle.getAttribute('autocomplete');
	            }
	            nativeInputEle.setAttribute('autocomplete', this._autoComplete);
	            // by default set autocomplete="off" unless specified by the input
	            if (ionInputEle.hasAttribute('autocorrect')) {
	                this._autoCorrect = ionInputEle.getAttribute('autocorrect');
	            }
	            nativeInputEle.setAttribute('autocorrect', this._autoCorrect);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InputBase.prototype, "_nextInput", {
	        /**
	         * @private
	         */
	        set: function (nextInput) {
	            var _this = this;
	            if (nextInput) {
	                nextInput.focused.subscribe(function () {
	                    _this._form.tabFocus(_this);
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     * Angular2 Forms API method called by the model (Control) on change to update
	     * the checked value.
	     * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
	     */
	    InputBase.prototype.writeValue = function (val) {
	        this._value = val;
	        this.checkHasValue(val);
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.onChange = function (val) {
	        this.checkHasValue(val);
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.onTouched = function (val) { };
	    /**
	     * @private
	     */
	    InputBase.prototype.hasFocus = function () {
	        // check if an input has focus or not
	        return this._native.hasFocus();
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.checkHasValue = function (inputValue) {
	        if (this._item) {
	            this._item.setCssClass('input-has-value', !!(inputValue && inputValue !== ''));
	        }
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.focusChange = function (inputHasFocus) {
	        if (this._item) {
	            this._item.setCssClass('input-has-focus', inputHasFocus);
	        }
	        if (!inputHasFocus) {
	            this.deregScrollMove();
	        }
	    };
	    InputBase.prototype.pointerStart = function (ev) {
	        // input cover touchstart
	        void 0;
	        if (ev.type === 'touchstart') {
	            this._isTouch = true;
	        }
	        if ((this._isTouch || (!this._isTouch && ev.type === 'mousedown')) && this._app.isEnabled()) {
	            // remember where the touchstart/mousedown started
	            this._coord = dom_1.pointerCoord(ev);
	        }
	    };
	    InputBase.prototype.pointerEnd = function (ev) {
	        // input cover touchend/mouseup
	        void 0;
	        if ((this._isTouch && ev.type === 'mouseup') || !this._app.isEnabled()) {
	            // the app is actively doing something right now
	            // don't try to scroll in the input
	            ev.preventDefault();
	            ev.stopPropagation();
	        }
	        else if (this._coord) {
	            // get where the touchend/mouseup ended
	            var endCoord = dom_1.pointerCoord(ev);
	            // focus this input if the pointer hasn't moved XX pixels
	            // and the input doesn't already have focus
	            if (!dom_1.hasPointerMoved(8, this._coord, endCoord) && !this.hasFocus()) {
	                ev.preventDefault();
	                ev.stopPropagation();
	                // begin the input focus process
	                void 0;
	                this.initFocus();
	            }
	        }
	        this._coord = null;
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.initFocus = function () {
	        var _this = this;
	        // begin the process of setting focus to the inner input element
	        var scrollView = this._scrollView;
	        if (scrollView) {
	            // this input is inside of a scroll view
	            // find out if text input should be manually scrolled into view
	            var ele = this._elementRef.nativeElement;
	            var itemEle = dom_1.closest(ele, 'ion-item');
	            if (itemEle) {
	                ele = itemEle;
	            }
	            var scrollData = InputBase.getScrollData(ele.offsetTop, ele.offsetHeight, scrollView.getContentDimensions(), this._keyboardHeight, this._platform.height());
	            if (scrollData.scrollAmount > -3 && scrollData.scrollAmount < 3) {
	                // the text input is in a safe position that doesn't
	                // require it to be scrolled into view, just set focus now
	                this.setFocus();
	                this.regScrollMove();
	                return;
	            }
	            // add padding to the bottom of the scroll view (if needed)
	            scrollView.addScrollPadding(scrollData.scrollPadding);
	            // manually scroll the text input to the top
	            // do not allow any clicks while it's scrolling
	            var scrollDuration = getScrollAssistDuration(scrollData.scrollAmount);
	            this._app.setEnabled(false, scrollDuration);
	            this._nav && this._nav.setTransitioning(true, scrollDuration);
	            // temporarily move the focus to the focus holder so the browser
	            // doesn't freak out while it's trying to get the input in place
	            // at this point the native text input still does not have focus
	            this._native.relocate(true, scrollData.inputSafeY);
	            // scroll the input into place
	            scrollView.scrollTo(0, scrollData.scrollTo, scrollDuration).then(function () {
	                // the scroll view is in the correct position now
	                // give the native text input focus
	                _this._native.relocate(false, 0);
	                _this.setFocus();
	                // all good, allow clicks again
	                _this._app.setEnabled(true);
	                _this._nav && _this._nav.setTransitioning(false);
	                _this.regScrollMove();
	            });
	        }
	        else {
	            // not inside of a scroll view, just focus it
	            this.setFocus();
	            this.regScrollMove();
	        }
	    };
	    /**
	      * @private
	     */
	    InputBase.prototype.clearTextInput = function () {
	        void 0;
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.setFocus = function () {
	        // immediately set focus
	        this._form.setAsFocused(this);
	        // set focus on the actual input element
	        this._native.setFocus();
	        // ensure the body hasn't scrolled down
	        document.body.scrollTop = 0;
	    };
	    /**
	     * @private
	     * Angular2 Forms API method called by the view (NgControl) to register the
	     * onChange event handler that updates the model (Control).
	     * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
	     * @param {Function} fn  the onChange event handler.
	     */
	    InputBase.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    /**
	     * @private
	     * Angular2 Forms API method called by the the view (NgControl) to register
	     * the onTouched event handler that marks model (Control) as touched.
	     * @param {Function} fn  onTouched event handler.
	     */
	    InputBase.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    InputBase.prototype.regScrollMove = function () {
	        var _this = this;
	        // register scroll move listener
	        if (this._useAssist && this._scrollView) {
	            setTimeout(function () {
	                _this.deregScrollMove();
	                _this._deregScroll = _this._scrollView.addScrollListener(_this._scrollMove);
	            }, 80);
	        }
	    };
	    /**
	     * @private
	     */
	    InputBase.prototype.deregScrollMove = function () {
	        // deregister the scroll move listener
	        this._deregScroll && this._deregScroll();
	    };
	    InputBase.prototype.focusNext = function () {
	        this._form.tabFocus(this);
	    };
	    /**
	     * @private
	     */
	    InputBase.getScrollData = function (inputOffsetTop, inputOffsetHeight, scrollViewDimensions, keyboardHeight, plaformHeight) {
	        // compute input's Y values relative to the body
	        var inputTop = (inputOffsetTop + scrollViewDimensions.contentTop - scrollViewDimensions.scrollTop);
	        var inputBottom = (inputTop + inputOffsetHeight);
	        // compute the safe area which is the viewable content area when the soft keyboard is up
	        var safeAreaTop = scrollViewDimensions.contentTop;
	        var safeAreaHeight = plaformHeight - keyboardHeight - safeAreaTop;
	        safeAreaHeight /= 2;
	        var safeAreaBottom = safeAreaTop + safeAreaHeight;
	        var inputTopWithinSafeArea = (inputTop >= safeAreaTop && inputTop <= safeAreaBottom);
	        var inputTopAboveSafeArea = (inputTop < safeAreaTop);
	        var inputTopBelowSafeArea = (inputTop > safeAreaBottom);
	        var inputBottomWithinSafeArea = (inputBottom >= safeAreaTop && inputBottom <= safeAreaBottom);
	        var inputBottomBelowSafeArea = (inputBottom > safeAreaBottom);
	        /*
	        Text Input Scroll To Scenarios
	        ---------------------------------------
	        1) Input top within safe area, bottom within safe area
	        2) Input top within safe area, bottom below safe area, room to scroll
	        3) Input top above safe area, bottom within safe area, room to scroll
	        4) Input top below safe area, no room to scroll, input smaller than safe area
	        5) Input top within safe area, bottom below safe area, no room to scroll, input smaller than safe area
	        6) Input top within safe area, bottom below safe area, no room to scroll, input larger than safe area
	        7) Input top below safe area, no room to scroll, input larger than safe area
	        */
	        var scrollData = {
	            scrollAmount: 0,
	            scrollTo: 0,
	            scrollPadding: 0,
	            inputSafeY: 0
	        };
	        if (inputTopWithinSafeArea && inputBottomWithinSafeArea) {
	            // Input top within safe area, bottom within safe area
	            // no need to scroll to a position, it's good as-is
	            return scrollData;
	        }
	        // looks like we'll have to do some auto-scrolling
	        if (inputTopBelowSafeArea || inputBottomBelowSafeArea) {
	            // Input top and bottom below safe area
	            // auto scroll the input up so at least the top of it shows
	            if (safeAreaHeight > inputOffsetHeight) {
	                // safe area height is taller than the input height, so we
	                // can bring it up the input just enough to show the input bottom
	                scrollData.scrollAmount = Math.round(safeAreaBottom - inputBottom);
	            }
	            else {
	                // safe area height is smaller than the input height, so we can
	                // only scroll it up so the input top is at the top of the safe area
	                // however the input bottom will be below the safe area
	                scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
	            }
	            scrollData.inputSafeY = -(inputTop - safeAreaTop) + 4;
	        }
	        else if (inputTopAboveSafeArea) {
	            // Input top above safe area
	            // auto scroll the input down so at least the top of it shows
	            scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
	            scrollData.inputSafeY = (safeAreaTop - inputTop) + 4;
	        }
	        // figure out where it should scroll to for the best position to the input
	        scrollData.scrollTo = (scrollViewDimensions.scrollTop - scrollData.scrollAmount);
	        if (scrollData.scrollAmount < 0) {
	            // when auto-scrolling up, there also needs to be enough
	            // content padding at the bottom of the scroll view
	            // manually add it if there isn't enough scrollable area
	            // figure out how many scrollable area is left to scroll up
	            var availablePadding = (scrollViewDimensions.scrollHeight - scrollViewDimensions.scrollTop) - scrollViewDimensions.contentHeight;
	            var paddingSpace = availablePadding + scrollData.scrollAmount;
	            if (paddingSpace < 0) {
	                // there's not enough scrollable area at the bottom, so manually add more
	                scrollData.scrollPadding = (scrollViewDimensions.contentHeight - safeAreaHeight);
	            }
	        }
	        // if (!window.safeAreaEle) {
	        //   window.safeAreaEle = document.createElement('div');
	        //   window.safeAreaEle.style.position = 'absolute';
	        //   window.safeAreaEle.style.background = 'rgba(0, 128, 0, 0.7)';
	        //   window.safeAreaEle.style.padding = '2px 5px';
	        //   window.safeAreaEle.style.textShadow = '1px 1px white';
	        //   window.safeAreaEle.style.left = '0px';
	        //   window.safeAreaEle.style.right = '0px';
	        //   window.safeAreaEle.style.fontWeight = 'bold';
	        //   window.safeAreaEle.style.pointerEvents = 'none';
	        //   document.body.appendChild(window.safeAreaEle);
	        // }
	        // window.safeAreaEle.style.top = safeAreaTop + 'px';
	        // window.safeAreaEle.style.height = safeAreaHeight + 'px';
	        // window.safeAreaEle.innerHTML = `
	        //   <div>scrollTo: ${scrollData.scrollTo}</div>
	        //   <div>scrollAmount: ${scrollData.scrollAmount}</div>
	        //   <div>scrollPadding: ${scrollData.scrollPadding}</div>
	        //   <div>inputSafeY: ${scrollData.inputSafeY}</div>
	        //   <div>scrollHeight: ${scrollViewDimensions.scrollHeight}</div>
	        //   <div>scrollTop: ${scrollViewDimensions.scrollTop}</div>
	        //   <div>contentHeight: ${scrollViewDimensions.contentHeight}</div>
	        // `;
	        return scrollData;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "clearInput", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], InputBase.prototype, "placeholder", void 0);
	    __decorate([
	        core_1.ViewChild(native_input_1.NativeInput), 
	        __metadata('design:type', native_input_1.NativeInput)
	    ], InputBase.prototype, "_native", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "value", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "type", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], InputBase.prototype, "disabled", null);
	    __decorate([
	        core_1.ViewChild(native_input_1.NativeInput), 
	        __metadata('design:type', native_input_1.NativeInput), 
	        __metadata('design:paramtypes', [native_input_1.NativeInput])
	    ], InputBase.prototype, "_nativeInput", null);
	    __decorate([
	        core_1.ViewChild(native_input_1.NextInput), 
	        __metadata('design:type', native_input_1.NextInput), 
	        __metadata('design:paramtypes', [native_input_1.NextInput])
	    ], InputBase.prototype, "_nextInput", null);
	    return InputBase;
	})();
	exports.InputBase = InputBase;
	var SCROLL_ASSIST_SPEED = 0.3;
	function getScrollAssistDuration(distanceToScroll) {
	    //return 3000;
	    distanceToScroll = Math.abs(distanceToScroll);
	    var duration = distanceToScroll / SCROLL_ASSIST_SPEED;
	    return Math.min(400, Math.max(150, duration));
	}


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var dom_1 = __webpack_require__(164);
	/**
	 * @private
	 */
	var NativeInput = (function () {
	    function NativeInput(_elementRef, _renderer, ngControl) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.ngControl = ngControl;
	        this.focusChange = new core_1.EventEmitter();
	        this.valueChange = new core_1.EventEmitter();
	    }
	    /**
	     * @private
	     */
	    NativeInput.prototype._change = function (ev) {
	        this.valueChange.emit(ev.target.value);
	    };
	    /**
	     * @private
	     */
	    NativeInput.prototype._focus = function () {
	        this.focusChange.emit(true);
	    };
	    /**
	     * @private
	     */
	    NativeInput.prototype._blur = function () {
	        this.focusChange.emit(false);
	        this.hideFocus(false);
	    };
	    NativeInput.prototype.labelledBy = function (val) {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-labelledby', val);
	    };
	    NativeInput.prototype.isDisabled = function (val) {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'disabled', val ? '' : null);
	    };
	    /**
	     * @private
	     */
	    NativeInput.prototype.setFocus = function () {
	        this.element().focus();
	    };
	    /**
	     * @private
	     */
	    NativeInput.prototype.relocate = function (shouldRelocate, inputRelativeY) {
	        void 0;
	        if (this._relocated !== shouldRelocate) {
	            var focusedInputEle = this.element();
	            if (shouldRelocate) {
	                var clonedInputEle = cloneInput(focusedInputEle, 'cloned-focus');
	                focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
	                focusedInputEle.style[dom_1.CSS.transform] = "translate3d(-9999px," + inputRelativeY + "px,0)";
	                focusedInputEle.style.opacity = '0';
	                this.setFocus();
	                dom_1.raf(function () {
	                    focusedInputEle.classList.add('cloned-active');
	                });
	            }
	            else {
	                focusedInputEle.classList.remove('cloned-active');
	                focusedInputEle.style[dom_1.CSS.transform] = '';
	                focusedInputEle.style.opacity = '';
	                removeClone(focusedInputEle, 'cloned-focus');
	            }
	            this._relocated = shouldRelocate;
	        }
	    };
	    /**
	     * @private
	     */
	    NativeInput.prototype.hideFocus = function (shouldHideFocus) {
	        void 0;
	        var focusedInputEle = this.element();
	        if (shouldHideFocus) {
	            var clonedInputEle = cloneInput(focusedInputEle, 'cloned-move');
	            focusedInputEle.classList.add('cloned-active');
	            focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
	        }
	        else {
	            focusedInputEle.classList.remove('cloned-active');
	            removeClone(focusedInputEle, 'cloned-move');
	        }
	    };
	    NativeInput.prototype.hasFocus = function () {
	        return dom_1.hasFocus(this.element());
	    };
	    NativeInput.prototype.getValue = function () {
	        return this.element().value;
	    };
	    /**
	     * @private
	     */
	    NativeInput.prototype.element = function () {
	        return this._elementRef.nativeElement;
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], NativeInput.prototype, "focusChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], NativeInput.prototype, "valueChange", void 0);
	    __decorate([
	        core_1.HostListener('input', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], NativeInput.prototype, "_change", null);
	    __decorate([
	        core_1.HostListener('focus'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], NativeInput.prototype, "_focus", null);
	    __decorate([
	        core_1.HostListener('blur'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], NativeInput.prototype, "_blur", null);
	    NativeInput = __decorate([
	        core_1.Directive({
	            selector: '.text-input'
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, common_1.NgControl])
	    ], NativeInput);
	    return NativeInput;
	})();
	exports.NativeInput = NativeInput;
	function cloneInput(focusedInputEle, addCssClass) {
	    var clonedInputEle = focusedInputEle.cloneNode(true);
	    clonedInputEle.classList.add('cloned-input');
	    clonedInputEle.classList.add(addCssClass);
	    clonedInputEle.setAttribute('aria-hidden', true);
	    clonedInputEle.removeAttribute('aria-labelledby');
	    clonedInputEle.tabIndex = -1;
	    clonedInputEle.style.width = (focusedInputEle.offsetWidth + 10) + 'px';
	    return clonedInputEle;
	}
	function removeClone(focusedInputEle, queryCssClass) {
	    var clonedInputEle = focusedInputEle.parentElement.querySelector('.' + queryCssClass);
	    if (clonedInputEle) {
	        clonedInputEle.parentNode.removeChild(clonedInputEle);
	    }
	}
	/**
	 * @private
	 */
	var NextInput = (function () {
	    function NextInput() {
	        this.focused = new core_1.EventEmitter();
	    }
	    NextInput.prototype.receivedFocus = function () {
	        this.focused.emit(true);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], NextInput.prototype, "focused", void 0);
	    __decorate([
	        core_1.HostListener('focus'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], NextInput.prototype, "receivedFocus", null);
	    NextInput = __decorate([
	        core_1.Directive({
	            selector: '[next-input]'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NextInput);
	    return NextInput;
	})();
	exports.NextInput = NextInput;


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var util_1 = __webpack_require__(163);
	/**
	 * @name SegmentButton
	 * @description
	 * The child buttons of the `ion-segment` component. Each `ion-segment-button` must have a value.
	 * @usage
	 * ```html
	 * <ion-segment [(ngModel)]="relationship" primary>
	 *   <ion-segment-button value="friends" (select)="selectedFriends()">
	 *     Friends
	 *   </ion-segment-button>
	 *   <ion-segment-button value="enemies" (select)="selectedEnemies()">
	 *     Enemies
	 *   </ion-segment-button>
	 * </ion-segment>
	 *```
	 *
	 * Or with `FormBuilder`
	 *
	 *```html
	 * <form [ngFormModel]="myForm">
	 *   <ion-segment ngControl="mapStyle" danger>
	 *     <ion-segment-button value="standard">
	 *       Standard
	 *     </ion-segment-button>
	 *     <ion-segment-button value="hybrid">
	 *       Hybrid
	 *     </ion-segment-button>
	 *     <ion-segment-button value="sat">
	 *       Satellite
	 *     </ion-segment-button>
	 *   </ion-segment>
	 * </form>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/segment/
	 * @see {@link /docs/v2/components#segment Segment Component Docs}
	 * @see {@link /docs/v2/api/components/segment/Segment/ Segment API Docs}
	 */
	var SegmentButton = (function () {
	    function SegmentButton(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /**
	         * @output {SegmentButton} expression to evaluate when a segment button has been clicked
	         */
	        this.select = new core_1.EventEmitter();
	    }
	    /**
	     * @private
	     * On click of a SegmentButton
	     */
	    SegmentButton.prototype.onClick = function (ev) {
	        void 0;
	        this.select.emit(this);
	    };
	    /**
	     * @private
	     */
	    SegmentButton.prototype.ngOnInit = function () {
	        if (!util_1.isPresent(this.value)) {
	            void 0;
	        }
	    };
	    Object.defineProperty(SegmentButton.prototype, "isActive", {
	        /**
	         * @private
	         */
	        set: function (isActive) {
	            this._renderer.setElementClass(this._elementRef.nativeElement, 'segment-activated', isActive);
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-pressed', isActive);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], SegmentButton.prototype, "value", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], SegmentButton.prototype, "select", void 0);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], SegmentButton.prototype, "onClick", null);
	    SegmentButton = __decorate([
	        core_1.Component({
	            selector: 'ion-segment-button',
	            template: '<ng-content></ng-content>' +
	                '<ion-button-effect></ion-button-effect>',
	            host: {
	                'tappable': '',
	                'class': 'segment-button',
	                'role': 'button'
	            }
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], SegmentButton);
	    return SegmentButton;
	})();
	exports.SegmentButton = SegmentButton;
	/**
	 * @name Segment
	 * @description
	 * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
	 * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
	 * You could use Angular 2's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular 2 Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/common/FormBuilder-class.html)
	 *
	 *
	 * @usage
	 * ```html
	 * <ion-segment [(ngModel)]="relationship" (change)="onSegmentChanged($event)" danger>
	 *   <ion-segment-button value="friends">
	 *     Friends
	 *   </ion-segment-button>
	 *   <ion-segment-button value="enemies">
	 *     Enemies
	 *   </ion-segment-button>
	 * </ion-segment>
	 *```
	 *
	 * Or with `FormBuilder`
	 *
	 *```html
	 * <form [ngFormModel]="myForm">
	 *   <ion-segment ngControl="mapStyle" danger>
	 *     <ion-segment-button value="standard">
	 *       Standard
	 *     </ion-segment-button>
	 *     <ion-segment-button value="hybrid">
	 *       Hybrid
	 *     </ion-segment-button>
	 *     <ion-segment-button value="sat">
	 *       Satellite
	 *     </ion-segment-button>
	 *   </ion-segment>
	 * </form>
	 * ```
	 *
	 *
	 * @demo /docs/v2/demos/segment/
	 * @see {@link /docs/v2/components#segment Segment Component Docs}
	 * @see [Angular 2 Forms](http://learnangular2.com/forms/)
	 */
	var Segment = (function () {
	    function Segment(ngControl) {
	        /**
	         * @output {Any}  expression to evaluate when a segment button has been changed
	         */
	        this.change = new core_1.EventEmitter();
	        /**
	         * @private
	         */
	        this.onChange = function (_) { };
	        /**
	         * @private
	         */
	        this.onTouched = function (_) { };
	        if (ngControl) {
	            ngControl.valueAccessor = this;
	        }
	    }
	    /**
	     * @private
	     * Write a new value to the element.
	     */
	    Segment.prototype.writeValue = function (value) {
	        this.value = util_1.isPresent(value) ? value : '';
	        if (this._buttons) {
	            var buttons = this._buttons.toArray();
	            for (var _i = 0; _i < buttons.length; _i++) {
	                var button = buttons[_i];
	                button.isActive = (button.value === this.value);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Segment.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        var buttons = this._buttons.toArray();
	        for (var _i = 0; _i < buttons.length; _i++) {
	            var button = buttons[_i];
	            button.select.subscribe(function (selectedButton) {
	                _this.writeValue(selectedButton.value);
	                _this.onChange(selectedButton.value);
	                _this.change.emit(selectedButton);
	            });
	            if (util_1.isPresent(this.value)) {
	                button.isActive = (button.value === this.value);
	            }
	        }
	    };
	    /**
	     * @private
	     * Set the function to be called when the control receives a change event.
	     */
	    Segment.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    /**
	     * @private
	     * Set the function to be called when the control receives a touch event.
	     */
	    Segment.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Segment.prototype, "change", void 0);
	    __decorate([
	        core_1.ContentChildren(SegmentButton), 
	        __metadata('design:type', core_1.QueryList)
	    ], Segment.prototype, "_buttons", void 0);
	    Segment = __decorate([
	        core_1.Directive({
	            selector: 'ion-segment'
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [common_1.NgControl])
	    ], Segment);
	    return Segment;
	})();
	exports.Segment = Segment;


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var form_1 = __webpack_require__(167);
	var util_1 = __webpack_require__(163);
	var item_1 = __webpack_require__(325);
	var radio_group_1 = __webpack_require__(338);
	/**
	 * @description
	 * A radio button with a unique value. Note that all `<ion-radio>`
	 * components must be wrapped within a `<ion-list radio-group>`,
	 * and there must be at least two `<ion-radio>` components within
	 * the radio group.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html) for
	 * more info on forms and input.
	 *
	 * @usage
	 * ```html
	 *
	 * <ion-item>
	 *   <ion-label>Radio Label</ion-label>
	 *   <ion-radio value="radio-value"></ion-radio>
	 * </ion-item>
	 *
	 * ```
	 * @demo /docs/v2/demos/radio/
	 * @see {@link /docs/v2/components#radio Radio Component Docs}
	 */
	var RadioButton = (function () {
	    function RadioButton(_form, _item, _group) {
	        this._form = _form;
	        this._item = _item;
	        this._group = _group;
	        this._checked = false;
	        this._disabled = false;
	        this._value = null;
	        /**
	         * @output {any} expression to be evaluated when selected
	         */
	        this.select = new core_1.EventEmitter();
	        _form.register(this);
	        if (_group) {
	            // register with the radiogroup
	            this.id = 'rb-' + _group.add(this);
	        }
	        if (_item) {
	            // register the input inside of the item
	            // reset to the item's id instead of the radiogroup id
	            this.id = 'rb-' + _item.registerInput('radio');
	            this._labelId = 'lbl-' + _item.id;
	            this._item.setCssClass('item-radio', true);
	        }
	    }
	    Object.defineProperty(RadioButton.prototype, "value", {
	        /**
	         * @private
	         */
	        get: function () {
	            // if the value is not defined then use it's unique id
	            return util_1.isBlank(this._value) ? this.id : this._value;
	        },
	        set: function (val) {
	            this._value = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RadioButton.prototype, "checked", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (isChecked) {
	            this._checked = util_1.isTrueProperty(isChecked);
	            if (this._item) {
	                this._item.setCssClass('item-radio-checked', this._checked);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RadioButton.prototype, "disabled", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (val) {
	            this._disabled = util_1.isTrueProperty(val);
	            this._item && this._item.setCssClass('item-radio-disabled', this._disabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    RadioButton.prototype._click = function (ev) {
	        void 0;
	        ev.preventDefault();
	        ev.stopPropagation();
	        this.checked = true;
	        this.select.emit(this.value);
	    };
	    /**
	     * @private
	     */
	    RadioButton.prototype.ngOnInit = function () {
	        if (this._group && util_1.isPresent(this._group.value)) {
	            this.checked = util_1.isCheckedProperty(this._group.value, this.value);
	        }
	    };
	    /**
	     * @private
	     */
	    RadioButton.prototype.ngOnDestroy = function () {
	        this._form.deregister(this);
	        this._group.remove(this);
	    };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], RadioButton.prototype, "select", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], RadioButton.prototype, "value", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], RadioButton.prototype, "checked", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], RadioButton.prototype, "disabled", null);
	    __decorate([
	        core_1.HostListener('click', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], RadioButton.prototype, "_click", null);
	    RadioButton = __decorate([
	        core_1.Component({
	            selector: 'ion-radio',
	            template: '<div class="radio-icon" [class.radio-checked]="_checked">' +
	                '<div class="radio-inner"></div>' +
	                '</div>' +
	                '<button role="radio" ' +
	                '[id]="id" ' +
	                '[attr.aria-checked]="_checked" ' +
	                '[attr.aria-labelledby]="_labelId" ' +
	                '[attr.aria-disabled]="_disabled" ' +
	                'class="item-cover">' +
	                '</button>',
	            host: {
	                '[class.radio-disabled]': '_disabled'
	            }
	        }),
	        __param(1, core_1.Optional()),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [form_1.Form, item_1.Item, radio_group_1.RadioGroup])
	    ], RadioButton);
	    return RadioButton;
	})();
	exports.RadioButton = RadioButton;


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var list_1 = __webpack_require__(323);
	var util_1 = __webpack_require__(163);
	var RADIO_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return RadioGroup; }), multi: true });
	/**
	 * @name RadioGroup
	 * @description
	 * A radio group is a group of radio button components, and its value
	 * comes from the checked radio button's value. Selecting a radio
	 * button in the group unchecks all others in the group.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
	 * for more info on forms and inputs.
	 *
	 * @usage
	 * ```html
	 * <ion-list radio-group [(ngModel)]="autoManufacturers">
	 *
	 *   <ion-list-header>
	 *     Auto Manufacturers
	 *   </ion-list-header>
	 *
	 *   <ion-item>
	 *     <ion-label>Cord</ion-label>
	 *     <ion-radio value="cord"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Duesenberg</ion-label>
	 *     <ion-radio value="duesenberg"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Hudson</ion-label>
	 *     <ion-radio value="hudson"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Packard</ion-label>
	 *     <ion-radio value="packard"></ion-radio>
	 *   </ion-item>
	 *
	 *   <ion-item>
	 *     <ion-label>Studebaker</ion-label>
	 *     <ion-radio value="studebaker"></ion-radio>
	 *   </ion-item>
	 *
	 * </ion-list>
	 * ```
	 *
	 * @demo /docs/v2/demos/radio/
	 * @see {@link /docs/v2/components#radio Radio Component Docs}
	*/
	var RadioGroup = (function () {
	    function RadioGroup(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._btns = [];
	        this._ids = -1;
	        this._init = false;
	        /**
	         * @output {any} expression to be evaluated when selection has been changed
	         */
	        this.change = new core_1.EventEmitter();
	        this.id = ++radioGroupIds;
	    }
	    /**
	     * @private
	     */
	    RadioGroup.prototype.writeValue = function (val) {
	        void 0;
	        this.value = val;
	        if (this._init) {
	            this._update();
	            this.onTouched();
	            this.change.emit(val);
	        }
	        this._init = true;
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.ngAfterContentInit = function () {
	        var activeButton = this._btns.find(function (b) { return b.checked; });
	        if (activeButton) {
	            this._setActive(activeButton);
	        }
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function (val) {
	            // onChange used when there's an ngControl
	            void 0;
	            fn(val);
	            _this.value = val;
	            _this._update();
	            _this.onTouched();
	            _this.change.emit(val);
	        };
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    /**
	     * @private
	     */
	    RadioGroup.prototype._update = function () {
	        var _this = this;
	        // loop through each of the radiobuttons
	        var hasChecked = false;
	        this._btns.forEach(function (radioButton) {
	            // check this radiobutton if its value is
	            // the same as the radiogroups value
	            radioButton.checked = util_1.isCheckedProperty(_this.value, radioButton.value) && !hasChecked;
	            if (radioButton.checked) {
	                // if this button is checked, then set it as
	                // the radiogroup's active descendant
	                _this._setActive(radioButton);
	                hasChecked = true;
	            }
	        });
	    };
	    RadioGroup.prototype._setActive = function (radioButton) {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-activedescendant', radioButton.id);
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.add = function (button) {
	        var _this = this;
	        this._btns.push(button);
	        // listen for radiobutton select events
	        button.select.subscribe(function (val) {
	            // this radiobutton has been selected
	            _this.onChange(val);
	        });
	        return this.id + '-' + (++this._ids);
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.remove = function (button) {
	        var index = this._btns.indexOf(button);
	        if (index > -1) {
	            if (button.value == this.value) {
	                this.value = null;
	            }
	            this._btns.splice(index, 1);
	        }
	    };
	    Object.defineProperty(RadioGroup.prototype, "_header", {
	        /**
	         * @private
	         */
	        set: function (header) {
	            if (header) {
	                if (!header.id) {
	                    header.id = 'rg-hdr-' + this.id;
	                }
	                this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-describedby', header.id);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    RadioGroup.prototype.onChange = function (val) {
	        // onChange used when there is not an ngControl
	        void 0;
	        this.value = val;
	        this._update();
	        this.onTouched();
	        this.change.emit(val);
	    };
	    /**
	     * @private
	     */
	    RadioGroup.prototype.onTouched = function () { };
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], RadioGroup.prototype, "change", void 0);
	    __decorate([
	        core_1.ContentChild(list_1.ListHeader), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], RadioGroup.prototype, "_header", null);
	    RadioGroup = __decorate([
	        core_1.Directive({
	            selector: '[radio-group]',
	            host: {
	                '[attr.aria-activedescendant]': 'activeId',
	                'role': 'radiogroup'
	            },
	            providers: [RADIO_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], RadioGroup);
	    return RadioGroup;
	})();
	exports.RadioGroup = RadioGroup;
	var radioGroupIds = -1;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var ion_1 = __webpack_require__(287);
	var config_1 = __webpack_require__(161);
	var icon_1 = __webpack_require__(299);
	var button_1 = __webpack_require__(301);
	var util_1 = __webpack_require__(163);
	/**
	* @private
	*/
	var SearchbarInput = (function () {
	    function SearchbarInput(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    SearchbarInput.prototype.stopInput = function (ev) {
	        ev.preventDefault();
	        ev.stopPropagation();
	    };
	    __decorate([
	        core_1.HostListener('input', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], SearchbarInput.prototype, "stopInput", null);
	    SearchbarInput = __decorate([
	        core_1.Directive({
	            selector: '.searchbar-input',
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef])
	    ], SearchbarInput);
	    return SearchbarInput;
	})();
	exports.SearchbarInput = SearchbarInput;
	/**
	 * @name Searchbar
	 * @module ionic
	 * @description
	 * Manages the display of a Searchbar which can be used to search or filter items.
	 *
	 * @usage
	 * ```html
	 * <ion-searchbar
	 *   [(ngModel)]="myInput"
	 *   [hideCancelButton]="shouldHideCancel"
	 *   (input)="onInput($event)"
	 *   (cancel)="onCancel($event)">
	 * </ion-searchbar>
	 * ```
	 *
	 * @demo /docs/v2/demos/searchbar/
	 * @see {@link /docs/v2/components#searchbar Searchbar Component Docs}
	 */
	var Searchbar = (function (_super) {
	    __extends(Searchbar, _super);
	    function Searchbar(_elementRef, _config, ngControl) {
	        _super.call(this, _elementRef);
	        this._elementRef = _elementRef;
	        this._config = _config;
	        /**
	         * @input {number} How long, in milliseconds, to wait to trigger the `input` event after each keystroke. Default `250`.
	         */
	        this.debounce = 250;
	        /**
	         * @output {event} When the Searchbar input has changed including cleared
	         */
	        this.input = new core_1.EventEmitter();
	        /**
	         * @output {event} When the Searchbar input has blurred
	         */
	        this.blur = new core_1.EventEmitter();
	        /**
	         * @output {event} When the Searchbar input has focused
	         */
	        this.focus = new core_1.EventEmitter();
	        /**
	         * @output {event} When the cancel button is clicked
	         */
	        this.cancel = new core_1.EventEmitter();
	        /**
	         * @output {event} When the clear input button is clicked
	         */
	        this.clear = new core_1.EventEmitter();
	        /**
	         * @private
	         */
	        this.value = '';
	        /**
	         * @private
	         */
	        this.blurInput = true;
	        /**
	         * @private
	         */
	        this.onChange = function (_) { };
	        /**
	         * @private
	         */
	        this.onTouched = function () { };
	        // If the user passed a ngControl we need to set the valueAccessor
	        if (ngControl) {
	            ngControl.valueAccessor = this;
	        }
	    }
	    /**
	     * @private
	     * On Initialization check for attributes
	     */
	    Searchbar.prototype.ngOnInit = function () {
	        this.mode = this._config.get('mode');
	        var hideCancelButton = this.hideCancelButton;
	        if (typeof hideCancelButton === 'string') {
	            this.hideCancelButton = (hideCancelButton === '' || hideCancelButton === 'true');
	        }
	        this.cancelButtonText = this.cancelButtonText || 'Cancel';
	        this.placeholder = this.placeholder || 'Search';
	        if (this.ngModel)
	            this.value = this.ngModel;
	        this.onChange(this.value);
	        this.shouldLeftAlign = this.value && this.value.trim() != '';
	        // Using querySelector instead of searchbarInput because at this point it doesn't exist
	        this.inputElement = this._elementRef.nativeElement.querySelector('.searchbar-input');
	        this.searchIconElement = this._elementRef.nativeElement.querySelector('.searchbar-search-icon');
	        this.setElementLeft();
	    };
	    /**
	     * @private
	     * After View Initialization check the value
	     */
	    Searchbar.prototype.ngAfterViewInit = function () {
	        // If the user passes an undefined variable to ngModel this will warn
	        // and set the value to an empty string
	        if (!util_1.isPresent(this.value)) {
	            void 0;
	            this.value = '';
	            this.onChange(this.value);
	        }
	    };
	    /**
	     * @private
	     * Determines whether or not to add style to the element
	     * to center it properly (ios only)
	     */
	    Searchbar.prototype.setElementLeft = function () {
	        if (this.mode !== 'ios')
	            return;
	        if (this.shouldLeftAlign) {
	            this.inputElement.removeAttribute("style");
	            this.searchIconElement.removeAttribute("style");
	        }
	        else {
	            this.addElementLeft();
	        }
	    };
	    /**
	     * @private
	     * Calculates the amount of padding/margin left for the elements
	     * in order to center them based on the placeholder width
	     */
	    Searchbar.prototype.addElementLeft = function () {
	        // Create a dummy span to get the placeholder width
	        var tempSpan = document.createElement('span');
	        tempSpan.innerHTML = this.placeholder;
	        document.body.appendChild(tempSpan);
	        // Get the width of the span then remove it
	        var textWidth = tempSpan.offsetWidth;
	        tempSpan.remove();
	        // Set the input padding left
	        var inputLeft = "calc(50% - " + (textWidth / 2) + "px)";
	        this.inputElement.style.paddingLeft = inputLeft;
	        // Set the icon margin left
	        var iconLeft = "calc(50% - " + ((textWidth / 2) + 30) + "px)";
	        this.searchIconElement.style.marginLeft = iconLeft;
	    };
	    /**
	     * @private
	     * Update the Searchbar input value when the input changes
	     */
	    Searchbar.prototype.inputChanged = function (ev) {
	        var _this = this;
	        var value = ev.target.value;
	        clearTimeout(this._tmr);
	        this._tmr = setTimeout(function () {
	            _this.value = value;
	            _this.onChange(value);
	            _this.input.emit(_this);
	        }, Math.round(this.debounce));
	    };
	    /**
	     * @private
	     * Sets the Searchbar to focused and aligned left on input focus.
	     */
	    Searchbar.prototype.inputFocused = function () {
	        this.focus.emit(this);
	        this.isFocused = true;
	        this.shouldLeftAlign = true;
	        this.setElementLeft();
	    };
	    /**
	     * @private
	     * Sets the Searchbar to not focused and checks if it should align left
	     * based on whether there is a value in the searchbar or not.
	     */
	    Searchbar.prototype.inputBlurred = function () {
	        // blurInput determines if it should blur
	        // if we are clearing the input we still want to stay focused in the input
	        if (this.blurInput == false) {
	            this.searchbarInput._elementRef.nativeElement.focus();
	            this.blurInput = true;
	            return;
	        }
	        this.blur.emit(this);
	        this.isFocused = false;
	        this.shouldLeftAlign = this.value && this.value.trim() != '';
	        this.setElementLeft();
	    };
	    /**
	     * @private
	     * Clears the input field and triggers the control change.
	     */
	    Searchbar.prototype.clearInput = function () {
	        this.clear.emit(this);
	        this.value = '';
	        this.onChange(this.value);
	        this.input.emit(this);
	        this.blurInput = false;
	    };
	    /**
	     * @private
	     * Clears the input field and tells the input to blur since
	     * the clearInput function doesn't want the input to blur
	     * then calls the custom cancel function if the user passed one in.
	     */
	    Searchbar.prototype.cancelSearchbar = function () {
	        this.cancel.emit(this);
	        this.clearInput();
	        this.blurInput = true;
	    };
	    /**
	     * @private
	     * Write a new value to the element.
	     */
	    Searchbar.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * @private
	     * Set the function to be called when the control receives a change event.
	     */
	    Searchbar.prototype.registerOnChange = function (fn) {
	        this.onChange = fn;
	    };
	    /**
	     * @private
	     * Set the function to be called when the control receives a touch event.
	     */
	    Searchbar.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    __decorate([
	        core_1.ViewChild(SearchbarInput), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "searchbarInput", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "cancelButtonText", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "hideCancelButton", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Searchbar.prototype, "debounce", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Searchbar.prototype, "placeholder", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "ngModel", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "input", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "blur", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "focus", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "cancel", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], Searchbar.prototype, "clear", void 0);
	    __decorate([
	        core_1.HostBinding('class.searchbar-focused'), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "isFocused", void 0);
	    __decorate([
	        core_1.HostBinding('class.searchbar-left-aligned'), 
	        __metadata('design:type', Object)
	    ], Searchbar.prototype, "shouldLeftAlign", void 0);
	    Searchbar = __decorate([
	        core_1.Component({
	            selector: 'ion-searchbar',
	            host: {
	                '[class.searchbar-has-value]': 'value',
	                '[class.searchbar-hide-cancel]': 'hideCancelButton'
	            },
	            template: '<div class="searchbar-input-container">' +
	                '<button (click)="cancelSearchbar()" (mousedown)="cancelSearchbar()" [hidden]="hideCancelButton" clear dark class="searchbar-md-cancel">' +
	                '<ion-icon name="arrow-back"></ion-icon>' +
	                '</button>' +
	                '<div class="searchbar-search-icon"></div>' +
	                '<input [value]="value" (keyup)="inputChanged($event)" (blur)="inputBlurred()" (focus)="inputFocused()" class="searchbar-input" type="search" [attr.placeholder]="placeholder" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">' +
	                '<button clear *ngIf="value" class="searchbar-clear-icon" (click)="clearInput()" (mousedown)="clearInput()"></button>' +
	                '</div>' +
	                '<button clear (click)="cancelSearchbar()" (mousedown)="cancelSearchbar()" [hidden]="hideCancelButton" class="searchbar-ios-cancel">{{cancelButtonText}}</button>',
	            directives: [common_1.FORM_DIRECTIVES, common_1.NgIf, common_1.NgClass, icon_1.Icon, button_1.Button, SearchbarInput]
	        }),
	        __param(2, core_1.Optional()), 
	        __metadata('design:paramtypes', [core_1.ElementRef, config_1.Config, common_1.NgControl])
	    ], Searchbar);
	    return Searchbar;
	})(ion_1.Ion);
	exports.Searchbar = Searchbar;


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var app_1 = __webpack_require__(168);
	var config_1 = __webpack_require__(161);
	var keyboard_1 = __webpack_require__(276);
	var nav_controller_1 = __webpack_require__(302);
	var view_controller_1 = __webpack_require__(296);
	/**
	 * @name Nav
	 * @description
	 * _For a quick walkthrough of navigation in Ionic, check out the
	 * [Navigation section](../../../../components/#navigation) of the Component
	 * docs._
	 *
	 * Nav is a basic navigation controller component.  As a subclass of NavController
	 * you use it to navigate to pages in your app and manipulate the navigation stack.
	 * Nav automatically animates transitions between pages for you.
	 *
	 * For more information on using navigation controllers like Nav or [Tab](../../Tabs/Tab/),
	 * take a look at the [NavController API reference](../NavController/).
	 *
	 * You must set a root page (where page is any [@Page](../../config/Page/)
	 * component) to be loaded initially by any Nav you create, using
	 * the 'root' property:
	 *
	 * @usage
	 * ```ts
	 * import {GettingStartedPage} from 'getting-started';
	 * @App({
	 *   template: `<ion-nav [root]="rootPage"></ion-nav>`
	 * })
	 * class MyApp {
	 *   constructor(){
	 *     this.rootPage = GettingStartedPage;
	 *   }
	 * }
	 * ```
	 *
	 * <h2 id="back_navigation">Back navigation</h2>
	 * If a [page](../NavController/#creating_pages) you navigate to has a [NavBar](../NavBar/),
	 * Nav will automatically add a back button to it if there is a page
	 * before the one you are navigating to in the navigation stack.
	 *
	 * Additionally, specifying the `swipe-back-enabled` property will allow you to
	 * swipe to go back:
	 * ```html
	 * <ion-nav swipe-back-enabled="false" [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * Here is a diagram of how Nav animates smoothly between pages:
	 *
	 * <div class="highlight less-margin">
	 *   <pre>
	 *                           +-------+
	 *                           |  App  |
	 *                           +---+---+
	 *                           &lt;ion-app&gt;
	 *                               |
	 *                  +------------+-------------+
	 *                  |   Ionic Nav Controller   |
	 *                  +------------+-------------+
	 *                           &lt;ion-nav&gt;
	 *                               |
	 *                               |
	 *             Page 3  +--------------------+                     LoginPage
	 *           Page 2  +--------------------+ |
	 *         Page 1  +--------------------+ | |              +--------------------+
	 *                 | | Header           |&lt;-----------------|       Login        |
	 *                 +--------------------+ | |              +--------------------+
	 *                 | | |                | | |              | Username:          |
	 *                 | | |                | | |              | Password:          |
	 *                 | | |  Page 3 is     | | |              |                    |
	 *                 | | |  only content  | | |              |                    |
	 *                 | | |                |&lt;-----------------|                    |
	 *                 | | |                | | |              |                    |
	 *                 | | |                | | |              |                    |
	 *                 | +------------------|-+ |              |                    |
	 *                 | | Footer           |-|-+              |                    |
	 *                 | +------------------|-+                |                    |
	 *                 +--------------------+                  +--------------------+
	 *
	 *           +--------------------+    +--------------------+    +--------------------+
	 *           | Header             |    | Content            |    | Content            |
	 *           +--------------------+    |                    |    |                    |
	 *           | Content            |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    +--------------------+    |                    |
	 *           |                    |    | Footer             |    |                    |
	 *           +--------------------+    +--------------------+    +--------------------+
	 *
	 *   </pre>
	 * </div>
	 *
	 * @demo /docs/v2/demos/navigation/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 */
	var Nav = (function (_super) {
	    __extends(Nav, _super);
	    function Nav(hostNavCtrl, viewCtrl, app, config, keyboard, elementRef, compiler, viewManager, zone, renderer) {
	        _super.call(this, hostNavCtrl, app, config, keyboard, elementRef, 'contents', compiler, viewManager, zone, renderer);
	        this._hasInit = false;
	        if (viewCtrl) {
	            // an ion-nav can also act as an ion-page within a parent ion-nav
	            // this would happen when an ion-nav nests a child ion-nav.
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(elementRef);
	        }
	    }
	    Object.defineProperty(Nav.prototype, "root", {
	        /**
	         * @input {Page} The Page component to load as the root page within this nav.
	         */
	        get: function () {
	            return this._root;
	        },
	        set: function (page) {
	            this._root = page;
	            if (this._hasInit) {
	                this.setRoot(page);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @private
	     */
	    Nav.prototype.ngOnInit = function () {
	        this._hasInit = true;
	        if (this._root) {
	            if (typeof this._root !== 'function') {
	                throw 'The [root] property in <ion-nav> must be given a reference to a component class from within the constructor.';
	            }
	            this.push(this._root);
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.Type)
	    ], Nav.prototype, "root", null);
	    Nav = __decorate([
	        core_1.Component({
	            selector: 'ion-nav',
	            template: '<div #contents></div>'
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController, view_controller_1.ViewController, app_1.IonicApp, config_1.Config, keyboard_1.Keyboard, core_1.ElementRef, core_1.Compiler, core_1.AppViewManager, core_1.NgZone, core_1.Renderer])
	    ], Nav);
	    return Nav;
	})(nav_controller_1.NavController);
	exports.Nav = Nav;


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var nav_controller_1 = __webpack_require__(302);
	var nav_registry_1 = __webpack_require__(278);
	/**
	 * @name NavPush
	 * @description
	 * Directive for declaratively linking to a new page instead of using
	 * {@link ../NavController/#push NavController.push}. Similar to ui-router's `ui-sref`.
	 *
	 * @usage
	 * ```html
	 * <button [navPush]="pushPage"></button>
	 * ```
	 * To specify parameters you can use array syntax or the `nav-params` property:
	 * ```html
	 * <button [navPush]="pushPage" [navParams]="params"></button>
	 * ```
	 * Where `pushPage` and `params` are specified in your component, and `pushPage`
	 * contains a reference to a [@Page component](../../../config/Page/):
	 *
	 * ```ts
	 * import {LoginPage} from 'login';
	 * @Page({
	 *   template: `<button [navPush]="pushPage" [navParams]="params"></button>`
	 * })
	 * class MyPage {
	 *   constructor(){
	 *     this.pushPage = LoginPage;
	 *     this.params = { id: 42 };
	 *   }
	 * }
	 * ```
	 *
	 * ### Alternate syntax
	 * You can also use syntax similar to Angular2's router, passing an array to
	 * NavPush:
	 * ```html
	 * <button [navPush]="[pushPage, params]"></button>
	 * ```
	 * @demo /docs/v2/demos/navigation/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../NavPop NavPop API Docs}
	 */
	var NavPush = (function () {
	    function NavPush(_nav, registry) {
	        this._nav = _nav;
	        this.registry = registry;
	        if (!_nav) {
	            void 0;
	        }
	    }
	    /**
	     * @private
	     */
	    NavPush.prototype.onClick = function () {
	        var destination, params;
	        if (this.navPush instanceof Array) {
	            if (this.navPush.length > 2) {
	                throw 'Too many [navPush] arguments, expects [View, { params }]';
	            }
	            destination = this.navPush[0];
	            params = this.navPush[1] || this.navParams;
	        }
	        else {
	            destination = this.navPush;
	            params = this.navParams;
	        }
	        if (typeof destination === "string") {
	            destination = this.registry.get(destination);
	        }
	        this._nav && this._nav.push(destination, params);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NavPush.prototype, "navPush", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NavPush.prototype, "navParams", void 0);
	    NavPush = __decorate([
	        core_1.Directive({
	            selector: '[navPush]',
	            host: {
	                '(click)': 'onClick()',
	                'role': 'link'
	            }
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController, nav_registry_1.NavRegistry])
	    ], NavPush);
	    return NavPush;
	})();
	exports.NavPush = NavPush;
	/**
	 * @name NavPop
	 * @description
	 * Directive for declaratively pop the current page off from the navigation stack.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *  <div block button nav-pop>go back</div>
	 * </ion-content>
	 * ```
	 * This will go back one page in the navigation stack
	 *
	 * Similar to {@link /docs/v2/api/components/nav/NavPush/ `NavPush` }
	 * @demo /docs/v2/demos/navigation/
	 * @see {@link /docs/v2/components#navigation Navigation Component Docs}
	 * @see {@link ../NavPush NavPush API Docs}
	 */
	var NavPop = (function () {
	    /**
	     * TODO
	     * @param {NavController} nav  TODO
	     */
	    function NavPop(_nav) {
	        this._nav = _nav;
	        if (!_nav) {
	            void 0;
	        }
	    }
	    /**
	     * @private
	     */
	    NavPop.prototype.onClick = function () {
	        this._nav && this._nav.pop();
	    };
	    NavPop = __decorate([
	        core_1.Directive({
	            selector: '[nav-pop]',
	            host: {
	                '(click)': 'onClick()',
	                'role': 'link'
	            }
	        }),
	        __param(0, core_1.Optional()), 
	        __metadata('design:paramtypes', [nav_controller_1.NavController])
	    ], NavPop);
	    return NavPop;
	})();
	exports.NavPop = NavPop;


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var router_1 = __webpack_require__(117);
	var nav_1 = __webpack_require__(340);
	/**
	 * @private
	 */
	var NavRouter = (function (_super) {
	    __extends(NavRouter, _super);
	    function NavRouter(_elementRef, _loader, _parentRouter, nameAttr, _nav) {
	        _super.call(this, _elementRef, _loader, _parentRouter, nameAttr);
	        this._nav = _nav;
	        // register this router with Ionic's NavController
	        // Ionic's NavController will call this NavRouter's "stateChange"
	        // method when the NavController has...changed its state
	        _nav.registerRouter(this);
	    }
	    NavRouter.prototype.activate = function (nextInstruction) {
	        var previousInstruction = this['_currentInstruction'];
	        this['_currentInstruction'] = nextInstruction;
	        var componentType = nextInstruction.componentType;
	        var childRouter = this['_parentRouter'].childRouter(componentType);
	        // prevent double navigations to the same view
	        var instruction = new ResolvedInstruction(nextInstruction, null, null);
	        var url;
	        if (instruction) {
	            url = instruction.toRootUrl();
	            if (url === this._lastUrl) {
	                return Promise.resolve();
	            }
	        }
	        void 0;
	        // tell the NavController which componentType, and it's params, to navigate to
	        return this._nav.push(componentType, nextInstruction.params);
	    };
	    NavRouter.prototype.reuse = function (nextInstruction) {
	        return Promise.resolve();
	    };
	    NavRouter.prototype.stateChange = function (direction, viewCtrl) {
	        // stateChange is called by Ionic's NavController
	        // type could be "push" or "pop"
	        // viewCtrl is Ionic's ViewController class, which has the properties "componentType" and "params"
	        // only do an update if there's an actual view change
	        if (!viewCtrl)
	            return;
	        // get the best PathRecognizer for this view's componentType
	        var pathRecognizer = this.getPathRecognizerByComponent(viewCtrl.componentType);
	        if (pathRecognizer) {
	            // generate a componentInstruction from the view's PathRecognizer and params
	            var componentInstruction = pathRecognizer.generate(viewCtrl.data);
	            // create a ResolvedInstruction from the componentInstruction
	            var instruction = new ResolvedInstruction(componentInstruction, null, null);
	            if (instruction) {
	                var url = instruction.toRootUrl();
	                if (url === this._lastUrl)
	                    return;
	                this._lastUrl = url;
	                this['_parentRouter'].navigateByInstruction(instruction);
	                void 0;
	            }
	        }
	    };
	    NavRouter.prototype.getPathRecognizerByComponent = function (componentType) {
	        // given a componentType, figure out the best PathRecognizer to use
	        var rules = this['_parentRouter'].registry._rules;
	        var pathRecognizer = null;
	        rules.forEach(function (rule) {
	            pathRecognizer = rule.matchers.find(function (matcherPathRecognizer) {
	                return (matcherPathRecognizer.handler.componentType === componentType);
	            });
	        });
	        return pathRecognizer;
	    };
	    NavRouter = __decorate([
	        core_1.Directive({
	            selector: 'ion-nav'
	        }),
	        __param(3, core_1.Attribute('name')), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.DynamicComponentLoader, router_1.Router, String, nav_1.Nav])
	    ], NavRouter);
	    return NavRouter;
	})(router_1.RouterOutlet);
	exports.NavRouter = NavRouter;
	// TODO: hacked from
	// https://github.com/angular/angular/blob/6ddfff5cd59aac9099aa6da5118c5598eea7ea11/modules/angular2/src/router/instruction.ts#L207
	var ResolvedInstruction = (function (_super) {
	    __extends(ResolvedInstruction, _super);
	    function ResolvedInstruction(component, child, auxInstruction) {
	        _super.call(this, component, child, auxInstruction);
	        this.component = component;
	        this.child = child;
	        this.auxInstruction = auxInstruction;
	    }
	    ResolvedInstruction.prototype.resolveComponent = function () {
	        return Promise.resolve(this.component);
	    };
	    return ResolvedInstruction;
	})(router_1.Instruction);


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var app_1 = __webpack_require__(168);
	/**
	 * @name Id
	 * @description
	 * The `id` attribute is an easy way to identify unique components in an app and access them
	 * no matter where in the UI hierarchy you are. For example, this makes toggling
	 * a global side menu possible from any place in the application.
	 *
	 * @usage
	 * To give any component an ID, simply set its `id` property:
	 * ```html
	 * <ion-checkbox id="myCheckbox"></ion-checkbox>
	 * ```
	 *
	 * To get a reference to the registered component, inject the [IonicApp](../IonicApp/)
	 * service:
	 * ```ts
	 * constructor(app: IonicApp) {
	 *   this.app = app
	 * }
	 *
	 * ngAfterViewInit() {
	 *   var checkbox = this.app.getComponent("myCheckbox");
	 *   if (checkbox.checked) {
	 *     console.log('checkbox is checked');
	 *   }
	 * }
	 * ```
	 *
	 * *NOTE:* It is not recommended to use ID's across Pages, as there is often no
	 * guarantee that the registered component has not been destroyed if its Page
	 * has been navigated away from.
	 *
	 * @demo /docs/v2/demos/id/
	 */
	var IdRef = (function () {
	    function IdRef(_app, elementRef, appViewManager) {
	        this._app = _app;
	        // Grab the component this directive is attached to
	        this._component = appViewManager.getComponent(elementRef);
	    }
	    /**
	     * @private
	     */
	    IdRef.prototype.ngOnInit = function () {
	        this._app.register(this.id, this._component);
	    };
	    /**
	     * @private
	     */
	    IdRef.prototype.ngOnDestroy = function () {
	        this._app.unregister(this.id);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], IdRef.prototype, "id", void 0);
	    IdRef = __decorate([
	        core_1.Directive({
	            selector: '[id]'
	        }), 
	        __metadata('design:paramtypes', [app_1.IonicApp, core_1.ElementRef, core_1.AppViewManager])
	    ], IdRef);
	    return IdRef;
	})();
	exports.IdRef = IdRef;
	/**
	 * @private
	 */
	var Attr = (function () {
	    function Attr(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	    }
	    /**
	     * @private
	     */
	    Attr.prototype.ngOnInit = function () {
	        this._renderer.setElementAttribute(this._elementRef.nativeElement, this.attr, '');
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], Attr.prototype, "attr", void 0);
	    Attr = __decorate([
	        core_1.Directive({
	            selector: '[attr]'
	        }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], Attr);
	    return Attr;
	})();
	exports.Attr = Attr;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(7);
	var platform_1 = __webpack_require__(162);
	/**
	 * @private
	 */
	var DisplayWhen = (function () {
	    function DisplayWhen(conditions, platform, ngZone) {
	        var _this = this;
	        this.isMatch = false;
	        this.platform = platform;
	        if (!conditions)
	            return;
	        this.conditions = conditions.split(',');
	        // check if its one of the matching platforms first
	        // a platform does not change during the life of an app
	        for (var i = 0; i < this.conditions.length; i++) {
	            if (this.conditions[i] && platform.is(this.conditions[i])) {
	                this.isMatch = true;
	                return;
	            }
	        }
	        if (this.orientation()) {
	            // add window resize listener
	            platform.onResize(function () {
	                ngZone.run(function () {
	                    _this.orientation();
	                });
	            });
	            return;
	        }
	    }
	    DisplayWhen.prototype.orientation = function () {
	        for (var i = 0; i < this.conditions.length; i++) {
	            if (this.conditions[i] == 'portrait') {
	                this.isMatch = this.platform.isPortrait();
	                return true;
	            }
	            if (this.conditions[i] == 'landscape') {
	                this.isMatch = this.platform.isLandscape();
	                return true;
	            }
	        }
	    };
	    return DisplayWhen;
	})();
	exports.DisplayWhen = DisplayWhen;
	/**
	 *
	 * @name ShowWhen
	 * @description
	 * The `showWhen` attribute takes a string that represents a platform or screen orientation.
	 * The element the attribute is added to will only be shown when that platform or screen orientation is active.
	 * Complements the [hideWhen attribute](../HideWhen).
	 * @usage
	 * ```html
	 * <div showWhen="android">
	 *  I am visible on Android!
	 * </div>
	 *
	 * <div showWhen="ios">
	 *  I am visible on iOS!
	 * </div>
	 *
	 * <div showWhen="android,ios">
	 *  I am visible on Android and iOS!
	 * </div>
	 *
	 * <div showWhen="portrait">
	 *  I am visible on Portrait!
	 * </div>
	 *
	 * <div showWhen="landscape">
	 *  I am visible on Landscape!
	 * </div>
	 * ```
	 * @demo /docs/v2/demos/show-when/
	 * @see {@link ../HideWhen HideWhen API Docs}
	 */
	var ShowWhen = (function (_super) {
	    __extends(ShowWhen, _super);
	    function ShowWhen(showWhen, platform, ngZone) {
	        _super.call(this, showWhen, platform, ngZone);
	    }
	    Object.defineProperty(ShowWhen.prototype, "hidden", {
	        /**
	         * @private
	         */
	        get: function () {
	            return !this.isMatch;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ShowWhen = __decorate([
	        core_1.Directive({
	            selector: '[showWhen]',
	            host: {
	                '[hidden]': 'hidden'
	            }
	        }),
	        __param(0, core_1.Attribute('showWhen')), 
	        __metadata('design:paramtypes', [String, platform_1.Platform, core_1.NgZone])
	    ], ShowWhen);
	    return ShowWhen;
	})(DisplayWhen);
	exports.ShowWhen = ShowWhen;
	/**
	 * @name HideWhen
	 * @description
	 * The `hideWhen` attribute takes a string that represents a plaform or screen orientation.
	 * The element the attribute is added to will only be hidden when that platform or screen orientation is active.
	 * Complements the [showWhen attribute](../ShowWhen).
	 * @usage
	 * ```html
	 * <div hideWhen="android">
	 *  I am hidden on Android!
	 * </div>
	 *
	 * <div hideWhen="ios">
	 *  I am hidden on iOS!
	 * </div>
	 *
	 * <div hideWhen="android,ios">
	 *  I am hidden on Android and iOS!
	 * </div>
	 *
	 * <div hideWhen="portrait">
	 *  I am hidden on Portrait!
	 * </div>
	 *
	 * <div hideWhen="landscape">
	 *  I am hidden on Landscape!
	 * </div>
	 * ```
	 *
	 * @demo /docs/v2/demos/hide-when/
	 * @see {@link ../ShowWhen ShowWhen API Docs}
	 */
	var HideWhen = (function (_super) {
	    __extends(HideWhen, _super);
	    function HideWhen(hideWhen, platform, ngZone) {
	        _super.call(this, hideWhen, platform, ngZone);
	    }
	    Object.defineProperty(HideWhen.prototype, "hidden", {
	        /**
	         * @private
	         */
	        get: function () {
	            return this.isMatch;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HideWhen = __decorate([
	        core_1.Directive({
	            selector: '[hideWhen]',
	            host: {
	                '[hidden]': 'hidden'
	            }
	        }),
	        __param(0, core_1.Attribute('hideWhen')), 
	        __metadata('design:paramtypes', [String, platform_1.Platform, core_1.NgZone])
	    ], HideWhen);
	    return HideWhen;
	})(DisplayWhen);
	exports.HideWhen = HideWhen;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var core_1 = __webpack_require__(7);
	var browser_1 = __webpack_require__(169);
	var app_1 = __webpack_require__(168);
	var tap_click_1 = __webpack_require__(280);
	var bootstrap_1 = __webpack_require__(6);
	var directives_1 = __webpack_require__(284);
	var _reflect = Reflect;
	/**
	* @name App
	* @description
	* App is an Ionic decorator that bootstraps an application. It can be passed a
	* number of arguments that act as global config variables for the app.
	* `@App` is similar to Angular's `@Component` in which it can accept a `template`
	* property that has an inline template, or a `templateUrl` property that points
	* to an external html template.
	*
	* @usage
	* ```ts
	* import {App} from 'ionic-angular';
	*
	* @App({
	*   templateUrl: 'app/app.html',
	*   providers: [DataService]
	* })
	*
	* export class MyApp{
	*   // Anything we would want to do at the root of our app
	* }
	* ```
	*
	* @property {object} [config] - the app's {@link /docs/v2/api/config/Config/ Config} object.
	* @property {boolean} [prodMode] - Enable Angular's production mode, which turns off assertions and other checks within the framework. Additionally, this config sets the return value of `isProd()` which is on the `IonicApp` instance. Defaults to `false`.
	* @property {array}  [pipes] - any pipes for your app.
	* @property {array}  [providers] - any providers for your app.
	* @property {string} [template] - the template to use for the app root.
	* @property {string} [templateUrl] - a relative URL pointing to the template to use for the app root.
	*/
	function App(args) {
	    if (args === void 0) { args = {}; }
	    return function (cls) {
	        // get current annotations
	        var annotations = _reflect.getMetadata('annotations', cls) || [];
	        args.selector = 'ion-app';
	        // auto add Ionic directives
	        args.directives = args.directives ? args.directives.concat(directives_1.IONIC_DIRECTIVES) : directives_1.IONIC_DIRECTIVES;
	        // if no template was provided, default so it has a root <ion-nav>
	        if (!args.templateUrl && !args.template) {
	            args.template = '<ion-nav></ion-nav>';
	        }
	        // create @Component
	        annotations.push(new core_1.Component(args));
	        // redefine with added annotations
	        _reflect.defineMetadata('annotations', annotations, cls);
	        // define array of bootstrap providers
	        var providers = bootstrap_1.ionicProviders(args).concat(args.providers || []);
	        if (args.prodMode) {
	            core_1.enableProdMode();
	        }
	        browser_1.bootstrap(cls, providers).then(function (appRef) {
	            appRef.injector.get(tap_click_1.TapClick);
	            var app = appRef.injector.get(app_1.IonicApp);
	            app.setProd(args.prodMode);
	        });
	        return cls;
	    };
	}
	exports.App = App;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var core_1 = __webpack_require__(7);
	var directives_1 = __webpack_require__(284);
	var _reflect = Reflect;
	/**
	 * @name Page
	 * @description
	 *
	 * The Page decorator indicates that the decorated class is an Ionic
	 * navigation component, meaning it can be navigated to using a NavController.
	 *
	 * Pages have all `IONIC_DIRECTIVES`, which include all Ionic components and directives,
	 * as well as Angular's [CORE_DIRECTIVES](https://angular.io/docs/js/latest/api/core/CORE_DIRECTIVES-const.html)
	 * and [FORM_DIRECTIVES](https://angular.io/docs/js/latest/api/core/FORM_DIRECTIVES-const.html),
	 * already provided to them, so you only need to supply custom components and directives to your pages:
	 *
	 * @usage
	 *
	 * ```ts
	 * @Page({
	 *   template: `
	 *    <ion-content>
	 *      I am a page!
	 *    </ion-content>
	 *   `
	 * })
	 * class MyPage {}
	 * ```
	 *
	 * Here [Content](../../../components/content/Content/) will load because
	 * it is in `IONIC_DIRECTIVES`, so there is no need to add a `directives` array.
	 *
	 *
	 * Say you built a custom component that uses the already existing Ionic component.
	 * In this case, you would add `IONIC_DIRECTIVES` to your directives array.
	 *
	 * ```ts
	 * import {IONIC_DIRECTIVES} from 'ionic-angular';
	 * @Component({
	 *   selector: 'my-component'
	 *   template: `<div class="my-style">
	 *   						  <ion-checkbox></ion-checkbox>
	 *   						</div>`,
	 *   directives: [IONIC_DIRECTIVES]
	 * })
	 * class MyCustomCheckbox {}
	 *```

	 * Alternatively, you could:
	 *
	 * ```ts
	 * import {Checkbox, Icon} from 'ionic-angular'
	 * ```
	 *
	 * along with any other components and add them individually:
	 *
	 * ```
	 * @Component({
	 *   ...
	 *   directives: [Checkbox, Icon]
	 * })
	 * ```
	 *
	 * However, using IONIC_DIRECTIVES will always *Just Work* with no
	 * performance overhead, so there is really no reason to not always use it.
	 *
	 * Pages have their content automatically wrapped in `<ion-view>`, so although
	 * you may see these tags if you inspect your markup, you don't need to include
	 * them in your templates.
	 *
	 * For more information on how pages are created, see the [NavController API reference](../../components/nav/NavController/#creating_pages)
	 */
	function Page(config) {
	    return function (cls) {
	        config.selector = 'ion-page';
	        config.directives = config.directives ? config.directives.concat(directives_1.IONIC_DIRECTIVES) : directives_1.IONIC_DIRECTIVES;
	        config.host = config.host || {};
	        config.host['[hidden]'] = '_hidden';
	        config.host['[class.tab-subpage]'] = '_tabSubPage';
	        var annotations = _reflect.getMetadata('annotations', cls) || [];
	        annotations.push(new core_1.Component(config));
	        _reflect.defineMetadata('annotations', annotations, cls);
	        return cls;
	    };
	}
	exports.Page = Page;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(168));
	__export(__webpack_require__(343));
	__export(__webpack_require__(348));
	__export(__webpack_require__(330));
	__export(__webpack_require__(309));
	__export(__webpack_require__(301));
	__export(__webpack_require__(328));
	__export(__webpack_require__(310));
	__export(__webpack_require__(299));
	__export(__webpack_require__(312));
	__export(__webpack_require__(313));
	__export(__webpack_require__(333));
	__export(__webpack_require__(325));
	__export(__webpack_require__(327));
	__export(__webpack_require__(277));
	__export(__webpack_require__(286));
	__export(__webpack_require__(349));
	__export(__webpack_require__(295));
	__export(__webpack_require__(307));
	__export(__webpack_require__(326));
	__export(__webpack_require__(323));
	__export(__webpack_require__(344));
	__export(__webpack_require__(350));
	__export(__webpack_require__(340));
	__export(__webpack_require__(302));
	__export(__webpack_require__(296));
	__export(__webpack_require__(297));
	__export(__webpack_require__(341));
	__export(__webpack_require__(342));
	__export(__webpack_require__(298));
	__export(__webpack_require__(331));
	__export(__webpack_require__(285));
	__export(__webpack_require__(317));
	__export(__webpack_require__(337));
	__export(__webpack_require__(338));
	__export(__webpack_require__(315));
	__export(__webpack_require__(316));
	__export(__webpack_require__(311));
	__export(__webpack_require__(339));
	__export(__webpack_require__(336));
	__export(__webpack_require__(329));
	__export(__webpack_require__(319));
	__export(__webpack_require__(321));
	__export(__webpack_require__(280));
	__export(__webpack_require__(332));
	__export(__webpack_require__(300));


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var common_1 = __webpack_require__(172);
	var animation_1 = __webpack_require__(306);
	var transition_1 = __webpack_require__(305);
	var config_1 = __webpack_require__(161);
	var icon_1 = __webpack_require__(299);
	var util_1 = __webpack_require__(163);
	var nav_params_1 = __webpack_require__(297);
	var view_controller_1 = __webpack_require__(296);
	/**
	 * @name ActionSheet
	 * @description
	 * An Action Sheet is a dialog that lets the user choose from a set of
	 * options. It appears on top of the app's content, and must be manually
	 * dismissed by the user before they can resume interaction with the app.
	 * Dangerous (destructive) options are made obvious in `ios` mode. There are easy
	 * ways to cancel out of the action sheet, such as tapping the backdrop or
	 * hitting the escape key on desktop.
	 *
	 * An action sheet is created from an array of `buttons`, with each button
	 * including properties for its `text`, and optionally a `handler` and `role`.
	 * If a handler returns `false` then the action sheet will not be dismissed. An
	 * action sheet can also optionally have a `title` and a `subTitle`.
	 *
	 * A button's `role` property can either be `destructive` or `cancel`. Buttons
	 * without a role property will have the default look for the platform. Buttons
	 * with the `cancel` role will always load as the bottom button, no matter where
	 * they are in the array. All other buttons will be displayed in the order they
	 * have been added to the `buttons` array. Note: We recommend that `destructive`
	 * buttons are always the first button in the array, making them the top button.
	 * Additionally, if the action sheet is dismissed by tapping the backdrop, then
	 * it will fire the handler from the button with the cancel role.
	 *
	 * You can pass all of the action sheet's options in the first argument of
	 * the create method: `ActionSheet.create(opts)`. Otherwise the action sheet's
	 * instance has methods to add options, like `setTitle()` or `addButton()`.
	 *
	 * @usage
	 * ```ts
	 * constructor(nav: NavController) {
	 *   this.nav = nav;
	 * }
	 *
	 * presentActionSheet() {
	 *   let actionSheet = ActionSheet.create({
	 *     title: 'Modify your album',
	 *     buttons: [
	 *       {
	 *         text: 'Destructive',
	 *         role: 'destructive',
	 *         handler: () => {
	 *           console.log('Destructive clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Archive',
	 *         handler: () => {
	 *           console.log('Archive clicked');
	 *         }
	 *       },
	 *       {
	 *         text: 'Cancel',
	 *         role: 'cancel',
	 *         handler: () => {
	 *           console.log('Cancel clicked');
	 *         }
	 *       }
	 *     ]
	 *   });
	 *
	 *   this.nav.present(actionSheet);
	 * }
	 * ```
	 *
	 * @demo /docs/v2/demos/action-sheet/
	 * @see {@link /docs/v2/components#action-sheets ActionSheet Component Docs}
	 */
	var ActionSheet = (function (_super) {
	    __extends(ActionSheet, _super);
	    function ActionSheet(opts) {
	        if (opts === void 0) { opts = {}; }
	        opts.buttons = opts.buttons || [];
	        opts.enableBackdropDismiss = util_1.isPresent(opts.enableBackdropDismiss) ? !!opts.enableBackdropDismiss : true;
	        _super.call(this, ActionSheetCmp, opts);
	        this.viewType = 'action-sheet';
	        this.isOverlay = true;
	        // by default, actionsheets should not fire lifecycle events of other views
	        // for example, when an actionsheets enters, the current active view should
	        // not fire its lifecycle events because it's not conceptually leaving
	        this.fireOtherLifecycles = false;
	    }
	    /**
	    * @private
	    */
	    ActionSheet.prototype.getTransitionName = function (direction) {
	        var key = 'actionSheet' + (direction === 'back' ? 'Leave' : 'Enter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * @param {string} title Action sheet title
	     */
	    ActionSheet.prototype.setTitle = function (title) {
	        this.data.title = title;
	    };
	    /**
	     * @param {string} subTitle Action sheet subtitle
	     */
	    ActionSheet.prototype.setSubTitle = function (subTitle) {
	        this.data.subTitle = subTitle;
	    };
	    /**
	     * @param {object} button Action sheet button
	     */
	    ActionSheet.prototype.addButton = function (button) {
	        this.data.buttons.push(button);
	    };
	    /**
	     * Open an action sheet with the following options
	     *
	     * | Option                | Type       | Description                                                     |
	     * |-----------------------|------------|-----------------------------------------------------------------|
	     * | title                 |`string`    | The title for the actionsheet                                   |
	     * | subTitle              |`string`    | The sub-title for the actionsheet                               |
	     * | cssClass              |`string`    | An additional class for custom styles                           |
	     * | enableBackdropDismiss |`boolean`   | If the actionsheet should close when the user taps the backdrop |
	     * | buttons               |`array<any>`| An array of buttons to display                                  |
	     *
	     * For the buttons:
	     *
	     * | Option   | Type     | Description                                                                                                                                      |
	     * |----------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------|
	     * | text     | `string` | The buttons text                                                                                                                                 |
	     * | icon     | `icon`   | The buttons icons                                                                                                                                |
	     * | handler  | `any`    | An express the button shoule evaluate                                                                                                            |
	     * | cssClass | `string` | An additional class for custom styles                                                                                                            |
	     * | role     | `string` | How the button should be displayed, `destructive` or `cancel`. If not role is provided, it will display the button without any additional styles |
	     *
	     *
	     *
	     * @param {object} opts Action sheet options
	     */
	    ActionSheet.create = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        return new ActionSheet(opts);
	    };
	    return ActionSheet;
	})(view_controller_1.ViewController);
	exports.ActionSheet = ActionSheet;
	/**
	* @private
	*/
	var ActionSheetCmp = (function () {
	    function ActionSheetCmp(_viewCtrl, _config, _elementRef, params, renderer) {
	        this._viewCtrl = _viewCtrl;
	        this._config = _config;
	        this._elementRef = _elementRef;
	        this.d = params.data;
	        if (this.d.cssClass) {
	            renderer.setElementClass(_elementRef.nativeElement, this.d.cssClass, true);
	        }
	        this.id = (++actionSheetIds);
	        if (this.d.title) {
	            this.hdrId = 'acst-hdr-' + this.id;
	        }
	        if (this.d.subTitle) {
	            this.descId = 'acst-subhdr-' + this.id;
	        }
	    }
	    ActionSheetCmp.prototype.onPageLoaded = function () {
	        var _this = this;
	        // normalize the data
	        var buttons = [];
	        this.d.buttons.forEach(function (button) {
	            if (typeof button === 'string') {
	                button = { text: button };
	            }
	            if (!button.cssClass) {
	                button.cssClass = '';
	            }
	            // deprecated warning
	            if (button.style) {
	                void 0;
	                button.role = button.style;
	            }
	            if (button.role === 'cancel') {
	                _this.d.cancelButton = button;
	            }
	            else {
	                if (button.role === 'destructive') {
	                    button.cssClass = (button.cssClass + ' ' || '') + 'action-sheet-destructive';
	                }
	                buttons.push(button);
	            }
	        });
	        this.d.buttons = buttons;
	    };
	    ActionSheetCmp.prototype.onPageDidEnter = function () {
	        var activeElement = document.activeElement;
	        if (document.activeElement) {
	            activeElement.blur();
	        }
	        var focusableEle = this._elementRef.nativeElement.querySelector('button');
	        if (focusableEle) {
	            focusableEle.focus();
	        }
	    };
	    ActionSheetCmp.prototype._keyUp = function (ev) {
	        if (this._viewCtrl.isLast()) {
	            if (ev.keyCode === 27) {
	                void 0;
	                this.bdClick();
	            }
	        }
	    };
	    ActionSheetCmp.prototype.click = function (button, dismissDelay) {
	        var _this = this;
	        var shouldDismiss = true;
	        if (button.handler) {
	            // a handler has been provided, execute it
	            if (button.handler() === false) {
	                // if the return value of the handler is false then do not dismiss
	                shouldDismiss = false;
	            }
	        }
	        if (shouldDismiss) {
	            setTimeout(function () {
	                _this.dismiss(button.role);
	            }, dismissDelay || this._config.get('pageTransitionDelay'));
	        }
	    };
	    ActionSheetCmp.prototype.bdClick = function () {
	        if (this.d.enableBackdropDismiss) {
	            if (this.d.cancelButton) {
	                this.click(this.d.cancelButton, 1);
	            }
	            else {
	                this.dismiss('backdrop');
	            }
	        }
	    };
	    ActionSheetCmp.prototype.dismiss = function (role) {
	        return this._viewCtrl.dismiss(null, role);
	    };
	    __decorate([
	        core_1.HostListener('body:keyup', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], ActionSheetCmp.prototype, "_keyUp", null);
	    ActionSheetCmp = __decorate([
	        core_1.Component({
	            selector: 'ion-action-sheet',
	            template: '<div (click)="bdClick()" tappable disable-activated class="backdrop" role="presentation"></div>' +
	                '<div class="action-sheet-wrapper">' +
	                '<div class="action-sheet-container">' +
	                '<div class="action-sheet-group">' +
	                '<div class="action-sheet-title" id="{{hdrId}}" *ngIf="d.title">{{d.title}}</div>' +
	                '<div class="action-sheet-sub-title" id="{{descId}}" *ngIf="d.subTitle">{{d.subTitle}}</div>' +
	                '<button (click)="click(b)" *ngFor="#b of d.buttons" class="action-sheet-button disable-hover" [ngClass]="b.cssClass">' +
	                '<ion-icon [name]="b.icon" *ngIf="b.icon" class="action-sheet-icon"></ion-icon> ' +
	                '{{b.text}}' +
	                '<ion-button-effect></ion-button-effect>' +
	                '</button>' +
	                '</div>' +
	                '<div class="action-sheet-group" *ngIf="d.cancelButton">' +
	                '<button (click)="click(d.cancelButton)" class="action-sheet-button action-sheet-cancel disable-hover" [ngClass]="d.cancelButton.cssClass">' +
	                '<ion-icon [name]="d.cancelButton.icon" *ngIf="d.cancelButton.icon" class="action-sheet-icon"></ion-icon> ' +
	                '{{d.cancelButton.text}}' +
	                '<ion-button-effect></ion-button-effect>' +
	                '</button>' +
	                '</div>' +
	                '</div>' +
	                '</div>',
	            host: {
	                'role': 'dialog',
	                '[attr.aria-labelledby]': 'hdrId',
	                '[attr.aria-describedby]': 'descId'
	            },
	            directives: [common_1.NgFor, common_1.NgIf, icon_1.Icon]
	        }), 
	        __metadata('design:paramtypes', [view_controller_1.ViewController, config_1.Config, core_1.ElementRef, nav_params_1.NavParams, core_1.Renderer])
	    ], ActionSheetCmp);
	    return ActionSheetCmp;
	})();
	var ActionSheetSlideIn = (function (_super) {
	    __extends(ActionSheetSlideIn, _super);
	    function ActionSheetSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.4);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return ActionSheetSlideIn;
	})(transition_1.Transition);
	transition_1.Transition.register('action-sheet-slide-in', ActionSheetSlideIn);
	var ActionSheetSlideOut = (function (_super) {
	    __extends(ActionSheetSlideOut, _super);
	    function ActionSheetSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.4, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(300).add(backdrop).add(wrapper);
	    }
	    return ActionSheetSlideOut;
	})(transition_1.Transition);
	transition_1.Transition.register('action-sheet-slide-out', ActionSheetSlideOut);
	var ActionSheetMdSlideIn = (function (_super) {
	    __extends(ActionSheetMdSlideIn, _super);
	    function ActionSheetMdSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.26);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return ActionSheetMdSlideIn;
	})(transition_1.Transition);
	transition_1.Transition.register('action-sheet-md-slide-in', ActionSheetMdSlideIn);
	var ActionSheetMdSlideOut = (function (_super) {
	    __extends(ActionSheetMdSlideOut, _super);
	    function ActionSheetMdSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.26, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
	    }
	    return ActionSheetMdSlideOut;
	})(transition_1.Transition);
	transition_1.Transition.register('action-sheet-md-slide-out', ActionSheetMdSlideOut);
	var ActionSheetWpSlideIn = (function (_super) {
	    __extends(ActionSheetWpSlideIn, _super);
	    function ActionSheetWpSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = enteringView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.01, 0.16);
	        wrapper.fromTo('translateY', '100%', '0%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(400).add(backdrop).add(wrapper);
	    }
	    return ActionSheetWpSlideIn;
	})(transition_1.Transition);
	transition_1.Transition.register('action-sheet-wp-slide-in', ActionSheetWpSlideIn);
	var ActionSheetWpSlideOut = (function (_super) {
	    __extends(ActionSheetWpSlideOut, _super);
	    function ActionSheetWpSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        var ele = leavingView.pageRef().nativeElement;
	        var backdrop = new animation_1.Animation(ele.querySelector('.backdrop'));
	        var wrapper = new animation_1.Animation(ele.querySelector('.action-sheet-wrapper'));
	        backdrop.fromTo('opacity', 0.1, 0);
	        wrapper.fromTo('translateY', '0%', '100%');
	        this.easing('cubic-bezier(.36,.66,.04,1)').duration(450).add(backdrop).add(wrapper);
	    }
	    return ActionSheetWpSlideOut;
	})(transition_1.Transition);
	transition_1.Transition.register('action-sheet-wp-slide-out', ActionSheetWpSlideOut);
	var actionSheetIds = -1;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var menu_controller_1 = __webpack_require__(277);
	var animation_1 = __webpack_require__(306);
	/**
	 * @private
	 * Menu Type
	 * Base class which is extended by the various types. Each
	 * type will provide their own animations for open and close
	 * and registers itself with Menu.
	 */
	var MenuType = (function () {
	    function MenuType() {
	        this.ani = new animation_1.Animation();
	    }
	    MenuType.prototype.setOpen = function (shouldOpen, done) {
	        this.ani
	            .onFinish(done, true)
	            .reverse(!shouldOpen)
	            .play();
	    };
	    MenuType.prototype.setProgressStart = function (isOpen) {
	        this.isOpening = !isOpen;
	        // the cloned animation should not use an easing curve during seek
	        this.ani
	            .reverse(isOpen)
	            .progressStart();
	    };
	    MenuType.prototype.setProgessStep = function (stepValue) {
	        // adjust progress value depending if it opening or closing
	        this.ani.progressStep(stepValue);
	    };
	    MenuType.prototype.setProgressEnd = function (shouldComplete, currentStepValue, done) {
	        var _this = this;
	        var isOpen = (this.isOpening && shouldComplete);
	        if (!this.isOpening && !shouldComplete) {
	            isOpen = true;
	        }
	        this.ani.onFinish(function () {
	            _this.isOpening = false;
	            done(isOpen);
	        }, true);
	        this.ani.progressEnd(shouldComplete, currentStepValue);
	    };
	    MenuType.prototype.destroy = function () {
	        this.ani && this.ani.destroy();
	    };
	    return MenuType;
	})();
	exports.MenuType = MenuType;
	/**
	 * @private
	 * Menu Reveal Type
	 * The content slides over to reveal the menu underneath.
	 * The menu itself, which is under the content, does not move.
	 */
	var MenuRevealType = (function (_super) {
	    __extends(MenuRevealType, _super);
	    function MenuRevealType(menu) {
	        _super.call(this);
	        var openedX = (menu.width() * (menu.side == 'right' ? -1 : 1)) + 'px';
	        this.ani
	            .easing('ease')
	            .duration(250);
	        var contentOpen = new animation_1.Animation(menu.getContentElement());
	        contentOpen.fromTo('translateX', '0px', openedX);
	        this.ani.add(contentOpen);
	    }
	    return MenuRevealType;
	})(MenuType);
	menu_controller_1.MenuController.registerType('reveal', MenuRevealType);
	/**
	 * @private
	 * Menu Push Type
	 * The content slides over to reveal the menu underneath.
	 * The menu itself also slides over to reveal its bad self.
	 */
	var MenuPushType = (function (_super) {
	    __extends(MenuPushType, _super);
	    function MenuPushType(menu) {
	        _super.call(this);
	        this.ani
	            .easing('ease')
	            .duration(250);
	        var contentOpenedX, menuClosedX, menuOpenedX;
	        if (menu.side == 'right') {
	            contentOpenedX = -menu.width() + 'px';
	            menuOpenedX = (menu._platform.width() - menu.width()) + 'px';
	            menuClosedX = menu._platform.width() + 'px';
	        }
	        else {
	            contentOpenedX = menu.width() + 'px';
	            menuOpenedX = '0px';
	            menuClosedX = -menu.width() + 'px';
	        }
	        var menuAni = new animation_1.Animation(menu.getMenuElement());
	        menuAni.fromTo('translateX', menuClosedX, menuOpenedX);
	        this.ani.add(menuAni);
	        var contentApi = new animation_1.Animation(menu.getContentElement());
	        contentApi.fromTo('translateX', '0px', contentOpenedX);
	        this.ani.add(contentApi);
	    }
	    return MenuPushType;
	})(MenuType);
	menu_controller_1.MenuController.registerType('push', MenuPushType);
	/**
	 * @private
	 * Menu Overlay Type
	 * The menu slides over the content. The content
	 * itself, which is under the menu, does not move.
	 */
	var MenuOverlayType = (function (_super) {
	    __extends(MenuOverlayType, _super);
	    function MenuOverlayType(menu) {
	        _super.call(this);
	        this.ani
	            .easing('ease')
	            .duration(250);
	        var closedX, openedX;
	        if (menu.side == 'right') {
	            // right side
	            closedX = menu._platform.width() + 'px';
	            openedX = (menu._platform.width() - menu.width() - 8) + 'px';
	        }
	        else {
	            // left side
	            closedX = -menu.width() + 'px';
	            openedX = '8px';
	        }
	        var menuAni = new animation_1.Animation(menu.getMenuElement());
	        menuAni.fromTo('translateX', closedX, openedX);
	        this.ani.add(menuAni);
	        var backdropApi = new animation_1.Animation(menu.getBackdropElement());
	        backdropApi.fromTo('opacity', 0.01, 0.35);
	        this.ani.add(backdropApi);
	    }
	    return MenuOverlayType;
	})(MenuType);
	menu_controller_1.MenuController.registerType('overlay', MenuOverlayType);


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var view_controller_1 = __webpack_require__(296);
	var animation_1 = __webpack_require__(306);
	var transition_1 = __webpack_require__(305);
	/**
	 * @name Modal
	 * @description
	 * A Modal is a content pane that goes over the user's current page.
	 * Usually it is used for making a choice or editing an item. A modal uses the
	 * `NavController` to
	 * {@link /docs/v2/api/components/nav/NavController/#present present}
	 * itself in the root nav stack. It is added to the stack similar to how
	 * {@link /docs/v2/api/components/nav/NavController/#push NavController.push}
	 * works.
	 *
	 * When a modal (or any other overlay such as an alert or actionsheet) is
	 * "presented" to a nav controller, the overlay is added to the app's root nav.
	 * After the modal has been presented, from within the component instance The
	 * modal can later be closed or "dismissed" by using the ViewController's
	 * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`
	 * on the root nav controller.
	 *
	 * Data can be passed to a new modal through `Modal.create()` as the second
	 * argument. The data can gen be accessed from the opened page by injecting
	 * `NavParams`. Note that the page, which opened as a modal, has no special
	 * "modal" logic within it, but uses `NavParams` no differently than a
	 * standard page.
	 *
	 * @usage
	 * ```ts
	 * import {Page, Modal, NavController, NavParams} from 'ionic-angular';
	 *
	 * @Page(...)
	 * class HomePage {
	 *
	 *  constructor(nav: NavController) {
	 *    this.nav = nav;
	 *  }
	 *
	 *  presentProfileModal() {
	 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
	 *    this.nav.present(profileModal);
	 *  }
	 *
	 * }
	 *
	 * @Page(...)
	 * class Profile {
	 *
	 *  constructor(params: NavParams) {
	 *    console.log('UserId', params.get('userId'));
	 *  }
	 *
	 * }
	 * ```
	 *
	 * A modal can also emit data, which is useful when it is used to add or edit
	 * data. For example, a profile page could slide up in a modal, and on submit,
	 * the submit button could pass the updated profile data, then dismiss the
	 * modal.
	 *
	 * ```ts
	 * import {Page, Modal, NavController, ViewController} from 'ionic-angular';
	 *
	 * @Page(...)
	 * class HomePage {
	 *
	 *  constructor(nav: NavController) {
	 *    this.nav = nav;
	 *  }
	 *
	 *  presentContactModal() {
	 *    let contactModal = Modal.create(ContactUs);
	 *    this.nav.present(contactModal);
	 *  }
	 *
	 *  presentProfileModal() {
	 *    let profileModal = Modal.create(Profile, { userId: 8675309 });
	 *    profileModal.onDismiss(data => {
	 *      console.log(data);
	 *    });
	 *    this.nav.present(profileModal);
	 *  }
	 *
	 * }
	 *
	 * @Page(...)
	 * class Profile {
	 *
	 *  constructor(viewCtrl: ViewController) {
	 *    this.viewCtrl = viewCtrl;
	 *  }
	 *
	 *  dismiss() {
	 *    let data = { 'foo': 'bar' };
	 *    this.viewCtrl.dismiss(data);
	 *  }
	 *
	 * }
	 * ```
	 * @demo /docs/v2/demos/modal/
	 * @see {@link /docs/v2/components#modals Modal Component Docs}
	 */
	var Modal = (function (_super) {
	    __extends(Modal, _super);
	    function Modal(componentType, data) {
	        if (data === void 0) { data = {}; }
	        _super.call(this, componentType, data);
	        this.viewType = 'modal';
	        this.isOverlay = true;
	    }
	    /**
	    * @private
	    */
	    Modal.prototype.getTransitionName = function (direction) {
	        var key = (direction === 'back' ? 'modalLeave' : 'modalEnter');
	        return this._nav && this._nav.config.get(key);
	    };
	    /**
	     * @param {any} componentType Modal
	     * @param {object} data Modal options
	     */
	    Modal.create = function (componentType, data) {
	        if (data === void 0) { data = {}; }
	        return new Modal(componentType, data);
	    };
	    return Modal;
	})(view_controller_1.ViewController);
	exports.Modal = Modal;
	/**
	 * Animations for modals
	 */
	var ModalSlideIn = (function (_super) {
	    __extends(ModalSlideIn, _super);
	    function ModalSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        this
	            .element(enteringView.pageRef())
	            .easing('cubic-bezier(0.36,0.66,0.04,1)')
	            .duration(400)
	            .fromTo('translateY', '100%', '0%')
	            .before.addClass('show-page');
	        if (enteringView.hasNavbar()) {
	            // entering page has a navbar
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	        }
	    }
	    return ModalSlideIn;
	})(transition_1.Transition);
	transition_1.Transition.register('modal-slide-in', ModalSlideIn);
	var ModalSlideOut = (function (_super) {
	    __extends(ModalSlideOut, _super);
	    function ModalSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        this
	            .element(leavingView.pageRef())
	            .easing('ease-out')
	            .duration(250)
	            .fromTo('translateY', '0%', '100%');
	    }
	    return ModalSlideOut;
	})(transition_1.Transition);
	transition_1.Transition.register('modal-slide-out', ModalSlideOut);
	var ModalMDSlideIn = (function (_super) {
	    __extends(ModalMDSlideIn, _super);
	    function ModalMDSlideIn(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        this
	            .element(enteringView.pageRef())
	            .easing('cubic-bezier(0.36,0.66,0.04,1)')
	            .duration(280)
	            .fromTo('translateY', '40px', '0px')
	            .fadeIn()
	            .before.addClass('show-page');
	        if (enteringView.hasNavbar()) {
	            // entering page has a navbar
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	        }
	    }
	    return ModalMDSlideIn;
	})(transition_1.Transition);
	transition_1.Transition.register('modal-md-slide-in', ModalMDSlideIn);
	var ModalMDSlideOut = (function (_super) {
	    __extends(ModalMDSlideOut, _super);
	    function ModalMDSlideOut(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        this
	            .element(leavingView.pageRef())
	            .duration(200)
	            .easing('cubic-bezier(0.47,0,0.745,0.715)')
	            .fromTo('translateY', '0px', '40px')
	            .fadeOut();
	    }
	    return ModalMDSlideOut;
	})(transition_1.Transition);
	transition_1.Transition.register('modal-md-slide-out', ModalMDSlideOut);


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(352));
	__export(__webpack_require__(353));
	__export(__webpack_require__(354));


/***/ },
/* 352 */
/***/ function(module, exports) {

	/**
	 * Storage is an easy way to store key/value pairs and other complicated
	 * data in a way that uses a variety of storage engines underneath.
	 *
	 * For most cases, we recommend the SqlStorage system as it will store
	 * data in a file in the app's sandbox. LocalStorage should ONLY be used
	 * for temporary data as it may be "cleaned up" by the operation system
	 * during low disk space situations.
	 */
	/**
	 * @private
	*/
	var Storage = (function () {
	    function Storage(strategyCls, options) {
	        this._strategy = new strategyCls(options);
	    }
	    Storage.prototype.get = function (key) {
	        return this._strategy.get(key);
	    };
	    Storage.prototype.getJson = function (key) {
	        return this.get(key).then(function (value) {
	            try {
	                return JSON.parse(value);
	            }
	            catch (e) {
	                void 0;
	                throw e; // rethrowing exception so it can be handled with .catch()
	            }
	        });
	    };
	    Storage.prototype.setJson = function (key, value) {
	        try {
	            return this.set(key, JSON.stringify(value));
	        }
	        catch (e) {
	            return Promise.reject(e);
	        }
	    };
	    Storage.prototype.set = function (key, value) {
	        return this._strategy.set(key, value);
	    };
	    Storage.prototype.remove = function (key) {
	        return this._strategy.remove(key);
	    };
	    Storage.prototype.query = function (query, params) {
	        return this._strategy.query(query, params);
	    };
	    return Storage;
	})();
	exports.Storage = Storage;
	/**
	 * @private
	*/
	var StorageEngine = (function () {
	    function StorageEngine(options) {
	        if (options === void 0) { options = {}; }
	    }
	    StorageEngine.prototype.get = function (key, value) {
	        throw Error("get() not implemented for this storage engine");
	    };
	    StorageEngine.prototype.set = function (key, value) {
	        throw Error("set() not implemented for this storage engine");
	    };
	    StorageEngine.prototype.remove = function (key) {
	        throw Error("remove() not implemented for this storage engine");
	    };
	    StorageEngine.prototype.query = function (query, params) {
	        throw Error("query() not implemented for this storage engine");
	    };
	    return StorageEngine;
	})();
	exports.StorageEngine = StorageEngine;


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var storage_1 = __webpack_require__(352);
	/**
	 * @name LocalStorage
	 * @description
	 * The LocalStorage storage engine uses the browser's local storage system for
	 * storing key/value pairs.
	 *
	 * Note: LocalStorage should ONLY be used for temporary data that you can afford to lose.
	 * Given disk space constraints on a mobile device, local storage might be "cleaned up"
	 * by the operating system (iOS).
	 *
	 * For guaranteed, long-term storage, use the SqlStorage engine which stores data in a file.
	 *
	 * @usage
	 * ```ts
	 * import {Page, Storage, LocalStorage} from 'ionic-angular';
	 * @Page({
	 *   template: `<ion-content></ion-content>`
	 * });
	 * export class MyClass{
	 *  constructor(){
	 *    this.local = new Storage(LocalStorage);
	 *    this.local.set('didTutorial', true);
	 *  }
	 *}
	 *```
	 * @demo /docs/v2/demos/local-storage/
	 * @see {@link /docs/v2/platform/storage/ Storage Platform Docs}
	 */
	var LocalStorage = (function (_super) {
	    __extends(LocalStorage, _super);
	    function LocalStorage(options) {
	        if (options === void 0) { options = {}; }
	        _super.call(this);
	    }
	    /**
	     * Get the value of a key in LocalStorage
	     * @param {String} key the key you want to lookup in LocalStorage
	     */
	    LocalStorage.prototype.get = function (key) {
	        return new Promise(function (resolve, reject) {
	            try {
	                var value = window.localStorage.getItem(key);
	                resolve(value);
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	     * Set a key value pair and save it to LocalStorage
	     * @param {String} key the key you want to save to LocalStorage
	     * @param {Any} value the value of the key you're saving
	     */
	    LocalStorage.prototype.set = function (key, value) {
	        return new Promise(function (resolve, reject) {
	            try {
	                window.localStorage.setItem(key, value);
	                resolve();
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	     * Remove a key from LocalStorage
	     * @param {String} key the key you want to remove from LocalStorage
	     */
	    LocalStorage.prototype.remove = function (key) {
	        return new Promise(function (resolve, reject) {
	            try {
	                window.localStorage.removeItem(key);
	                resolve();
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    return LocalStorage;
	})(storage_1.StorageEngine);
	exports.LocalStorage = LocalStorage;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var storage_1 = __webpack_require__(352);
	var util_1 = __webpack_require__(163);
	var DB_NAME = '__ionicstorage';
	var win = window;
	/**
	 * SqlStorage uses SQLite or WebSQL (development only!) to store data in a
	 * persistent SQL store on the filesystem.
	 *
	 * This is the preferred storage engine, as data will be stored in appropriate
	 * app storage, unlike Local Storage which is treated differently by the OS.
	 *
	 * For convenience, the engine supports key/value storage for simple get/set and blob
	 * storage. The full SQL engine is exposed underneath through the `query` method.
	 *
	 * @usage
	 ```js
	 * let storage = new Storage(SqlStorage, options);
	 * storage.set('name', 'Max');
	 * storage.get('name').then((name) => {
	 * });
	 *
	 * // Sql storage also exposes the full engine underneath
	 * storage.query('insert into projects(name, data) values("Cool Project", "blah")');
	 * storage.query('select * from projects').then((resp) => {})
	 * ```
	 *
	 * The `SqlStorage` service supports these options:
	 * {
	 *   name: the name of the database (__ionicstorage by default)
	 *   backupFlag: // where to store the file, default is BACKUP_LOCAL which DOES NOT store to iCloud. Other options: BACKUP_LIBRARY, BACKUP_DOCUMENTS
	 *   existingDatabase: whether to load this as an existing database (default is false)
	 * }
	 *
	 */
	var SqlStorage = (function (_super) {
	    __extends(SqlStorage, _super);
	    function SqlStorage(options) {
	        if (options === void 0) { options = {}; }
	        _super.call(this);
	        var dbOptions = util_1.defaults(options, {
	            name: DB_NAME,
	            backupFlag: SqlStorage.BACKUP_LOCAL,
	            existingDatabase: false
	        });
	        if (win.sqlitePlugin) {
	            var location_1 = this._getBackupLocation(dbOptions.backupFlag);
	            this._db = win.sqlitePlugin.openDatabase(util_1.assign({
	                name: dbOptions.name,
	                location: location_1,
	                createFromLocation: dbOptions.existingDatabase ? 1 : 0
	            }, dbOptions));
	        }
	        else {
	            void 0;
	            this._db = win.openDatabase(dbOptions.name, '1.0', 'database', 5 * 1024 * 1024);
	        }
	        this._tryInit();
	    }
	    SqlStorage.prototype._getBackupLocation = function (dbFlag) {
	        switch (dbFlag) {
	            case SqlStorage.BACKUP_LOCAL:
	                return 2;
	            case SqlStorage.BACKUP_LIBRARY:
	                return 1;
	            case SqlStorage.BACKUP_DOCUMENTS:
	                return 0;
	            default:
	                throw Error('Invalid backup flag: ' + dbFlag);
	        }
	    };
	    // Initialize the DB with our required tables
	    SqlStorage.prototype._tryInit = function () {
	        this._db.transaction(function (tx) {
	            tx.executeSql('CREATE TABLE IF NOT EXISTS kv (key text primary key, value text)', [], function (tx, res) {
	            }, function (tx, err) {
	                void 0;
	            });
	        });
	    };
	    /**
	     * Perform an arbitrary SQL operation on the database. Use this method
	     * to have full control over the underlying database through SQL operations
	     * like SELECT, INSERT, and UPDATE.
	     *
	     * @param {string} query the query to run
	     * @param {array} params the additional params to use for query placeholders
	     * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	     */
	    SqlStorage.prototype.query = function (query, params) {
	        var _this = this;
	        if (params === void 0) { params = []; }
	        return new Promise(function (resolve, reject) {
	            try {
	                _this._db.transaction(function (tx) {
	                    tx.executeSql(query, params, function (tx, res) {
	                        resolve({
	                            tx: tx,
	                            res: res
	                        });
	                    }, function (tx, err) {
	                        reject({
	                            tx: tx,
	                            err: err
	                        });
	                    });
	                }, function (err) {
	                    reject(err);
	                });
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	     * Get the value in the database identified by the given key.
	     * @param {string} key the key
	     * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	     */
	    SqlStorage.prototype.get = function (key) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            try {
	                _this._db.transaction(function (tx) {
	                    tx.executeSql("select key, value from kv where key = ? limit 1", [key], function (tx, res) {
	                        if (res.rows.length > 0) {
	                            var item = res.rows.item(0);
	                            resolve(item.value);
	                        }
	                        resolve(null);
	                    }, function (tx, err) {
	                        reject({
	                            tx: tx,
	                            err: err
	                        });
	                    });
	                }, function (err) {
	                    reject(err);
	                });
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	    * Set the value in the database for the given key. Existing values will be overwritten.
	    * @param {string} key the key
	    * @param {string} value The value (as a string)
	    * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	    */
	    SqlStorage.prototype.set = function (key, value) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            try {
	                _this._db.transaction(function (tx) {
	                    tx.executeSql('insert or replace into kv(key, value) values (?, ?)', [key, value], function (tx, res) {
	                        resolve();
	                    }, function (tx, err) {
	                        reject({
	                            tx: tx,
	                            err: err
	                        });
	                    });
	                }, function (err) {
	                    reject(err);
	                });
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    /**
	    * Remove the value in the database for the given key.
	    * @param {string} key the key
	    * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	    */
	    SqlStorage.prototype.remove = function (key) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            try {
	                _this._db.transaction(function (tx) {
	                    tx.executeSql('delete from kv where key = ?', [key], function (tx, res) {
	                        resolve();
	                    }, function (tx, err) {
	                        reject({
	                            tx: tx,
	                            err: err
	                        });
	                    });
	                }, function (err) {
	                    reject(err);
	                });
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    SqlStorage.BACKUP_LOCAL = 2;
	    SqlStorage.BACKUP_LIBRARY = 1;
	    SqlStorage.BACKUP_DOCUMENTS = 0;
	    return SqlStorage;
	})(storage_1.StorageEngine);
	exports.SqlStorage = SqlStorage;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(7);
	var translate_1 = __webpack_require__(283);
	/**
	 * @private
	 * The Translate pipe makes it easy to translate strings.
	 *
	 * @usage
	 * Translate using the current language or language set through Translate.setLanguage
	 * {{ 'Please enter your location' | translate }}
	 *
	 * Translate using a specific language
	 * {{ 'Please enter your location' | translate:"de" }}
	 */
	var TranslatePipe = (function () {
	    function TranslatePipe(translate) {
	        this.translate = {};
	        this.translate = translate;
	    }
	    TranslatePipe.prototype.transform = function (value, args) {
	        var lang;
	        if (args.length > 0) {
	            lang = args[0];
	        }
	        return this.translate.translate(value, lang);
	    };
	    TranslatePipe.prototype.supports = function (obj) { return true; };
	    TranslatePipe = __decorate([
	        core_1.Pipe({ name: 'translate' }),
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [translate_1.Translate])
	    ], TranslatePipe);
	    return TranslatePipe;
	})();
	exports.TranslatePipe = TranslatePipe;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var config_1 = __webpack_require__(161);
	// iOS Mode Settings
	config_1.Config.setModeConfig('ios', {
	    activator: 'highlight',
	    actionSheetEnter: 'action-sheet-slide-in',
	    actionSheetLeave: 'action-sheet-slide-out',
	    alertEnter: 'alert-pop-in',
	    alertLeave: 'alert-pop-out',
	    backButtonText: 'Back',
	    backButtonIcon: 'ios-arrow-back',
	    iconMode: 'ios',
	    menuType: 'reveal',
	    modalEnter: 'modal-slide-in',
	    modalLeave: 'modal-slide-out',
	    pageTransition: 'ios-transition',
	    pageTransitionDelay: 16,
	    spinner: 'ios',
	    tabbarPlacement: 'bottom',
	});
	// Material Design Mode Settings
	config_1.Config.setModeConfig('md', {
	    activator: 'ripple',
	    actionSheetEnter: 'action-sheet-md-slide-in',
	    actionSheetLeave: 'action-sheet-md-slide-out',
	    alertEnter: 'alert-md-pop-in',
	    alertLeave: 'alert-md-pop-out',
	    backButtonText: '',
	    backButtonIcon: 'md-arrow-back',
	    iconMode: 'md',
	    menuType: 'overlay',
	    modalEnter: 'modal-md-slide-in',
	    modalLeave: 'modal-md-slide-out',
	    pageTransition: 'md-transition',
	    pageTransitionDelay: 96,
	    spinner: 'crescent',
	    tabbarHighlight: true,
	    tabbarPlacement: 'top',
	    tabSubPages: true,
	});
	// Windows Mode Settings
	config_1.Config.setModeConfig('wp', {
	    activator: 'highlight',
	    actionSheetEnter: 'action-sheet-wp-slide-in',
	    actionSheetLeave: 'action-sheet-wp-slide-out',
	    alertEnter: 'alert-wp-pop-in',
	    alertLeave: 'alert-wp-pop-out',
	    backButtonText: '',
	    backButtonIcon: 'ios-arrow-back',
	    iconMode: 'ios',
	    menuType: 'overlay',
	    modalEnter: 'modal-md-slide-in',
	    modalLeave: 'modal-md-slide-out',
	    pageTransition: 'wp-transition',
	    pageTransitionDelay: 96,
	    tabbarPlacement: 'top',
	    tabSubPages: true,
	});


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var platform_1 = __webpack_require__(162);
	var dom_1 = __webpack_require__(164);
	var win = window;
	var doc = document;
	platform_1.Platform.register({
	    name: 'core',
	    settings: {
	        mode: 'ios',
	        keyboardHeight: 290,
	    }
	});
	platform_1.Platform.setDefault('core');
	platform_1.Platform.register({
	    name: 'mobile'
	});
	platform_1.Platform.register({
	    name: 'phablet',
	    isMatch: function (p) {
	        var smallest = Math.min(p.width(), p.height());
	        var largest = Math.max(p.width(), p.height());
	        return (smallest > 390 && smallest < 520) &&
	            (largest > 620 && largest < 800);
	    }
	});
	platform_1.Platform.register({
	    name: 'tablet',
	    isMatch: function (p) {
	        var smallest = Math.min(p.width(), p.height());
	        var largest = Math.max(p.width(), p.height());
	        return (smallest > 460 && smallest < 820) &&
	            (largest > 780 && largest < 1400);
	    }
	});
	platform_1.Platform.register({
	    name: 'android',
	    superset: 'mobile',
	    subsets: [
	        'phablet',
	        'tablet'
	    ],
	    settings: {
	        activator: function (p) {
	            // md mode defaults to use ripple activator
	            // however, under-powered devices shouldn't use ripple
	            // if this a linux device, and is using Android Chrome v36 (Android 5.0)
	            // or above then use ripple, otherwise do not use a ripple effect
	            if (p.testNavigatorPlatform('linux')) {
	                var chromeVersion = p.matchUserAgentVersion(/Chrome\/(\d+).(\d+)?/);
	                if (chromeVersion) {
	                    // linux android device using modern android chrome browser gets ripple
	                    return (parseInt(chromeVersion.major, 10) < 36 ? 'none' : 'ripple');
	                }
	                // linux android device not using chrome browser checks just android's version
	                if (p.version().major < 5) {
	                    return 'none';
	                }
	            }
	            // fallback to always use ripple
	            return 'ripple';
	        },
	        autoFocusAssist: 'immediate',
	        hoverCSS: false,
	        keyboardHeight: 300,
	        mode: 'md',
	        scrollAssist: true,
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('android', ['android', 'silk'], ['windows phone']);
	    },
	    versionParser: function (p) {
	        return p.matchUserAgentVersion(/Android (\d+).(\d+)?/);
	    }
	});
	platform_1.Platform.register({
	    name: 'ios',
	    superset: 'mobile',
	    subsets: [
	        'ipad',
	        'iphone'
	    ],
	    settings: {
	        autoFocusAssist: 'delay',
	        clickBlock: true,
	        hoverCSS: false,
	        keyboardHeight: 300,
	        mode: 'ios',
	        scrollAssist: isIOSDevice,
	        swipeBackEnabled: isIOSDevice,
	        swipeBackThreshold: 40,
	        tapPolyfill: isIOSDevice,
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('ios', ['iphone', 'ipad', 'ipod']);
	    },
	    versionParser: function (p) {
	        return p.matchUserAgentVersion(/OS (\d+)_(\d+)?/);
	    }
	});
	platform_1.Platform.register({
	    name: 'ipad',
	    superset: 'tablet',
	    settings: {
	        keyboardHeight: 500,
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('ipad');
	    }
	});
	platform_1.Platform.register({
	    name: 'iphone',
	    subsets: [
	        'phablet'
	    ],
	    isMatch: function (p) {
	        return p.isPlatformMatch('iphone');
	    }
	});
	platform_1.Platform.register({
	    name: 'windows',
	    superset: 'mobile',
	    subsets: [
	        'phablet',
	        'tablet'
	    ],
	    settings: {
	        mode: 'wp',
	        autoFocusAssist: 'immediate',
	        clickBlock: true,
	        hoverCSS: false
	    },
	    isMatch: function (p) {
	        return p.isPlatformMatch('windows', ['windows phone']);
	    },
	    versionParser: function (p) {
	        return p.matchUserAgentVersion(/Windows Phone (\d+).(\d+)?/);
	    }
	});
	platform_1.Platform.register({
	    name: 'cordova',
	    isEngine: true,
	    methods: {
	        ready: function (resolve) {
	            function isReady() {
	                doc.removeEventListener('deviceready', isReady);
	                resolve();
	            }
	            dom_1.windowLoad(function () {
	                doc.addEventListener('deviceready', isReady);
	            });
	        }
	    },
	    isMatch: function () {
	        return !!(win.cordova || win.PhoneGap || win.phonegap);
	    }
	});
	function isIOSDevice(p) {
	    // shortcut function to be reused internally
	    // checks navigator.platform to see if it's an actual iOS device
	    // this does not use the user-agent string because it is often spoofed
	    // an actual iPad will return true, a chrome dev tools iPad will return false
	    return p.testNavigatorPlatform('iphone|ipad|ipod');
	}


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(306);
	var SlideIn = (function (_super) {
	    __extends(SlideIn, _super);
	    function SlideIn(element) {
	        _super.call(this, element);
	        this
	            .easing('cubic-bezier(0.1,0.7,0.1,1)')
	            .duration(400)
	            .fromTo('translateY', '100%', '0%');
	    }
	    return SlideIn;
	})(animation_1.Animation);
	animation_1.Animation.register('slide-in', SlideIn);
	var SlideOut = (function (_super) {
	    __extends(SlideOut, _super);
	    function SlideOut(element) {
	        _super.call(this, element);
	        this
	            .easing('ease-out')
	            .duration(250)
	            .fromTo('translateY', '0%', '100%');
	    }
	    return SlideOut;
	})(animation_1.Animation);
	animation_1.Animation.register('slide-out', SlideOut);
	var FadeIn = (function (_super) {
	    __extends(FadeIn, _super);
	    function FadeIn(element) {
	        _super.call(this, element);
	        this
	            .easing('ease-in')
	            .duration(400)
	            .fadeIn();
	    }
	    return FadeIn;
	})(animation_1.Animation);
	animation_1.Animation.register('fade-in', FadeIn);
	var FadeOut = (function (_super) {
	    __extends(FadeOut, _super);
	    function FadeOut(element) {
	        _super.call(this, element);
	        this
	            .easing('ease-out')
	            .duration(250)
	            .fadeOut();
	    }
	    return FadeOut;
	})(animation_1.Animation);
	animation_1.Animation.register('fade-out', FadeOut);


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(306);
	var transition_1 = __webpack_require__(305);
	var DURATION = 500;
	var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
	var OPACITY = 'opacity';
	var TRANSLATEX = 'translateX';
	var OFF_RIGHT = '99.5%';
	var OFF_LEFT = '-33%';
	var CENTER = '0%';
	var OFF_OPACITY = 0.8;
	var SHOW_BACK_BTN_CSS = 'show-back-button';
	var IOSTransition = (function (_super) {
	    __extends(IOSTransition, _super);
	    function IOSTransition(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        this.duration(opts.duration || DURATION);
	        this.easing(opts.easing || EASING);
	        // what direction is the transition going
	        var backDirection = (opts.direction === 'back');
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        var enteringPage = new animation_1.Animation(enteringView.pageRef());
	        enteringPage.before.addClass('show-page');
	        this.add(enteringPage);
	        // entering content
	        var enteringContent = new animation_1.Animation(enteringView.contentRef());
	        this.add(enteringContent);
	        if (backDirection) {
	            // entering content, back direction
	            enteringContent
	                .fromTo(TRANSLATEX, OFF_LEFT, CENTER, true)
	                .fromTo(OPACITY, OFF_OPACITY, 1, true);
	        }
	        else {
	            // entering content, forward direction
	            enteringContent
	                .before.clearStyles([OPACITY])
	                .fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
	        }
	        if (enteringHasNavbar) {
	            // entering page has a navbar
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	            var enteringTitle = new animation_1.Animation(enteringView.titleRef());
	            var enteringNavbarItems = new animation_1.Animation(enteringView.navbarItemRefs());
	            var enteringNavbarBg = new animation_1.Animation(enteringView.navbarBgRef());
	            var enteringBackButton = new animation_1.Animation(enteringView.backBtnRef());
	            enteringNavBar
	                .add(enteringTitle)
	                .add(enteringNavbarItems)
	                .add(enteringNavbarBg)
	                .add(enteringBackButton);
	            enteringTitle.fadeIn();
	            enteringNavbarItems.fadeIn();
	            // set properties depending on direction
	            if (backDirection) {
	                // entering navbar, back direction
	                enteringTitle.fromTo(TRANSLATEX, OFF_LEFT, CENTER, true);
	                if (enteringView.enableBack()) {
	                    // back direction, entering page has a back button
	                    enteringBackButton
	                        .before.addClass(SHOW_BACK_BTN_CSS)
	                        .fadeIn();
	                }
	            }
	            else {
	                // entering navbar, forward direction
	                enteringTitle.fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
	                if (leavingHasNavbar) {
	                    // entering navbar, forward direction, and there's a leaving navbar
	                    // should just fade in, no sliding
	                    enteringNavbarBg
	                        .before.clearStyles([TRANSLATEX])
	                        .fadeIn();
	                }
	                else {
	                    // entering navbar, forward direction, and there's no leaving navbar
	                    // should just slide in, no fading in
	                    enteringNavbarBg
	                        .before.clearStyles([OPACITY])
	                        .fromTo(TRANSLATEX, OFF_RIGHT, CENTER, true);
	                }
	                if (enteringView.enableBack()) {
	                    // forward direction, entering page has a back button
	                    enteringBackButton
	                        .before.addClass(SHOW_BACK_BTN_CSS)
	                        .fadeIn();
	                    var enteringBackBtnText = new animation_1.Animation(enteringView.backBtnTextRef());
	                    enteringBackBtnText.fromTo(TRANSLATEX, '100px', '0px');
	                    enteringNavBar.add(enteringBackBtnText);
	                }
	                else {
	                    enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	                }
	            }
	        }
	        // setup leaving view
	        if (leavingView) {
	            // leaving content
	            var leavingContent = new animation_1.Animation(leavingView.contentRef());
	            this.add(leavingContent);
	            if (backDirection) {
	                // leaving content, back direction
	                leavingContent
	                    .before.clearStyles([OPACITY])
	                    .fromTo(TRANSLATEX, CENTER, '100%');
	            }
	            else {
	                // leaving content, forward direction
	                leavingContent
	                    .fromTo(TRANSLATEX, CENTER, OFF_LEFT)
	                    .fromTo(OPACITY, 1, OFF_OPACITY);
	            }
	            if (leavingHasNavbar) {
	                // leaving page has a navbar
	                var leavingNavBar = new animation_1.Animation(leavingView.navbarRef());
	                var leavingBackButton = new animation_1.Animation(leavingView.backBtnRef());
	                var leavingTitle = new animation_1.Animation(leavingView.titleRef());
	                var leavingNavbarItems = new animation_1.Animation(leavingView.navbarItemRefs());
	                var leavingNavbarBg = new animation_1.Animation(leavingView.navbarBgRef());
	                leavingNavBar
	                    .add(leavingBackButton)
	                    .add(leavingTitle)
	                    .add(leavingNavbarItems)
	                    .add(leavingNavbarBg);
	                this.add(leavingNavBar);
	                // fade out leaving navbar items
	                leavingBackButton.fadeOut();
	                leavingTitle.fadeOut();
	                leavingNavbarItems.fadeOut();
	                if (backDirection) {
	                    // leaving navbar, back direction
	                    leavingTitle.fromTo(TRANSLATEX, CENTER, '100%');
	                    if (enteringHasNavbar) {
	                        // leaving navbar, back direction, and there's an entering navbar
	                        // should just fade out, no sliding
	                        leavingNavbarBg
	                            .before.clearStyles([TRANSLATEX])
	                            .fadeOut();
	                    }
	                    else {
	                        // leaving navbar, back direction, and there's no entering navbar
	                        // should just slide out, no fading out
	                        leavingNavbarBg
	                            .before.clearStyles([OPACITY])
	                            .fromTo(TRANSLATEX, CENTER, '100%');
	                    }
	                    var leavingBackBtnText = new animation_1.Animation(leavingView.backBtnTextRef());
	                    leavingBackBtnText.fromTo(TRANSLATEX, CENTER, (300) + 'px');
	                    leavingNavBar.add(leavingBackBtnText);
	                }
	                else {
	                    // leaving navbar, forward direction
	                    leavingTitle.fromTo(TRANSLATEX, CENTER, OFF_LEFT);
	                }
	            }
	        }
	    }
	    return IOSTransition;
	})(transition_1.Transition);
	transition_1.Transition.register('ios-transition', IOSTransition);


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(306);
	var transition_1 = __webpack_require__(305);
	var TRANSLATEY = 'translateY';
	var OFF_BOTTOM = '40px';
	var CENTER = '0px';
	var SHOW_BACK_BTN_CSS = 'show-back-button';
	var MDTransition = (function (_super) {
	    __extends(MDTransition, _super);
	    function MDTransition(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        // what direction is the transition going
	        var backDirection = (opts.direction === 'back');
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        // entering content item moves in bottom to center
	        var enteringPage = new animation_1.Animation(enteringView.pageRef());
	        enteringPage.before.addClass('show-page');
	        this.add(enteringPage);
	        if (backDirection) {
	            this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            enteringPage.before.clearStyles([TRANSLATEY]);
	        }
	        else {
	            this.duration(opts.duration || 280).easing('cubic-bezier(0.36,0.66,0.04,1)');
	            enteringPage
	                .fromTo(TRANSLATEY, OFF_BOTTOM, CENTER, true)
	                .fadeIn();
	        }
	        if (enteringHasNavbar) {
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	            var enteringBackButton = new animation_1.Animation(enteringView.backBtnRef());
	            this.add(enteringBackButton);
	            if (enteringView.enableBack()) {
	                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
	            }
	            else {
	                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	            }
	        }
	        // setup leaving view
	        if (leavingView && backDirection) {
	            // leaving content
	            this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            var leavingPage = new animation_1.Animation(leavingView.pageRef());
	            this.add(leavingPage.fromTo(TRANSLATEY, CENTER, OFF_BOTTOM).fadeOut());
	        }
	    }
	    return MDTransition;
	})(transition_1.Transition);
	transition_1.Transition.register('md-transition', MDTransition);


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var animation_1 = __webpack_require__(306);
	var transition_1 = __webpack_require__(305);
	var SHOW_BACK_BTN_CSS = 'show-back-button';
	var SCALE_SMALL = .95;
	var WPTransition = (function (_super) {
	    __extends(WPTransition, _super);
	    function WPTransition(enteringView, leavingView, opts) {
	        _super.call(this, opts);
	        // what direction is the transition going
	        var backDirection = (opts.direction === 'back');
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        // entering content scale from smaller to larger
	        var enteringPage = new animation_1.Animation(enteringView.pageRef());
	        enteringPage.before.addClass('show-page');
	        this.add(enteringPage);
	        if (backDirection) {
	            this.duration(opts.duration || 120).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            enteringPage.before.clearStyles(['scale']);
	        }
	        else {
	            this.duration(opts.duration || 280).easing('cubic-bezier(0,0 0.05,1)');
	            enteringPage
	                .fromTo('scale', SCALE_SMALL, 1, true)
	                .fadeIn();
	        }
	        if (enteringHasNavbar) {
	            var enteringNavBar = new animation_1.Animation(enteringView.navbarRef());
	            enteringNavBar.before.addClass('show-navbar');
	            this.add(enteringNavBar);
	            var enteringBackButton = new animation_1.Animation(enteringView.backBtnRef());
	            this.add(enteringBackButton);
	            if (enteringView.enableBack()) {
	                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
	            }
	            else {
	                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	            }
	        }
	        // setup leaving view
	        if (leavingView && backDirection) {
	            // leaving content
	            this.duration(opts.duration || 200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            var leavingPage = new animation_1.Animation(leavingView.pageRef());
	            this.add(leavingPage.fromTo('scale', 1, SCALE_SMALL).fadeOut());
	        }
	    }
	    return WPTransition;
	})(transition_1.Transition);
	transition_1.Transition.register('wp-transition', WPTransition);


/***/ },
/* 362 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CardBoardData = exports.CardBoardData = function () {
	  function CardBoardData() {
	    var fbURL = arguments.length <= 0 || arguments[0] === undefined ? "https://sf-noise.firebaseio.com/" : arguments[0];

	    _classCallCheck(this, CardBoardData);

	    this.stereoEffect = false;
	    this.landscapeMode = false;
	    this.firebaseRef = fbURL;
	    this.sfunderground = new Firebase(this.firebaseRef);
	    this.users = new Firebase(this.firebaseRef + 'riders');
	    this.user = { name: null, position: { x: 0, y: 0, z: 0 }, rotation: { x: 0, y: 0, z: 0 }, sprite: null };
	    this.currentRiders = [];
	    this.fakeUser = ['Tom', 'Richard', 'Jane', 'John', 'Dan', 'Josh', 'Brendon', 'Emma', 'Peter'];
	    this.sprites = ['build/sprites/person/barvr_rider_idle.png'];
	    this.bartAlerts = new Firebase(this.firebaseRef + 'alerts');
	    this.currentAlerts = [];
	    this.currentRouteID = 0;
	    this.babylonMod = null;
	    this.currentUserKey = null;
	    this.isCurrentlyUsingBart = false;
	    this.userToUpdate = 'https://sf-noise.firebaseio.com/riders/';
	    this.brartRoutes = ['Pittsburg / Bay Point', 'Richmond / Millbrae', 'Richmond / Fremont', 'Fremont / Daily City', 'Dublin Pleasanton / Daily City'];
	    this.init();
	  }

	  _createClass(CardBoardData, [{
	    key: 'randomArr',
	    value: function randomArr(arr) {
	      return arr[Math.floor(Math.random() * arr.length)];
	    }
	  }, {
	    key: 'randomPos',
	    value: function randomPos(min, max) {
	      return Math.random() * (max - min) + min;
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      this.bartAlerts.on("child_added", function (alertData) {
	        this.currentAlerts.push(alertData.val());
	      }.bind(this));

	      this.bartAlerts.once("value", function (alertData) {
	        alertData.forEach(function (data) {
	          this.currentAlerts.push(data.val());
	        }.bind(this));
	      }.bind(this));

	      this.users.once("value", function (userData) {
	        userData.forEach(function (data) {
	          if (window.localStorage.getItem("bart_vr_user_key") != null && data.key() == window.localStorage.getItem("bart_vr_user_key")) {
	            this.user = data.val();
	            this.currentUserKey = data.key();
	            this.userToUpdate += data.key();
	            this.userToUpdate = new Firebase(this.userToUpdate);
	            this.isCurrentlyUsingBart = true;
	          }
	          this.currentRiders.push(data.val());
	        }.bind(this));
	      }.bind(this));

	      /* debugging
	      this.sfunderground.on('value', function(info){
	          console.log(info.val());
	      });
	         this.users.on("child_added", function(snapshot, key) {
	        console.log(snapshot);
	        console.log(key);
	      });
	      */
	    }
	  }, {
	    key: 'setUser',
	    value: function setUser() {
	      var _user = arguments.length <= 0 || arguments[0] === undefined ? { name: 'userName', position: { x: 0, y: 0, z: 0 } } : arguments[0];

	      var _pos = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      if (window.localStorage.getItem("bart_vr_user") == null) {
	        _pos.x = this.randomPos(-6, 6);
	        _pos.z = this.randomPos(-0.5, 0.5);
	        var _username = null;
	        if (this.user.name == null) {
	          _username = this.randomArr(this.fakeUser);
	        } else {
	          _username = this.user.name;
	        }
	        try {
	          window.localStorage.setItem("bart_vr_user", _username);
	        } catch (e) {
	          alert('please allow local storage please disable private mode');
	        }
	        this.user = { name: _username, position: _pos, rotation: _pos, sprite: this.randomArr(this.sprites), routeID: this.currentRouteID };
	        this.users = this.users.push(this.user);
	        this.currentUserKey = this.users.key();
	        try {
	          window.localStorage.setItem("bart_vr_user_key", this.currentUserKey);
	        } catch (e) {}
	      }
	    }
	  }, {
	    key: 'updateUser',
	    value: function updateUser(position, rotation) {
	      if (this.isCurrentlyUsingBart) {
	        this.userToUpdate.set({ name: this.user.name, position: position, rotation: rotation, sprite: this.user.sprite, routeID: this.currentRouteID });
	      } else {
	        this.users.set({ name: this.user.name, position: position, rotation: rotation, sprite: this.user.sprite, routeID: this.currentRouteID });
	      }
	    }
	  }]);

	  return CardBoardData;
	}();

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IntroPage = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _class;

	var _ionicAngular = __webpack_require__(5);

	var _babylonmod = __webpack_require__(364);

	var _app = __webpack_require__(4);

	var _settings = __webpack_require__(365);

	var _cardboard = __webpack_require__(366);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var IntroPage = exports.IntroPage = (_dec = (0, _ionicAngular.Page)({
	  templateUrl: 'build/pages/intro/intro.html',
	  directives: [_cardboard.CardboardGl]
	}), _dec(_class = function () {
	  _createClass(IntroPage, null, [{
	    key: 'parameters',
	    get: function get() {
	      return [[_ionicAngular.IonicApp], [_ionicAngular.NavController], [_ionicAngular.NavParams], [_app.BoilerVR]];
	    }
	  }]);

	  function IntroPage(app, nav, navParams, _BoilerVR) {
	    var _this = this;

	    _classCallCheck(this, IntroPage);

	    this.nav = nav;
	    this.app = app;
	    this.bartVR = _BoilerVR;
	    this.Data = _BoilerVR.Data;

	    var infoReady = Promise.resolve(document.getElementById('userReg'));
	    infoReady.then(function () {
	      setTimeout(_this.init.bind(_this), 500);
	    });
	  }

	  _createClass(IntroPage, [{
	    key: 'init',
	    value: function init() {
	      if (window.localStorage.getItem("bart_vr_user") != null) {
	        document.getElementById('userReg').style.display = "none";
	        document.getElementById('currentUser').style.display = "block";
	        document.getElementById('userName').innerHTML = "Welcome back " + window.localStorage.getItem("bart_vr_user");
	      }
	    }
	  }, {
	    key: 'openSettingsModal',
	    value: function openSettingsModal() {
	      var modal = _ionicAngular.Modal.create(_settings.SettingsModal);
	      this.nav.present(modal);
	    }
	  }, {
	    key: 'fullScreenLaunch',
	    value: function fullScreenLaunch() {
	      this.bartVR.launchIntoFullscreen();
	    }
	  }]);

	  return IntroPage;
	}()) || _class);

/***/ },
/* 364 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var babylonMod = exports.babylonMod = function () {
	    function babylonMod(_element, _data, _app) {
	        _classCallCheck(this, babylonMod);

	        this.canvas = document.getElementById('renderCanvas');
	        this.playerSprite = null;
	        this.Data = _data;
	        this.app = _app;
	        setTimeout(this.init.bind(this), 500);
	        this.vrCamera = null;
	        this.nonVRCamera = null;
	        this.activeCamera = null;
	        this.mode = 'vr';
	        this.scene = null;
	        this.updateFunctionsInLoop = [];
	        this.sprites = [];
	        this.Data.babylonMod = this;
	    }

	    _createClass(babylonMod, [{
	        key: 'init',
	        value: function init() {
	            window._babylon = this;
	            this.engine = new BABYLON.Engine(this.canvas, true);
	            BABYLON.SceneLoader.Load('', 'build/scenes/subway3/subway.babylon?once=366509210', this.engine, function (newScene) {
	                this.scene = newScene;
	                var light = new BABYLON.PointLight("Omni", new BABYLON.Vector3(100, 100, 0), this.scene);
	                if (_babylon.app.isNative) {
	                    BABYLON.SceneOptimizer.OptimizeAsync(this.scene, BABYLON.SceneOptimizerOptions.HighDegradationAllowed(), function () {
	                        console.log(this.engine.getFps());
	                    }.bind(this), function () {
	                        console.log(this.engine.getFps());
	                    }.bind(this));
	                }

	                document.getElementById('loadCover').style.display = "none";
	                this.vrCamera = new BABYLON.VRDeviceOrientationFreeCamera("Camera", BABYLON.Vector3.Zero(), this.scene, true);
	                this.vrCamera.rotation = new BABYLON.Vector3(newScene.cameras[0].rotation.x, newScene.cameras[0].rotation.y, newScene.cameras[0].rotation.z);
	                this.vrCamera.attachControl(this.canvas, true);
	                this.activeCamera = this.vrCamera;
	                this.nonVRCamera = new BABYLON.VirtualJoysticksCamera("VJC", BABYLON.Vector3.Zero(), this.scene);
	                this.nonVRCamera.attachControl(this.canvas, true);
	                this.nonVRCamera.checkCollisions = this.scene.activeCamera.checkCollisions;
	                this.nonVRCamera.applyGravity = this.scene.activeCamera.applyGravity;
	                this.nonVRCamera.parent = this.vrCamera;
	                this.scene.activeCamera = this.vrCamera;
	                this.vrCamera.position.x = 6;
	                this.Data.setUser(null, this.vrCamera.position);

	                var spriteManagerPlayer = new BABYLON.SpriteManager("riderManager", this.Data.user.sprite, 1, 128, this.scene);
	                this.playerSprite = new BABYLON.Sprite("player", spriteManagerPlayer);
	                this.playerSprite.isPickable = true;
	                this.playerSprite.playAnimation(0, 20, true, 100);
	                this.playerSprite.parent = this.vrCamera;
	                this.sprites.push(this.playerSprite);
	                this.skyBox('oakland');

	                for (var i = 0; i < this.Data.currentRiders.length; i++) {
	                    if (this.Data.currentRouteID == parseInt(this.Data.currentRiders[i].routeID)) {
	                        this.generateUserSprites(this.Data.currentRiders[i], i);
	                    }
	                }

	                this.updateFunctionsInLoop.push(function () {
	                    this.vrCamera.position = new BABYLON.Vector3(this.Data.user.position.x, this.Data.user.position.y, this.Data.user.position.z);
	                    this.playerSprite.position = new BABYLON.Vector3(this.Data.user.position.x, this.Data.user.position.y, this.Data.user.position.z);
	                    this.Data.updateUser(this.activeCamera.position, this.activeCamera.rotation);
	                }.bind(this));

	                this.gameLoop();
	            }.bind(this), function (progress) {
	                // To do: give progress feedback to user
	            }.bind(this));

	            /*
	            window.addEventListener("resize", function() {
	                this.engine.resize();
	            });
	            */
	        }
	        /*
	        randomPos(min, max){
	            return Math.random() * (max - min) + min;
	        }
	        */

	    }, {
	        key: 'generateUserSprites',
	        value: function generateUserSprites(_data, _id) {
	            console.log(_data);
	            var spriteManagerRider = new BABYLON.SpriteManager("riderManager", _data.sprite, 1, 128, this.scene);
	            var player = new BABYLON.Sprite(_data.name + _id, spriteManagerRider);
	            player.isPickable = true;
	            console.log(_data.position);
	            player.position = _data.position;
	            player.rotation = _data.rotation;
	            player.playAnimation(0, 20, true, 100);
	        }
	    }, {
	        key: 'skyBox',
	        value: function skyBox(_type) {
	            var _size = arguments.length <= 1 || arguments[1] === undefined ? 5000.0 : arguments[1];

	            try {
	                this.skybox.dispose();
	            } catch (e) {}

	            this.skybox = null;
	            this.currentSkyBoxName = "build/img/textures/" + _type;
	            var skybox = BABYLON.Mesh.CreateBox("skybox", _size, this.scene);
	            skybox.layerMask = 2;
	            var skyboxMaterial = new BABYLON.StandardMaterial("skyBox", this.scene);
	            skyboxMaterial.backFaceCulling = false;
	            skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(this.currentSkyBoxName, this.scene);
	            skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
	            skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
	            skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
	            skyboxMaterial.disableLighting = true;
	            skybox.material = skyboxMaterial;
	            this.skybox = skybox;
	        }
	    }, {
	        key: 'gameLoop',
	        value: function gameLoop() {
	            this.scene.executeWhenReady(function () {
	                this.engine.runRenderLoop(function () {
	                    for (var i = 0; i < this.updateFunctionsInLoop.length; i++) {
	                        this.updateFunctionsInLoop[i]();
	                    }
	                    this.scene.render();
	                }.bind(this));
	            }.bind(this));
	        }
	    }, {
	        key: 'toggle',
	        value: function toggle() {
	            if (this.mode == 'vr') {
	                this.mode = 'nomral';
	                if (this.scene != null) {
	                    this.scene.activeCamera = this.nonVRCamera;
	                    this.activeCamera = this.nonVRCamera;
	                }
	            } else {
	                this.mode = 'vr';
	                if (this.scene != null) {
	                    this.scene.activeCamera = this.vrCamera;
	                    this.activeCamera = this.vrCamera;
	                }
	            }
	        }
	    }]);

	    return babylonMod;
	}();

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SettingsModal = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _class;

	var _ionicAngular = __webpack_require__(5);

	var _app = __webpack_require__(4);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SettingsModal = exports.SettingsModal = (_dec = (0, _ionicAngular.Page)({
	  templateUrl: 'build/pages/settings/settings.html'
	}), _dec(_class = function () {
	  _createClass(SettingsModal, null, [{
	    key: 'parameters',
	    get: function get() {
	      return [[_ionicAngular.ViewController], [_app.BoilerVR]];
	    }
	  }]);

	  function SettingsModal(viewCtrl, _BoilerVR) {
	    _classCallCheck(this, SettingsModal);

	    this.viewCtrl = viewCtrl;
	    this.babylonMod = _BoilerVR.babylonMod;
	    this.Data = _BoilerVR.Data;
	  }

	  _createClass(SettingsModal, [{
	    key: 'dismiss',
	    value: function dismiss() {
	      this.viewCtrl.dismiss();
	    }
	  }, {
	    key: 'toggle',
	    value: function toggle() {
	      this.babylonMod.toggle();
	    }
	  }]);

	  return SettingsModal;
	}()) || _class);

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CardboardGl = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _dec, _class;

	var _ionicAngular = __webpack_require__(5);

	var _core = __webpack_require__(7);

	var _babylonmod = __webpack_require__(364);

	var _app = __webpack_require__(4);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CardboardGl = exports.CardboardGl = (_dec = (0, _core.Component)({
	  selector: 'cardboardgl',
	  templateUrl: "build/pages/cardboard/cardboard.html"
	}), _dec(_class = function () {
	  _createClass(CardboardGl, null, [{
	    key: 'parameters',
	    get: function get() {
	      return [[_core.ElementRef], [_app.BoilerVR]];
	    }
	  }]);

	  function CardboardGl(_element, _boilerVR) {
	    _classCallCheck(this, CardboardGl);

	    this._element = _element;
	    this._babylon = null;
	    this.Data = _boilerVR.Data;
	    this.app = _boilerVR;
	    this.init();
	    this.isStereoEffect = false;
	    this.inLandScape = false;
	    this.boilerVR = _boilerVR;
	  }

	  _createClass(CardboardGl, [{
	    key: 'isVisible',
	    value: function isVisible() {
	      if (this.Data.landscapeMode && this.Data.stereoEffect) {
	        this.isStereoEffect = true;
	      } else {
	        this.isStereoEffect = false;
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      function readDeviceOrientation() {
	        if (Math.abs(window.orientation) === 90) {
	          // Landscape
	          if (this.boilerVR.isNative) {
	            Vibrate(50);
	          }

	          this.Data.landscapeMode = true;
	          this.Data.stereoEffect = true;

	          if (this._engine == null) {
	            this._babylon = new _babylonmod.babylonMod(this._element.nativeElement, this.Data, this.app);
	            this.boilerVR.babylonMod = this._babylon;
	          }
	        } else {
	          // Portrait
	          if (this.boilerVR.isNative) {
	            Vibrate(50);
	          }
	          this.Data.landscapeMode = false;
	          this.Data.stereoEffect = false;
	        }
	        //this.isVisible();
	      }
	      window.addEventListener('orientationchange', readDeviceOrientation.bind(this), false);
	    }
	  }]);

	  return CardboardGl;
	}()) || _class);

/***/ }
/******/ ]);